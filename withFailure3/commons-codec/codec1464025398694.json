{"failureDictionary":{"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":30,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":37,"org.apache.commons.codec.language.NysiisTest.testDropBy":46,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":54,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":42,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":31,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":38,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":53,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":67,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":22,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":34,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":3,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":32,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":35,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":61,"org.apache.commons.codec.language.NysiisTest.testRule7":45,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":28,"org.apache.commons.codec.language.NysiisTest.testRule6":44,"org.apache.commons.codec.language.NysiisTest.testRule5":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":65,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":50,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":64,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":7,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":12,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":58,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":68,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":62,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":0,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":4,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":13,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":5,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":33,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":24,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":60,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":66,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":21,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":39,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":25,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":19,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":27,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":41,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":48,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":15,"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull":16,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":18,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":63,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":51,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":2,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":29,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":17},"transformations":[{"failures":[0],"tindex":"d5d423eb-210d-11e6-a9e7-4952eeba1b6e","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.StringUtils:75","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"d5d423ec-210d-11e6-a9e7-ffff7bcfc72e","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int eSwap0 = org.apache.commons.codec.digest.UnixCrypt.CON_SALT[charZero]","position":"org.apache.commons.codec.digest.UnixCrypt:213","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][charZero]"},"status":-2},{"failures":[],"tindex":"d5d423ed-210d-11e6-a9e7-4db7efc5ce6c","series":0,"name":"add","transplant":{"toString":"if ((suffix.length()) > (input.length())) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:276","type":"CtIfImpl","sourcecode":"if ((suffix.length()) > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"cs","suffix":"cs"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtIfImpl","sourcecode":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} "},"status":0},{"failures":[],"tindex":"d5d44afe-210d-11e6-a9e7-4d14809d62ad","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:294","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[],"tindex":"d5d44aff-210d-11e6-a9e7-67eab3a65eb3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.name = name","position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[],"tindex":"d5d44b00-210d-11e6-a9e7-399e921d644e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i","position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"variableMap":{"i":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE","position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"status":-2},{"failures":[],"tindex":"d5d44b01-210d-11e6-a9e7-8fbd67e73bd2","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('(')","position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('<')","position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":0},{"failures":[],"tindex":"d5d44b02-210d-11e6-a9e7-4f121d425c53","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384, key)","position":"org.apache.commons.codec.digest.HmacUtils:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"d5d47213-210d-11e6-a9e7-0fd864e72dab","series":0,"name":"replace","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.TEN_1;\n} ","position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"status":0},{"failures":[1,2],"tindex":"d5d47214-210d-11e6-a9e7-a3c8dce516d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-1},{"failures":[],"tindex":"d5d47215-210d-11e6-a9e7-6533f408772d","series":0,"name":"add","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"sBytes"},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} "},"status":0},{"failures":[],"tindex":"d5d47216-210d-11e6-a9e7-9b687e9e1c89","series":0,"name":"replace","transplant":{"toString":"index = index + 2","position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:293","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)"},"status":-2},{"failures":[2,3],"tindex":"d5d47217-210d-11e6-a9e7-950ae94c8683","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:611","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[4,1,2,3],"tindex":"d5d47218-210d-11e6-a9e7-a556cd58730e","series":0,"name":"replace","transplant":{"toString":"result.append('J', ' ')","position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}"},"status":-1},{"failures":[5],"tindex":"d5d49929-210d-11e6-a9e7-17ff9d7f1bdc","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize))","position":"org.apache.commons.codec.binary.Base64:671","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maximum size of \") + maxResultSize))"},"status":-1},{"failures":[],"tindex":"d5d4992a-210d-11e6-a9e7-61926b5b877f","series":0,"name":"replace","transplant":{"toString":"if (!(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found)) {\n    patternLength = 1;\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:222","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean)) {\n    patternLength = 1;\n} "},"variableMap":{"found":"eof","patternLength":"inAvail"},"type":"adrStmt","transplantationPoint":{"toString":"if (inAvail < 0) {\n    context.eof = true;\n} ","position":"org.apache.commons.codec.binary.Base32:342","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"d5d4992b-210d-11e6-a9e7-55be8708e8ef","series":0,"name":"add","transplant":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char aNext = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.SPACE","position":"org.apache.commons.codec.language.Nysiis:282","type":"CtLocalVariableImpl","sourcecode":"final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char"},"status":-2},{"failures":[],"tindex":"d5d4992c-210d-11e6-a9e7-f3d402075b98","series":0,"name":"replace","transplant":{"toString":"final java.security.MessageDigest ctx = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.security.MessageDigest ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()","position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":-2},{"failures":[6,7],"tindex":"d5d4c03d-210d-11e6-a9e7-31caed0560e9","series":0,"name":"replace","transplant":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:371","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-1},{"failures":[8],"tindex":"d5d4c03e-210d-11e6-a9e7-a7c525fae6eb","series":0,"name":"replace","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (rule2.getPatternLength()) - (rule1.getPatternLength())","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:244","type":"CtReturnImpl","sourcecode":"return (rule2.getPatternLength()) - (rule1.getPatternLength())"},"status":-1},{"failures":[],"tindex":"d5d4c03f-210d-11e6-a9e7-b99104ba8a44","series":0,"name":"add","transplant":{"toString":"final java.lang.String singleLetter = dc.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name1LtREnd = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:302","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[],"tindex":"d5d4c040-210d-11e6-a9e7-ad8aa8842cf5","series":0,"name":"replace","transplant":{"toString":"int v = r ^ (r >>> 16)","position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"bAvail"},"type":"adrStmt","transplantationPoint":{"toString":"final int len = java.lang.Math.min(available(context), bAvail)","position":"org.apache.commons.codec.binary.BaseNCodec:293","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(available(context), bAvail)"},"status":-2},{"failures":[],"tindex":"d5d4c041-210d-11e6-a9e7-85f64ec879fb","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(']')","position":"org.apache.commons.codec.net.QCodec:94","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(']')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-2},{"failures":[9,10,11,12,13,14,15],"tindex":"d5d4e752-210d-11e6-a9e7-2199091eb61b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ctx1.update(keyBytes)","position":"org.apache.commons.codec.digest.Md5Crypt:269","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"d5d4e753-210d-11e6-a9e7-b186b7474076","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())","position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"variableMap":{"array":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}","position":"org.apache.commons.codec.digest.HmacUtils:313","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[],"tindex":"d5d4e754-210d-11e6-a9e7-29cd86afcc07","series":0,"name":"replace","transplant":{"toString":"input = input.trim()","position":"org.apache.commons.codec.language.DoubleMetaphone:892","type":"CtAssignmentImpl","sourcecode":"input = input.trim()"},"variableMap":{"input":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[^a-z]\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":-2},{"failures":[],"tindex":"d5d4e755-210d-11e6-a9e7-41314b4fd070","series":0,"name":"replace","transplant":{"toString":"if ((context.readPos) >= (context.pos)) {\n    context.buffer = null;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((context.int) >= (context.int)) {\n    context.byte[] = null;\n} "},"variableMap":{"pos":"length","context":"context","readPos":"length","buffer":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length)","position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-2},{"failures":[],"tindex":"d5d4e756-210d-11e6-a9e7-83cc0e7afa78","series":0,"name":"replace","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"org.apache.commons.codec.language.Nysiis.CHARS_SSS"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_SSS","position":"org.apache.commons.codec.language.Nysiis:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":0},{"failures":[],"tindex":"d5d4e757-210d-11e6-a9e7-b903a26bbae7","series":0,"name":"add","transplant":{"toString":"this.unencodedBlockSize = unencodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"d5d4e758-210d-11e6-a9e7-4b62f6268a3a","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"v\", \"f\")","position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":0},{"failures":[],"tindex":"d5d50e69-210d-11e6-a9e7-c5ba0bf59c81","series":0,"name":"replace","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","t":"currentLinePos","n":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK","position":"org.apache.commons.codec.binary.Base64:391","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[16],"tindex":"d5d50e6a-210d-11e6-a9e7-33dc191fbefb","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QCodec:227","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"d5d50e6b-210d-11e6-a9e7-91a4dd781ba2","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QCodec:208","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[17,18,19,20,21,22],"tindex":"d5d50e6c-210d-11e6-a9e7-09639026a9ee","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:475","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:462","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)"},"status":-1},{"failures":[],"tindex":"d5d50e6d-210d-11e6-a9e7-27dec08fc3b5","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"encodeTable","offset":"org.apache.commons.codec.binary.Base32.MASK_5BITS","iValue":"org.apache.commons.codec.binary.Base32.MASK_5BITS"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:512","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[2,3],"tindex":"d5d50e6e-210d-11e6-a9e7-5936ff0eeb10","series":0,"name":"replace","transplant":{"toString":"result.append(\"TK\")","position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J', 'H')","position":"org.apache.commons.codec.language.DoubleMetaphone:530","type":"CtInvocationImpl","sourcecode":"result.append('J', 'H')"},"status":-1},{"failures":[],"tindex":"d5d50e6f-210d-11e6-a9e7-752c0d69fe7f","series":0,"name":"replace","transplant":{"toString":"final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.RADIX))","position":"org.apache.commons.codec.net.URLCodec:142","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index","org.apache.commons.codec.net.URLCodec.RADIX":"index"},"type":"adrStmt","transplantationPoint":{"toString":"final char preHWChar = str.charAt((index - 2))","position":"org.apache.commons.codec.language.Soundex:190","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 2))"},"status":-3},{"failures":[],"tindex":"d5d53580-210d-11e6-a9e7-ffbfb8df1a32","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^rough\", \"rou2f\")","position":"org.apache.commons.codec.language.Caverphone2:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[],"tindex":"d5d53581-210d-11e6-a9e7-b757a2bdcda7","series":0,"name":"add","transplant":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"c","e1":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:345","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":0},{"failures":[17,18,19,21,22,23,24,25],"tindex":"d5d53582-210d-11e6-a9e7-4bb08ed97eee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:206","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[26],"tindex":"d5d53583-210d-11e6-a9e7-8933df59b851","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:182","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"The finalRules argument must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")","position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"status":-1},{"failures":[],"tindex":"d5d53584-210d-11e6-a9e7-6f480ef512e7","series":0,"name":"replace","transplant":{"toString":"this.charset = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET","position":"org.apache.commons.codec.binary.Hex:190","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = org.apache.commons.codec.binary.Hex.org.apache.commons.codec.binary.Hex.java.nio.charset.Charset"},"variableMap":{"charset":"charset","org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"this.charset = charset","position":"org.apache.commons.codec.net.BCodec:69","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-3},{"failures":[27,28,29,30],"tindex":"d5d53585-210d-11e6-a9e7-5f742c7b0837","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"gh\", \"22\")","position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"[aeiou]\", \"3\")","position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[31,4,1,2,3],"tindex":"d5d53586-210d-11e6-a9e7-ad5e370643b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String target = value.substring(start, (start + length));\n    for (final java.lang.String element : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtIfImpl","sourcecode":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String java.lang.String = value.substring(start, (start + length));\n    for (final java.lang.String java.lang.String : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} "},"status":-1},{"failures":[],"tindex":"d5d53587-210d-11e6-a9e7-8d6bbe5af757","series":0,"name":"replace","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> ruleMap = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)","position":"org.apache.commons.codec.language.bm.Rule:300","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)"},"variableMap":{"nameType":"nameType","rt":"ruleType","langs":"languageSet"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules2 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"status":0},{"failures":[32,33,34,35,36,37,38,39],"tindex":"d5d55c98-210d-11e6-a9e7-456d4168dd6c","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return phonemeBuilder.makeString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:481","type":"CtReturnImpl","sourcecode":"return phonemeBuilder.makeString()"},"status":-1},{"failures":[],"tindex":"d5d55c99-210d-11e6-a9e7-6112f9ae1618","series":0,"name":"replace","transplant":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"variableMap":{"left":"blocksize","right":"cnt"},"type":"adrStmt","transplantationPoint":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"status":-2},{"failures":[],"tindex":"d5d55c9a-210d-11e6-a9e7-43c134662fe4","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"alternate"},"type":"adrStmt","transplantationPoint":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-3},{"failures":[],"tindex":"d5d55c9b-210d-11e6-a9e7-c7eba063ae34","series":0,"name":"replace","transplant":{"toString":"return upperName","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"variableMap":{"upperName":"name"},"type":"adrStmt","transplantationPoint":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:423","type":"CtReturnImpl","sourcecode":"return name"},"status":-3},{"failures":[],"tindex":"d5d55c9c-210d-11e6-a9e7-a7fbd0b0afcb","series":0,"name":"add","transplant":{"toString":"baseNCodec.decode(b, offset, len, context)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"variableMap":{"b":"buf","offset":"c","len":"c","context":"context","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(buf, 0, c, context);\n} else {\n    baseNCodec.decode(buf, 0, c, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:159","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":0},{"failures":[9,10,40,11,12,41,13,14,15],"tindex":"d5d55c9d-210d-11e6-a9e7-41110e3605b7","series":0,"name":"replace","transplant":{"toString":"ctx.update(keyBytes[j])","position":"org.apache.commons.codec.digest.Md5Crypt:241","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes[j])"},"variableMap":{"keyBytes":"keyBytes","ctx":"ctx","j":"ii"},"type":"adrStmt","transplantationPoint":{"toString":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}","position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtIfImpl","sourcecode":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}"},"status":-1},{"failures":[],"tindex":"d5d55c9e-210d-11e6-a9e7-6fdd87571a21","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"status":-2},{"failures":[],"tindex":"d5d583af-210d-11e6-a9e7-0d2827ebba03","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")","position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"d5d583b0-210d-11e6-a9e7-895e32128c0e","series":0,"name":"replace","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:176","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"d5d583b1-210d-11e6-a9e7-ab23983d2041","series":0,"name":"replace","transplant":{"toString":"result.append('X')","position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"object"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} "},"status":-2},{"failures":[42,43,44,45,46],"tindex":"d5d583b2-210d-11e6-a9e7-dd3938093ac3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"key.deleteCharAt(((key.length()) - 1))","position":"org.apache.commons.codec.language.Nysiis:297","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"status":-1},{"failures":[],"tindex":"d5d583b3-210d-11e6-a9e7-3b3080dbff12","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String rawLine = scanner.nextLine()","position":"org.apache.commons.codec.language.bm.Rule:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":-2},{"failures":[],"tindex":"d5d583b4-210d-11e6-a9e7-0d355d120813","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean append = (((lastReplacement) == null) || (!(lastReplacement.endsWith(replacement)))) || forceAppend","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:136","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = (((java.lang.String) == null) || (!(java.lang.String.endsWith(replacement)))) || forceAppend"},"status":-2},{"failures":[],"tindex":"d5d583b5-210d-11e6-a9e7-3984c98f8580","series":0,"name":"replace","transplant":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"obj","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.Nysiis:211","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} "},"status":-3},{"failures":[],"tindex":"d5d583b6-210d-11e6-a9e7-9f902f205562","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")","position":"org.apache.commons.codec.binary.BaseNCodec:336","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))","position":"org.apache.commons.codec.net.RFC1522Codec:149","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))"},"status":-2},{"failures":[],"tindex":"d5d5aac7-210d-11e6-a9e7-cd78a0394e5e","series":0,"name":"replace","transplant":{"toString":"this.strict = strict","position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"variableMap":{"strict":"acceptOnMatch"},"type":"adrStmt","transplantationPoint":{"toString":"this.acceptOnMatch = acceptOnMatch","position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"status":-2},{"failures":[],"tindex":"d5d5d1d8-210d-11e6-a9e7-7d4f452bac82","series":0,"name":"replace","transplant":{"toString":"this.stringEncoder = null","position":"org.apache.commons.codec.StringEncoderComparator:48","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = null"},"variableMap":{"stringEncoder":"stringEncoder"},"type":"adrStmt","transplantationPoint":{"toString":"this.stringEncoder = stringEncoder","position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"status":-3},{"failures":[],"tindex":"d5d5d1d9-210d-11e6-a9e7-5b86edf56161","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.URLCodec:250","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-2},{"failures":[],"tindex":"d5d5d1da-210d-11e6-a9e7-33a377e94ece","series":0,"name":"replace","transplant":{"toString":"return isDoubleMetaphoneEqual(value1, value2, false)","position":"org.apache.commons.codec.language.DoubleMetaphone:231","type":"CtReturnImpl","sourcecode":"return isDoubleMetaphoneEqual(value1, value2, false)"},"variableMap":{"value2":"input","value1":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return (input.length()) == 0","position":"org.apache.commons.codec.language.bm.Rule:513","type":"CtReturnImpl","sourcecode":"return (input.length()) == 0"},"status":-2},{"failures":[47,48],"tindex":"d5d5f8eb-210d-11e6-a9e7-b3b3bb667ed2","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:85","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"d5d5f8ec-210d-11e6-a9e7-6937fba123ba","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes)","position":"org.apache.commons.codec.net.URLCodec:210","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes)"},"variableMap":{"bytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"status":-2},{"failures":[],"tindex":"d5d5f8ed-210d-11e6-a9e7-d9ba76fbf7fd","series":0,"name":"add","transplant":{"toString":"for (int i = (input.length()) - 1, j = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"variableMap":{"input":"chars","suffix":"chars"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (chars.length()) ; i++) {\n    if ((chars.charAt(i)) == input) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.language.bm.Rule:240","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (chars.length()) ; i++) {\n    if ((chars.charAt(i)) == input) {\n        return true;\n    } \n}"},"status":-2},{"failures":[49],"tindex":"d5d5f8ee-210d-11e6-a9e7-71c993518976","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[32,33,34,35,50,36,51,37,38,52,39,53,54,55,56,57,58],"tindex":"d5d5f8ef-210d-11e6-a9e7-b3f99b7b7bad","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.NameType s : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> rts = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.class);\n    for (final org.apache.commons.codec.language.bm.RuleType rt : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> rs = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages ls = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n        for (final java.lang.String l : ls.getLanguages()) {\n            try {\n                rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n            }\n        }\n        if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.RULES))) {\n            rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n        } \n        rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n    }\n    org.apache.commons.codec.language.bm.Rule.RULES.put(s, java.util.Collections.unmodifiableMap(rts));\n}","position":"org.apache.commons.codec.language.bm.Rule:213","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.java.lang.Class);\n    for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n        for (final java.lang.String java.lang.String : ls.getLanguages()) {\n            try {\n                rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n            }\n        }\n        if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n            rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n        } \n        rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n    }\n    org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.put(s, java.util.Collections.unmodifiableMap(rts));\n}"},"status":-1},{"failures":[59,60],"tindex":"d5d5f8f0-210d-11e6-a9e7-fbf1423deba0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"status":-1},{"failures":[61,62,63,64,65,66,67,68],"tindex":"d5d62001-210d-11e6-a9e7-1fa34d2b6aee","series":0,"name":"replace","transplant":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"todo"},"type":"adrStmt","transplantationPoint":{"toString":"return n - todo","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":71,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
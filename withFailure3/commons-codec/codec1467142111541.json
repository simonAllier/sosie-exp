{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":165,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":265,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":193,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":198,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":2,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":126,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":188,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":151,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":182,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":42,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":21,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":258,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":271,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":105,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":217,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":84,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":250,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":204,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":168,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":167,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":113,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":114,"org.apache.commons.codec.language.NysiisTest.testCap":127,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":192,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":207,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":117,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":92,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le":238,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":166,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":205,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":115,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":91,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":116,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":241,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":257,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":17,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":170,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":63,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii":236,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":0,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":174,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":261,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":41,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":270,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":195,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":235,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":104,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16":239,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":190,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":208,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":83,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":226,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":201,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":264,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":64,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":213,"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput":229,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":277,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":44,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":76,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":13,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":20,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":124,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":187,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":225,"org.apache.commons.codec.language.NysiisTest.testDropBy":140,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":209,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":172,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc":240,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":102,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":23,"org.apache.commons.codec.binary.Base64Test.testUUID":68,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":243,"org.apache.commons.codec.binary.Base64Test.testSingletons":123,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":100,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":107,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":70,"org.apache.commons.codec.binary.Base64Test.testPairs":110,"org.apache.commons.codec.language.NysiisTest.testRule2":132,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":106,"org.apache.commons.codec.language.NysiisTest.testRule1":131,"org.apache.commons.codec.language.NysiisTest.testRule7":135,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":86,"org.apache.commons.codec.language.NysiisTest.testRule6":134,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":101,"org.apache.commons.codec.language.NysiisTest.testRule5":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":184,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":56,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":27,"org.apache.commons.codec.language.NysiisTest.testBran":136,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":143,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":189,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":158,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":66,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":169,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":185,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":121,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":246,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":35,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":122,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":177,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":263,"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals":171,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":255,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":46,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":256,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":39,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":29,"org.apache.commons.codec.binary.HexTest.testEncodeEmpty":216,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse":230,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":59,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":152,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":269,"org.apache.commons.codec.language.NysiisTest.testDad":128,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":50,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":53,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":93,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":112,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":37,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":268,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":215,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":125,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":253,"org.apache.commons.codec.language.NysiisTest.testDan":129,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":199,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":8,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":206,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":163,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":4,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":34,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":196,"org.apache.commons.codec.binary.HexTest.testCustomCharset":227,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":211,"org.apache.commons.codec.language.NysiisTest.testSnat":138,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":80,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameToSingleLetter_KARL_C_DoesNotMatch":231,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":214,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":272,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":10,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":155,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":154,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":266,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":95,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":61,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":55,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":24,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":164,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":161,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":159,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":162,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":51,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":118,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":54,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":75,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":276,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":47,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":178,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":11,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":109,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":156,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse":232,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":1,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":6,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":18,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":43,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":242,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":81,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":82,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":173,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":120,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":228,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":57,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":96,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":144,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":197,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":160,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":247,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":210,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":94,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":273,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":30,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":275,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":181,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":202,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":248,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":26,"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters":222,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":32,"org.apache.commons.codec.language.NysiisTest.testTranan":142,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":203,"org.apache.commons.codec.language.NysiisTest.testFal":130,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":183,"org.apache.commons.codec.language.NysiisTest.testSnad":137,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":244,"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence":176,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":12,"org.apache.commons.codec.language.MetaphoneTest.testTCH":254,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":267,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":223,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":150,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":260,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":259,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":224,"org.apache.commons.codec.binary.Base64Test.testBase64":71,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":153,"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters":221,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":22,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":146,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":31,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":119,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":252,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":179,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":15,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":19,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":85,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":73,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":251,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":212,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":62,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":99,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":262,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":67,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":139,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1":218,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3":219,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":65,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":49,"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5":220,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":245,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":233,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":52,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":237,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":74,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":191,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":249,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":157,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":274,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":108,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":180,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":9,"org.apache.commons.codec.language.NysiisTest.testOthers":141,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":69,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1":234,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":89,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":87,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":98,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":149,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":48,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":194,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":111,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":45},"transformations":[{"failures":[],"tindex":"7f745e4c-3d66-11e6-971e-111a4dc0de58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[],"tindex":"7f74855d-3d66-11e6-971e-099284adb5a5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:303","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n        final char char = r.java.lang.String.charAt(0);\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n            ruleMapping.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-2},{"failures":[],"tindex":"7f74855e-3d66-11e6-971e-05f7c0084c0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":-2},{"failures":[],"tindex":"7f74855f-3d66-11e6-971e-0b585691f01d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:190","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"variableMap":{"salt":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:291","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))"},"status":-2},{"failures":[],"tindex":"7f74ac70-3d66-11e6-971e-995e5fc90acc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":0},{"failures":[],"tindex":"7f74ac71-3d66-11e6-971e-11201b97e148","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:390","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"7f74ac72-3d66-11e6-971e-01095b49fd23","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"status":-1},{"failures":[105,106,107,108,67,109,110,68,111,112,113,114,115,116,117,118,119,120,121,122,123,69,71,124,73,74,77,78,97,98,99],"tindex":"7f74d383-3d66-11e6-971e-1b7ac2f84ac6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-1},{"failures":[],"tindex":"7f74d384-3d66-11e6-971e-c5da9bf0397b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:507","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:225","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"7f74d385-3d66-11e6-971e-af52c4d38344","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143],"tindex":"7f74d386-3d66-11e6-971e-75ba31eec796","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:288","type":"CtInvocationImpl","sourcecode":"key.append(chars[i])"},"status":-1},{"failures":[144,145,146],"tindex":"7f74fa97-3d66-11e6-971e-87871242dcf1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:555","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[],"tindex":"7f74fa98-3d66-11e6-971e-33db261e2e5d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:434","type":"CtIfImpl","sourcecode":"if ((chrs[index]) > 'Z') {\n    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n        if ((chrs[index]) == (element[0])) {\n            chrs[index] = element[1];\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"7f74fa99-3d66-11e6-971e-29b8bebfc0ce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"keyLen","lineSeparator":"pBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"status":-2},{"failures":[145,146],"tindex":"7f74fa9a-3d66-11e6-971e-bb9fe3898ff6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:656","type":"CtInvocationImpl","sourcecode":"result.append(\"SK\")"},"status":-1},{"failures":[],"tindex":"7f74fa9b-3d66-11e6-971e-63ec3a284db3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"status":-2},{"failures":[147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"tindex":"7f74fa9c-3d66-11e6-971e-c174d768bc7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-1},{"failures":[],"tindex":"7f7521ad-3d66-11e6-971e-8fda983129fb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"status":-2},{"failures":[163,164],"tindex":"7f7521ae-3d66-11e6-971e-351eb2245ce4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"status":-1},{"failures":[],"tindex":"7f7521af-3d66-11e6-971e-d90eb9f267fd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:262","type":"CtReturnImpl","sourcecode":"return newData"},"variableMap":{"newData":"org.apache.commons.codec.language.Nysiis.CHARS_G"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:131","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"7f7521b0-3d66-11e6-971e-9742323f1c89","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:115","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"7f7521b1-3d66-11e6-971e-e57a64ab4c99","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"status":-2},{"failures":[165,145,146],"tindex":"7f7521b2-3d66-11e6-971e-8b3ca84a559d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:524","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[163,164],"tindex":"7f7521b3-3d66-11e6-971e-035a90a31cca","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:229","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.intToFourBytes(out[1], b, 4)"},"status":-1},{"failures":[],"tindex":"7f7521b4-3d66-11e6-971e-b5d0885e5d82","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"digit","name2Size":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-2},{"failures":[],"tindex":"7f7521b5-3d66-11e6-971e-5703a812e2ab","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[166,167,168,169,170,171,172,173,174,175,176],"tindex":"7f7548c6-3d66-11e6-971e-e76caa70f345","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"status":-1},{"failures":[],"tindex":"7f7548c7-3d66-11e6-971e-4d8c2902ba5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"7f7548c8-3d66-11e6-971e-6fa5ec2a98f6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":0},{"failures":[],"tindex":"7f7548c9-3d66-11e6-971e-61bdd7ad1ed9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[],"tindex":"7f7548ca-3d66-11e6-971e-6b1eb224d561","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:209","type":"CtAssignmentImpl","sourcecode":"this.int = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0"},"status":-2},{"failures":[147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"tindex":"7f7548cb-3d66-11e6-971e-9dfdaf2e5188","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"lang","leftCharacter":"lang","rightCharacter":"lang","location":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-1},{"failures":[],"tindex":"7f7548cc-3d66-11e6-971e-575c2c530cf8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:67","type":"CtTryImpl","sourcecode":"try {\n    return java.security.MessageDigest.getInstance(algorithm);\n} catch (final java.security.NoSuchAlgorithmException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[],"tindex":"7f7548cd-3d66-11e6-971e-b1734a1a919b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"status":0},{"failures":[97,98,177],"tindex":"7f7548ce-3d66-11e6-971e-f319518dafa6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:162","type":"CtReturnImpl","sourcecode":"return encode(value, org.apache.commons.codec.net.BCodec.this.getCharset())"},"status":-1},{"failures":[125,126,127,128,129,130,131,132,134,136,137,138,139,140,141,142,143],"tindex":"7f7548cf-3d66-11e6-971e-9df8e0d75f3d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:280","type":"CtForImpl","sourcecode":"for (int int = 1 ; i < len ; i++) {\n    final char char = i < (len - 1) ? chars[(i + 1)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char;\n    final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext);\n    java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int);\n    if ((chars[i]) != (chars[(i - 1)])) {\n        key.append(chars[i]);\n    } \n}"},"status":-1},{"failures":[],"tindex":"7f7548d0-3d66-11e6-971e-4dbc39c5e0b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:108","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w$\", \"3\")"},"status":0},{"failures":[178,179,180],"tindex":"7f756fe1-3d66-11e6-971e-3b5851750aee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"status":-1},{"failures":[],"tindex":"7f756fe2-3d66-11e6-971e-df11c7806b3e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":-2},{"failures":[100,101,102],"tindex":"7f756fe3-3d66-11e6-971e-5b9688d6af0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:96","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('`')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:97","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215],"tindex":"7f756fe4-3d66-11e6-971e-b11735097106","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"variableMap":{"mapping":"name1Char","soundexMapping":"name1Char","length":"name2Size"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (name1Char.int) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}"},"status":-1},{"failures":[27,216],"tindex":"7f7596f5-3d66-11e6-971e-4788c7b58c8a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"byteArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"status":-1},{"failures":[],"tindex":"7f7807f6-3d66-11e6-971e-4762d0d667ac","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"urlsafe"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}"},"status":0},{"failures":[],"tindex":"7f7807f7-3d66-11e6-971e-d141282f005d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"status":0},{"failures":[217],"tindex":"7f782f08-3d66-11e6-971e-11e08acff27b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:269","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[144,165,145],"tindex":"7f782f09-3d66-11e6-971e-e18c8100192a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:980","type":"CtIfImpl","sourcecode":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n}"},"status":-1},{"failures":[],"tindex":"7f78a43a-3d66-11e6-971e-e56430609442","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"7f78cb4b-3d66-11e6-971e-0fd4b4ee96f2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"status":-2},{"failures":[145,146],"tindex":"7f78cb4c-3d66-11e6-971e-979be9810501","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:662","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[37,58],"tindex":"7f78cb4d-3d66-11e6-971e-8571ec06c181","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[144,145,146],"tindex":"7f78cb4e-3d66-11e6-971e-f996b55e9b7b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:631","type":"CtAssignmentImpl","sourcecode":"index = handleSC(value, result, index)"},"status":-1},{"failures":[166,167,168,169,170,172,173,174],"tindex":"7f78cb4f-3d66-11e6-971e-713140f1df18","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"text = text.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"7f78f260-3d66-11e6-971e-e789c2558b1b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"str","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"str","text":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:272","type":"CtWhileImpl","sourcecode":"while ((incount < (str.length())) && (count < (out.int))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}"},"status":-2},{"failures":[],"tindex":"7f78f261-3d66-11e6-971e-d55c59d17ddc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"variableMap":{"name1Char":"name2Char","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:321","type":"CtAssignmentImpl","sourcecode":"name2Char[i] = ' '"},"status":-2},{"failures":[],"tindex":"7f78f262-3d66-11e6-971e-8fe221d6a975","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[],"tindex":"7f78f263-3d66-11e6-971e-6d5241725d58","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"variableMap":{"soundexMapping":"data","org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"status":-2},{"failures":[218,219,220,221,222],"tindex":"7f78f264-3d66-11e6-971e-d3297d31f47d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"status":-1},{"failures":[],"tindex":"7f791975-3d66-11e6-971e-7575fced8f93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"lineLength","lineSeparator":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"status":-2},{"failures":[223],"tindex":"7f791976-3d66-11e6-971e-63d02eb1fe70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:116","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l$\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"status":-1},{"failures":[],"tindex":"7f791977-3d66-11e6-971e-6fe98a9b8d62","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"status":0},{"failures":[],"tindex":"7f791978-3d66-11e6-971e-15a30fbcbdb1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"letter","name2":"letter","name1":"letter","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"letter"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:277","type":"CtReturnImpl","sourcecode":"return ((((letter.equalsIgnoreCase(\"E\")) || (letter.equalsIgnoreCase(\"A\"))) || (letter.equalsIgnoreCase(\"O\"))) || (letter.equalsIgnoreCase(\"I\"))) || (letter.equalsIgnoreCase(\"U\"))"},"status":-2},{"failures":[],"tindex":"7f791979-3d66-11e6-971e-a7ba6d404bdb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:305","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes)"},"status":-2},{"failures":[224],"tindex":"7f79197a-3d66-11e6-971e-8de11f2df0e2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-1},{"failures":[225,226,144,165,145,146],"tindex":"7f79197b-3d66-11e6-971e-8180c2b05e4f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return index + 3"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"failures":[227,27,216,228],"tindex":"7f79408c-3d66-11e6-971e-2be176ba108f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"array","key":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"status":-1},{"failures":[],"tindex":"7f79408d-3d66-11e6-971e-e11a54a4cd29","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"org.apache.commons.codec.language.bm.RuleType.RULES","ruleType":"org.apache.commons.codec.language.bm.RuleType.RULES"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:213","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    final java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>> = new java.util.EnumMap<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.java.lang.Class);\n    for (final org.apache.commons.codec.language.bm.RuleType org.apache.commons.codec.language.bm.RuleType : org.apache.commons.codec.language.bm.RuleType.values()) {\n        final java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>> = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>();\n        final org.apache.commons.codec.language.bm.Languages org.apache.commons.codec.language.bm.Languages = org.apache.commons.codec.language.bm.Languages.getInstance(s);\n        for (final java.lang.String java.lang.String : ls.getLanguages()) {\n            try {\n                rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n            } catch (final java.lang.IllegalStateException e) {\n                throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n            }\n        }\n        if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n            rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n        } \n        rts.put(rt, java.util.Collections.unmodifiableMap(rs));\n    }\n    org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Map<org.apache.commons.codec.language.bm.RuleType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>>>>.put(s, java.util.Collections.unmodifiableMap(rts));\n}"},"status":-2},{"failures":[],"tindex":"7f79408e-3d66-11e6-971e-71dbe729ef93","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.RuleType:38","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[],"tindex":"7f79408f-3d66-11e6-971e-ab9d5ac726db","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:321","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"status":-2},{"failures":[229],"tindex":"7f794090-3d66-11e6-971e-03f3f50d1036","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:127","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"7f7967a1-3d66-11e6-971e-71a33eabb028","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:517","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha256(data))"},"status":-2},{"failures":[230,231,232],"tindex":"7f7967a2-3d66-11e6-971e-519f30a59e70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:219","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[233],"tindex":"7f7a7913-3d66-11e6-971e-33f599c83e2f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:197","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[],"tindex":"7f7a7914-3d66-11e6-971e-a1f90e05497d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:519","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'))"},"status":-2},{"failures":[125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143],"tindex":"7f7a7915-3d66-11e6-971e-0d1f088aa9d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"variableMap":{"length":"i","i":"i","transcoded":"chars","chars":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} "},"status":-1},{"failures":[163,164],"tindex":"7f7aa026-3d66-11e6-971e-01e9f2a21b52","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"variableMap":{"cnt":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"status":-1},{"failures":[],"tindex":"7f7aa027-3d66-11e6-971e-01f33ab18eab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"variableMap":{"name":"content"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"status":0},{"failures":[],"tindex":"7f7aa028-3d66-11e6-971e-8f84d22254b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:286","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"status":-2},{"failures":[],"tindex":"7f7aa029-3d66-11e6-971e-bb054515060d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^[aeiou]\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:58","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"e$\", \"\")"},"status":0},{"failures":[145,146],"tindex":"7f7aa02a-3d66-11e6-971e-a39cc453e879","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"7f7aa02b-3d66-11e6-971e-ad02a623b653","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"why\", \"Why\")"},"status":0},{"failures":[234,235,236,237,238,239,240],"tindex":"7f7aa02c-3d66-11e6-971e-970a342452f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:283","type":"CtTryImpl","sourcecode":"try {\n    return new java.lang.String(bytes , charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-1},{"failures":[],"tindex":"7f7aa02d-3d66-11e6-971e-a301d497587d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:136","type":"CtAssignmentImpl","sourcecode":"name = removeVowels(name)"},"status":-2},{"failures":[163,164],"tindex":"7f7aa02e-3d66-11e6-971e-fb53f6d50ebb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:54","type":"CtLocalVariableImpl","sourcecode":"int int = thisStart"},"variableMap":{"thisStart":"m"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:406","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a >>> n) ^ b) & m"},"status":-1},{"failures":[],"tindex":"7f7aa02f-3d66-11e6-971e-a5227ddb5395","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","l_ascii":"buffer","bits":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[89,241,90,91,92,93,94,96],"tindex":"7f7ac740-3d66-11e6-971e-519b05842951","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:166","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final int int = bytes[i];\n    if (b == '+') {\n        buffer.write(' ');\n    } else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n        try {\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n            buffer.write(((char)((u << 4) + l)));\n        } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n            throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n        }\n    } else {\n        buffer.write(b);\n    }\n}"},"status":-1},{"failures":[],"tindex":"7f7ac741-3d66-11e6-971e-8dec78ca4f87","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-2},{"failures":[],"tindex":"7f7ac742-3d66-11e6-971e-455a5f105c47","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:100","type":"CtReturnImpl","sourcecode":"return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":0},{"failures":[127,129,135,140,143],"tindex":"7f7ac743-3d66-11e6-971e-89c25936f932","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:311","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"status":-1},{"failures":[],"tindex":"7f7ac744-3d66-11e6-971e-fd8925155e95","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:400","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[29,31,105,106,107,108,53,55,61,66,67,109,68,111,112,113,114,115,116,117,118,119,120,71,124,78,97,98],"tindex":"7f7ac745-3d66-11e6-971e-c7407839a09e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"7f7ac746-3d66-11e6-971e-81e089b1eda8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:252","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[242,243,244,245,246,247,248],"tindex":"7f7ac747-3d66-11e6-971e-d12db831a92c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:224","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"variableMap":{"blocksize":"j","altResult":"keyBytes","ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:241","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes[j])"},"status":-1},{"failures":[249,250,251,252],"tindex":"7f7ac748-3d66-11e6-971e-19e5c9e7fd98","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:182","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original, null)"},"variableMap":{"original":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:361","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray))"},"status":-1},{"failures":[],"tindex":"7f7aee59-3d66-11e6-971e-d30684865b8b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"status":-2},{"failures":[233,253,254,255,256,257,258,259,260,261,262,263,264,265,217,266],"tindex":"7f7aee5a-3d66-11e6-971e-3fd21d8bdcc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"variableMap":{"inExtendedComment":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:365","type":"CtAssignmentImpl","sourcecode":"matches = substring.equals(test)"},"status":-1},{"failures":[],"tindex":"7f7aee5b-3d66-11e6-971e-8167aba4eaf7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"variableMap":{"txt":"lastReplacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"status":-2},{"failures":[],"tindex":"7f7aee5c-3d66-11e6-971e-e530f89e235c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"status":-2},{"failures":[144,165,145,146],"tindex":"7f7aee5d-3d66-11e6-971e-836a82d53e04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"index","e1":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-1},{"failures":[267,268,269,270,271,272,273,274,275],"tindex":"7f7aee5e-3d66-11e6-971e-d56f8c2cfc8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"status":-1},{"failures":[276,277],"tindex":"7f7aee5f-3d66-11e6-971e-dd5bd39dda4a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:52","type":"CtAssignmentImpl","sourcecode":"txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
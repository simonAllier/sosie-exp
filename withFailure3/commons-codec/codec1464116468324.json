{"failureDictionary":{"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":17,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":3,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":13,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":20,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":25,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":16,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":11,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":22,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":1,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":23,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":6,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":8},"transformations":[{"failures":[],"tindex":"df8ebaee-21e1-11e6-a9ed-935165ca9dd1","series":0,"name":"add","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"df8ee1ff-21e1-11e6-a9ed-8f4ccc15d30c","series":0,"name":"replace","transplant":{"toString":"final java.util.Scanner lsScanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Languages:178","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(langIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"variableMap":{"langIS":"lRulesIS","org.apache.commons.codec.language.bm.ResourceConstants.ENCODING":"org.apache.commons.codec.language.bm.ResourceConstants.ENCODING"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Scanner scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.ENCODING)","position":"org.apache.commons.codec.language.bm.Lang:137","type":"CtLocalVariableImpl","sourcecode":"final java.util.Scanner java.util.Scanner = new java.util.Scanner(lRulesIS , org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)"},"status":-3},{"failures":[],"tindex":"df8ee200-21e1-11e6-a9ed-651ae5310aee","series":0,"name":"replace","transplant":{"toString":"if (i > name2Size) {\n    break;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"length","name2Size":"name2Size"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < (name1Char.length) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (name1Char.int) ; i++) {\n    if (i > name2Size) {\n        break;\n    } \n    name1LtRStart = name1.substring(i, (i + 1));\n    name1LtREnd = name1.substring((name1Size - i), ((name1Size - i) + 1));\n    name2RtLStart = name2.substring(i, (i + 1));\n    name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1));\n    if (name1LtRStart.equals(name2RtLStart)) {\n        name1Char[i] = ' ';\n        name2Char[i] = ' ';\n    } \n    if (name1LtREnd.equals(name2RtLEnd)) {\n        name1Char[(name1Size - i)] = ' ';\n        name2Char[(name2Size - i)] = ' ';\n    } \n}"},"status":-2},{"failures":[],"tindex":"df8f0911-21e1-11e6-a9ed-dfc73bf42978","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"cy\", \"sy\")","position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":0},{"failures":[],"tindex":"df8f0912-21e1-11e6-a9ed-57317a3cb30a","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int v = r ^ (r >>> 16)","position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"status":-2},{"failures":[],"tindex":"df8f0913-21e1-11e6-a9ed-8fede6150809","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])","position":"org.apache.commons.codec.language.bm.Rule:450","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])"},"status":-2},{"failures":[],"tindex":"df8f0914-21e1-11e6-a9ed-b38c8a3f4762","series":0,"name":"replace","transplant":{"toString":"y++","position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"cp"},"type":"adrStmt","transplantationPoint":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:341","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":0},{"failures":[],"tindex":"df8f0915-21e1-11e6-a9ed-1fb0c6b16acf","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"status":-2},{"failures":[],"tindex":"df8f0916-21e1-11e6-a9ed-2df6ff9fc617","series":0,"name":"replace","transplant":{"toString":"final java.lang.String before = ph.substring(0, open)","position":"org.apache.commons.codec.language.bm.Rule:371","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(0, open)"},"variableMap":{"ph":"name","open":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String firstThree = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:163","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)"},"status":0},{"failures":[0,1,2,3,4,5],"tindex":"df8f3027-21e1-11e6-a9ed-359a47a9f961","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"base64String","key":"base64String"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.binary.Base64().decode(base64String)","position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"status":-1},{"failures":[],"tindex":"df8f3028-21e1-11e6-a9ed-4bf9901c68eb","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"curr","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"return new char[]{ curr }","position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"status":-2},{"failures":[],"tindex":"df8f3029-21e1-11e6-a9ed-13273533e655","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:236","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"df8f302a-21e1-11e6-a9ed-415e277ebc06","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.Lang.Langs.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)))","position":"org.apache.commons.codec.language.bm.Lang:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Lang>.put(s, org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String.format(org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String, s.getName()), org.apache.commons.codec.language.bm.Languages.getInstance(s)))"},"status":-1},{"failures":[],"tindex":"df8f573b-21e1-11e6-a9ed-af921b794d6d","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"tia\", \"sia\")","position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"name2RtLEnd"},"type":"adrStmt","transplantationPoint":{"toString":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:316","type":"CtAssignmentImpl","sourcecode":"name2RtLEnd = name2.substring((name2Size - i), ((name2Size - i) + 1))"},"status":-2},{"failures":[],"tindex":"df8f573c-21e1-11e6-a9ed-af4f9f5bb0fc","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int incount = 1","position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[22,23,24],"tindex":"df8f573d-21e1-11e6-a9ed-518254854888","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"replacedName = replacedName.replace(dc, singleLetter)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"status":-1},{"failures":[20],"tindex":"df8f573e-21e1-11e6-a9ed-c3f19cd49257","series":0,"name":"replace","transplant":{"toString":"final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:365","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages())"},"variableMap":{"newPhoneme":"newPhoneme","oldPhoneme":"newPhoneme"},"type":"adrStmt","transplantationPoint":{"toString":"final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:364","type":"CtLocalVariableImpl","sourcecode":"final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme)"},"status":-1},{"failures":[],"tindex":"df8f573f-21e1-11e6-a9ed-adb9338d13a5","series":0,"name":"add","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"str"},"type":"adrStmt","transplantationPoint":{"toString":"while ((incount < (str.length())) && (count < (out.length))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}","position":"org.apache.commons.codec.language.Soundex:272","type":"CtWhileImpl","sourcecode":"while ((incount < (str.length())) && (count < (out.int))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}"},"status":-2},{"failures":[25,26],"tindex":"df8f7e50-21e1-11e6-a9ed-3360996a47c6","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.NullPointerException()","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException()"},"status":-1},{"failures":[],"tindex":"df8f7e51-21e1-11e6-a9ed-31618352ce52","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:421","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key).doFinal(valueToDigest)"},"status":-2},{"failures":[],"tindex":"df8f7e52-21e1-11e6-a9ed-b94f7dd252a9","series":0,"name":"replace","transplant":{"toString":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n    inExtendedComment = false;\n} ","position":"org.apache.commons.codec.language.bm.Lang:145","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-2},{"failures":[],"tindex":"df8f7e53-21e1-11e6-a9ed-252470132e18","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"df8f7e54-21e1-11e6-a9ed-e312f24dada9","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.bm.Languages:229","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"df8f7e55-21e1-11e6-a9ed-87c2cb2443ee","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[],"tindex":"df8fa566-21e1-11e6-a9ed-c7a7fb7b7399","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone2:64","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":25,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
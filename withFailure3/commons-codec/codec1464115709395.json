{"failureDictionary":{"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":6,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":16,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":21,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":20,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":9,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":3,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":18,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":13,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":8,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":10,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":7,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":5,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":14,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":15,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":22,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":2,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":11},"transformations":[{"failures":[0,1],"tindex":"1b33a884-21e0-11e6-b1d0-b54a1da93ece","series":0,"name":"replace","transplant":{"toString":"final char hex1 = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:184","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), 16))"},"variableMap":{"b":"org.apache.commons.codec.net.URLCodec.RADIX"},"type":"adrStmt","transplantationPoint":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX))","position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"status":-1},{"failures":[],"tindex":"1b33a885-21e0-11e6-b1d0-0f7b9b3c6a23","series":0,"name":"add","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16)","position":"org.apache.commons.codec.binary.StringUtils:181","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"1b33cf96-21e0-11e6-b1d0-97c91acbf15f","series":0,"name":"add","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int iChar = original[i]","position":"org.apache.commons.codec.digest.UnixCrypt:221","type":"CtLocalVariableImpl","sourcecode":"final int int = original[i]"},"status":-2},{"failures":[],"tindex":"1b33cf97-21e0-11e6-b1d0-67815f4af3d1","series":0,"name":"replace","transplant":{"toString":"v &= e1","position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"n","e1":"n"},"type":"adrStmt","transplantationPoint":{"toString":"n++","position":"org.apache.commons.codec.language.Metaphone:329","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"status":-2},{"failures":[2,3,4,5,6],"tindex":"1b33cf98-21e0-11e6-b1d0-dd78c713e4d0","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[7],"tindex":"1b33cf99-21e0-11e6-b1d0-1d68e5ce6e2a","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.URLCodec:245","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[8,9,10,11,12,13,14,15],"tindex":"1b33cf9a-21e0-11e6-b1d0-f381fcdc6f7c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:112","type":"CtIfImpl","sourcecode":"if (!(languages.isEmpty())) {\n    final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n    if ((newPhonemes.size()) < maxPhonemes) {\n        newPhonemes.add(join);\n        if ((newPhonemes.size()) >= maxPhonemes) {\n            break EXPR;\n        } \n    } \n} "},"status":-1},{"failures":[16,17,18,19,20,21,22,23],"tindex":"1b33f6ab-21e0-11e6-b1d0-1f1c9860a595","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"status":-1},{"failures":[],"tindex":"1b33f6ac-21e0-11e6-b1d0-99ec3eacc28f","series":0,"name":"add","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:638","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[12,13,14,15],"tindex":"1b33f6ad-21e0-11e6-b1d0-f1a1fa719b12","series":0,"name":"replace","transplant":{"toString":"return this","position":"org.apache.commons.codec.language.bm.Languages:234","type":"CtReturnImpl","sourcecode":"return this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)","position":"org.apache.commons.codec.language.bm.Languages:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)"},"status":-1},{"failures":[],"tindex":"1b33f6ae-21e0-11e6-b1d0-cb58aa6579fc","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", loc='\").append(loc).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:464","type":"CtInvocationImpl","sourcecode":"sb.append(\", loc='\").append(java.lang.String).append('\\'')"},"status":0},{"failures":[],"tindex":"1b33f6af-21e0-11e6-b1d0-7df52d61f4c6","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY","ascii":"raw"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-3}],"header":{"groupId":"commons-codec","transformationCount":12,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
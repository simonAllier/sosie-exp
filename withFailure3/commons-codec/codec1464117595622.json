{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":39,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":28,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":5,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":25,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":16,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":27,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":35,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":53,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":33,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":41,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":20,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":3,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":49,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":52,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":54,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":18,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":19,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":30,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":45,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":32,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":46,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":51,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":43,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":48,"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":34,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":8,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":13,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":31,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":7,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":23,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":40,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":42,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":14,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":38},"transformations":[{"failures":[0,1],"tindex":"7f7ac10d-21e4-11e6-bf27-5b5cdce011bb","series":0,"name":"replace","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"left","t":"left","n":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[1]","position":"org.apache.commons.codec.digest.UnixCrypt:307","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[2,3,4,5],"tindex":"7f7ae81e-21e4-11e6-bf27-3b8dc77e388d","series":0,"name":"replace","transplant":{"toString":"return n - todo","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"variableMap":{"todo":"len","n":"len"},"type":"adrStmt","transplantationPoint":{"toString":"return len","position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"status":-1},{"failures":[6,7,8,9,10,11],"tindex":"7f7ae81f-21e4-11e6-bf27-7d423d50a9fc","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:472","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-1},{"failures":[],"tindex":"7f7ae820-21e4-11e6-bf27-117c95c4a1f5","series":0,"name":"replace","transplant":{"toString":"a ^= t << n","position":"org.apache.commons.codec.digest.UnixCrypt:407","type":"CtOperatorAssignmentImpl","sourcecode":"a ^= t << n"},"variableMap":{"a":"modulus","t":"modulus","n":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"7f7ae821-21e4-11e6-bf27-4528ca31ef12","series":0,"name":"replace","transplant":{"toString":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} ","position":"org.apache.commons.codec.binary.Base32:308","type":"CtIfImpl","sourcecode":"if ((isInAlphabet(pad)) || (org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(pad))) {\n    throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\");\n} "},"variableMap":{"pad":"org.apache.commons.codec.net.QuotedPrintableCodec.CR"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:314","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[],"tindex":"7f7b0f32-21e4-11e6-bf27-25e8b4a60d43","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.URLCodec.this.charset","position":"org.apache.commons.codec.net.URLCodec:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.this.java.lang.String"},"variableMap":{"charset":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return doubleMetaphone(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:217","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value)"},"status":-3},{"failures":[12,13,14,15,16,17,18,19,20],"tindex":"7f7b0f33-21e4-11e6-bf27-593d00d15971","series":0,"name":"replace","transplant":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:510","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"encodeTable","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))]","position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"tindex":"7f7b0f34-21e4-11e6-bf27-d9a687521f0f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"7f7b0f35-21e4-11e6-bf27-014d2dcc7128","series":0,"name":"replace","transplant":{"toString":"appendAlternate(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:970","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"variableMap":{"value":"replacedName"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String dc : org.apache.commons.codec.language.MatchRatingApproachEncoder.DOUBLE_CONSONANT) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String singleLetter = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:386","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String[]) {\n    if (replacedName.contains(dc)) {\n        final java.lang.String java.lang.String = dc.substring(0, 1);\n        replacedName = replacedName.replace(dc, singleLetter);\n    } \n}"},"status":-2},{"failures":[],"tindex":"7f7bf996-21e4-11e6-bf27-75b8b2286f85","series":0,"name":"replace","transplant":{"toString":"return metaphone(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"object"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:250","type":"CtTryImpl","sourcecode":"try {\n    final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"7f7bf997-21e4-11e6-bf27-2f81c5739b3d","series":0,"name":"replace","transplant":{"toString":"final int saltLen = saltBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:156","type":"CtLocalVariableImpl","sourcecode":"final int int = saltBytes.int"},"variableMap":{"saltBytes":"bytes","length":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int u = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])","position":"org.apache.commons.codec.net.URLCodec:172","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-3},{"failures":[],"tindex":"7f7bf998-21e4-11e6-bf27-518ae3e2dae4","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int savedPos = context.pos","position":"org.apache.commons.codec.binary.Base64:343","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[],"tindex":"7f7c20a9-21e4-11e6-bf27-091ddaa1cbd0","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.BCodec:141","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.net.BCodec.this.encodeText(value, charset);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"7f7c20aa-21e4-11e6-bf27-0db1891517fb","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:277","type":"CtAssignmentImpl","sourcecode":"finalb = ctx1.digest()"},"status":-3},{"failures":[],"tindex":"7f7c20ab-21e4-11e6-bf27-89436a49a592","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((context.currentLinePos) > 0)) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n} ","position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-2},{"failures":[],"tindex":"7f7c20ac-21e4-11e6-bf27-2973a61131e6","series":0,"name":"add","transplant":{"toString":"final java.lang.String combined = \"d\" + remainder","position":"org.apache.commons.codec.language.bm.PhoneticEngine:412","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = \"d\" + remainder"},"variableMap":{"remainder":"test"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String substring = string.substring(index, (index + (test.length())))","position":"org.apache.commons.codec.language.Metaphone:364","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = string.substring(index, (index + (test.length())))"},"status":-2},{"failures":[],"tindex":"7f7c20ad-21e4-11e6-bf27-53cb4a4a1b93","series":0,"name":"add","transplant":{"toString":"mac.reset()","position":"org.apache.commons.codec.digest.HmacUtils:742","type":"CtInvocationImpl","sourcecode":"mac.reset()"},"variableMap":{"mac":"mac"},"type":"adrStmt","transplantationPoint":{"toString":"mac.init(keySpec)","position":"org.apache.commons.codec.digest.HmacUtils:183","type":"CtInvocationImpl","sourcecode":"mac.init(keySpec)"},"status":0},{"failures":[22,24,25,26,33,34,35,36],"tindex":"7f7c20ae-21e4-11e6-bf27-3392b782c27c","series":0,"name":"add","transplant":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inMultilineComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n        final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] parts = line.split(\"\\\\s+\");\n        if ((parts.length) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int cLine = currentLine;\n                final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(myLine);\n                        sb.append(\", loc='\").append(loc).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String patternKey = r.pattern.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[37],"tindex":"7f7c47bf-21e4-11e6-bf27-c1023ac55f13","series":0,"name":"replace","transplant":{"toString":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strB.length())))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:339","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())))"},"variableMap":{"strB":"strA","org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"toString":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strB.length())));\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:336","type":"CtIfImpl","sourcecode":"if ((strA.length()) > (strB.length())) {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())));\n} else {\n    return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())));\n}"},"status":-1},{"failures":[38],"tindex":"7f7c6ed0-21e4-11e6-bf27-ed0b55928eb3","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"variableMap":{"ascii":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"status":-1},{"failures":[39,40,41],"tindex":"7f7c6ed1-21e4-11e6-bf27-bbe02afc0416","series":0,"name":"replace","transplant":{"toString":"for (int i = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}","position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}"},"variableMap":{"es1":"value","es2":"value","diff":"index","lengthToMatch":"index"},"type":"adrStmt","transplantationPoint":{"toString":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"status":-1},{"failures":[],"tindex":"7f7c6ed2-21e4-11e6-bf27-df63806d81ab","series":0,"name":"replace","transplant":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"builder"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cachedString) == null) {\n    cachedString = builder.toString();\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-2},{"failures":[],"tindex":"7f7c6ed3-21e4-11e6-bf27-09fcbaf0f476","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (append && ((builder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH))) {\n    builder.append(replacement);\n    if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n        builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n    } \n    cachedString = null;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:138","type":"CtIfImpl","sourcecode":"if (append && ((java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int))) {\n    java.lang.StringBuilder.append(replacement);\n    if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n        java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n    } \n    java.lang.String = null;\n} "},"status":-2},{"failures":[],"tindex":"7f7c6ed4-21e4-11e6-bf27-5d09afc9259a","series":0,"name":"add","transplant":{"toString":"appendAlternate(alternate)","position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"alternate":"current"},"type":"adrStmt","transplantationPoint":{"toString":"if (current == last) {\n    continue;\n} else if (current != 0) {\n    sBuf.append(current);\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (current == last) {\n    continue;\n} else if (current != 0) {\n    sBuf.append(current);\n} "},"status":-2},{"failures":[],"tindex":"7f7c6ed5-21e4-11e6-bf27-9b6e005f8cd4","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('.')","position":"org.apache.commons.codec.net.QCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('.')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:75","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[42],"tindex":"7f7c95e6-21e4-11e6-bf27-31f7c9311fdf","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"n+\", \"N\")","position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"status":-1},{"failures":[],"tindex":"7f7c95e7-21e4-11e6-bf27-6f4848455f49","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(baseNCodec.hasData(context))) {\n    final byte[] buf = new byte[doEncode ? 4096 : 8192];\n    final int c = in.read(buf);\n    if (doEncode) {\n        baseNCodec.encode(buf, 0, c, context);\n    } else {\n        baseNCodec.decode(buf, 0, c, context);\n    }\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:156","type":"CtIfImpl","sourcecode":"if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n    final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n    final int int = java.io.InputStream.read(buf);\n    if (boolean) {\n        org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    } else {\n        org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n} "},"status":-2},{"failures":[35],"tindex":"7f7d3228-21e4-11e6-bf27-016f9e0b0a0e","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this","position":"org.apache.commons.codec.language.bm.Languages:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)","position":"org.apache.commons.codec.language.bm.Languages:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls)"},"status":-1},{"failures":[],"tindex":"7f7d3229-21e4-11e6-bf27-8953e1e8c988","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.BCodec:183","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"variableMap":{"e":"value"},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))","position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[43],"tindex":"7f7d322a-21e4-11e6-bf27-5ba2174a6a61","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"c\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:78","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":-1},{"failures":[],"tindex":"7f7d322b-21e4-11e6-bf27-5fe37bd7252a","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if (si.hasNext()) {\n    sb.append(si.next());\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:260","type":"CtIfImpl","sourcecode":"if (si.hasNext()) {\n    sb.append(si.next());\n} "},"status":-2},{"failures":[40,41],"tindex":"7f7d322c-21e4-11e6-bf27-e1c8742fec40","series":0,"name":"replace","transplant":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.appendPrimary('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"status":-1},{"failures":[],"tindex":"7f7d593d-21e4-11e6-bf27-1345080158a7","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.ASHKENAZI, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:238","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"bar\", \"ben\", \"da\", \"de\", \"van\", \"von\"))))"},"variableMap":{"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES","org.apache.commons.codec.language.bm.NameType.ASHKENAZI":"org.apache.commons.codec.language.bm.NameType.SEPHARDIC"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.NAME_PREFIXES.put(org.apache.commons.codec.language.bm.NameType.SEPHARDIC, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:241","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.org.apache.commons.codec.language.bm.PhoneticEngine.java.util.Map<org.apache.commons.codec.language.bm.NameType, java.util.Set<java.lang.String>>.put(org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType.org.apache.commons.codec.language.bm.NameType, java.util.Collections.unmodifiableSet(new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(\"al\", \"el\", \"da\", \"dal\", \"de\", \"del\", \"dela\", \"de la\", \"della\", \"des\", \"di\", \"do\", \"dos\", \"du\", \"van\", \"von\"))))"},"status":0},{"failures":[22,24,25,26,33,34,35,36],"tindex":"7f7d593e-21e4-11e6-bf27-ad301cf06c8d","series":0,"name":"replace","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"if ((newPhonemes.size()) < maxPhonemes) {\n    newPhonemes.add(join);\n    if ((newPhonemes.size()) >= maxPhonemes) {\n        break EXPR;\n    } \n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:114","type":"CtIfImpl","sourcecode":"if ((newPhonemes.size()) < maxPhonemes) {\n    newPhonemes.add(join);\n    if ((newPhonemes.size()) >= maxPhonemes) {\n        break EXPR;\n    } \n} "},"status":-1},{"failures":[44,45],"tindex":"7f7d593f-21e4-11e6-bf27-2f5eea5464d4","series":0,"name":"replace","transplant":{"toString":"int u = v & e0","position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"bitlen","e0":"bitlen"},"type":"adrStmt","transplantationPoint":{"toString":"final int startDst = (bitlen / 8) - len","position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":-1},{"failures":[],"tindex":"7f7d5940-21e4-11e6-bf27-3944ea322dd3","series":0,"name":"replace","transplant":{"toString":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} ","position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"tempResult","lineLength":"cp"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:340","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize)"},"status":0},{"failures":[],"tindex":"7f7d5941-21e4-11e6-bf27-3b2e75ca6868","series":0,"name":"replace","transplant":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"target"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String element : criteria) {\n    if (target.equals(element)) {\n        result = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.DoubleMetaphone:921","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : criteria) {\n    if (target.equals(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-2},{"failures":[46,43,47],"tindex":"7f7d5942-21e4-11e6-bf27-4f0cbcf32c85","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^y\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"status":-1},{"failures":[],"tindex":"7f7d5943-21e4-11e6-bf27-059ba1ecb09f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"status":-2},{"failures":[],"tindex":"7f7d8054-21e4-11e6-bf27-6760db6b14b4","series":0,"name":"replace","transplant":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"variableMap":{"str":"salt","charset":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt)","position":"org.apache.commons.codec.digest.Crypt:75","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(keyBytes, salt)"},"status":-2},{"failures":[48,49,50,51,52,38,53],"tindex":"7f7d8055-21e4-11e6-bf27-47869c09d479","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return digest","position":"org.apache.commons.codec.digest.DigestUtils:801","type":"CtReturnImpl","sourcecode":"return digest"},"status":-1},{"failures":[],"tindex":"7f7d8056-21e4-11e6-bf27-ed39c6a6bb51","series":0,"name":"replace","transplant":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"pos"},"type":"adrStmt","transplantationPoint":{"toString":"final int savedPos = context.pos","position":"org.apache.commons.codec.binary.Base32:446","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[],"tindex":"7f7d8057-21e4-11e6-bf27-1dd67e05a10c","series":0,"name":"replace","transplant":{"toString":"boolean roundsCustom = false","position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:528","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'))"},"status":-2},{"failures":[],"tindex":"7f7d8058-21e4-11e6-bf27-6b0a6cda0dff","series":0,"name":"add","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"buffer","ascii":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if (((context.buffer) == null) || ((context.buffer.length) < ((context.pos) + size))) {\n    return resizeBuffer(context);\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:269","type":"CtIfImpl","sourcecode":"if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n    return resizeBuffer(context);\n} "},"status":-2},{"failures":[53],"tindex":"7f7d8059-21e4-11e6-bf27-0918e1f5e689","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)","position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-1},{"failures":[54],"tindex":"7f7d805a-21e4-11e6-bf27-3b0d0f74ea4d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.buffer = b","position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"context.byte[] = b"},"status":-1},{"failures":[],"tindex":"7f7d805b-21e4-11e6-bf27-07681b9db707","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('}')","position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[],"tindex":"7f7d805c-21e4-11e6-bf27-8bd342a9360b","series":0,"name":"add","transplant":{"toString":"if (len == (org.apache.commons.codec.binary.BaseNCodec.EOF)) {\n    break;\n} ","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"decodeSize","len":"decodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"if ((context.eof) && ((context.modulus) != 0)) {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    switch (context.modulus) {\n        case 1 :\n            break;\n        case 2 :\n            context.ibitWorkArea = (context.ibitWorkArea) >> 4;\n            buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        case 3 :\n            context.ibitWorkArea = (context.ibitWorkArea) >> 2;\n            buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.modulus)));\n    }\n} ","position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) != 0)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 1 :\n            break;\n        case 2 :\n            context.int = (context.int) >> 4;\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            context.int = (context.int) >> 2;\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-2},{"failures":[],"tindex":"7f7da76d-21e4-11e6-bf27-8f92d0b7768e","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:531","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":49,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":80,"org.apache.commons.codec.binary.HexTest.testCustomCharset":168,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":136,"org.apache.commons.codec.language.NysiisTest.testSnat":121,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":57,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":127,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":133,"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty":86,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":100,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_11_Returns_3_Successfully":60,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":99,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":109,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":158,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":144,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":96,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":143,"org.apache.commons.codec.binary.Base64Test.testTriplets":146,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":163,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":106,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":178,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":104,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":107,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":22,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":183,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_8_Returns3_Successfully":63,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":37,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":152,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":154,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":83,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":69,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":20,"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy":2,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":32,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":27,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":101,"org.apache.commons.codec.language.NysiisTest.testCap":110,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":36,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":92,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":7,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":165,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":34,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":180,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent":4,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":35,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":140,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":88,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":9,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":39,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":70,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":150,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":10,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":78,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":79,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":132,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":61,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":128,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":135,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":137,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":181,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":177,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":131,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":48,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":156,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":17,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":82,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":21,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_10_Returns3_Successfully":64,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":75,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":74,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":147,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":161,"org.apache.commons.codec.language.NysiisTest.testTranan":125,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":142,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":162,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":49,"org.apache.commons.codec.language.NysiisTest.testFal":113,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":5,"org.apache.commons.codec.language.NysiisTest.testSnad":120,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":90,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":179,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":84,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":13,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":173,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":65,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":85,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":91,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":139,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":149,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":157,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":95,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":153,"org.apache.commons.codec.language.NysiisTest.testDropBy":123,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":59,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":148,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":134,"org.apache.commons.codec.binary.Base64Test.testBase64":44,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":182,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":98,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":12,"org.apache.commons.codec.binary.Base64Test.testUUID":29,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":89,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":38,"org.apache.commons.codec.binary.Base64Test.testSingletons":42,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":138,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":73,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":24,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":166,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":151,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":0,"org.apache.commons.codec.binary.Base64Test.testPairs":28,"org.apache.commons.codec.language.NysiisTest.testRule2":115,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":23,"org.apache.commons.codec.language.NysiisTest.testRule1":114,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":16,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.language.NysiisTest.testRule7":118,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":81,"org.apache.commons.codec.language.NysiisTest.testRule6":117,"org.apache.commons.codec.language.NysiisTest.testRule5":116,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":130,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":93,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":176,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":52,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":26,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":122,"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence":87,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":141,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":169,"org.apache.commons.codec.language.NysiisTest.testBran":119,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":126,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":77,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":103,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":145,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":76,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":160,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":18,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":40,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":50,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":41,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":155,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":55,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":102,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":97,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":129,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":175,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":1,"org.apache.commons.codec.language.NysiisTest.testDad":111,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":31,"org.apache.commons.codec.language.NysiisTest.testOthers":124,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":43,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":174,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":58,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":108,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":3,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":159,"org.apache.commons.codec.language.NysiisTest.testDan":112,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":51,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1":171,"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0":170,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":94,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":68,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":30,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":53,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":164},"transformations":[{"failures":[],"tindex":"812e4db6-3d8c-11e6-961c-07eb0f93db27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"binaryData","ascii":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"status":-2},{"failures":[],"tindex":"812e74c7-3d8c-11e6-961c-05426eada1f6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"saltString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"status":-2},{"failures":[],"tindex":"812e74c8-3d8c-11e6-961c-4bd4474134f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:270","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.char[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_CHAR_ARRAY":"org.apache.commons.codec.language.Nysiis.CHARS_C"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:143","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[0,1],"tindex":"812e74c9-3d8c-11e6-961c-e13e92c0ffbf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[2],"tindex":"812e74ca-3d8c-11e6-961c-a1999ad6125e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:346","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.boolean"},"status":-1},{"failures":[3,4,5,6,7,8],"tindex":"812e74cb-3d8c-11e6-961c-69ea0e45a4f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:179","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"812e74cc-3d8c-11e6-961c-33206e821b36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:557","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = !negate"},"status":-2},{"failures":[],"tindex":"812e74cd-3d8c-11e6-961c-0782c83a0e3e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}"},"status":-2},{"failures":[9],"tindex":"812e9bde-3d8c-11e6-961c-b53d8356c745","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"status":-1},{"failures":[10,11,12],"tindex":"812e9bdf-3d8c-11e6-961c-171bbba6c96d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:506","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[3,13],"tindex":"812e9be0-3d8c-11e6-961c-33487f8e3fce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":-1},{"failures":[],"tindex":"812e9be1-3d8c-11e6-961c-852447e6d5e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"variableMap":{"current":"ch","last":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"status":-2},{"failures":[14,15,16,17,18,19,20,21],"tindex":"812e9be2-3d8c-11e6-961c-17f13b2ddebc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"variableMap":{"algorithm":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"812e9be3-3d8c-11e6-961c-9b493f7750f9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:413","type":"CtInvocationImpl","sourcecode":"readResults(result, 0, result.int, context)"},"status":-1},{"failures":[],"tindex":"812e9be4-3d8c-11e6-961c-d78c6983c96b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:283","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"812e9be5-3d8c-11e6-961c-a1e999701d78","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:155","type":"CtWhileImpl","sourcecode":"while (readLen == 0) {\n    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n        final int int = java.io.InputStream.read(buf);\n        if (boolean) {\n            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        } else {\n            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        }\n    } \n    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"812ec2f6-3d8c-11e6-961c-3388b9f06af0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[53,54],"tindex":"812ec2f7-3d8c-11e6-961c-e1a3c5800873","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"variableMap":{"patternLength":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:315","type":"CtAssignmentImpl","sourcecode":"out[0] = left"},"status":-1},{"failures":[],"tindex":"812ec2f8-3d8c-11e6-961c-5bb28c46d9d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"status":0},{"failures":[],"tindex":"812ec2f9-3d8c-11e6-961c-959823d0cca6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[55,56,57,58,59],"tindex":"812ec2fa-3d8c-11e6-961c-c9d848d38a73","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:181","type":"CtIfImpl","sourcecode":"if (atStart) {\n    return java.lang.String[];\n} "},"status":-1},{"failures":[60,61,62,63,64],"tindex":"812ec2fb-3d8c-11e6-961c-4d2537d9cf58","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:192","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-1},{"failures":[],"tindex":"812ec2fc-3d8c-11e6-961c-0131e5a05458","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:225","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e)"},"variableMap":{"rt":"object","s":"object","e":"object","l":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:407","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"))"},"status":-2},{"failures":[65],"tindex":"812ec2fd-3d8c-11e6-961c-39198b9bcf08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:124","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String.length())"},"variableMap":{"txt":"data","org.apache.commons.codec.language.Caverphone1.SIX_1":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"status":-1},{"failures":[66],"tindex":"812ec2fe-3d8c-11e6-961c-274dd7b8323c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:120","type":"CtInvocationImpl","sourcecode":"local.append(inwd, 1, ((inwd.int) - 1))"},"status":-1},{"failures":[67],"tindex":"812eea0f-3d8c-11e6-961c-e7fd1a19ea21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"name2Size","len":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"status":-1},{"failures":[68,69,70,71,72],"tindex":"812eea10-3d8c-11e6-961c-e91050ab2445","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[73,74],"tindex":"812eea11-3d8c-11e6-961c-93cf89e3aa66","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:77","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(',')"},"status":-1},{"failures":[],"tindex":"812eea12-3d8c-11e6-961c-cf199dbef9d5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","ascii":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:154","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[10,11,12],"tindex":"812eea13-3d8c-11e6-961c-69711577ccd6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"812eea14-3d8c-11e6-961c-b9923e658a04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"variableMap":{"c":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"status":-2},{"failures":[],"tindex":"812eea15-3d8c-11e6-961c-a382129d346f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:211","type":"CtInvocationImpl","sourcecode":"ctx.update(saltBytes)"},"variableMap":{"ctx":"ctx1","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:269","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-2},{"failures":[12],"tindex":"812eea16-3d8c-11e6-961c-2b983121b169","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:628","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[75,76,77,78,79],"tindex":"812f1127-3d8c-11e6-961c-7f9b1a7a48b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"variableMap":{"mappedChar":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:165","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.RefinedSoundex.this.char[][((java.lang.Character.toUpperCase(c)) - 'A')]"},"status":-1},{"failures":[],"tindex":"812f1128-3d8c-11e6-961c-c1f5892ff270","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"variableMap":{"string":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[10,80,12],"tindex":"812f1129-3d8c-11e6-961c-93df4115d6ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"alternate"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:990","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[11,12],"tindex":"812f112a-3d8c-11e6-961c-9185c342cb81","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:372","type":"CtInvocationImpl","sourcecode":"result.append('X', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[81,82,83,84,85,86,87],"tindex":"812f112b-3d8c-11e6-961c-2f72eab2f732","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"txt","txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"status":-1},{"failures":[88,89,90,14,18,19,21],"tindex":"812f112c-3d8c-11e6-961c-23f4f6f64dc7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-1},{"failures":[91],"tindex":"812f112d-3d8c-11e6-961c-b9c95aec6c2e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:172","type":"CtIfImpl","sourcecode":"if ((ascii == null) || ((ascii.int) == 0)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"812f112e-3d8c-11e6-961c-1f717ecac0bf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:332","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"finalRules can not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:193","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))"},"status":-2},{"failures":[],"tindex":"812f112f-3d8c-11e6-961c-6f386f040d8c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"variableMap":{"es1":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII","es2":"org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE","i":"n","diff":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-2},{"failures":[92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"812f1130-3d8c-11e6-961c-3d9e768bd2f5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","rs":"rs","rt":"rt","s":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"812f1131-3d8c-11e6-961c-67dd56554ab0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"variableMap":{"code":"lastCode","lastChar":"nextChar","nextChar":"lastCode","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"org.apache.commons.codec.language.ColognePhonetic.TDX","org.apache.commons.codec.language.ColognePhonetic.SZ":"org.apache.commons.codec.language.ColognePhonetic.GKQ"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:347","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '0';\n} else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n    if (lastCode == '/') {\n        continue;\n    } \n    code = '-';\n} else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n    code = '1';\n} else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '2';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '3';\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '4';\n} else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n    code = '4';\n    input.addLeft('S');\n    rightLength++;\n} else if ((chr == 'S') || (chr == 'Z')) {\n    code = '8';\n} else if (chr == 'C') {\n    if (lastCode == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n            code = '4';\n        } else {\n            code = '8';\n        }\n    } else {\n        if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n            code = '8';\n        } else {\n            code = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n    code = '8';\n} else if (chr == 'R') {\n    code = '7';\n} else if (chr == 'L') {\n    code = '5';\n} else if ((chr == 'M') || (chr == 'N')) {\n    code = '6';\n} else {\n    code = chr;\n}"},"status":-2},{"failures":[],"tindex":"812f3842-3d8c-11e6-961c-79599713e97d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:447","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"tindex":"812f3843-3d8c-11e6-961c-dd582644bcb3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"variableMap":{"length":"i","i":"i","transcoded":"chars","chars":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} "},"status":-1},{"failures":[],"tindex":"812f3844-3d8c-11e6-961c-5312eba75088","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":0},{"failures":[],"tindex":"812f3845-3d8c-11e6-961c-8541a4cfdf79","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"status":0},{"failures":[],"tindex":"812f3846-3d8c-11e6-961c-6b0dc35ffa0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN","name2Size":"org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"812f3847-3d8c-11e6-961c-ffca06971fc1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:92","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"status":-2},{"failures":[80,11,12],"tindex":"812f3848-3d8c-11e6-961c-334f8ad8c9c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:299","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:591","type":"CtReturnImpl","sourcecode":"return (charAt(value, (index + 1))) == 'R' ? index + 2 : index + 1"},"status":-1},{"failures":[127,128,129],"tindex":"812f3849-3d8c-11e6-961c-374b17dfec70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:481","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer)"},"status":-1},{"failures":[130],"tindex":"812f384a-3d8c-11e6-961c-b520b1c123ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:175","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    hasUnderscores = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"812f384b-3d8c-11e6-961c-bb5c2188753b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"status":-2},{"failures":[],"tindex":"812f384c-3d8c-11e6-961c-efe4a4271bad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"status":0},{"failures":[],"tindex":"812f5f5d-3d8c-11e6-961c-e1c91de92492","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:66","type":"CtIfImpl","sourcecode":"if (!ignoreCase) {\n    return false;\n} "},"variableMap":{"ignoreCase":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-2},{"failures":[3,13],"tindex":"812f5f5e-3d8c-11e6-961c-bd306f168718","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":-1},{"failures":[],"tindex":"812f5f5f-3d8c-11e6-961c-573a9fe3fe53","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:368","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-2},{"failures":[10,11,12],"tindex":"812f5f60-3d8c-11e6-961c-4d3108f3f023","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:396","type":"CtInvocationImpl","sourcecode":"result.append('T')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"812f5f61-3d8c-11e6-961c-656f0cf3868d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"variableMap":{"java.lang.Character.MIN_VALUE":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"status":-2},{"failures":[131],"tindex":"812f5f62-3d8c-11e6-961c-a3d74094d8f9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:134","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , concat , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getMaxPhonemes())"},"status":-1},{"failures":[],"tindex":"812f5f63-3d8c-11e6-961c-e110d601254c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"pBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"status":0},{"failures":[],"tindex":"812f5f64-3d8c-11e6-961c-0d091f9409e4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:134","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Set<java.lang.String>);\n    for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n        ls.add(lang);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"status":-2},{"failures":[97,104,105,106,107],"tindex":"812f5f65-3d8c-11e6-961c-ad3bfbb3bbd1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:217","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[10],"tindex":"812f8676-3d8c-11e6-961c-8dc6a86d9680","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:474","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"812f8677-3d8c-11e6-961c-37fc9e6362a7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"variableMap":{"ph":"name","open":"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:164","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring((nameLength - (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)), nameLength)"},"status":-2},{"failures":[55,56,132,133,57,134,135,58,59,136],"tindex":"812f8678-3d8c-11e6-961c-efc512060882","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:188","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 1))"},"variableMap":{"str":"input","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:497","type":"CtLocalVariableImpl","sourcecode":"final char char = input.charAt(index)"},"status":-1},{"failures":[],"tindex":"812f8679-3d8c-11e6-961c-99da655ea180","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"812f867a-3d8c-11e6-961c-e79d01aafdc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"inAvail","to":"inAvail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:432","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"812f867b-3d8c-11e6-961c-1fcd9cab1811","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"value","salt":"value","prefix":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:607","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n    result.append('S');\n} else {\n    result.append('X');\n}"},"status":-2},{"failures":[],"tindex":"812f867c-3d8c-11e6-961c-590434d5f689","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_S"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:133","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[32,33],"tindex":"812f867d-3d8c-11e6-961c-33595cd0548d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"variableMap":{"cnt":"startSrc"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"status":-1},{"failures":[137,138,139,140,141,142,143,144,145,146,147,29,30,31,32,33,34,35,148,36,37,38,149,150,43,151,44,152,153,45,154,48,50,51,155],"tindex":"812f867e-3d8c-11e6-961c-c98dfc3c641c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-1},{"failures":[156,157,158,159,160,161,162,10,80,163,164,165,11,12,166],"tindex":"812fad8f-3d8c-11e6-961c-b54499b8cb10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"element"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"812fad90-3d8c-11e6-961c-c946b5340aa8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[],"tindex":"812fad91-3d8c-11e6-961c-43dcbff5e583","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:346","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.boolean"},"variableMap":{"encodeBlanks":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:367","type":"CtReturnImpl","sourcecode":"return matches"},"status":-2},{"failures":[10,11,12],"tindex":"812fad92-3d8c-11e6-961c-c371f75a252e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:365","type":"CtUnaryOperatorImpl","sourcecode":"rightLength++"},"variableMap":{"rightLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:574","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"P\", \"B\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"812fad93-3d8c-11e6-961c-f70ff6da1b0a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:211","type":"CtInvocationImpl","sourcecode":"code.append('T')"},"variableMap":{"code":"saltString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:75","type":"CtInvocationImpl","sourcecode":"saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())))"},"status":0},{"failures":[55,56,132,133,57,134,135,58,59],"tindex":"812fad94-3d8c-11e6-961c-9716345dfabc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:541","type":"CtInvocationImpl","sourcecode":"currentBranches.clear()"},"variableMap":{"currentBranches":"currentBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:554","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n    branch.finish();\n    result[(index++)] = branch.toString();\n}"},"status":-1},{"failures":[88,89,167,90,14,17,18,19,21],"tindex":"812fad95-3d8c-11e6-961c-f7caca989ff8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:300","type":"CtReturnImpl","sourcecode":"return passwd.toString()"},"status":-1},{"failures":[],"tindex":"812fad96-3d8c-11e6-961c-0911754615c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:116","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.difference(org.apache.commons.codec.language.RefinedSoundex.this, s1, s2)"},"variableMap":{"this":"encoder","s1":"s1","s2":"s2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:86","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.SoundexUtils.differenceEncoded(encoder.encode(s1), encoder.encode(s2))"},"status":-2},{"failures":[],"tindex":"812fad97-3d8c-11e6-961c-7318e7ce58e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:151","type":"CtAssignmentImpl","sourcecode":"rounds = java.lang.Math.max(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, java.lang.Math.min(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, rounds))"},"variableMap":{"org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MAX":"maxCodeLen","org.apache.commons.codec.digest.Sha2Crypt.ROUNDS_MIN":"maxCodeLen","rounds":"maxCodeLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"status":-2},{"failures":[127,128,129],"tindex":"812fd4a8-3d8c-11e6-961c-21e024977a20","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-1},{"failures":[],"tindex":"812fd4a9-3d8c-11e6-961c-d940a4a3a5bc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"status":-2},{"failures":[168,169,170,171,172,26,29,153],"tindex":"812fd4aa-3d8c-11e6-961c-9d5c352f8141","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:88","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; j < len ; i++) {\n    int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}"},"status":-1},{"failures":[10,80,11,12],"tindex":"812fd4ab-3d8c-11e6-961c-ff8316c29fca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:560","type":"CtInvocationImpl","sourcecode":"result.append('L')"},"status":-1},{"failures":[],"tindex":"812fd4ac-3d8c-11e6-961c-719841510db8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"status":-2},{"failures":[173,174,175,176,177,178,127,128,129,179,180,181],"tindex":"812fd4ad-3d8c-11e6-961c-3fc5222074d8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{"ctx1":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-1},{"failures":[],"tindex":"812fd4ae-3d8c-11e6-961c-4f301e44c818","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"status":-2},{"failures":[],"tindex":"812fd4af-3d8c-11e6-961c-af98bc539fe7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"charsetName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:142","type":"CtReturnImpl","sourcecode":"return string.getBytes(charsetName)"},"status":-2},{"failures":[],"tindex":"812fd4b0-3d8c-11e6-961c-155f92ec442b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:502","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return encode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return encode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"));\n}"},"variableMap":{"obj":"ascii","this":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:116","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-2},{"failures":[],"tindex":"812fd4b1-3d8c-11e6-961c-914c5086299a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:102","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('}')"},"status":0},{"failures":[168,169,172],"tindex":"812fd4b2-3d8c-11e6-961c-135b827f63f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:582","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true)"},"variableMap":{"binaryData":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"status":-1},{"failures":[],"tindex":"812fd4b3-3d8c-11e6-961c-3f63896f10eb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"value","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:760","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    result.append('J');\n    index += 2;\n} else {\n    if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n        result.append(\"S\", \"TS\");\n    } else {\n        result.append('S');\n    }\n    index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[],"tindex":"812fd4b4-3d8c-11e6-961c-37833c63eb2c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:423","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[50,51,155,73,130,182,183,74],"tindex":"812fd4b5-3d8c-11e6-961c-2daee3f06e02","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-1},{"failures":[],"tindex":"812ffbc6-3d8c-11e6-961c-a7e197ac4e51","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:140","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"812ffbc7-3d8c-11e6-961c-198efd3647fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"variableMap":{"left":"ii","right":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"ii >>= 1"},"status":-2},{"failures":[],"tindex":"812ffbc8-3d8c-11e6-961c-c3f0816506e6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:300","type":"CtReturnImpl","sourcecode":"return passwd.toString()"},"status":-2},{"failures":[55,56,132,133,57,134,135,58,59],"tindex":"812ffbc9-3d8c-11e6-961c-69d51fe1550f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:255","type":"CtWhileImpl","sourcecode":"while (scanner.hasNextLine()) {\n    currentLine++;\n    final java.lang.String java.lang.String = scanner.nextLine();\n    java.lang.String java.lang.String = rawLine;\n    if (inMultilineComment) {\n        if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n            inMultilineComment = false;\n        } \n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.contains(\"=\")) {\n            final java.lang.String[] java.lang.String[] = line.split(\"=\");\n            if ((parts.int) != 2) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                final java.lang.String java.lang.String = parts[0];\n                final java.lang.String java.lang.String = parts[1];\n                if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n                    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n                } \n                asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n                    final char char = r.java.lang.String.charAt(0);\n                    java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                        ruleMapping.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
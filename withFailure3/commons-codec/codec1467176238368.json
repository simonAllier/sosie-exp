{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":14,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":0,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":59,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":131,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":72,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":111,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":110,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":134,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":10,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":123,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":99,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":122,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":127,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":147,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":65,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":149,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":48,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":92,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":36,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":83,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":37,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":128,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":155,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel__AIDAN_Returns_ADN":69,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":31,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":74,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":56,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":4,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":154,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":117,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":146,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":24,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":143,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":96,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":140,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":101,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":144,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":7,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":17,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":137,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":39,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":40,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":61,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":43,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":148,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":64,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":106,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":9,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":35,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":156,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":86,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":113,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":142,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":85,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":105,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":19,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":62,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":49,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":47,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":108,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":42,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":81,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":73,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":129,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":55,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":100,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":139,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":133,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveVowel_ALESSANDRA_Returns_ALSSNDR":70,"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding":145,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":84,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":136,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":50,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":94,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":103,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":58,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":115,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":112,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":79,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":138,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":78,"org.apache.commons.codec.digest.CryptTest.testCryptWithEmptySalt":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":120,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":119,"org.apache.commons.codec.binary.Base64Test.testConstructors":93,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":75,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":41,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":90,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":60,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":151,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":153,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":44,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":51,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":126,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":26,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":102,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":16,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":150,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":18,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":29,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":27,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":28,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":130,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":107,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":33,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":87,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":45,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":8,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":25,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":114,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":67,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":76,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":118,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":152,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":13,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":57,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":89,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":91},"transformations":[{"failures":[0,1,2],"tindex":"f49f8a83-3db5-11e6-b6ab-f9dd1208e6d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[3,4,5],"tindex":"f49f8a84-3db5-11e6-b6ab-71f8eb09cca6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:52","type":"CtAssignmentImpl","sourcecode":"txt = txt.toLowerCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[2],"tindex":"f49f8a85-3db5-11e6-b6ab-1f50de5b38ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:992","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[],"tindex":"f49fb196-3db5-11e6-b6ab-f59d9d240ba3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:109","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.this.java.lang.String = charset"},"variableMap":{"charset":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"f49fb197-3db5-11e6-b6ab-f92e8d272402","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"variableMap":{"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5":"algorithm","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"status":-1},{"failures":[],"tindex":"f49fb198-3db5-11e6-b6ab-ef9b0cc6cc8a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"line","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:422","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"f49fb199-3db5-11e6-b6ab-e52f161386ef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int]"},"variableMap":{"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:176","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[26,27,28,29,30,31],"tindex":"f49fb19a-3db5-11e6-b6ab-03c86b8cd45b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:469","type":"CtInvocationImpl","sourcecode":"sb.append('|')"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:202","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[32,33,34,35,36,37],"tindex":"f49fb19b-3db5-11e6-b6ab-e58633fd6ff3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtIfImpl","sourcecode":"if (!(boxContent.contains(\"[\"))) {\n    final boolean boolean = boxContent.startsWith(\"^\");\n    if (negate) {\n        boxContent = boxContent.substring(1);\n    } \n    final java.lang.String java.lang.String = boxContent;\n    final boolean boolean = !negate;\n    if (startsWith && endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n            }\n        };\n    } \n} "},"status":-1},{"failures":[32,33,34,35,36,37],"tindex":"f49fd8ac-3db5-11e6-b6ab-c55a8c8b6ef5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"status":-1},{"failures":[38,39,40,41,42,43,44],"tindex":"f49fd8ad-3db5-11e6-b6ab-d1bf2b06562d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:104","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"f49fd8ae-3db5-11e6-b6ab-d7282896cba4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:142","type":"CtReturnImpl","sourcecode":"return string.getBytes(charsetName)"},"status":-2},{"failures":[],"tindex":"f49fd8af-3db5-11e6-b6ab-e163fa4ad7e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:102","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"why\", \"Why\")"},"status":0},{"failures":[45,46],"tindex":"f49fd8b0-3db5-11e6-b6ab-7b62a9c9ff06","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:244","type":"CtUnaryOperatorImpl","sourcecode":"y++"},"variableMap":{"y":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"status":-1},{"failures":[],"tindex":"f49fd8b1-3db5-11e6-b6ab-7d0cee546f51","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"status":-2},{"failures":[47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"f49fd8b2-3db5-11e6-b6ab-5f6aba1b1a5c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:226","type":"CtAssignmentImpl","sourcecode":"name2 = cleanName(name2)"},"status":-1},{"failures":[],"tindex":"f49fd8b3-3db5-11e6-b6ab-637e2306f827","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"status":-2},{"failures":[],"tindex":"f49fffc4-3db5-11e6-b6ab-57d16bde450a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:363","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[],"tindex":"f49fffc5-3db5-11e6-b6ab-6d8af6dfe285","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"status":0},{"failures":[],"tindex":"f49fffc6-3db5-11e6-b6ab-cd92f535e974","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"source","txt":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:433","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"f49fffc7-3db5-11e6-b6ab-7720d88b252b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[61],"tindex":"f49fffc8-3db5-11e6-b6ab-5b0f97f54d1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[],"tindex":"f49fffc9-3db5-11e6-b6ab-071ef8f1e35a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"status":-2},{"failures":[62,63,64,0,1],"tindex":"f49fffca-3db5-11e6-b6ab-3d4056d4fc73","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-1},{"failures":[65,66],"tindex":"f49fffcb-3db5-11e6-b6ab-e9abbb4caacc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"name","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:136","type":"CtAssignmentImpl","sourcecode":"name = removeVowels(name)"},"status":-1},{"failures":[67,64,0,1,2],"tindex":"f49fffcc-3db5-11e6-b6ab-f310ea8f0f00","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:637","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[68],"tindex":"f4a026dd-3db5-11e6-b6ab-87f2ec1fda31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:673","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:285","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[49,69,70,71],"tindex":"f4a026de-3db5-11e6-b6ab-4dcf4acd8a37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"name","remainder":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"status":-1},{"failures":[38,72,39,73,74,75,41,76,77,78,79,80,81],"tindex":"f4a026df-3db5-11e6-b6ab-abbe07e93029","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)"},"variableMap":{"resizedBytes":"bytes","bigBytes":"bytes","len":"i","startSrc":"i","startDst":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n}"},"status":-1},{"failures":[82,83],"tindex":"f4a026e0-3db5-11e6-b6ab-03ce05885a5c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"rounds","cnt":"rounds"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:150","type":"CtAssignmentImpl","sourcecode":"rounds = java.lang.Integer.parseInt(m.group(3))"},"status":-1},{"failures":[84,82,45,85,83,46,86,87],"tindex":"f4a026e1-3db5-11e6-b6ab-77119ba41f5d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"variableMap":{"altCtx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:166","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"f4a026e2-3db5-11e6-b6ab-6f54b5060c07","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:301","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:258","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"status":-2},{"failures":[84,82,45,85,83,46,86,87],"tindex":"f4a026e3-3db5-11e6-b6ab-4d1492b9d852","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[],"tindex":"f4a026e4-3db5-11e6-b6ab-bd77fdb33569","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:340","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:335","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL decoded\"));\n}"},"status":-2},{"failures":[62,63,88,64,0,89,1,2],"tindex":"f4a04df5-3db5-11e6-b6ab-c54933283b6b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-1},{"failures":[],"tindex":"f4a04df6-3db5-11e6-b6ab-81c18705e1e6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":0},{"failures":[],"tindex":"f4a04df7-3db5-11e6-b6ab-cdece15cce80","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:382","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"status":0},{"failures":[],"tindex":"f4a04df8-3db5-11e6-b6ab-29652a7c7d87","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"maxLength","e0":"maxLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:988","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length())"},"status":-2},{"failures":[90],"tindex":"f4a04df9-3db5-11e6-b6ab-85ef98202584","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"tmp","offset":"i","iValue":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[],"tindex":"f4a04dfa-3db5-11e6-b6ab-67bb2f37d875","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:496","type":"CtForImpl","sourcecode":"for (int int = 0 ; index < (input.length()) ; index++) {\n    final char char = input.charAt(index);\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    final java.lang.String java.lang.String = input.substring(index);\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>.get(ch);\n    if (rules == null) {\n        continue;\n    } \n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch> = branching ? new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch>() : java.util.Collections.java.util.Collections.java.util.List;\n    for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n        if (rule.matches(inputContext)) {\n            if (branching) {\n                nextBranches.clear();\n            } \n            final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n            final boolean boolean = ((replacements.int) > 1) && branching;\n            for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n                for (final java.lang.String java.lang.String : replacements) {\n                    final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                    final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                    nextBranch.processNextReplacement(nextReplacement, force);\n                    if (branching) {\n                        nextBranches.add(nextBranch);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            if (branching) {\n                currentBranches.clear();\n                currentBranches.addAll(nextBranches);\n            } \n            index += (rule.getPatternLength()) - 1;\n            break;\n        } \n    }\n    lastChar = ch;\n}"},"status":-2},{"failures":[91,92],"tindex":"f4a04dfb-3db5-11e6-b6ab-61b66cbb5015","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"status":-1},{"failures":[93],"tindex":"f4a04dfc-3db5-11e6-b6ab-730cbd1573d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:281","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"))"},"status":-1},{"failures":[28,94,95,96,31,97,98],"tindex":"f4a04dfd-3db5-11e6-b6ab-2f9843ab66e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"variableMap":{"builder":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[34,35,36,37],"tindex":"f4a04dfe-3db5-11e6-b6ab-03bbd3cb9e86","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:213","type":"CtAssignmentImpl","sourcecode":"patternLength = pattern.length()"},"status":-1},{"failures":[],"tindex":"f4a0750f-3db5-11e6-b6ab-d59ff9713ee5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"i","to":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"status":-2},{"failures":[],"tindex":"f4a07510-3db5-11e6-b6ab-dd8afea31373","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:141","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-2},{"failures":[99],"tindex":"f4a07511-3db5-11e6-b6ab-6bc57676deb5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-1},{"failures":[100,101,102],"tindex":"f4a07512-3db5-11e6-b6ab-cfd1c62eca49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"status":-1},{"failures":[],"tindex":"f4a07513-3db5-11e6-b6ab-4d542969a74a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_A"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[0,1,2],"tindex":"f4a07514-3db5-11e6-b6ab-65a0cfc10627","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":-1},{"failures":[38,72,39,40,73,74,75,41,76,77,78,90,79,80,81],"tindex":"f4a07515-3db5-11e6-b6ab-f1063fbf52e3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"variableMap":{"b":"org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR","org.apache.commons.codec.net.URLCodec.RADIX":"i","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[64,1,2],"tindex":"f4a07516-3db5-11e6-b6ab-01e8717b8785","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"status":-1},{"failures":[64,0,1,2],"tindex":"f4a07517-3db5-11e6-b6ab-8dc1d449cede","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:346","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"f4a07518-3db5-11e6-b6ab-79141d9d3717","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"variableMap":{"algorithm":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wh3\", \"Wh3\")"},"status":-2},{"failures":[32,103,104,33,34,35,36,37],"tindex":"f4a07519-3db5-11e6-b6ab-cb6d2ddcbc35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[105,106],"tindex":"f4a09c2a-3db5-11e6-b6ab-e3e53da6fa0d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:90","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-1},{"failures":[],"tindex":"f4a09c2b-3db5-11e6-b6ab-11d81b97a3f5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"digit","name2Size":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-2},{"failures":[],"tindex":"f4a09c2c-3db5-11e6-b6ab-cd828959c0f2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"variableMap":{"a":"length","t":"length","n":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:236","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"f4a09c2d-3db5-11e6-b6ab-bb53e6ede1d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"variableMap":{"boxContent":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:385","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase()"},"status":-2},{"failures":[],"tindex":"f4a09c2e-3db5-11e6-b6ab-c5006d58ffc6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:221","type":"CtLocalVariableImpl","sourcecode":"int int = keyLen"},"variableMap":{"keyLen":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:343","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[],"tindex":"f4a09c2f-3db5-11e6-b6ab-bfbe329c1a84","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"variableMap":{"replacedName":"salt","dc":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"status":-2},{"failures":[107,108,109,110,111,112,113,114,115,116],"tindex":"f4a09c30-3db5-11e6-b6ab-3fea72af12bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"nextReplacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-1},{"failures":[117,32,118,103,104,119,120,33,121,122,123,124,125,126,34,35,36,37],"tindex":"f4a09c31-3db5-11e6-b6ab-3b5c6335bc08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:229","type":"CtInvocationImpl","sourcecode":"rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")))"},"variableMap":{"rs":"rs","rt":"rt","s":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:223","type":"CtInvocationImpl","sourcecode":"rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)))"},"status":-1},{"failures":[],"tindex":"f4a09c32-3db5-11e6-b6ab-abf948addb81","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"key","txt":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:617","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"f4a09c33-3db5-11e6-b6ab-e7cbbfc800df","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"i","y":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} "},"status":-2},{"failures":[],"tindex":"f4a0c344-3db5-11e6-b6ab-5f7efe7078c7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"modulus","to":"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:378","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.int = ((context.int) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":-2},{"failures":[38,72,39,40,75,127,78,90,79,128],"tindex":"f4a0c345-3db5-11e6-b6ab-233fa06cf793","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:330","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"f4a0c346-3db5-11e6-b6ab-c3260fb5cca9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR","b":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR","tmp":"bytes","i":"i","org.apache.commons.codec.net.QCodec.UNDERSCORE":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtIfImpl","sourcecode":"if (b == '+') {\n    buffer.write(' ');\n} else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n    try {\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n    }\n} else {\n    buffer.write(b);\n}"},"status":-2},{"failures":[91,92],"tindex":"f4a0c347-3db5-11e6-b6ab-f997053d2072","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)"},"variableMap":{"left":"right","right":"left","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"status":-1},{"failures":[],"tindex":"f4a0c348-3db5-11e6-b6ab-13b7cabfe570","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"variableMap":{"currentLinePos":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:493","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[129,0,1,2],"tindex":"f4a0c349-3db5-11e6-b6ab-3b7819efda1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[107,108,109,110,111,112,113,114,115],"tindex":"f4a0c34a-3db5-11e6-b6ab-67a27972ea6c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:235","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DaitchMokotoffSoundex.parseRules(scanner, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>>, org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>)"},"status":-1},{"failures":[],"tindex":"f4a0c34b-3db5-11e6-b6ab-4179ca5e7778","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('^')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"status":0},{"failures":[48,49,130,52,131,132,55,59,133,134,135],"tindex":"f4a0c34c-3db5-11e6-b6ab-3f15cf701ddd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:321","type":"CtAssignmentImpl","sourcecode":"name2Char[i] = ' '"},"status":-1},{"failures":[],"tindex":"f4a0c34d-3db5-11e6-b6ab-8bf0b1e0193c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:185","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd2Digest().digest(data)"},"status":-2},{"failures":[],"tindex":"f4a0c34e-3db5-11e6-b6ab-cb5e193699d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"b","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:256","type":"CtAssignmentImpl","sourcecode":"context.byte[] = b"},"status":-2},{"failures":[3,4,5,136],"tindex":"f4a0c34f-3db5-11e6-b6ab-41c95ed94b37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[],"tindex":"f4a0ea60-3db5-11e6-b6ab-e509d29f73d4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:333","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-2},{"failures":[84,85,86,87,91,92,137,138,139,140,141,142],"tindex":"f4a0ea61-3db5-11e6-b6ab-57a0b5cb887a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"key","txt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:149","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(key.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset), salt)"},"status":-1},{"failures":[],"tindex":"f4a0ea62-3db5-11e6-b6ab-c90135e41cbe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(1)"},"status":-2},{"failures":[1,2],"tindex":"f4a0ea63-3db5-11e6-b6ab-6314b6f101f6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[],"tindex":"f4a0ea64-3db5-11e6-b6ab-a93ea49a604f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"f4a0ea65-3db5-11e6-b6ab-e92a73356e68","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"variableMap":{"accentedWord":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:160","type":"CtLocalVariableImpl","sourcecode":"final int int = name.length()"},"status":-2},{"failures":[],"tindex":"f4a0ea66-3db5-11e6-b6ab-abf5fc5ad071","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[143,144],"tindex":"f4a0ea67-3db5-11e6-b6ab-f7c8787f0a01","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"code = '2'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"status":-1},{"failures":[101,145,146,147,102,148],"tindex":"f4a0ea68-3db5-11e6-b6ab-cfa33da9ab25","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:403","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:247","type":"CtTryImpl","sourcecode":"try {\n    return encode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.EncoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[149,150],"tindex":"f4a0ea69-3db5-11e6-b6ab-c38edda6894f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"variableMap":{"cs1":"cs1","cs2":"cs1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:71","type":"CtIfImpl","sourcecode":"if (cs1 == cs2) {\n    return true;\n} "},"status":-1},{"failures":[107,108,109,110,111,112,113,114,115,151,152,153,116],"tindex":"f4a0ea6a-3db5-11e6-b6ab-1dca4834f0c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:350","type":"CtIfImpl","sourcecode":"if (lastCode == '/') {\n    continue;\n} "},"variableMap":{"lastCode":"patternKey"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} "},"status":-1},{"failures":[],"tindex":"f4a0ea6b-3db5-11e6-b6ab-f12521f3583b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:376","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n    code = '8';\n} else {\n    code = '4';\n}"},"variableMap":{"code":"nextChar","lastChar":"lastChar","nextChar":"nextChar","org.apache.commons.codec.language.ColognePhonetic.AHOUKQX":"org.apache.commons.codec.language.ColognePhonetic.AHKLOQRUX","org.apache.commons.codec.language.ColognePhonetic.SZ":"org.apache.commons.codec.language.ColognePhonetic.SZ"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:338","type":"CtWhileImpl","sourcecode":"while (rightLength > 0) {\n    chr = input.removeNext();\n    if ((rightLength = input.length()) > 0) {\n        nextChar = input.getNextChar();\n    } else {\n        nextChar = '-';\n    }\n    if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '0';\n    } else if (((chr == 'H') || (chr < 'A')) || (chr > 'Z')) {\n        if (lastCode == '/') {\n            continue;\n        } \n        code = '-';\n    } else if ((chr == 'B') || ((chr == 'P') && (nextChar != 'H'))) {\n        code = '1';\n    } else if (((chr == 'D') || (chr == 'T')) && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n        code = '2';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '3';\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '4';\n    } else if ((chr == 'X') && (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)))) {\n        code = '4';\n        input.addLeft('S');\n        rightLength++;\n    } else if ((chr == 'S') || (chr == 'Z')) {\n        code = '8';\n    } else if (chr == 'C') {\n        if (lastCode == '/') {\n            if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n                code = '4';\n            } else {\n                code = '8';\n            }\n        } else {\n            if ((org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], lastChar)) || (!(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)))) {\n                code = '8';\n            } else {\n                code = '4';\n            }\n        }\n    } else if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], chr)) {\n        code = '8';\n    } else if (chr == 'R') {\n        code = '7';\n    } else if (chr == 'L') {\n        code = '5';\n    } else if ((chr == 'M') || (chr == 'N')) {\n        code = '6';\n    } else {\n        code = chr;\n    }\n    if ((code != '-') && ((((lastCode != code) && ((code != '0') || (lastCode == '/'))) || (code < '0')) || (code > '8'))) {\n        output.addRight(code);\n    } \n    lastChar = chr;\n    lastCode = code;\n}"},"status":-2},{"failures":[],"tindex":"f4a1117c-3db5-11e6-b6ab-7d446478bfa8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"variableMap":{"singleLetter":"line","replacedName":"line","dc":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:273","type":"CtAssignmentImpl","sourcecode":"line = line.substring(0, cmtI)"},"status":-2},{"failures":[],"tindex":"f4a1117d-3db5-11e6-b6ab-25f0b645541e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:657","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern"},"variableMap":{"lContext":"org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:526","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern"},"status":-2},{"failures":[64,1,2],"tindex":"f4a1117e-3db5-11e6-b6ab-377eba7e6300","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"f4a1117f-3db5-11e6-b6ab-172cfbac68ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:301","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:209","type":"CtLocalVariableImpl","sourcecode":"final java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>>.get(java.lang.CharSequence.subSequence(int, ((int) + patternLength)))"},"status":-2},{"failures":[154,155],"tindex":"f4a11180-3db5-11e6-b6ab-915618271514","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"bits","l_ascii":"l_ascii","bits":"bits"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[],"tindex":"f4a11181-3db5-11e6-b6ab-8de509809c8c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":0},{"failures":[63,64,0,1,2],"tindex":"f4a11182-3db5-11e6-b6ab-7187b6518ba1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"variableMap":{"base64":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:847","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")))"},"status":-1},{"failures":[26,28,29,30,31],"tindex":"f4a11183-3db5-11e6-b6ab-d1a472603041","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:202","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[62,63,64,0,1],"tindex":"f4a11184-3db5-11e6-b6ab-f3f89184dbbe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:952","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-1},{"failures":[91,92],"tindex":"f4a11185-3db5-11e6-b6ab-376b9c832ad3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"status":-1},{"failures":[156],"tindex":"f4a11186-3db5-11e6-b6ab-6d3862f552de","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:235","type":"CtAssignmentImpl","sourcecode":"name1 = removeDoubleConsonants(name1)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
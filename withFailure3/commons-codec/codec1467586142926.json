{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":129,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":61,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":165,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":95,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":199,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":8,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":6,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":7,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":9,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":176,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":96,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":123,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":212,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":103,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":27,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":140,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":191,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":170,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":19,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":18,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":156,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":155,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":35,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":102,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":171,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":20,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":36,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":37,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":144,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":158,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":213,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":81,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":115,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":138,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":161,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":135,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":55,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":94,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":127,"org.apache.commons.codec.language.SoundexTest.testB650":5,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":166,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":50,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":134,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":200,"org.apache.commons.codec.language.SoundexTest.testNewInstance":13,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":190,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":181,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":84,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":152,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":98,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":185,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":143,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":92,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":164,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":220,"org.apache.commons.codec.language.NysiisTest.testDropBy":101,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":54,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":159,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":198,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":214,"org.apache.commons.codec.binary.Base64Test.testUUID":32,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":64,"org.apache.commons.codec.binary.Base64Test.testSingletons":42,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":196,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":105,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":139,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":82,"org.apache.commons.codec.binary.Base64Test.testPairs":31,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":104,"org.apache.commons.codec.language.NysiisTest.testRule7":100,"org.apache.commons.codec.language.NysiisTest.testRule6":99,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":193,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":197,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":216,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":58,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":219,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":24,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":60,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":210,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":86,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":157,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":119,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":40,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":67,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":41,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":147,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":93,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":107,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":1,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":78,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":90,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":211,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":163,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":126,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":74,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":183,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":218,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":91,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":174,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":186,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":79,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":168,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":113,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":89,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":118,"org.apache.commons.codec.binary.HexTest.testCustomCharset":178,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":172,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":53,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":187,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":52,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":117,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":121,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":206,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":80,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":75,"org.apache.commons.codec.binary.Base64Test.testTriplets":182,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":114,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":132,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":130,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":133,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":153,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":217,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":72,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":38,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":142,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":149,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":208,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":88,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":148,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":201,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":15,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":22,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":16,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":116,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":120,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":63,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":97,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":160,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":188,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":189,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":215,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":39,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":180,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":76,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":128,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":167,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":131,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":51,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":68,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":108,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":21,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":0,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":47,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":221,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":169,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":87,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":146,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":65,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":124,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":2,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":3,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":4,"org.apache.commons.codec.binary.HexTest.testDencodeEmpty":177,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":83,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":141,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":175,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":57,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":136,"org.apache.commons.codec.binary.Base64Test.testBase64":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":205,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":71,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":109,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":184,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":150,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":204,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":203,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":192,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":45,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":77,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":162,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":173,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":112,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":29,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":145,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":85,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":11,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":66,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":73,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":46,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":110,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":195,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":49,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":209,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":26,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":106,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":151,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":122,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":43,"org.apache.commons.codec.language.SoundexTest.testDifference":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":56,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":194,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":202,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":70,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":59,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":33},"transformations":[{"failures":[],"tindex":"570a3d16-4170-11e6-8ca5-d11bba0efa1e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"o2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:79","type":"CtTryImpl","sourcecode":"try {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final java.lang.Comparable<java.lang.Comparable<?>> java.lang.Comparable<java.lang.Comparable<?>> = ((java.lang.Comparable<java.lang.Comparable<?>>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o1)));\n    final java.lang.Comparable<?> java.lang.Comparable<?> = ((java.lang.Comparable<?>)(org.apache.commons.codec.StringEncoderComparator.this.org.apache.commons.codec.StringEncoder.encode(o2)));\n    compareCode = s1.compareTo(s2);\n} catch (final org.apache.commons.codec.EncoderException ee) {\n    compareCode = 0;\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"570b9ca7-4170-11e6-8ca5-2dcc9ec26cb6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:188","type":"CtAssignmentImpl","sourcecode":"last = '*'"},"variableMap":{"last":"mapped"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:273","type":"CtAssignmentImpl","sourcecode":"mapped = getMappingCode(str, (incount++))"},"status":-1},{"failures":[],"tindex":"570b9ca8-4170-11e6-8ca5-5dae6fd49564","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"inPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:381","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"status":-2},{"failures":[],"tindex":"570b9ca9-4170-11e6-8ca5-4b1d2c9199d2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"variableMap":{"encodeSize":"index","decodeSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:621","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":0},{"failures":[20,21,22,23,24,25,26,27,28],"tindex":"570bc3ba-4170-11e6-8ca5-e97d55db590c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:617","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512","key":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"tindex":"570bc3bb-4170-11e6-8ca5-afb5d557ebd3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:429","type":"CtIfImpl","sourcecode":"if (context.boolean) {\n    return ;\n} "},"status":-2},{"failures":[49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"570beacc-4170-11e6-8ca5-c567c1d337ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"variableMap":{"ph":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:271","type":"CtLocalVariableImpl","sourcecode":"final int int = line.indexOf(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)"},"status":-1},{"failures":[],"tindex":"570beacd-4170-11e6-8ca5-7b003febe921","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"bigBytes","tempResult":"bigBytes","saltLen":"startSrc","cp":"startSrc"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:768","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len)"},"status":-2},{"failures":[],"tindex":"570beace-4170-11e6-8ca5-952077cfaed6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"variableMap":{"outLen":"m"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"status":-2},{"failures":[62],"tindex":"570beacf-4170-11e6-8ca5-cbefa009a04f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:335","type":"CtIfImpl","sourcecode":"if (!(obj instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base-N encode is not a byte[]\");\n} "},"status":-1},{"failures":[63,64,65,66,67,68,69],"tindex":"570c11e0-4170-11e6-8ca5-a54c0c4f64a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:268","type":"CtIfImpl","sourcecode":"if ((i % 7) != 0) {\n    ctx1.update(keyBytes);\n} "},"status":-1},{"failures":[70,71],"tindex":"570c11e1-4170-11e6-8ca5-f3b3440b95b3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"570c11e2-4170-11e6-8ca5-25d5aa902e74","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:249","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"570c11e3-4170-11e6-8ca5-bf07bced085c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"variableMap":{"b":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-1},{"failures":[99,100,101],"tindex":"570c38f4-4170-11e6-8ca5-533d61eeeb05","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:298","type":"CtAssignmentImpl","sourcecode":"lastChar = key.charAt(((key.length()) - 1))"},"status":-1},{"failures":[],"tindex":"570c38f5-4170-11e6-8ca5-27d6be5265df","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"variableMap":{"byteArray":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"570e0db6-4170-11e6-8ca5-d5ffdf8bc767","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"status":0},{"failures":[29,30,31,32,33,34,35,36,37,102,38,39,40,41,42,43,44,45,46,47,48,74,75,76,79,80,86,103,104,105,106,107,108,109,110,111,112],"tindex":"570e34c7-4170-11e6-8ca5-2174b7e00142","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:461","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) != 0)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 1 :\n            break;\n        case 2 :\n            context.int = (context.int) >> 4;\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            context.int = (context.int) >> 2;\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-1},{"failures":[113,114],"tindex":"570e34c8-4170-11e6-8ca5-db312c131047","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"status":-1},{"failures":[],"tindex":"570e34c9-4170-11e6-8ca5-b9bac075ceef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[115,116,117,118,119,120,121,122],"tindex":"570e34ca-4170-11e6-8ca5-272fbb4fd442","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"variableMap":{"bitlen":"org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int]"},"status":-1},{"failures":[],"tindex":"570e34cb-4170-11e6-8ca5-879f27b657a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"org.apache.commons.codec.binary.Base64.MASK_6BITS","y":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:344","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-2},{"failures":[70,71],"tindex":"570e5bdc-4170-11e6-8ca5-a9a2fd629489","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:375","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[],"tindex":"570e5bdd-4170-11e6-8ca5-7ba0c42946d8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:172","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementBeforeVowel.split(\"\\\\|\")"},"status":-2},{"failures":[123,23,25,26,124,125,126,127],"tindex":"570e5bde-4170-11e6-8ca5-db5bb5bc9c14","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"variableMap":{"altCtx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:251","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"570e5bdf-4170-11e6-8ca5-2365ef010632","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"status":-2},{"failures":[128,129,70,71],"tindex":"570e5be0-4170-11e6-8ca5-bfc8901c3309","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[],"tindex":"570e82f1-4170-11e6-8ca5-2f0dd8b6a8c6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:365","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 1) | (c << 27)"},"variableMap":{"c":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"status":-2},{"failures":[130,131,132,133],"tindex":"570e82f2-4170-11e6-8ca5-dd5d3ca79610","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"variableMap":{"lCon":"str","sb":"phonemeText"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:125","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(str)"},"status":-1},{"failures":[128,70,71],"tindex":"570e82f3-4170-11e6-8ca5-e3b660ef4936","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:366","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-1},{"failures":[],"tindex":"570e82f4-4170-11e6-8ca5-1bb667607ff8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":0},{"failures":[],"tindex":"570f6d55-4170-11e6-8ca5-3734e2e52a19","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:219","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"570f6d56-4170-11e6-8ca5-093d8e220557","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"variableMap":{"value":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"status":-2},{"failures":[113,114],"tindex":"570f6d57-4170-11e6-8ca5-2981cbe1aa6e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"variableMap":{"el":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:322","type":"CtReturnImpl","sourcecode":"return value < 0 ? value + 256 : value"},"status":-1},{"failures":[],"tindex":"570f6d58-4170-11e6-8ca5-932941dc17e9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"variableMap":{"basedCodec":"baseNCodec","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-2},{"failures":[],"tindex":"570f9469-4170-11e6-8ca5-2d377ff412c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"inwd","index":"length","element":"inwd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}"},"status":-2},{"failures":[123,124,125,126,127],"tindex":"5710099a-4170-11e6-8ca5-df2501ca7cf9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"status":-1},{"failures":[],"tindex":"571030ab-4170-11e6-8ca5-8ddd63733f30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:379","type":"CtForEachImpl","sourcecode":"for (char char : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n    } \n    sb.append(ch);\n}"},"status":-2},{"failures":[],"tindex":"571030ac-4170-11e6-8ca5-e5fcf532bc1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:500","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = regex.startsWith(\"^\")"},"variableMap":{"regex":"content"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:546","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.endsWith(\"]\")"},"status":0},{"failures":[134,135,31,32,33,34,35,36,37,136,102,38,137,42,138,43,139,44,140,141,142,47,75,80,86,143,144,145,146,108,109,110,111,147],"tindex":"571030ad-4170-11e6-8ca5-2fab2bcaad24","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:337","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[saltLen]"},"variableMap":{"saltLen":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:342","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[148,149,150,151],"tindex":"571030ae-4170-11e6-8ca5-3338d9ccf96e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[152],"tindex":"571030af-4170-11e6-8ca5-b39fc65685e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"status":-1},{"failures":[23,25,26],"tindex":"571057c0-4170-11e6-8ca5-4f241c7f949d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"status":-1},{"failures":[153],"tindex":"571057c1-4170-11e6-8ca5-97c04b2a6984","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:122","type":"CtIfImpl","sourcecode":"if (ascii instanceof char[]) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((char[])(ascii)));\n} "},"status":-1},{"failures":[],"tindex":"571057c2-4170-11e6-8ca5-738394eb6b9e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:199","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    final java.util.Random java.util.Random = new java.util.Random();\n    final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int;\n    salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)]);\n} else if (!(salt.matches(((\"^[\" + (org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String)) + \"]{2,}$\")))) {\n    throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n} "},"variableMap":{"salt":"str","org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS":"chars","length":"i","org.apache.commons.codec.digest.B64.B64T":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:49","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isLetter(str.charAt(i))) {\n    chars[(count++)] = str.charAt(i);\n} "},"status":-2},{"failures":[],"tindex":"571057c3-4170-11e6-8ca5-3d81a7a373b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"blocksize","lineSeparator":"sBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:356","type":"CtForImpl","sourcecode":"for (int int = 0 ; i <= (rounds - 1) ; i++) {\n    ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm);\n    if ((i & 1) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } else {\n        ctx.update(altResult, 0, blocksize);\n    }\n    if ((i % 3) != 0) {\n        ctx.update(sBytes, 0, saltLen);\n    } \n    if ((i % 7) != 0) {\n        ctx.update(pBytes, 0, keyLen);\n    } \n    if ((i & 1) != 0) {\n        ctx.update(altResult, 0, blocksize);\n    } else {\n        ctx.update(pBytes, 0, keyLen);\n    }\n    altResult = ctx.digest();\n}"},"status":-2},{"failures":[],"tindex":"571057c4-4170-11e6-8ca5-6fa0288f2d4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"variableMap":{"code":"chr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:339","type":"CtAssignmentImpl","sourcecode":"chr = input.removeNext()"},"status":-2},{"failures":[123,23,25,26,124,125,126,127],"tindex":"571057c5-4170-11e6-8ca5-758668054172","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:371","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":-1},{"failures":[123,125],"tindex":"57107ed6-4170-11e6-8ca5-d1f78ca85322","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:150","type":"CtAssignmentImpl","sourcecode":"rounds = java.lang.Integer.parseInt(m.group(3))"},"status":-1},{"failures":[],"tindex":"57107ed7-4170-11e6-8ca5-7b799f21563b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:435","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim()"},"variableMap":{"org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE":"name","line":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"status":-2},{"failures":[154,155,156,157,158,159,160,161],"tindex":"57107ed8-4170-11e6-8ca5-d74d77046063","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:241","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-1},{"failures":[162,163,130,131,132,133],"tindex":"57107ed9-4170-11e6-8ca5-97ed25f24f8b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"variableMap":{"languages":"ls","ls":"ls","sl":"sl"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"status":-1},{"failures":[],"tindex":"57107eda-4170-11e6-8ca5-f5e1e1cfafed","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index","org.apache.commons.codec.net.URLCodec.RADIX":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:190","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 2))"},"status":-2},{"failures":[],"tindex":"57107edb-4170-11e6-8ca5-ef57f3018fab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:157","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[boolean ? 4096 : 8192]"},"status":-2},{"failures":[],"tindex":"57107edc-4170-11e6-8ca5-430ded8a08f0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:225","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-2},{"failures":[164,165,166,167,168,169,170,171,172,173,174],"tindex":"5710a5ed-4170-11e6-8ca5-b32a260bbac0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"i","l_ascii":"name2Char","bits":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"status":-1},{"failures":[],"tindex":"5710a5ee-4170-11e6-8ca5-617cad4021d5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[162,175,176,163,130,131,132,133],"tindex":"5710a5ef-4170-11e6-8ca5-55807b243590","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"5710a5f0-4170-11e6-8ca5-07da7738634c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:111","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.language.bm.Languages.LanguageSet = languages"},"status":-2},{"failures":[],"tindex":"5710a5f1-4170-11e6-8ca5-93b72bd26b4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:67","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes)"},"variableMap":{"keyBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:46","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Crypt.crypt(keyBytes, null)"},"status":0},{"failures":[],"tindex":"5710a5f2-4170-11e6-8ca5-b7ab3589f142","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"status":-2},{"failures":[177,178,179,180,29,32,141],"tindex":"5710cc03-4170-11e6-8ca5-b9fb62b21eed","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"out","key":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"status":-1},{"failures":[49,50,51,52,53,54,55,56,57],"tindex":"5710cc04-4170-11e6-8ca5-7130d73ff745","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:317","type":"CtAssignmentImpl","sourcecode":"rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>()"},"variableMap":{"rules":"rules"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:318","type":"CtInvocationImpl","sourcecode":"ruleMapping.put(patternKey, rules)"},"status":-1},{"failures":[113,114],"tindex":"5710cc05-4170-11e6-8ca5-c74470e0b836","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"d","len":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:373","type":"CtLocalVariableImpl","sourcecode":"final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))])"},"status":-1},{"failures":[181,129,70,71],"tindex":"57114136-4170-11e6-8ca5-1796525e5d35","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:271","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[],"tindex":"57114137-4170-11e6-8ca5-a3af2401422d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:450","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"org.apache.commons.codec.binary.Base64.MASK_6BITS","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:389","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[182,134,32,33,183,34,35,36,37,136,102,38,184,137,138,43,139,44,140,141,185,142,47,75,186,80,86,143,144,145,146,108,109,110,111,147],"tindex":"57116848-4170-11e6-8ca5-a7bff3d66edf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[len >> 1]"},"variableMap":{"len":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:379","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"57116849-4170-11e6-8ca5-abfb0aa25cf3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"lineLength","to":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:519","type":"CtIfImpl","sourcecode":"if ((int) > 0) {\n    len += (((len + (int)) - 1) / (int)) * (int);\n} "},"status":-2},{"failures":[119],"tindex":"5711684a-4170-11e6-8ca5-fffffd81811b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"variableMap":{"resizedBytes":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:552","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key), valueToDigest).doFinal()"},"status":-1},{"failures":[113,114],"tindex":"5711684b-4170-11e6-8ca5-e97a6882ec5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"t","d":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = (t << 16) | (s & 65535)"},"status":-1},{"failures":[187,188,189,190,191,192,193,194,195],"tindex":"5712eeec-4170-11e6-8ca5-b32732563cef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:510","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:450","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-1},{"failures":[],"tindex":"5712eeed-4170-11e6-8ca5-5fd03954c9ba","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"incl"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:436","type":"CtIfImpl","sourcecode":"if (incl.contains(\" \")) {\n    throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n} else {\n    lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n}"},"status":0},{"failures":[],"tindex":"5712eeee-4170-11e6-8ca5-a7d65178d4d1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"status":-2},{"failures":[196,197,198,199,200],"tindex":"5712eeef-4170-11e6-8ca5-edf379bc3280","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:174","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    if (b == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        hasUnderscores = true;\n        break;\n    } \n}"},"status":-1},{"failures":[154,158],"tindex":"5712eef0-4170-11e6-8ca5-8bd2f72d7749","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:351","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"5712eef1-4170-11e6-8ca5-3dcdbd7f21c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:303","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int"},"status":-2},{"failures":[201,162,202,175,176,203,204,163,205,206,207,208,209,210,130,131,132,133],"tindex":"57131602-4170-11e6-8ca5-7555e94fa8db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[],"tindex":"57133d13-4170-11e6-8ca5-6bf5b33bd53e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:155","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[],"tindex":"57133d14-4170-11e6-8ca5-c5b609fcc258","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":-2},{"failures":[],"tindex":"57133d15-4170-11e6-8ca5-bf8a11fbca7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"57133d16-4170-11e6-8ca5-c3346d4fa6a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"variableMap":{"txt":"pattern"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:170","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"status":-2},{"failures":[211,212],"tindex":"57133d17-4170-11e6-8ca5-0faaa773c698","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"variableMap":{"pArray":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:375","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest().digest(data)"},"status":-1},{"failures":[123,125],"tindex":"57133d18-4170-11e6-8ca5-d17ee496f906","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:426","type":"CtInvocationImpl","sourcecode":"buffer.append(rounds)"},"status":-1},{"failures":[],"tindex":"57136429-4170-11e6-8ca5-257b9a0de37c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:317","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be URL encoded\"))"},"variableMap":{"obj":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[213,214,215,148,216,149,150,151],"tindex":"5713642a-4170-11e6-8ca5-417615fb7264","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:125","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String)"},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"txt","txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:97","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"gh\", \"22\")"},"status":-1},{"failures":[],"tindex":"5713642b-4170-11e6-8ca5-4711f976203b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"5713642c-4170-11e6-8ca5-b7e2df92b53f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:550","type":"CtIfImpl","sourcecode":"if (!(boxContent.contains(\"[\"))) {\n    final boolean boolean = boxContent.startsWith(\"^\");\n    if (negate) {\n        boxContent = boxContent.substring(1);\n    } \n    final java.lang.String java.lang.String = boxContent;\n    final boolean boolean = !negate;\n    if (startsWith && endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n            }\n        };\n    } \n} "},"status":0},{"failures":[196,197,198,217,200,110,111,147],"tindex":"5713d95d-4170-11e6-8ca5-4b4652fa925e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:81","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[218,190],"tindex":"5714006e-4170-11e6-8ca5-ed7cda5878f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-1},{"failures":[],"tindex":"5714006f-4170-11e6-8ca5-6f8bdcaf801e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"status":-2},{"failures":[],"tindex":"57140070-4170-11e6-8ca5-c7f82e5dfc7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"x\", \"k\")"},"status":0},{"failures":[],"tindex":"57140071-4170-11e6-8ca5-a7f7894ba350","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:70","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[113,114],"tindex":"57140072-4170-11e6-8ca5-4354393932ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"left","keyLen":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[129,70,71],"tindex":"57140073-4170-11e6-8ca5-c953baab0519","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[123,124,125,126,219,127],"tindex":"57140074-4170-11e6-8ca5-5d559f04622d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:460","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer)"},"status":-1},{"failures":[113,114],"tindex":"57140075-4170-11e6-8ca5-f7c512254c32","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:361","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n    c = (c >>> 2) | (c << 26);\n    d = (d >>> 2) | (d << 26);\n} else {\n    c = (c >>> 1) | (c << 27);\n    d = (d >>> 1) | (d << 27);\n}"},"status":-1},{"failures":[],"tindex":"57140076-4170-11e6-8ca5-f14c9ee9e78d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:214","type":"CtIfImpl","sourcecode":"if (((name1 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name1))) {\n    return false;\n} else if (((name2 == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name2))) {\n    return false;\n} else if (((name1.length()) == 1) || ((name2.length()) == 1)) {\n    return false;\n} else if (name1.equalsIgnoreCase(name2)) {\n    return true;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"text1","name2":"text1","name1":"text1","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"text2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"status":-2},{"failures":[196,200],"tindex":"57142787-4170-11e6-8ca5-cfb2e2966ade","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:95","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('^')"},"status":-1},{"failures":[220,181,129,70,71,221],"tindex":"57142788-4170-11e6-8ca5-b1d63e6305a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:541","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"57142789-4170-11e6-8ca5-336e4d969701","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n    return true;\n} else if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":0,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":14,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":31,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":30,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":24,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":4,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":28,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":11,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":10,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":16,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":5,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":20,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":26,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":9,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":27,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":17,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":29,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":15,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":18,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":33,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":13,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":7,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":8,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":6,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":2,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":12,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":1,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":3},"transformations":[{"failures":[0],"tindex":"9edc2540-21df-11e6-b6b6-0b95a1a0ec40","series":0,"name":"replace","transplant":{"toString":"return result","position":"org.apache.commons.codec.binary.BaseNCodec:414","type":"CtReturnImpl","sourcecode":"return result"},"variableMap":{"result":"data"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)","position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)"},"status":-1},{"failures":[],"tindex":"9edc4c51-21df-11e6-b6b6-ef58a1b66781","series":0,"name":"replace","transplant":{"toString":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} ","position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS"},"type":"adrStmt","transplantationPoint":{"toString":"if (b == (pad)) {\n    context.eof = true;\n    break;\n} else {\n    final byte[] buffer = ensureBufferSize(decodeSize, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n        final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n        if (result >= 0) {\n            context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n            context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n            if ((context.modulus) == 0) {\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n                buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            } \n        } \n    } \n}","position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-2},{"failures":[],"tindex":"9edc4c52-21df-11e6-b6b6-69bbe8137966","series":0,"name":"add","transplant":{"toString":"return ch","position":"org.apache.commons.codec.language.ColognePhonetic:276","type":"CtReturnImpl","sourcecode":"return ch"},"variableMap":{"ch":"mappedChar"},"type":"adrStmt","transplantationPoint":{"toString":"return mappedChar","position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"status":-2},{"failures":[],"tindex":"9edc7363-21df-11e6-b6b6-e1e173016fcc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"allRules.addAll(rules)","position":"org.apache.commons.codec.language.bm.Rule:303","type":"CtInvocationImpl","sourcecode":"allRules.addAll(rules)"},"status":0},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"9edc7364-21df-11e6-b6b6-cfecb5a3c1f3","series":0,"name":"replace","transplant":{"toString":"final java.lang.String firstLetter = name.substring(0, 1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"lang"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String resName = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)","position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"status":-1},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"9edc7365-21df-11e6-b6b6-f581a0bae088","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"out.flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":6,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
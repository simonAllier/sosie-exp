{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":13,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":4,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":76,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":28,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":27,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":55,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":19,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":29,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":9,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":21,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":53,"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull":54,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":52,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":51,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":48,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":58,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":75,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":65,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":63,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":66,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":61,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":14,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":38,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":39,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":59,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":60,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":11,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":44,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":69,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":78,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":6,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":42,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":74,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":49,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":57,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":5,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":15,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":41,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":3,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":17,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":73,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":8,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":64,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":24,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":30,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":79,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":47,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":70,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":10,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":68,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":18,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":56,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":25,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":34,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":40,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":7,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":23,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":31,"org.apache.commons.codec.language.SoundexTest.testDifference":33,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":77,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":20,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":67,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":71,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":50,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":12,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":72},"transformations":[{"failures":[],"tindex":"07073382-210e-11e6-ba6e-176a1a96bfc3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:446","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location))"},"status":0},{"failures":[0,1,2,3,4],"tindex":"07075a93-210e-11e6-ba6e-99600154a120","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('P')","position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"status":-1},{"failures":[],"tindex":"07075a94-210e-11e6-ba6e-411e382820cb","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)","position":"org.apache.commons.codec.digest.DigestUtils:334","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"pArray"},"type":"adrStmt","transplantationPoint":{"toString":"return pArray","position":"org.apache.commons.codec.binary.BaseNCodec:407","type":"CtReturnImpl","sourcecode":"return pArray"},"status":-2},{"failures":[],"tindex":"07075a95-210e-11e6-ba6e-2db5d3ff997b","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"c","to":"d"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)","position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-2},{"failures":[],"tindex":"07075a96-210e-11e6-ba6e-69729142658f","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"binaryData","raw":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"if ((binaryData == null) || ((binaryData.length) == 0)) {\n    return binaryData;\n} ","position":"org.apache.commons.codec.binary.Base64:662","type":"CtIfImpl","sourcecode":"if ((binaryData == null) || ((binaryData.int) == 0)) {\n    return binaryData;\n} "},"status":-3},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"070781a7-210e-11e6-ba6e-6534ebcbf3dd","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"status":-1},{"failures":[],"tindex":"070781a8-210e-11e6-ba6e-f5137479d5aa","series":0,"name":"replace","transplant":{"toString":"name = removeDoubleConsonants(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:139","type":"CtAssignmentImpl","sourcecode":"name = removeDoubleConsonants(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"dg\", \"2g\")","position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"status":-2},{"failures":[24,25,26,27,28,29,30,31,32],"tindex":"070781a9-210e-11e6-ba6e-69f522bdf608","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[33,34],"tindex":"070781aa-210e-11e6-ba6e-01a745a94b74","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"es2","leftCharacter":"es2","rightCharacter":"es2","location":"es2"},"type":"adrStmt","transplantationPoint":{"toString":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} ","position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"status":-1},{"failures":[],"tindex":"070781ab-210e-11e6-ba6e-73781cfee405","series":0,"name":"replace","transplant":{"toString":"this.baseNCodec = basedCodec","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"variableMap":{"basedCodec":"baseNCodec","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"toString":"this.baseNCodec = baseNCodec","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-3},{"failures":[],"tindex":"0707a8bc-210e-11e6-ba6e-a12d283f5d45","series":0,"name":"add","transplant":{"toString":"while ((tmpLen--) > 0) {\n    char c1 = cs.charAt((index1++));\n    char c2 = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}","position":"org.apache.commons.codec.binary.CharSequenceUtils:58","type":"CtWhileImpl","sourcecode":"while ((tmpLen--) > 0) {\n    char char = cs.charAt((index1++));\n    char char = substring.charAt((index2++));\n    if (c1 == c2) {\n        continue;\n    } \n    if (!ignoreCase) {\n        return false;\n    } \n    if (((java.lang.Character.toUpperCase(c1)) != (java.lang.Character.toUpperCase(c2))) && ((java.lang.Character.toLowerCase(c1)) != (java.lang.Character.toLowerCase(c2)))) {\n        return false;\n    } \n}"},"variableMap":{"cs":"cs","index1":"length","ignoreCase":"ignoreCase","tmpLen":"start","index2":"length","substring":"cs"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtIfImpl","sourcecode":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} "},"status":-2},{"failures":[],"tindex":"0707a8bd-210e-11e6-ba6e-b1559f1c9959","series":0,"name":"replace","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:244","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"0707a8be-210e-11e6-ba6e-89039684d2e4","series":0,"name":"replace","transplant":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y3\", \"Y3\")"},"status":-2},{"failures":[35,36,37],"tindex":"0707a8bf-210e-11e6-ba6e-9b3acaaa24ad","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"k+\", \"K\")","position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone1:105","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-1},{"failures":[38,39,40,41,42],"tindex":"0707cfd0-210e-11e6-ba6e-178266ef9909","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-1},{"failures":[43,44,45,46,47,48,49,50,51,52],"tindex":"0707cfd1-210e-11e6-ba6e-8b4d432065b7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.decodeTable.length))) {\n    final int result = org.apache.commons.codec.binary.Base32.this.decodeTable[b];\n    if (result >= 0) {\n        context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK);\n        context.lbitWorkArea = ((context.lbitWorkArea) << (org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE)) + result;\n        if ((context.modulus) == 0) {\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)(((context.lbitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n            buffer[((context.pos)++)] = ((byte)((context.lbitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        } \n    } \n} ","position":"org.apache.commons.codec.binary.Base32:353","type":"CtIfImpl","sourcecode":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n    final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n    if (result >= 0) {\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n        if ((context.int) == 0) {\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        } \n    } \n} "},"status":-1},{"failures":[53],"tindex":"0707cfd2-210e-11e6-ba6e-5dc6423aae8a","series":0,"name":"replace","transplant":{"toString":"code.append('H')","position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(sep).append(si.next())","position":"org.apache.commons.codec.language.bm.PhoneticEngine:264","type":"CtInvocationImpl","sourcecode":"sb.append(sep).append(si.next())"},"status":-1},{"failures":[],"tindex":"0707f6e3-210e-11e6-ba6e-4f2bc3d5fb6f","series":0,"name":"replace","transplant":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append('}')","position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"status":0},{"failures":[54],"tindex":"0707f6e4-210e-11e6-ba6e-4530eec46c0e","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.URLCodec:290","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[],"tindex":"0707f6e5-210e-11e6-ba6e-3b9c78bff834","series":0,"name":"replace","transplant":{"toString":"this.languages = java.util.Collections.unmodifiableSet(languages)","position":"org.apache.commons.codec.language.bm.Languages:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = java.util.Collections.unmodifiableSet(languages)"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"this.languages = languages","position":"org.apache.commons.codec.language.bm.Lang:87","type":"CtAssignmentImpl","sourcecode":"this.java.util.Set<java.lang.String> = languages"},"status":0},{"failures":[],"tindex":"07089326-210e-11e6-ba6e-638c8daa617e","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IndexOutOfBoundsException()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:88","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[55,56],"tindex":"07089327-210e-11e6-ba6e-bf59d618c0be","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"cp = 0","position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"status":-1},{"failures":[57,58,59,60,61,62],"tindex":"07089328-210e-11e6-ba6e-450c2d849f5d","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"ci\", \"si\")","position":"org.apache.commons.codec.language.Caverphone1:70","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"t+\", \"T\")","position":"org.apache.commons.codec.language.Caverphone2:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[],"tindex":"07089329-210e-11e6-ba6e-911ad78f6e0d","series":0,"name":"replace","transplant":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:468","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[63,64,65,66,67,68],"tindex":"0708932a-210e-11e6-ba6e-7f3fb626020d","series":0,"name":"add","transplant":{"toString":"local.setCharAt(0, 'W')","position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme ph : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:147","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    if ((sb.length()) > 0) {\n        sb.append(\"|\");\n    } \n    sb.append(ph.getPhonemeText());\n}"},"status":-1},{"failures":[69,70,71],"tindex":"0708932b-210e-11e6-ba6e-f7c9d7f003cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.SHA512_PREFIX) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:540","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"status":-1},{"failures":[],"tindex":"0708ba3c-210e-11e6-ba6e-cf9ec44329c0","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sBuf = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.RefinedSoundex:184","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"0708ba3d-210e-11e6-ba6e-51713214377f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)","position":"org.apache.commons.codec.language.Nysiis:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(str)"},"variableMap":{"str":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(input, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:385","type":"CtReturnImpl","sourcecode":"return encode(input, languageSet)"},"status":-2},{"failures":[63,64,65,66],"tindex":"0708ba3e-210e-11e6-ba6e-6b764123b6f5","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Languages:224","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"0708ba3f-210e-11e6-ba6e-d74f1cbf7565","series":0,"name":"replace","transplant":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"variableMap":{"messageDigest":"object","valueToDigest":"object"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:406","type":"CtIfImpl","sourcecode":"if (!(object instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(((((\"This method's parameter was expected to be of the type \" + (java.lang.String.java.lang.String.java.lang.Class.getName())) + \". But actually it was of the type \") + (object.getClass().getName())) + \".\"));\n} "},"status":-2},{"failures":[],"tindex":"0708ba40-210e-11e6-ba6e-57c2bdac0f8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.encodeSize = (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK) + (lineSeparator.length);\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.lineSeparator, 0, lineSeparator.length);\n    } else {\n        this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n        this.lineSeparator = null;\n    }\n} else {\n    this.encodeSize = org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK;\n    this.lineSeparator = null;\n}","position":"org.apache.commons.codec.binary.Base64:278","type":"CtIfImpl","sourcecode":"if (lineSeparator != null) {\n    if (containsAlphabetOrPad(lineSeparator)) {\n        final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n        throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n    } \n    if (lineLength > 0) {\n        this.int = (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int) + (lineSeparator.int);\n        this.byte[] = new byte[lineSeparator.int];\n        java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int);\n    } else {\n        this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n        this.byte[] = null;\n    }\n} else {\n    this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    this.byte[] = null;\n}"},"status":-2},{"failures":[72,73,74,75],"tindex":"0708ba41-210e-11e6-ba6e-47ab022d6d1c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.COV2CHAR[c])));\n}","position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[],"tindex":"0708e152-210e-11e6-ba6e-bf4296e7eec2","series":0,"name":"replace","transplant":{"toString":"text = preprocess(text)","position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"variableMap":{"text":"dc"},"type":"adrStmt","transplantationPoint":{"toString":"replacedName = replacedName.replace(dc, singleLetter)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:389","type":"CtAssignmentImpl","sourcecode":"replacedName = replacedName.replace(dc, singleLetter)"},"status":-2},{"failures":[76],"tindex":"0708e153-210e-11e6-ba6e-59c3074a16e7","series":0,"name":"replace","transplant":{"toString":"return true","position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return false","position":"org.apache.commons.codec.binary.BaseNCodec:497","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"0708e154-210e-11e6-ba6e-9b1452ce5bee","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[],"tindex":"0708e155-210e-11e6-ba6e-d9f69cf4a2e9","series":0,"name":"replace","transplant":{"toString":"int b = bytes[index]","position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = bytes[index]"},"variableMap":{"bytes":"b","index":"length"},"type":"adrStmt","transplantationPoint":{"toString":"int len = ((int)(java.lang.Math.min(b.length, todo)))","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:201","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(java.lang.Math.min(b.int, todo)))"},"status":-2},{"failures":[72,73,74,75],"tindex":"0708e156-210e-11e6-ba6e-055d49668522","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"status":-1},{"failures":[],"tindex":"0708e157-210e-11e6-ba6e-571817b19e7a","series":0,"name":"replace","transplant":{"toString":"this.maxPhonemes = maxPhonemes","position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"toString":"context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b","position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << 8) + b"},"status":-2},{"failures":[],"tindex":"070a19d8-210e-11e6-ba6e-95c258375c6a","series":0,"name":"add","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))"},"status":-2},{"failures":[],"tindex":"070a19d9-210e-11e6-ba6e-e79a89f8d893","series":0,"name":"replace","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int keyLen = keyBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:136","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"070a40ea-210e-11e6-ba6e-2b9196d9f40c","series":0,"name":"replace","transplant":{"toString":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:551","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'L') {\n    if (conditionL0(value, index)) {\n        result.appendPrimary('L');\n    } else {\n        result.append('L');\n    }\n    index += 2;\n} else {\n    index++;\n    result.append('L');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}"},"status":-2},{"failures":[77,78,79],"tindex":"070a40eb-210e-11e6-ba6e-59a37e1743f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":42,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
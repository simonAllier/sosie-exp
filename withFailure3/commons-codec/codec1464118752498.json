{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":112,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":168,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":167,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":159,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":201,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":155,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":19,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":160,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":120,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":40,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":69,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":174,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":147,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":146,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":52,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":177,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":57,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":175,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":54,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":29,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":55,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":125,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":80,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":149,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":189,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":152,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":46,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":11,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":184,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":166,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":6,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":45,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":144,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":161,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":178,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":213,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":76,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":106,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":109,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":90,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":71,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":79,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":158,"org.apache.commons.codec.language.NysiisTest.testDropBy":195,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":182,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":10,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":150,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":142,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":77,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":164,"org.apache.commons.codec.binary.Base64Test.testUUID":49,"org.apache.commons.codec.binary.Base64Test.testSingletons":64,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":140,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":84,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":67,"org.apache.commons.codec.binary.Base64Test.testPairs":48,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":117,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":100,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":113,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":16,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":196,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":208,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":95,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":126,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":156,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":62,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":154,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":30,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":38,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":63,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":114,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":162,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":89,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":96,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":202,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":180,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":92,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":51,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":24,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":190,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":194,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":170,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":171,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":176,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":88,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":108,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":121,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":9,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":131,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":8,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":110,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":205,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":204,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":122,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":116,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":94,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":93,"org.apache.commons.codec.binary.Base64Test.testTriplets":43,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":78,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":1,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":34,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":209,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":211,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":143,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":129,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":58,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":169,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":74,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":18,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":128,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":47,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":206,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":197,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":165,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull":193,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":115,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":133,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":151,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":61,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":118,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":127,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":210,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":7,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":183,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":21,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":97,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":119,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":75,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":157,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":99,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":173,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":136,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":87,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":86,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":107,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":124,"org.apache.commons.codec.language.MetaphoneTest.testTCH":27,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":23,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":28,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":70,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":200,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":13,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":56,"org.apache.commons.codec.binary.Base64Test.testBase64":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":203,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":187,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":59,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":98,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":42,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":212,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":41,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":185,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":198,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":37,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":44,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":81,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":181,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":91,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":73,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":138,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":102,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":5,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":207,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":22,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":85,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":12,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":123,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":192,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":172,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":199,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":188,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":15,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":186},"transformations":[{"failures":[],"tindex":"31098beb-21e7-11e6-9716-f393bd239f6a","series":0,"name":"replace","transplant":{"toString":"if (accentedWord == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"variableMap":{"accentedWord":"str"},"type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:225","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"3109b2fc-21e7-11e6-9716-1f10ce9dbec0","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String l : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:221","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : ls.getLanguages()) {\n    try {\n        rs.put(l, org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, l), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l)));\n    } catch (final java.lang.IllegalStateException e) {\n        throw new java.lang.IllegalStateException((\"Problem processing \" + (org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, l))) , e);\n    }\n}"},"status":-2},{"failures":[0,1],"tindex":"3109da0d-21e7-11e6-9716-07a2e548b615","series":0,"name":"add","transplant":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"t","cp":"t"},"type":"adrStmt","transplantationPoint":{"toString":"t = left","position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"status":-1},{"failures":[2,3,4],"tindex":"3109da0e-21e7-11e6-9716-295ad1517aa0","series":0,"name":"add","transplant":{"toString":"result.append(\"N\", \"KN\")","position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"3109da0f-21e7-11e6-9716-7ddae5496e1e","series":0,"name":"add","transplant":{"toString":"final byte[] pBytes = new byte[keyLen]","position":"org.apache.commons.codec.digest.Sha2Crypt:295","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[keyLen]"},"variableMap":{"keyLen":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] l_raw = new byte[(ascii.length) >> 3]","position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[0,1],"tindex":"310a0120-21e7-11e6-9716-0377ece8091d","series":0,"name":"replace","transplant":{"toString":"b = '+'","position":"org.apache.commons.codec.net.URLCodec:137","type":"CtAssignmentImpl","sourcecode":"b = '+'"},"variableMap":{"b":"s"},"type":"adrStmt","transplantationPoint":{"toString":"schedule[(j++)] = (t << 16) | (s & 65535)","position":"org.apache.commons.codec.digest.UnixCrypt:375","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = (t << 16) | (s & 65535)"},"status":-1},{"failures":[2],"tindex":"310a0121-21e7-11e6-9716-93b83e31a5e2","series":0,"name":"add","transplant":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:679","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"310a0122-21e7-11e6-9716-717bf7935b5e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:264","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[18],"tindex":"310a0123-21e7-11e6-9716-115ed3794eaa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)));\n} ","position":"org.apache.commons.codec.language.bm.Lang:133","type":"CtIfImpl","sourcecode":"if (lRulesIS == null) {\n    throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)));\n} "},"status":-1},{"failures":[19,20,21,22,23,24,25,26],"tindex":"310a0124-21e7-11e6-9716-4fdc4392e5ae","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"cp","tempResult":"sBytes","pBytes":"tempResult","cp":"saltLen"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))","position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"status":-1},{"failures":[],"tindex":"310a2835-21e7-11e6-9716-c18311184041","series":0,"name":"replace","transplant":{"toString":"txt = txt + (org.apache.commons.codec.language.Caverphone1.SIX_1)","position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ly\", \"Ly\")","position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"status":-3},{"failures":[],"tindex":"310a2836-21e7-11e6-9716-23ffd5eb724a","series":0,"name":"replace","transplant":{"toString":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}","position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"variableMap":{"value":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:125","type":"CtIfImpl","sourcecode":"if (ascii instanceof java.lang.String) {\n    return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((java.lang.String)(ascii)).toCharArray());\n} "},"status":-2},{"failures":[],"tindex":"310a2837-21e7-11e6-9716-4b0586d326bc","series":0,"name":"replace","transplant":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"mb$\", \"m2\")","position":"org.apache.commons.codec.language.Caverphone1:66","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"mb$\", \"m2\")"},"status":-2},{"failures":[],"tindex":"310a2838-21e7-11e6-9716-c332d17780df","series":0,"name":"add","transplant":{"toString":"return \"ANY_LANGUAGE\"","position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.QCodec:266","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[27,28,29,30,31,32,33],"tindex":"310a2839-21e7-11e6-9716-f57fac60cf38","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"matches = substring.equals(test)","position":"org.apache.commons.codec.language.Metaphone:365","type":"CtAssignmentImpl","sourcecode":"matches = substring.equals(test)"},"status":-1},{"failures":[34],"tindex":"310a4f4a-21e7-11e6-9716-337e9082d82b","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this","position":"org.apache.commons.codec.language.bm.Rule:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.toString() , org.apache.commons.codec.language.bm.Rule.Phoneme.this.languages.merge(lang))","position":"org.apache.commons.codec.language.bm.Rule:163","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.toString() , org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet.merge(lang))"},"status":-1},{"failures":[],"tindex":"310a4f4b-21e7-11e6-9716-cf917a35f57e","series":0,"name":"replace","transplant":{"toString":"key.deleteCharAt(((key.length()) - 2))","position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"local"},"type":"adrStmt","transplantationPoint":{"toString":"local.append(inwd)","position":"org.apache.commons.codec.language.Metaphone:115","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-2},{"failures":[],"tindex":"310a4f4c-21e7-11e6-9716-031e1303991a","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"org.apache.commons.codec.language.Caverphone1.SIX_1"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt + (org.apache.commons.codec.language.Caverphone1.SIX_1)","position":"org.apache.commons.codec.language.Caverphone1:121","type":"CtAssignmentImpl","sourcecode":"txt = txt + (org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String)"},"status":-2},{"failures":[],"tindex":"310a4f4d-21e7-11e6-9716-35652e9c148a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"builder.append('0')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:117","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('0')"},"status":-2},{"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"tindex":"310a765e-21e7-11e6-9716-afecfaa19c5e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(context.buffer, context.readPos, b, bPos, len)","position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"status":-1},{"failures":[],"tindex":"310a765f-21e7-11e6-9716-2b0566225575","series":0,"name":"replace","transplant":{"toString":"altResult = ctx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:260","type":"CtAssignmentImpl","sourcecode":"altResult = ctx.digest()"},"variableMap":{"altResult":"tempResult","ctx":"altCtx"},"type":"adrStmt","transplantationPoint":{"toString":"tempResult = altCtx.digest()","position":"org.apache.commons.codec.digest.Sha2Crypt:324","type":"CtAssignmentImpl","sourcecode":"tempResult = altCtx.digest()"},"status":-3},{"failures":[],"tindex":"310a7660-21e7-11e6-9716-bd52a38e420d","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder sb = new java.lang.StringBuilder()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:356","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[19,20,21,22,23,24,25,26],"tindex":"310a7661-21e7-11e6-9716-1de79ef7fbba","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"keyBytes"},"type":"adrStmt","transplantationPoint":{"toString":"altCtx.update(keyBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:194","type":"CtInvocationImpl","sourcecode":"altCtx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"310a7662-21e7-11e6-9716-6d4123c37736","series":0,"name":"add","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:362","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n    if (phonemes.containsKey(newPhoneme)) {\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n        final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n        phonemes.put(mergedPhoneme, mergedPhoneme);\n    } else {\n        phonemes.put(newPhoneme, newPhoneme);\n    }\n}"},"status":-2},{"failures":[99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"310a9d73-21e7-11e6-9716-d7763237aef8","series":0,"name":"replace","transplant":{"toString":"l_ascii[(jj - bits)] = '1'","position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"i","l_ascii":"name1Char","bits":"i"},"type":"adrStmt","transplantationPoint":{"toString":"name1Char[i] = ' '","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"status":-1},{"failures":[111],"tindex":"310a9d74-21e7-11e6-9716-ffeffbab83fe","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))","position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_16BE)","position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[0,1],"tindex":"310a9d75-21e7-11e6-9716-a3c6241e655f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"a = (a ^ t) ^ (t >>> (16 - n))","position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-1},{"failures":[],"tindex":"310a9d76-21e7-11e6-9716-4b22b81b0213","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.languages.isEmpty()","position":"org.apache.commons.codec.language.bm.Languages:106","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.isEmpty()"},"status":0},{"failures":[2,112,4],"tindex":"310a9d77-21e7-11e6-9716-598d3edbeb95","series":0,"name":"replace","transplant":{"toString":"code.append('J')","position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"alternate"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.append(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:990","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[],"tindex":"310ac488-21e7-11e6-9716-b39727bb73fb","series":0,"name":"add","transplant":{"toString":"name = cleanName(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:132","type":"CtAssignmentImpl","sourcecode":"name = cleanName(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone1:84","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":-2},{"failures":[],"tindex":"310ac489-21e7-11e6-9716-3d46355e384c","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"ce\", \"se\")","position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"l$\", \"3\")","position":"org.apache.commons.codec.language.Caverphone2:116","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l$\", \"3\")"},"status":0},{"failures":[113],"tindex":"310ac48a-21e7-11e6-9716-5dedc2ef3227","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.RULES)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.RULES)));\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"status":-1},{"failures":[0,1],"tindex":"310ac48b-21e7-11e6-9716-577ec4a04351","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8","position":"org.apache.commons.codec.digest.UnixCrypt:386","type":"CtOperatorAssignmentImpl","sourcecode":"value |= (org.apache.commons.codec.digest.UnixCrypt.byteToUnsigned(b[(offset++)])) << 8"},"status":-1},{"failures":[],"tindex":"310ac48c-21e7-11e6-9716-a109c2594ab0","series":0,"name":"replace","transplant":{"toString":"if ((input.length()) == 0) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"remainder"},"type":"adrStmt","transplantationPoint":{"toString":"return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\"","position":"org.apache.commons.codec.language.bm.PhoneticEngine:421","type":"CtReturnImpl","sourcecode":"return (((\"(\" + (encode(remainder))) + \")-(\") + (encode(combined))) + \")\""},"status":-1},{"failures":[35,36,38,39,40,114,41,42,43,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,74,75,77,78,79,80,81,86,87,90,93,95,97,98],"tindex":"310ac48d-21e7-11e6-9716-5b606ca750f4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readResults(buf, 0, buf.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:433","type":"CtInvocationImpl","sourcecode":"readResults(buf, 0, buf.int, context)"},"status":-1},{"failures":[],"tindex":"310aeb9e-21e7-11e6-9716-0d9b6dd475f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"status":-2},{"failures":[],"tindex":"310aeb9f-21e7-11e6-9716-f546e50b6276","series":0,"name":"replace","transplant":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"variableMap":{"index":"savedPos"},"type":"adrStmt","transplantationPoint":{"toString":"context.currentLinePos += (context.pos) - savedPos","position":"org.apache.commons.codec.binary.Base64:371","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += (context.int) - savedPos"},"status":-2},{"failures":[],"tindex":"310aeba0-21e7-11e6-9716-e3d926cc91a4","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.language.bm.Languages.this.languages","position":"org.apache.commons.codec.language.bm.Languages:293","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.this.java.util.Set<java.lang.String>"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.languages","position":"org.apache.commons.codec.language.bm.Languages:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>"},"status":-2},{"failures":[19,23,24,25,26],"tindex":"310aeba1-21e7-11e6-9716-dbd60f5eb9c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-1},{"failures":[115],"tindex":"310aeba2-21e7-11e6-9716-01467e3bd87d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"g\", \"k\")","position":"org.apache.commons.codec.language.Caverphone2:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"g\", \"k\")"},"status":-1},{"failures":[116,2,112,3,4],"tindex":"310aeba3-21e7-11e6-9716-3dff24b83e48","series":0,"name":"replace","transplant":{"toString":"java.lang.String line = rawLine","position":"org.apache.commons.codec.language.bm.Lang:142","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = rawLine"},"variableMap":{"rawLine":"value"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String target = value.substring(start, (start + length))","position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = value.substring(start, (start + length))"},"status":-1},{"failures":[],"tindex":"310aeba4-21e7-11e6-9716-3b335cd8c8e2","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"^tough\", \"tou2f\")","position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)","position":"org.apache.commons.codec.language.Soundex:262","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"status":-2},{"failures":[117,118],"tindex":"310aeba5-21e7-11e6-9716-9b5218e1c2b4","series":0,"name":"replace","transplant":{"toString":"compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"b"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:293","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer)"},"status":-1},{"failures":[5],"tindex":"310b12b6-21e7-11e6-9716-131c0132b261","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:195","type":"CtReturnImpl","sourcecode":"return ((((ch == 'a') || (ch == 'e')) || (ch == 'i')) || (ch == 'o')) || (ch == 'u')"},"status":-1},{"failures":[],"tindex":"310b12b7-21e7-11e6-9716-43bb771b55ab","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_AF","position":"org.apache.commons.codec.language.Nysiis:121","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"variableMap":{"org.apache.commons.codec.language.Nysiis.CHARS_AF":"newData"},"type":"adrStmt","transplantationPoint":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:243","type":"CtReturnImpl","sourcecode":"return newData"},"status":-3},{"failures":[19,20,21,22,119,23,24,25,26],"tindex":"310b12b8-21e7-11e6-9716-5f82fb75d2ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"buffer.append(saltString)","position":"org.apache.commons.codec.digest.Sha2Crypt:429","type":"CtInvocationImpl","sourcecode":"buffer.append(saltString)"},"status":-1},{"failures":[],"tindex":"310b12b9-21e7-11e6-9716-152b3a8c4986","series":0,"name":"replace","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:148","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"newData"},"type":"adrStmt","transplantationPoint":{"toString":"return newData","position":"org.apache.commons.codec.language.ColognePhonetic:243","type":"CtReturnImpl","sourcecode":"return newData"},"status":-3},{"failures":[],"tindex":"310b12ba-21e7-11e6-9716-5fde0e460f81","series":0,"name":"replace","transplant":{"toString":"for (int j = 0 ; j < 25 ; j++) {\n    for (int i = 0 ; i < 32 ; i += 4) {\n        left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n        right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n    }\n    t = left;\n    left = right;\n    right = t;\n}","position":"org.apache.commons.codec.digest.UnixCrypt:285","type":"CtForImpl","sourcecode":"for (int int = 0 ; j < 25 ; j++) {\n    for (int int = 0 ; i < 32 ; i += 4) {\n        left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n        right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n    }\n    t = left;\n    left = right;\n    right = t;\n}"},"variableMap":{"schedule":"org.apache.commons.codec.binary.BinaryCodec.BITS","t":"bits","left":"bits","eSwap0":"bits","right":"jj","eSwap1":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.BITS[bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}","position":"org.apache.commons.codec.binary.BinaryCodec:280","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-2},{"failures":[39,40,120,121,114,122,41,42,77,78,87,89,90],"tindex":"310b12bb-21e7-11e6-9716-9b459294ee5c","series":0,"name":"replace","transplant":{"toString":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} ","position":"org.apache.commons.codec.binary.Base32:295","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain Base32 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"lineSeparator":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"310b39cc-21e7-11e6-9716-6f54b03d7e29","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"ph","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"ph"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"status":-3},{"failures":[123,124,125,126,127],"tindex":"310b39cd-21e7-11e6-9716-c1a335f4b924","series":0,"name":"replace","transplant":{"toString":"buffer.write(' ')","position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"status":-1},{"failures":[],"tindex":"310b39ce-21e7-11e6-9716-c325e721a40d","series":0,"name":"replace","transplant":{"toString":"name1 = getFirst3Last3(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"variableMap":{"name1":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(0, ((str.length()) - 1))","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:337","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"status":-2},{"failures":[128,129],"tindex":"310b39cf-21e7-11e6-9716-13bb4b995a6c","series":0,"name":"replace","transplant":{"toString":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"variableMap":{"b":"l_ascii","offset":"bits","iValue":"bits"},"type":"adrStmt","transplantationPoint":{"toString":"l_ascii[(jj - bits)] = '0'","position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[],"tindex":"310b39d0-21e7-11e6-9716-b9ced0b86803","series":0,"name":"replace","transplant":{"toString":"tmp[i] = b","position":"org.apache.commons.codec.net.QCodec:185","type":"CtAssignmentImpl","sourcecode":"tmp[i] = b"},"variableMap":{"b":"org.apache.commons.codec.net.QCodec.UNDERSCORE","tmp":"data","i":"i"},"type":"adrStmt","transplantationPoint":{"toString":"data[i] = org.apache.commons.codec.net.QCodec.UNDERSCORE","position":"org.apache.commons.codec.net.QCodec:161","type":"CtAssignmentImpl","sourcecode":"data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":0},{"failures":[],"tindex":"310b39d1-21e7-11e6-9716-f5b91b373a21","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"toString":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme left : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.phonemes) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme right : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme join = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:109","type":"CtForEachImpl","sourcecode":"EXPR : for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.this.java.util.Set<org.apache.commons.codec.language.bm.Rule.Phoneme>) {\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeExpr.getPhonemes()) {\n        final org.apache.commons.codec.language.bm.Languages.LanguageSet org.apache.commons.codec.language.bm.Languages.LanguageSet = left.getLanguages().restrictTo(right.getLanguages());\n        if (!(languages.isEmpty())) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = new org.apache.commons.codec.language.bm.Rule.Phoneme(left , right , languages);\n            if ((newPhonemes.size()) < maxPhonemes) {\n                newPhonemes.add(join);\n                if ((newPhonemes.size()) >= maxPhonemes) {\n                    break EXPR;\n                } \n            } \n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"310b60e2-21e7-11e6-9716-61207d7cb025","series":0,"name":"replace","transplant":{"toString":"final byte[] buf = new byte[(context.pos) - (context.readPos)]","position":"org.apache.commons.codec.binary.BaseNCodec:432","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.int) - (context.int)]"},"variableMap":{"pos":"encodeSize","context":"context","readPos":"encodeSize"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = ensureBufferSize(encodeSize, context)","position":"org.apache.commons.codec.binary.Base64:342","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-2},{"failures":[130,131,132,133,134,135,117,136,118,137,138,139,140,141,142,143,144],"tindex":"310b60e3-21e7-11e6-9716-b1e5e1aaa857","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (strict) {\n    int pos = 1;\n    for (int i = 0 ; i < ((bytes.length) - 3) ; i++) {\n        int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH)) {\n            pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n            pos = 1;\n        }\n    }\n    int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.length) - 3), bytes);\n    boolean encode = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 5)));\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH) - 2)) {\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.CR);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.LF);\n    } \n    for (int i = (bytes.length) - 2 ; i < (bytes.length) ; i++) {\n        b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        encode = (!(printable.get(b))) || ((i > ((bytes.length) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    }\n} else {\n    for (final byte c : bytes) {\n        int b = c;\n        if (b < 0) {\n            b = 256 + b;\n        } \n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n        }\n    }\n}","position":"org.apache.commons.codec.net.QuotedPrintableCodec:282","type":"CtIfImpl","sourcecode":"if (strict) {\n    int int = 1;\n    for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n        int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n            pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n            pos = 1;\n        }\n    }\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes);\n    boolean boolean = (!(printable.get(b))) || ((org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)) && (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 5)));\n    pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    } \n    for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n        b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n        encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n    }\n} else {\n    for (final byte byte : bytes) {\n        int int = c;\n        if (b < 0) {\n            b = 256 + b;\n        } \n        if (printable.get(b)) {\n            buffer.write(b);\n        } else {\n            org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n        }\n    }\n}"},"status":-1},{"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"310b87f4-21e7-11e6-9716-cffbd93c7458","series":0,"name":"replace","transplant":{"toString":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"patternKey"},"type":"adrStmt","transplantationPoint":{"toString":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} "},"status":-1},{"failures":[],"tindex":"310b87f5-21e7-11e6-9716-c95922347f07","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))","position":"org.apache.commons.codec.language.Nysiis:214","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.nysiis(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(obj)))","position":"org.apache.commons.codec.net.URLCodec:315","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"310b87f6-21e7-11e6-9716-cfbceae6b9cc","series":0,"name":"replace","transplant":{"toString":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE)) {\n    return false;\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:244","type":"CtIfImpl","sourcecode":"if ((java.lang.Math.abs(((name1.length()) - (name2.length())))) >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    return false;\n} "},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"length","name2":"cs","name1":"cs"},"type":"adrStmt","transplantationPoint":{"toString":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} ","position":"org.apache.commons.codec.binary.CharSequenceUtils:51","type":"CtIfImpl","sourcecode":"if ((cs instanceof java.lang.String) && (substring instanceof java.lang.String)) {\n    return ((java.lang.String)(cs)).regionMatches(ignoreCase, thisStart, ((java.lang.String)(substring)), start, length);\n} "},"status":-3},{"failures":[],"tindex":"310b87f7-21e7-11e6-9716-5df422d0ac6b","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('@')","position":"org.apache.commons.codec.net.QCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('@')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(org.apache.commons.codec.net.QuotedPrintableCodec.TAB)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:106","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[145,146,147,148,149,150,151,152],"tindex":"310b87f8-21e7-11e6-9716-7fb84c62530d","series":0,"name":"replace","transplant":{"toString":"if (element == key) {\n    return true;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:301","type":"CtIfImpl","sourcecode":"if (element == key) {\n    return true;\n} "},"variableMap":{"key":"key","element":"key"},"type":"adrStmt","transplantationPoint":{"toString":"for (final char element : arr) {\n    if (element == key) {\n        return true;\n    } \n}","position":"org.apache.commons.codec.language.ColognePhonetic:300","type":"CtForEachImpl","sourcecode":"for (final char char : arr) {\n    if (element == key) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"310b87f9-21e7-11e6-9716-65f9fc0a3766","series":0,"name":"add","transplant":{"toString":"throw new java.io.IOException(\"mark/reset not supported\")","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")","position":"org.apache.commons.codec.binary.BaseNCodec:382","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\")"},"status":-2},{"failures":[],"tindex":"310baf0a-21e7-11e6-9716-9f466d1db9d0","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"status":0},{"failures":[],"tindex":"310baf0b-21e7-11e6-9716-e14b16d5b501","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.ColognePhonetic:321","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"310baf0c-21e7-11e6-9716-6721d6312f29","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"obj","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} ","position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":-3},{"failures":[153,154],"tindex":"310baf0d-21e7-11e6-9716-532870fb2354","series":0,"name":"replace","transplant":{"toString":"altCtx.reset()","position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"altCtx.reset()"},"variableMap":{"altCtx":"messageDigest"},"type":"adrStmt","transplantationPoint":{"toString":"messageDigest.update(valueToDigest)","position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":-1},{"failures":[],"tindex":"310baf0e-21e7-11e6-9716-4d6ccee3ac28","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"status":-2},{"failures":[],"tindex":"310baf0f-21e7-11e6-9716-8b4ece287c80","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.bm.Rule:284","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[3],"tindex":"310baf10-21e7-11e6-9716-0b4afd6295ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.appendPrimary('L')","position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"status":-1},{"failures":[99,155,100,156,157,158,159,101,160,161,102,162,103,104,163,164,165,166,167,105,168,169,170,171,106,172,173,107,174,175,176,177,178,179,180,181,182,183,108,184,185,109,186,187,188,189,110,190],"tindex":"310baf11-21e7-11e6-9716-bdd8e0b36b1e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < n ; i++) {\n    final char c = accentedWord.charAt(i);\n    final int pos = org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-1},{"failures":[],"tindex":"310bd622-21e7-11e6-9716-1f4f4f46d62e","series":0,"name":"add","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"status":-2},{"failures":[131,132,133,191,134,135,117,192,193,138],"tindex":"310bd623-21e7-11e6-9716-83fba501ef76","series":0,"name":"replace","transplant":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"variableMap":{"firstThree":"str","lastThree":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:487","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.decode(str, org.apache.commons.codec.net.QuotedPrintableCodec.this.getCharset())"},"status":-1},{"failures":[],"tindex":"310bd624-21e7-11e6-9716-310589d86170","series":0,"name":"replace","transplant":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"variableMap":{"primary":"org.apache.commons.codec.digest.B64.B64T"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())));\n}","position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"status":-2},{"failures":[194,195,196],"tindex":"310bd625-21e7-11e6-9716-ed086ac0a2e0","series":0,"name":"replace","transplant":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_AF","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_AF","curr":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_AF;\n} ","position":"org.apache.commons.codec.language.Nysiis:120","type":"CtIfImpl","sourcecode":"if ((curr == 'E') && (next == 'V')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[],"tindex":"310bd626-21e7-11e6-9716-c77c93bb16d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")","position":"org.apache.commons.codec.language.bm.Languages:219","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException(\"Can't fetch any language from the empty language set.\")"},"status":-2},{"failures":[],"tindex":"310bd627-21e7-11e6-9716-03095c5b9b27","series":0,"name":"add","transplant":{"toString":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"variableMap":{"name":"txt","firstLetter":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"if (txtLength == 1) {\n    return txt.toUpperCase(java.util.Locale.ENGLISH);\n} ","position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (txtLength == 1) {\n    return txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale);\n} "},"status":-2},{"failures":[],"tindex":"310bfd38-21e7-11e6-9716-c19f3c4d2a31","series":0,"name":"add","transplant":{"toString":"roundsCustom = true","position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"variableMap":{"roundsCustom":"eof"},"type":"adrStmt","transplantationPoint":{"toString":"context.eof = true","position":"org.apache.commons.codec.binary.Base64:440","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"310bfd39-21e7-11e6-9716-07bc3989f2a0","series":0,"name":"replace","transplant":{"toString":"this.chunkSeparatorLength = chunkSeparatorLength","position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"variableMap":{"chunkSeparatorLength":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"310bfd3a-21e7-11e6-9716-b317c235f7c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")","position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"status":-2},{"failures":[],"tindex":"310bfd3b-21e7-11e6-9716-fd8e4d629832","series":0,"name":"replace","transplant":{"toString":"decode(pArray, 0, pArray.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"variableMap":{"pArray":"pArray","length":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context"},"type":"adrStmt","transplantationPoint":{"toString":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context)","position":"org.apache.commons.codec.binary.BaseNCodec:431","type":"CtInvocationImpl","sourcecode":"encode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"status":-2},{"failures":[],"tindex":"310bfd3c-21e7-11e6-9716-9dd566b3ba1a","series":0,"name":"replace","transplant":{"toString":"try {\n    final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.binary.Hex:250","type":"CtTryImpl","sourcecode":"try {\n    final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"variableMap":{"e":"value","object":"value"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(((java.lang.String)(value)))","position":"org.apache.commons.codec.net.BCodec:201","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(value)))"},"status":-2},{"failures":[197,198,199,200,201,202,203,204,205,206,207,208,209,210,34,211],"tindex":"310bfd3d-21e7-11e6-9716-3d73e6096bbd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"while (lsScanner.hasNextLine()) {\n    final java.lang.String line = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}","position":"org.apache.commons.codec.language.bm.Languages:181","type":"CtWhileImpl","sourcecode":"while (lsScanner.hasNextLine()) {\n    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}"},"status":-1},{"failures":[],"tindex":"310c244e-21e7-11e6-9716-bfe1d144346a","series":0,"name":"replace","transplant":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n    context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"variableMap":{"result":"org.apache.commons.codec.binary.BaseNCodec.EOF","org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"org.apache.commons.codec.binary.BaseNCodec.EOF","ibitWorkArea":"org.apache.commons.codec.binary.BaseNCodec.EOF","pos":"org.apache.commons.codec.binary.BaseNCodec.EOF","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"org.apache.commons.codec.binary.BaseNCodec.EOF","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"org.apache.commons.codec.binary.BaseNCodec.EOF","buffer":"singleByte","modulus":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"toString":"if (doEncode) {\n    baseNCodec.encode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n} else {\n    baseNCodec.decode(singleByte, 0, org.apache.commons.codec.binary.BaseNCodec.EOF, context);\n}","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[140,141,142],"tindex":"310c244f-21e7-11e6-9716-7935886b577a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(i);\n}","position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"310c2450-21e7-11e6-9716-7da7507f4259","series":0,"name":"replace","transplant":{"toString":"return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")))","position":"org.apache.commons.codec.language.DoubleMetaphone:847","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")))"},"variableMap":{"index":"i","value":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.bm.Rule.this.lContext.isMatch(input.subSequence(0, i))","position":"org.apache.commons.codec.language.bm.Rule:718","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(0, i))"},"status":-2},{"failures":[],"tindex":"310c2451-21e7-11e6-9716-294ae2bb1331","series":0,"name":"replace","transplant":{"toString":"char lastCode = '/'","position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char patternKey = r.pattern.charAt(0)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:314","type":"CtLocalVariableImpl","sourcecode":"final char char = r.java.lang.String.charAt(0)"},"status":-2},{"failures":[],"tindex":"310c2452-21e7-11e6-9716-3d21d0928ede","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0, j = 0 ; j < len ; i++) {\n    int f = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}","position":"org.apache.commons.codec.binary.Hex:88","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; j < len ; i++) {\n    int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}"},"status":-2},{"failures":[212,213,183],"tindex":"310c4b63-21e7-11e6-9716-59d18e6abad7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (replacedName.contains(dc)) {\n    final java.lang.String singleLetter = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} ","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-1},{"failures":[],"tindex":"310c4b64-21e7-11e6-9716-7b15bb2250d8","series":0,"name":"replace","transplant":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"variableMap":{"hard":"strict"},"type":"adrStmt","transplantationPoint":{"toString":"this.strict = strict","position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"status":-2},{"failures":[],"tindex":"310c4b65-21e7-11e6-9716-15b57b5a3fe6","series":0,"name":"add","transplant":{"toString":"final byte[] resizedBytes = new byte[bitlen / 8]","position":"org.apache.commons.codec.binary.Base64:767","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[bitlen / 8]"},"variableMap":{"bitlen":"avail"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buf = new byte[avail]","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"status":-2},{"failures":[],"tindex":"310c4b66-21e7-11e6-9716-7bf89e4bfe79","series":0,"name":"add","transplant":{"toString":"appendPrimary(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"value":"org.apache.commons.codec.digest.B64.B64T"},"type":"adrStmt","transplantationPoint":{"toString":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.B64T.charAt((w & 63)));\n    w >>= 6;\n}","position":"org.apache.commons.codec.digest.B64:60","type":"CtWhileImpl","sourcecode":"while ((n--) > 0) {\n    buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)));\n    w >>= 6;\n}"},"status":-2},{"failures":[],"tindex":"310c4b67-21e7-11e6-9716-355b2b0356d5","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"r3\", \"R3\")","position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"toString":"name1 = getFirst3Last3(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"status":-2},{"failures":[],"tindex":"310c4b68-21e7-11e6-9716-b738b13c4085","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Soundex.this.soundexMapping","position":"org.apache.commons.codec.language.Soundex:217","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Soundex.this.char[]"},"variableMap":{"soundexMapping":"org.apache.commons.codec.language.Nysiis.CHARS_FF"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.CHARS_FF","position":"org.apache.commons.codec.language.Nysiis:154","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[]"},"status":-2},{"failures":[],"tindex":"310c4b69-21e7-11e6-9716-7527c40a0d57","series":0,"name":"add","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int bitlen = bigInt.bitLength()","position":"org.apache.commons.codec.binary.Base64:749","type":"CtLocalVariableImpl","sourcecode":"int int = bigInt.bitLength()"},"status":-2},{"failures":[],"tindex":"310c4b6a-21e7-11e6-9716-39c66a3b793a","series":0,"name":"replace","transplant":{"toString":"final byte[] b = new byte[512]","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] buffer = new byte[org.apache.commons.codec.digest.HmacUtils.STREAM_BUFFER_LENGTH]","position":"org.apache.commons.codec.digest.HmacUtils:766","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int]"},"status":-2},{"failures":[],"tindex":"310c727b-21e7-11e6-9716-d9bbaf772f89","series":0,"name":"add","transplant":{"toString":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}","position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"blocksize","tempResult":"altResult","pBytes":"altResult","keyLen":"blocksize","cp":"blocksize"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(altResult, 0, blocksize)","position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, blocksize)"},"status":0},{"failures":[],"tindex":"310c727c-21e7-11e6-9716-93b7cfeeac74","series":0,"name":"replace","transplant":{"toString":"int u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int n = outLen","position":"org.apache.commons.codec.digest.B64:59","type":"CtLocalVariableImpl","sourcecode":"int int = outLen"},"status":-2},{"failures":[],"tindex":"310c727d-21e7-11e6-9716-3b8bc6240ea3","series":0,"name":"replace","transplant":{"toString":"len += (((len + (lineLength)) - 1) / (lineLength)) * (chunkSeparatorLength)","position":"org.apache.commons.codec.binary.BaseNCodec:521","type":"CtOperatorAssignmentImpl","sourcecode":"len += (((len + (int)) - 1) / (int)) * (int)"},"variableMap":{"chunkSeparatorLength":"len","len":"todo","lineLength":"len"},"type":"adrStmt","transplantationPoint":{"toString":"todo -= len","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"todo -= len"},"status":-3},{"failures":[],"tindex":"310c727e-21e7-11e6-9716-ad43d9dac793","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"n","value":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 0 ; i < n ; i++) {\n    final char c = accentedWord.charAt(i);\n    final int pos = org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
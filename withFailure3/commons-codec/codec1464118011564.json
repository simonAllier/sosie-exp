{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":147,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":94,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":89,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":117,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":88,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":145,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":134,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":102,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":101,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":54,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":169,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":43,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":68,"org.apache.commons.codec.binary.Base64Test.testTriplets":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameSameNames_ReturnsFalseSuccessfully":83,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":5,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":82,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":76,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":72,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":141,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":73,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":110,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithEmptySalt":106,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":28,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":163,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":7,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":36,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":39,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithInvalidSalt":109,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":132,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":135,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":103,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":130,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":27,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":96,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":51,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":24,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":125,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":25,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":50,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":12,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":138,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":144,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":149,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":63,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":119,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":139,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":129,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":136,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":143,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":165,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":32,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":81,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":71,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":17,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":87,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":61,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":53,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":91,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":128,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":41,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":150,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":40,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":108,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":126,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":171,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":86,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":16,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":118,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":156,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":45,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":80,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":14,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":162,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":112,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":49,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":65,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":56,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":46,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":161,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":57,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":140,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":38,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":11,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":30,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":173,"org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull":0,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":37,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":67,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":26,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":90,"org.apache.commons.codec.binary.Base64Test.testBase64":35,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":116,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":100,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":120,"org.apache.commons.codec.binary.Base64Test.testUUID":19,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":64,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":84,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":142,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":29,"org.apache.commons.codec.binary.Base64Test.testSingletons":31,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":42,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":10,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":114,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":99,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":121,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":98,"org.apache.commons.codec.binary.Base64Test.testPairs":18,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":127,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":9,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":107,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":159,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":166,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":115,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":124,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":131,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":164,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray":111,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":66,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":113,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":158,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":13,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":157,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":74,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":105,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":44,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":155,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":79,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":148,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":60,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":160,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":1,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":3,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":123,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":170,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":8,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":154,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":85,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":174,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":47,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":6,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":104,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":137,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":69,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":133,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":48,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":152,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":21,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":52,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":33,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":172,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":92,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":78,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":122,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":2,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":151,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":97,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":95,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":20,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":153,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":168,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":75},"transformations":[{"failures":[],"tindex":"776761dc-21e5-11e6-ac34-cdcc67d5bf96","series":0,"name":"replace","transplant":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> ruleMap = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)","position":"org.apache.commons.codec.language.bm.Rule:300","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType, rt, langs)"},"variableMap":{"nameType":"nameType","rt":"ruleType","langs":"languageSet"},"type":"adrStmt","transplantationPoint":{"toString":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> finalRules2 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.nameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.ruleType, languageSet)","position":"org.apache.commons.codec.language.bm.PhoneticEngine:403","type":"CtLocalVariableImpl","sourcecode":"final java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> = org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.PhoneticEngine.this.org.apache.commons.codec.language.bm.RuleType, languageSet)"},"status":0},{"failures":[],"tindex":"776788ed-21e5-11e6-ac34-5fa5555a7990","series":0,"name":"replace","transplant":{"toString":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.PREFIX))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.POSTFIX)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"line","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"line","text":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if ((line.length()) == 0) {\n    continue;\n} ","position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-3},{"failures":[],"tindex":"776788ee-21e5-11e6-ac34-bbcc223e7916","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"cy\", \"sy\")","position":"org.apache.commons.codec.language.Caverphone1:72","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":0},{"failures":[],"tindex":"776788ef-21e5-11e6-ac34-31a8adec61e5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} ","position":"org.apache.commons.codec.language.bm.Rule:280","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} "},"status":-1},{"failures":[0],"tindex":"776788f0-21e5-11e6-ac34-ff20638774ec","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (str == null) {\n    return null;\n} ","position":"org.apache.commons.codec.net.URLCodec:225","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-1},{"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"tindex":"776788f1-21e5-11e6-ac34-b9cb73e470ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"readResults(buf, 0, buf.length, context)","position":"org.apache.commons.codec.binary.BaseNCodec:433","type":"CtInvocationImpl","sourcecode":"readResults(buf, 0, buf.int, context)"},"status":-1},{"failures":[],"tindex":"7767b002-21e5-11e6-ac34-27eaa7cf3955","series":0,"name":"replace","transplant":{"toString":"final java.lang.StringBuilder local = new java.lang.StringBuilder(40)","position":"org.apache.commons.codec.language.Metaphone:105","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(40)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.StringBuilder passwd = new java.lang.StringBuilder(((prefix + saltString) + \"$\"))","position":"org.apache.commons.codec.digest.Md5Crypt:249","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"))"},"status":-2},{"failures":[4,5,47,41,42,48,43,44,45,46],"tindex":"7767b003-21e5-11e6-ac34-1ff899daeba2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"context.pos = 0","position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-1},{"failures":[],"tindex":"7767b004-21e5-11e6-ac34-a30afa925a54","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] rawData = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset))","position":"org.apache.commons.codec.net.RFC1522Codec:78","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = org.apache.commons.codec.net.RFC1522Codec.this.doEncoding(text.getBytes(charset))"},"status":-2},{"failures":[],"tindex":"7767b005-21e5-11e6-ac34-a3dd75ec7c0c","series":0,"name":"replace","transplant":{"toString":"this.decodeSize = (org.apache.commons.codec.binary.Base32.this.encodeSize) - 1","position":"org.apache.commons.codec.binary.Base32:306","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base32.this.int) - 1"},"variableMap":{"encodeSize":"index","decodeSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 4","position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"status":-3},{"failures":[],"tindex":"7767d716-21e5-11e6-ac34-3992b2f5cdf5","series":0,"name":"add","transplant":{"toString":"from = to + 1","position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"modulus","to":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base32:356","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)"},"status":-2},{"failures":[],"tindex":"7767d717-21e5-11e6-ac34-ebf95fa21228","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"ph\", \"fh\")","position":"org.apache.commons.codec.language.Caverphone2:86","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"status":0},{"failures":[49,50,51,52,53,54,55],"tindex":"7767d718-21e5-11e6-ac34-c158c22787a3","series":0,"name":"replace","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}","position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-1},{"failures":[56,57,58,59,60,61,62,63,64,65],"tindex":"7767d719-21e5-11e6-ac34-b19fbca075e9","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.MD5)","position":"org.apache.commons.codec.digest.DigestUtils:98","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"7767fe2a-21e5-11e6-ac34-7f8568956a06","series":0,"name":"replace","transplant":{"toString":"final java.lang.String remainder = input.substring(((l.length()) + 1))","position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","l":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String name2RtLStart = org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:304","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[66,67,68,69,70,71,72,73],"tindex":"7767fe2b-21e5-11e6-ac34-6d5a830cd51f","series":0,"name":"replace","transplant":{"toString":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} ","position":"org.apache.commons.codec.language.bm.PhoneticEngine:331","type":"CtIfImpl","sourcecode":"if (finalRules == null) {\n    throw new java.lang.NullPointerException(\"finalRules can not be null\");\n} "},"variableMap":{"finalRules":"finalRules"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder subBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String phonemeText = phoneme.getPhonemeText().toString();\n    for (int i = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication rulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , maxPhonemes).invoke();\n        final boolean found = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:341","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : phonemeBuilder.getPhonemes()) {\n    org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder = org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.empty(phoneme.getLanguages());\n    final java.lang.String java.lang.String = phoneme.getPhonemeText().toString();\n    for (int int = 0 ; i < (phonemeText.length()) ; ) {\n        final org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication = new org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication(finalRules , phonemeText , subBuilder , i , int).invoke();\n        final boolean boolean = rulesApplication.isFound();\n        subBuilder = rulesApplication.getPhonemeBuilder();\n        if (!found) {\n            subBuilder.append(phonemeText.subSequence(i, (i + 1)));\n        } \n        i = rulesApplication.getI();\n    }\n    for (final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme : subBuilder.getPhonemes()) {\n        if (phonemes.containsKey(newPhoneme)) {\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = phonemes.remove(newPhoneme);\n            final org.apache.commons.codec.language.bm.Rule.Phoneme org.apache.commons.codec.language.bm.Rule.Phoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());\n            phonemes.put(mergedPhoneme, mergedPhoneme);\n        } else {\n            phonemes.put(newPhoneme, newPhoneme);\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"7768253c-21e5-11e6-ac34-15d8add93ad2","series":0,"name":"replace","transplant":{"toString":"lastReplacement = replacement","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"variableMap":{"lastReplacement":"txt","replacement":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tch\", \"2ch\")","position":"org.apache.commons.codec.language.Caverphone1:73","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tch\", \"2ch\")"},"status":-3},{"failures":[],"tindex":"7768253d-21e5-11e6-ac34-cd7f67303711","series":0,"name":"replace","transplant":{"toString":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"num","to":"num"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.B64T.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.B64T.length())));\n}","position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"status":-2},{"failures":[],"tindex":"7768253e-21e5-11e6-ac34-41259bc34f4b","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN)))","position":"org.apache.commons.codec.language.bm.Lang:134","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalStateException((\"Unable to resolve required resource:\" + (org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.String)))"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.LANGUAGE_RULES_RN":"encoding"},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))","position":"org.apache.commons.codec.net.RFC1522Codec:149","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))"},"status":-3},{"failures":[],"tindex":"77684c4f-21e5-11e6-ac34-4b4053f89c75","series":0,"name":"replace","transplant":{"toString":"if (negate) {\n    boxContent = boxContent.substring(1);\n} ","position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"variableMap":{"negate":"inExtendedComment","boxContent":"org.apache.commons.codec.language.bm.ResourceConstants.CMT"},"type":"adrStmt","transplantationPoint":{"toString":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inExtendedComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        final java.lang.String[] parts = line.split(\"\\\\s+\");\n        if ((parts.length) != 3) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n        } \n        final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n        final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n        final boolean accept = parts[2].equals(\"true\");\n        rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n    }\n}","position":"org.apache.commons.codec.language.bm.Lang:143","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 3) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n        } \n        final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n        final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n        final boolean boolean = parts[2].equals(\"true\");\n        rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n    }\n}"},"status":-2},{"failures":[],"tindex":"77684c50-21e5-11e6-ac34-a1c29e923435","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")","position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)","position":"org.apache.commons.codec.net.BCodec:144","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":0},{"failures":[],"tindex":"77687361-21e5-11e6-ac34-5bf789dd853f","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.length = 0","position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"modulus"},"type":"adrStmt","transplantationPoint":{"toString":"context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK)","position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-2},{"failures":[],"tindex":"77690fa2-21e5-11e6-ac34-55ab82dc04bd","series":0,"name":"replace","transplant":{"toString":"this.pattern = pattern","position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"variableMap":{"pattern":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"sh\", \"s2\")","position":"org.apache.commons.codec.language.Caverphone2:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":-2},{"failures":[],"tindex":"77690fa3-21e5-11e6-ac34-25a9739e1249","series":0,"name":"replace","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"charsetName"},"type":"adrStmt","transplantationPoint":{"toString":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}","position":"org.apache.commons.codec.binary.StringUtils:141","type":"CtTryImpl","sourcecode":"try {\n    return string.getBytes(charsetName);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e);\n}"},"status":-2},{"failures":[],"tindex":"77690fa4-21e5-11e6-ac34-e7b8d4ca32db","series":0,"name":"add","transplant":{"toString":"u = 128","position":"org.apache.commons.codec.digest.UnixCrypt:245","type":"CtAssignmentImpl","sourcecode":"u = 128"},"variableMap":{"u":"b"},"type":"adrStmt","transplantationPoint":{"toString":"results[1] = b","position":"org.apache.commons.codec.digest.UnixCrypt:410","type":"CtAssignmentImpl","sourcecode":"results[1] = b"},"status":0},{"failures":[],"tindex":"77690fa5-21e5-11e6-ac34-d9cdbb9eadfd","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))","position":"org.apache.commons.codec.net.RFC1522Codec:149","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"))"},"status":-2},{"failures":[],"tindex":"776936b6-21e5-11e6-ac34-e39f50294007","series":0,"name":"replace","transplant":{"toString":"final char[] name1Char = name1.toCharArray()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name1.toCharArray()"},"variableMap":{"name1":"object"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] charArray = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))","position":"org.apache.commons.codec.binary.Hex:251","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object))"},"status":-2},{"failures":[],"tindex":"776936b7-21e5-11e6-ac34-2d3fa2b288a7","series":0,"name":"replace","transplant":{"toString":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY;\n} ","position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"pArray","raw":"pArray"},"type":"adrStmt","transplantationPoint":{"toString":"if ((pArray == null) || ((pArray.length) == 0)) {\n    return pArray;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:426","type":"CtIfImpl","sourcecode":"if ((pArray == null) || ((pArray.int) == 0)) {\n    return pArray;\n} "},"status":-3},{"failures":[74],"tindex":"776936b8-21e5-11e6-ac34-47ab461854e8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")","position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[75,76],"tindex":"776936b9-21e5-11e6-ac34-d92056058d46","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"status":-1},{"failures":[],"tindex":"776936ba-21e5-11e6-ac34-e375d96d3709","series":0,"name":"replace","transplant":{"toString":"if ((builder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH)) {\n    builder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH, builder.length());\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:141","type":"CtIfImpl","sourcecode":"if ((java.lang.StringBuilder.length()) > (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int)) {\n    java.lang.StringBuilder.delete(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.int, java.lang.StringBuilder.length());\n} "},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.MAX_LENGTH":"addChars","builder":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.append(value.substring(0, addChars));\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:980","type":"CtIfImpl","sourcecode":"if ((value.length()) <= addChars) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} else {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars));\n}"},"status":-3},{"failures":[77,78,79,80,81,82],"tindex":"776936bb-21e5-11e6-ac34-8ba51a6653eb","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate))","position":"org.apache.commons.codec.language.DoubleMetaphone:245","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate))"},"status":-1},{"failures":[83],"tindex":"776936bc-21e5-11e6-ac34-8f3dbf58addf","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:221","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"77695dcd-21e5-11e6-ac34-8dd653d8e7a5","series":0,"name":"replace","transplant":{"toString":"final byte[] key = new byte[8]","position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"byte[] finalb = ctx1.digest()","position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"status":-2},{"failures":[84],"tindex":"77695dce-21e5-11e6-ac34-533093fb8750","series":0,"name":"replace","transplant":{"toString":"result.append('K')","position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('K', 'J')","position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"status":-1},{"failures":[],"tindex":"77695dcf-21e5-11e6-ac34-379cafb341dd","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.QCodec.this.charset","position":"org.apache.commons.codec.net.QCodec:328","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"status":-2},{"failures":[85,86,87,88,89,90,91,92,93],"tindex":"77695dd0-21e5-11e6-ac34-23fe2d80a01f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"sb.append(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:388","type":"CtInvocationImpl","sourcecode":"sb.append(ch)"},"status":-1},{"failures":[77,81,94,95,84],"tindex":"77695dd1-21e5-11e6-ac34-636bb9cf3302","series":0,"name":"replace","transplant":{"toString":"cnt -= blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"index","cnt":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:571","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[96,66,97,67,68,98,99,69,100,101,102,103,104,105,70,71,72,73],"tindex":"77695dd2-21e5-11e6-ac34-ad0292590fcb","series":0,"name":"replace","transplant":{"toString":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"body","leftCharacter":"body","rightCharacter":"body","location":"body"},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String part : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}","position":"org.apache.commons.codec.language.bm.Rule:389","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}"},"status":-1},{"failures":[59,106,107,108,60,61,109,62],"tindex":"77695dd3-21e5-11e6-ac34-ef8fec4ae8e4","series":0,"name":"replace","transplant":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"variableMap":{"firstThree":"salt","lastThree":"salt"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX)","position":"org.apache.commons.codec.digest.Md5Crypt:92","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, salt, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)"},"status":-1},{"failures":[],"tindex":"776984e4-21e5-11e6-ac34-df93fcd86605","series":0,"name":"add","transplant":{"toString":"return \"\"","position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return sb.toString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:267","type":"CtReturnImpl","sourcecode":"return sb.toString()"},"status":-2},{"failures":[],"tindex":"776984e5-21e5-11e6-ac34-cbe8bbdc872d","series":0,"name":"replace","transplant":{"toString":"final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])","position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String lastPart = parts[((parts.length) - 1)]","position":"org.apache.commons.codec.language.bm.PhoneticEngine:434","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[((parts.int) - 1)]"},"status":-2},{"failures":[],"tindex":"776984e6-21e5-11e6-ac34-87836a3f9c9d","series":0,"name":"replace","transplant":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:287","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes)"},"status":-2},{"failures":[59,108,60,61,62,63,64,65],"tindex":"776984e7-21e5-11e6-ac34-2932cdc37625","series":0,"name":"replace","transplant":{"toString":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} ","position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"finalb"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd)","position":"org.apache.commons.codec.digest.Md5Crypt:285","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd)"},"status":-1},{"failures":[110,111],"tindex":"776984e8-21e5-11e6-ac34-5bf2a09a206d","series":0,"name":"replace","transplant":{"toString":"return out","position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"ascii"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)","position":"org.apache.commons.codec.binary.BinaryCodec:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii)"},"status":-1},{"failures":[],"tindex":"776984e9-21e5-11e6-ac34-a9cddbdf5fc6","series":0,"name":"replace","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"scanner.close()","position":"org.apache.commons.codec.language.bm.Lang:182","type":"CtInvocationImpl","sourcecode":"scanner.close()"},"status":-2},{"failures":[],"tindex":"776984ea-21e5-11e6-ac34-57dd3fdec36b","series":0,"name":"replace","transplant":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:472","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer)"},"status":-2},{"failures":[],"tindex":"7769abfb-21e5-11e6-ac34-35721e55d2e9","series":0,"name":"add","transplant":{"toString":"this.encodedBlockSize = encodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:207","type":"CtAssignmentImpl","sourcecode":"this.int = encodedBlockSize"},"variableMap":{"encodedBlockSize":"lineLength"},"type":"adrStmt","transplantationPoint":{"toString":"this.lineLength = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0","position":"org.apache.commons.codec.binary.BaseNCodec:209","type":"CtAssignmentImpl","sourcecode":"this.int = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0"},"status":-2},{"failures":[],"tindex":"7769abfc-21e5-11e6-ac34-7b1985ebd1e6","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))","position":"org.apache.commons.codec.digest.DigestUtils:688","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:261","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacMd5(key, valueToDigest))"},"status":-2},{"failures":[],"tindex":"7769abfd-21e5-11e6-ac34-c7742f50da15","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.language.Soundex.this.maxLength = maxLength","position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"i"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i += patternLength","position":"org.apache.commons.codec.language.bm.PhoneticEngine:226","type":"CtOperatorAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int += patternLength"},"status":-2},{"failures":[],"tindex":"7769abfe-21e5-11e6-ac34-37195e7e3f22","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"continue","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:501","type":"CtContinueImpl","sourcecode":"continue"},"status":0},{"failures":[95,84],"tindex":"7769abff-21e5-11e6-ac34-4bb8cbfd0f5c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:335","type":"CtIfImpl","sourcecode":"if (((index == 1) && ((charAt(value, (index - 1))) == 'A')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 5, \"UCCEE\", \"UCCES\"))) {\n    result.append(\"KS\");\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[],"tindex":"7769ac00-21e5-11e6-ac34-9d1de3eff0be","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"l3\", \"L3\")","position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"toString":"str = str.substring(1)","position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-2},{"failures":[],"tindex":"7769ac01-21e5-11e6-ac34-59ba23b733cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"name1 = getFirst3Last3(name1)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:239","type":"CtAssignmentImpl","sourcecode":"name1 = getFirst3Last3(name1)"},"status":0},{"failures":[112,1,2,113,114,115,116,117,118],"tindex":"7769d312-21e5-11e6-ac34-a721256c43c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.SEP, from)","position":"org.apache.commons.codec.net.RFC1522Codec:143","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"7769d313-21e5-11e6-ac34-a17772f677cf","series":0,"name":"replace","transplant":{"toString":"return name","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"variableMap":{"name":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return encode(str, getDefaultCharset())","position":"org.apache.commons.codec.net.URLCodec:248","type":"CtReturnImpl","sourcecode":"return encode(str, getDefaultCharset())"},"status":-2},{"failures":[],"tindex":"7769d314-21e5-11e6-ac34-710f33730501","series":0,"name":"replace","transplant":{"toString":"final int len = str.length()","position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"variableMap":{"str":"accentedWord"},"type":"adrStmt","transplantationPoint":{"toString":"final int n = accentedWord.length()","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:357","type":"CtLocalVariableImpl","sourcecode":"final int int = accentedWord.length()"},"status":-3},{"failures":[75,76],"tindex":"7769d315-21e5-11e6-ac34-f18bfd2ad15b","series":0,"name":"replace","transplant":{"toString":"c <<= 1","position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"left"},"type":"adrStmt","transplantationPoint":{"toString":"left = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:303","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[93],"tindex":"7769d316-21e5-11e6-ac34-65e177338929","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.FOLDINGS.get(ch)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:386","type":"CtAssignmentImpl","sourcecode":"ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch)"},"status":-1},{"failures":[],"tindex":"7769d317-21e5-11e6-ac34-13d104a27d72","series":0,"name":"add","transplant":{"toString":"final char c = accentedWord.charAt(i)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:360","type":"CtLocalVariableImpl","sourcecode":"final char char = accentedWord.charAt(i)"},"variableMap":{"i":"index","accentedWord":"str"},"type":"adrStmt","transplantationPoint":{"toString":"final char preHWChar = str.charAt((index - 2))","position":"org.apache.commons.codec.language.Soundex:190","type":"CtLocalVariableImpl","sourcecode":"final char char = str.charAt((index - 2))"},"status":-2},{"failures":[],"tindex":"7769d318-21e5-11e6-ac34-61103b93cd77","series":0,"name":"add","transplant":{"toString":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n    return true;\n} else if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char c = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:782","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHIA\")) {\n    return true;\n} else if (index <= 1) {\n    return false;\n} else if (isVowel(charAt(value, (index - 2)))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ACH\"))) {\n    return false;\n} else {\n    final char char = charAt(value, (index + 2));\n    return ((c != 'I') && (c != 'E')) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 6, \"BACHER\", \"MACHER\"));\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"toString":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-2},{"failures":[],"tindex":"7769fa29-21e5-11e6-ac34-8330af40f459","series":0,"name":"replace","transplant":{"toString":"roundsCustom = true","position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"variableMap":{"roundsCustom":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:923","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-3},{"failures":[],"tindex":"7769fa2a-21e5-11e6-ac34-93736b02dc75","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"y3\", \"Y3\")","position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"variableMap":{"txt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"toString":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[119,120,121],"tindex":"7769fa2b-21e5-11e6-ac34-1f9d86d39113","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3$\", \"A\")","position":"org.apache.commons.codec.language.Caverphone2:121","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3$\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"w\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[122,51],"tindex":"7769fa2c-21e5-11e6-ac34-db32aa4dd706","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('_')","position":"org.apache.commons.codec.net.URLCodec:87","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('_')"},"status":-1},{"failures":[],"tindex":"7769fa2d-21e5-11e6-ac34-b9c2fd22b433","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"java.util.Arrays.fill(saltBytes, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:504","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"status":-2},{"failures":[123,124,125,126],"tindex":"7769fa2e-21e5-11e6-ac34-7fd8957781ad","series":0,"name":"replace","transplant":{"toString":"sb.append(\"|\")","position":"org.apache.commons.codec.language.bm.PhoneticEngine:149","type":"CtInvocationImpl","sourcecode":"sb.append(\"|\")"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append(symb)","position":"org.apache.commons.codec.language.Metaphone:277","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[127],"tindex":"7769fa2f-21e5-11e6-ac34-251f2fd6e1f0","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()","position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_384)","position":"org.apache.commons.codec.digest.DigestUtils:144","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[],"tindex":"7769fa30-21e5-11e6-ac34-b95d243909f3","series":0,"name":"replace","transplant":{"toString":"java.lang.String saltString","position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final java.lang.String phonemeText = phoneme.getPhonemeText().toString()","position":"org.apache.commons.codec.language.bm.PhoneticEngine:343","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = phoneme.getPhonemeText().toString()"},"status":-2},{"failures":[],"tindex":"776a2141-21e5-11e6-ac34-e1a1e9502e39","series":0,"name":"replace","transplant":{"toString":"final char ch = getNextChar()","position":"org.apache.commons.codec.language.ColognePhonetic:274","type":"CtLocalVariableImpl","sourcecode":"final char char = getNextChar()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:185","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), 16))"},"status":-2},{"failures":[1,2,3,14,15,18,19,20,21,28,29,30,128,31,35,41,42,43,44],"tindex":"776a2142-21e5-11e6-ac34-2d43936ea2af","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)","position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"binaryData","key":"binaryData"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)","position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"status":-1},{"failures":[],"tindex":"776a2143-21e5-11e6-ac34-d9a95996f517","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"input","bContent":"this","this":"this","shouldMatch":"startsWith"},"type":"adrStmt","transplantationPoint":{"toString":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} ","position":"org.apache.commons.codec.language.bm.Rule:506","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} "},"status":-2},{"failures":[],"tindex":"776a4854-21e5-11e6-ac34-9f9ca4f96da3","series":0,"name":"replace","transplant":{"toString":"if (b < 0) {\n    b = 256 + b;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"toString":"for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n    } \n}","position":"org.apache.commons.codec.binary.BinaryCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-2},{"failures":[],"tindex":"776a4855-21e5-11e6-ac34-abfc173f2092","series":0,"name":"replace","transplant":{"toString":"this.soundexMapping = org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.RefinedSoundex:64","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.RefinedSoundex.org.apache.commons.codec.language.RefinedSoundex.char[]"},"variableMap":{"soundexMapping":"soundexMapping","org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH_MAPPING":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = mapping.toCharArray()","position":"org.apache.commons.codec.language.Soundex:109","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[75,76],"tindex":"776a4856-21e5-11e6-ac34-5b497f29c6a5","series":0,"name":"replace","transplant":{"toString":"int tmpLen = length","position":"org.apache.commons.codec.binary.CharSequenceUtils:56","type":"CtLocalVariableImpl","sourcecode":"int int = length"},"variableMap":{"length":"c"},"type":"adrStmt","transplantationPoint":{"toString":"int s = (((org.apache.commons.codec.digest.UnixCrypt.SKB[0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.SKB[1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.SKB[3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))])","position":"org.apache.commons.codec.digest.UnixCrypt:370","type":"CtLocalVariableImpl","sourcecode":"int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))])"},"status":-1},{"failures":[],"tindex":"776a4857-21e5-11e6-ac34-099c1264e655","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"s+\", \"S\")","position":"org.apache.commons.codec.language.Caverphone2:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"status":-3},{"failures":[81,94,95,84],"tindex":"776a6f68-21e5-11e6-ac34-739bca57df4b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1","position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"776a6f69-21e5-11e6-ac34-4fb2a5f74cba","series":0,"name":"add","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.language.Nysiis:249","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[],"tindex":"776a6f6a-21e5-11e6-ac34-3b15ee8d7652","series":0,"name":"add","transplant":{"toString":"char lastChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char hex2 = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.RADIX))","position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"status":-2},{"failures":[],"tindex":"776a6f6b-21e5-11e6-ac34-3b6c1303a9fc","series":0,"name":"replace","transplant":{"toString":"diff++","position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"readPos"},"type":"adrStmt","transplantationPoint":{"toString":"context.readPos += len","position":"org.apache.commons.codec.binary.BaseNCodec:295","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += len"},"status":-2},{"failures":[],"tindex":"776a6f6c-21e5-11e6-ac34-0d5c29280095","series":0,"name":"replace","transplant":{"toString":"this.replacementDefault = replacementDefault.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:173","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementDefault.split(\"\\\\|\")"},"variableMap":{"replacementDefault":"replacementBeforeVowel"},"type":"adrStmt","transplantationPoint":{"toString":"this.replacementBeforeVowel = replacementBeforeVowel.split(\"\\\\|\")","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:172","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String[] = replacementBeforeVowel.split(\"\\\\|\")"},"status":-2},{"failures":[],"tindex":"776bf60d-21e5-11e6-ac34-69213719fbef","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[119,120,129,130,131,132,121,133],"tindex":"776c1d1e-21e5-11e6-ac34-59817203c343","series":0,"name":"replace","transplant":{"toString":"return firstThree + lastThree","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"variableMap":{"firstThree":"txt","lastThree":"org.apache.commons.codec.language.Caverphone2.TEN_1"},"type":"adrStmt","transplantationPoint":{"toString":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.TEN_1.length())","position":"org.apache.commons.codec.language.Caverphone2:128","type":"CtReturnImpl","sourcecode":"return txt.substring(0, org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String.length())"},"status":-1},{"failures":[],"tindex":"776c1d1f-21e5-11e6-ac34-99baa051a2a1","series":0,"name":"add","transplant":{"toString":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS;\n} ","position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS","printable":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS.set(org.apache.commons.codec.net.QuotedPrintableCodec.TAB)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:106","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[81,95,84],"tindex":"776c1d20-21e5-11e6-ac34-c397ab70d0e2","series":0,"name":"add","transplant":{"toString":"hard = false","position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result = true","position":"org.apache.commons.codec.language.DoubleMetaphone:878","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-1},{"failures":[],"tindex":"776c1d21-21e5-11e6-ac34-5540f897790d","series":0,"name":"replace","transplant":{"toString":"java.lang.System.arraycopy(data, (((data.length) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.length)) + start), newData, 0, length)","position":"org.apache.commons.codec.language.ColognePhonetic:261","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(char[], (((char[].int) - (org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.this.int)) + start), newData, 0, length)"},"variableMap":{"data":"transcoded","length":"i","start":"i","newData":"transcoded"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.length)","position":"org.apache.commons.codec.language.Nysiis:284","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(transcoded, 0, chars, i, transcoded.int)"},"status":-3},{"failures":[134,135,56,57,136,58,137,138,139,127,140,141,142,143,144,145,146,147,148,149,150,151,152,153,4,5,154,155,156,157,158,19,33,34,35,37,159,160,39,161,40,162,47,41,42,48,163,43,164,165,166,167,168,169,44,45,170,171,172,173,174,46],"tindex":"776c1d22-21e5-11e6-ac34-7febd0e8f505","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.binary.Base64().decode(base64String)","position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.UTF_8)","position":"org.apache.commons.codec.binary.StringUtils:235","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[66,67,68,69,70,71,72,73],"tindex":"776c4333-21e5-11e6-ac34-d5eedb0bab5d","series":0,"name":"replace","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"toString":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inMultilineComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n            final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int cLine = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(myLine);\n                            sb.append(\", loc='\").append(loc).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String patternKey = r.pattern.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:412","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int int = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(int);\n                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"776c6a44-21e5-11e6-ac34-7d0cbc86d621","series":0,"name":"add","transplant":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"org.apache.commons.codec.binary.Base64.DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"toString":"return (octet == (org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.DECODE_TABLE.length))) && ((org.apache.commons.codec.binary.Base64.DECODE_TABLE[octet]) != (-1)))","position":"org.apache.commons.codec.binary.Base64:510","type":"CtReturnImpl","sourcecode":"return (octet == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.byte)) || (((octet >= 0) && (octet < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) && ((org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][octet]) != (-1)))"},"status":-2},{"failures":[],"tindex":"776c6a45-21e5-11e6-ac34-65fbe78aa3e4","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int j = 0","position":"org.apache.commons.codec.digest.UnixCrypt:235","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"776c6a46-21e5-11e6-ac34-6f3a71dee12a","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return context.eof ? org.apache.commons.codec.binary.BaseNCodec.EOF : 0","position":"org.apache.commons.codec.binary.BaseNCodec:301","type":"CtReturnImpl","sourcecode":"return context.boolean ? org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int : 0"},"status":-2},{"failures":[],"tindex":"776c6a47-21e5-11e6-ac34-9ffb2cfb1fdd","series":0,"name":"replace","transplant":{"toString":"return colognePhonetic(text1).equals(colognePhonetic(text2))","position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"variableMap":{"text1":"bContent","text2":"bContent"},"type":"adrStmt","transplantationPoint":{"toString":"return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)","position":"org.apache.commons.codec.language.bm.Rule:564","type":"CtReturnImpl","sourcecode":"return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch)"},"status":-2},{"failures":[],"tindex":"776c6a48-21e5-11e6-ac34-cd48bb39a498","series":0,"name":"replace","transplant":{"toString":"int i = 2","position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int j = 0","position":"org.apache.commons.codec.digest.UnixCrypt:359","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"776c6a49-21e5-11e6-ac34-3b0604502a03","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"ctx1.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:295","type":"CtInvocationImpl","sourcecode":"ctx1.reset()"},"status":-2},{"failures":[],"tindex":"776c6a4a-21e5-11e6-ac34-55b3443aaab4","series":0,"name":"replace","transplant":{"toString":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:414","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"O\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone2:122","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":-3},{"failures":[],"tindex":"776c6a4b-21e5-11e6-ac34-81572d037b02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"cy\", \"sy\")","position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":0},{"failures":[],"tindex":"776c6a4c-21e5-11e6-ac34-9521e617d384","series":0,"name":"add","transplant":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:529","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","this":"this","content":"content"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":97,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":154,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":36,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":153,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":59,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":57,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":58,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":130,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":11,"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull":32,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":60,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":137,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":118,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":47,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":142,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":35,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":78,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":165,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":147,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":76,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":79,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":2,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":123,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":115,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":71,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":68,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":70,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":88,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":26,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":69,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":25,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":161,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":97,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":92,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":98,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":160,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":101,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":135,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":24,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":66,"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence":143,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":99,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":148,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":42,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":67,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":100,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":28,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":40,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":16,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":80,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":6,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":30,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":119,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":164,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":104,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":10,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":136,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":134,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":31,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":39,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":77,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":61,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":152,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":37,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":169,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":51,"org.apache.commons.codec.language.SoundexTest.testB650":56,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":86,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":113,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":20,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":87,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":23,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":151,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":3,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":9,"org.apache.commons.codec.language.SoundexTest.testNewInstance":64,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":140,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":158,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":141,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":114,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":4,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":120,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":41,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":18,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":89,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":131,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":159,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":166,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":132,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":90,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":110,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":53,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":54,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":55,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":84,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":73,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":155,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":29,"org.apache.commons.codec.binary.Base64Test.testBase64":109,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":1,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":46,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":81,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":15,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":17,"org.apache.commons.codec.binary.Base64Test.testUUID":94,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":50,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":103,"org.apache.commons.codec.binary.Base64Test.testSingletons":107,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":0,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":125,"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence":144,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":82,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":162,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":133,"org.apache.commons.codec.binary.Base64Test.testPairs":93,"org.apache.commons.codec.binary.Base64Test.testConstructors":173,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":7,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":124,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":111,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":149,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":8,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":170,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":72,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":171,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":129,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":65,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":91,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":121,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":157,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":156,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":13,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":19,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":122,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":27,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":116,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":139,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":21,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":105,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":112,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":127,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":33,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":106,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":150,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":45,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":48,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":52,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":75,"org.apache.commons.codec.digest.B64Test.testB64from24bit":172,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":126,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":168,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":163,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":117,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":96,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":108,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":167,"org.apache.commons.codec.language.SoundexTest.testDifference":63,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":138,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":145,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":128,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":14,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":95,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":34,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":85},"transformations":[{"failures":[],"tindex":"bd0fb8d0-40d3-11e6-9335-e1f7ac9b78c4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:475","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"bd0fdfe1-40d3-11e6-9335-7515376d4ef7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:183","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"bd1006f2-40d3-11e6-9335-75163681b55c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"variableMap":{"diff":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:232","type":"CtReturnImpl","sourcecode":"return (context.byte[]) != null ? (context.int) - (context.int) : 0"},"status":-2},{"failures":[],"tindex":"bd1006f3-40d3-11e6-9335-597760f08980","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"found"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"status":-2},{"failures":[14,15],"tindex":"bd1006f4-40d3-11e6-9335-45b123490ff5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:341","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[16,17,18,19,20,21,22,23],"tindex":"bd102e05-40d3-11e6-9335-73b4d021f0d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:287","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd)"},"status":-1},{"failures":[14,15],"tindex":"bd102e06-40d3-11e6-9335-5332eba88f02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:430","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"bd102e07-40d3-11e6-9335-a3a8016aa53d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:199","type":"CtAssignmentImpl","sourcecode":"last = current"},"variableMap":{"current":"mapped","last":"last"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"status":0},{"failures":[16,17,18,19,21,22,23],"tindex":"bd102e08-40d3-11e6-9335-19636a0fedfb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:264","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx1.update(saltBytes);\n} "},"variableMap":{"ctx1":"ctx1","saltBytes":"keyBytes","i":"org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:272","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n} else {\n    ctx1.update(keyBytes);\n}"},"status":-1},{"failures":[24,25,26,27,28,29,30,31,32],"tindex":"bd105519-40d3-11e6-9335-7bb9416fa6c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:438","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:418","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text)"},"status":-1},{"failures":[33],"tindex":"bd10551a-40d3-11e6-9335-2784bba4644c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:252","type":"CtInvocationImpl","sourcecode":"code.append('H')"},"status":-1},{"failures":[],"tindex":"bd10551b-40d3-11e6-9335-c9898ecb7dff","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:212","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = altCtx.digest()"},"status":-2},{"failures":[34,35],"tindex":"bd10551c-40d3-11e6-9335-adff23997161","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:408","type":"CtOperatorAssignmentImpl","sourcecode":"b ^= t"},"variableMap":{"b":"c","t":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"status":-1},{"failures":[],"tindex":"bd107c2d-40d3-11e6-9335-a980945f0bc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:81","type":"CtForImpl","sourcecode":"for (int int = '0' ; i <= '9' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:100","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('{')"},"status":0},{"failures":[36,37,38],"tindex":"bd107c2e-40d3-11e6-9335-259d41df0e21","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:477","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"status":-1},{"failures":[],"tindex":"bd107c2f-40d3-11e6-9335-698e9d661746","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:436","type":"CtIfImpl","sourcecode":"if ((chrs[index]) == (element[0])) {\n    chrs[index] = element[1];\n    break;\n} "},"variableMap":{"chrs":"out","index":"incount","element":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:272","type":"CtWhileImpl","sourcecode":"while ((incount < (str.length())) && (count < (out.int))) {\n    mapped = getMappingCode(str, (incount++));\n    if (mapped != 0) {\n        if ((mapped != '0') && (mapped != last)) {\n            out[(count++)] = mapped;\n        } \n        last = mapped;\n    } \n}"},"status":-2},{"failures":[16,17,18,19,21,22,23],"tindex":"bd10a340-40d3-11e6-9335-919a936dbb83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"variableMap":{"ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:206","type":"CtInvocationImpl","sourcecode":"ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-1},{"failures":[5],"tindex":"bd10a341-40d3-11e6-9335-979e4bc01af7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"variableMap":{"urlsafe":"printable","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:278","type":"CtAssignmentImpl","sourcecode":"printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet"},"status":-1},{"failures":[34,39,40,35],"tindex":"bd10a342-40d3-11e6-9335-a76b0dc90b53","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:212","type":"CtInvocationImpl","sourcecode":"buffer.setCharAt(1, charOne)"},"status":-1},{"failures":[41,42,43],"tindex":"bd10a343-40d3-11e6-9335-c94fa6ef5339","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"status":-1},{"failures":[],"tindex":"bd10a344-40d3-11e6-9335-ffc329b3aca0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","remainder":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:332","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":0},{"failures":[44,45,46,47,48,49,50],"tindex":"bd10ca55-40d3-11e6-9335-8fe39fb5d301","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"status":-1},{"failures":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"tindex":"bd10ca56-40d3-11e6-9335-7f1b7e246ddd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"variableMap":{"code":"mapped"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:276","type":"CtAssignmentImpl","sourcecode":"out[(count++)] = mapped"},"status":-1},{"failures":[],"tindex":"bd10ca57-40d3-11e6-9335-492de59325ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:544","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[71,8,9,10,13],"tindex":"bd10f168-40d3-11e6-9335-030d3ff95b96","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"index","e0":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = bytes[index]"},"status":-1},{"failures":[72,73,74,75,76,77,78,79],"tindex":"bd10f169-40d3-11e6-9335-dff2d6bcfa70","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[80,81],"tindex":"bd11187a-40d3-11e6-9335-f19d941ff164","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:61","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":-1},{"failures":[],"tindex":"bd11187b-40d3-11e6-9335-c175d9b119f7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"status":0},{"failures":[],"tindex":"bd11187c-40d3-11e6-9335-17ec4453a4fc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:184","type":"CtIfImpl","sourcecode":"if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n    tmp[i] = b;\n} else {\n    tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.QuotedPrintableCodec.LF","b":"org.apache.commons.codec.net.QuotedPrintableCodec.LF","tmp":"bytes","i":"i","org.apache.commons.codec.net.QCodec.UNDERSCORE":"org.apache.commons.codec.net.QuotedPrintableCodec.LF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-2},{"failures":[],"tindex":"bd113f8d-40d3-11e6-9335-953304044f89","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"i","e0":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"status":-2},{"failures":[82,83],"tindex":"bd113f8e-40d3-11e6-9335-d9d1677db154","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"variableMap":{"replacedName":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-1},{"failures":[],"tindex":"bd113f8f-40d3-11e6-9335-4d83aa1510a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:141","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)"},"variableMap":{"buffer":"buffer","org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.CR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-2},{"failures":[84,83,85,14,15,86],"tindex":"bd1166a0-40d3-11e6-9335-2df4607e2c3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:98","type":"CtSwitchImpl","sourcecode":"switch (value.charAt(index)) {\n    case 'A' :\n    case 'E' :\n    case 'I' :\n    case 'O' :\n    case 'U' :\n    case 'Y' :\n        index = handleAEIOUY(result, index);\n        break;\n    case 'B' :\n        result.append('P');\n        index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n        break;\n    case '\\u00c7' :\n        result.append('S');\n        index++;\n        break;\n    case 'C' :\n        index = handleC(value, result, index);\n        break;\n    case 'D' :\n        index = handleD(value, result, index);\n        break;\n    case 'F' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n        break;\n    case 'G' :\n        index = handleG(value, result, index, slavoGermanic);\n        break;\n    case 'H' :\n        index = handleH(value, result, index);\n        break;\n    case 'J' :\n        index = handleJ(value, result, index, slavoGermanic);\n        break;\n    case 'K' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n        break;\n    case 'L' :\n        index = handleL(value, result, index);\n        break;\n    case 'M' :\n        result.append('M');\n        index = conditionM0(value, index) ? index + 2 : index + 1;\n        break;\n    case 'N' :\n        result.append('N');\n        index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n        break;\n    case '\\u00d1' :\n        result.append('N');\n        index++;\n        break;\n    case 'P' :\n        index = handleP(value, result, index);\n        break;\n    case 'Q' :\n        result.append('K');\n        index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n        break;\n    case 'R' :\n        index = handleR(value, result, index, slavoGermanic);\n        break;\n    case 'S' :\n        index = handleS(value, result, index, slavoGermanic);\n        break;\n    case 'T' :\n        index = handleT(value, result, index);\n        break;\n    case 'V' :\n        result.append('F');\n        index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n        break;\n    case 'W' :\n        index = handleW(value, result, index);\n        break;\n    case 'X' :\n        index = handleX(value, result, index);\n        break;\n    case 'Z' :\n        index = handleZ(value, result, index, slavoGermanic);\n        break;\n    default :\n        index++;\n        break;\n}"},"status":-1},{"failures":[36,37,38],"tindex":"bd1166a1-40d3-11e6-9335-a9348160ffde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:473","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer)"},"status":-1},{"failures":[87,88,89,90],"tindex":"bd1166a2-40d3-11e6-9335-577c3bcec450","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[83,14,15],"tindex":"bd1166a3-40d3-11e6-9335-21c8bc10b0f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"status":-1},{"failures":[],"tindex":"bd118db4-40d3-11e6-9335-63536ea06e28","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:573","type":"CtInvocationImpl","sourcecode":"result.append('P')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} "},"status":-2},{"failures":[72,75,77,78],"tindex":"bd118db5-40d3-11e6-9335-3b0cec4a654e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:602","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,44,119,120,121,122,123,124,125,126,48,49,50,127,128,129],"tindex":"bd118db6-40d3-11e6-9335-377434622e12","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:446","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)"},"status":-1},{"failures":[],"tindex":"bd118db7-40d3-11e6-9335-2f6d5e6596ee","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"value","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}"},"status":-2},{"failures":[130],"tindex":"bd118db8-40d3-11e6-9335-af2fe78b7d22","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:96","type":"CtReturnImpl","sourcecode":"return out"},"variableMap":{"out":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha256(key), valueToDigest).doFinal()"},"status":-1},{"failures":[],"tindex":"bd118db9-40d3-11e6-9335-a1aca086762f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"variableMap":{"b":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:337","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strA.length())))"},"status":-2},{"failures":[],"tindex":"bd11b4ca-40d3-11e6-9335-85448fc984b1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:295","type":"CtAssignmentImpl","sourcecode":"this.int = (org.apache.commons.codec.binary.Base64.this.int) - 1"},"variableMap":{"encodeSize":"currentLine","decodeSize":"currentLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:256","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":0},{"failures":[76,77,78,79],"tindex":"bd11b4cb-40d3-11e6-9335-ab3ebe57a34d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"status":-1},{"failures":[],"tindex":"bd11b4cc-40d3-11e6-9335-75b46346cd37","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"variableMap":{"line":"lang","ls":"ls"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:125","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"status":-2},{"failures":[131,132,133],"tindex":"bd11b4cd-40d3-11e6-9335-e5dddc9747af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(bytes)"},"variableMap":{"bytes":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:260","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getMd5Digest().digest(data)"},"status":-1},{"failures":[134,14,15],"tindex":"bd11b4ce-40d3-11e6-9335-0f4e805fd280","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:413","type":"CtIfImpl","sourcecode":"if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n    result.append(\"KN\", \"N\");\n} else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n    result.append(\"N\", \"KN\");\n} else {\n    result.append(\"KN\");\n}"},"status":-1},{"failures":[34,35],"tindex":"bd11dbdf-40d3-11e6-9335-a92d173d8474","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.StringEncoderComparator:86","type":"CtAssignmentImpl","sourcecode":"compareCode = 0"},"variableMap":{"compareCode":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:344","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-1},{"failures":[34,35],"tindex":"bd11dbe0-40d3-11e6-9335-3f80ec2e6abc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"status":-1},{"failures":[],"tindex":"bd11dbe1-40d3-11e6-9335-77d44723ce0c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << 8) + b"},"variableMap":{"ibitWorkArea":"pos","b":"pos","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:251","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[135,136],"tindex":"bd11dbe2-40d3-11e6-9335-3111ab47a64c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:100","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('{')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"status":-1},{"failures":[134,83,14,15],"tindex":"bd11dbe3-40d3-11e6-9335-e56248e9bf6b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:314","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n    index += 2;\n} else {\n    index++;\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n    index++;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[],"tindex":"bd1202f4-40d3-11e6-9335-031ad5a19840","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:947","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"status":-2},{"failures":[],"tindex":"bd1202f5-40d3-11e6-9335-f9f80c6b51b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((context.int) >= (context.int)) {\n    context.byte[] = null;\n} "},"variableMap":{"pos":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","context":"context","readPos":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:359","type":"CtIfImpl","sourcecode":"if ((context.int) == 0) {\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n} "},"status":-2},{"failures":[],"tindex":"bd1202f6-40d3-11e6-9335-c187ed0f915e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"status":-2},{"failures":[84,137,138,139,140,141,134,83,142,85,143,14,15,144,86],"tindex":"bd1202f7-40d3-11e6-9335-f1560e714e59","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:876","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n    if (value.startsWith(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-1},{"failures":[145,33,146,147,148,149],"tindex":"bd1202f8-40d3-11e6-9335-b5c6a44f2a9b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:162","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-1},{"failures":[],"tindex":"bd1202f9-40d3-11e6-9335-31bb32391164","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"es1","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"es1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}"},"status":-2},{"failures":[],"tindex":"bd122a0a-40d3-11e6-9335-bfbf9752ce1c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:528","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"));\n}"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"bd122a0b-40d3-11e6-9335-1356365593f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:116","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l$\", \"3\")"},"variableMap":{"txt":"org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:103","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-2},{"failures":[150,151,152,153,154,155],"tindex":"bd122a0c-40d3-11e6-9335-2dae4bec5a10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:467","type":"CtInvocationImpl","sourcecode":"sb.append(branch)"},"status":-1},{"failures":[],"tindex":"bd122a0d-40d3-11e6-9335-1fae309c627a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bigBytes","ascii":"bigBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:754","type":"CtIfImpl","sourcecode":"if ((((bigInt.bitLength()) % 8) != 0) && ((((bigInt.bitLength()) / 8) + 1) == (bitlen / 8))) {\n    return bigBytes;\n} "},"status":-2},{"failures":[71,8,9,10,13],"tindex":"bd122a0e-40d3-11e6-9335-09a27dfd150b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"variableMap":{"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        pos = 1;\n    }\n}"},"status":-1},{"failures":[156],"tindex":"bd12511f-40d3-11e6-9335-f3d16c024880","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[72,73,74,75,76,77,78,79],"tindex":"bd125120-40d3-11e6-9335-8f92597e8d27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:303","type":"CtInvocationImpl","sourcecode":"allRules.addAll(rules)"},"variableMap":{"rules":"rules","allRules":"rules"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:478","type":"CtInvocationImpl","sourcecode":"rules.add(r)"},"status":-1},{"failures":[157],"tindex":"bd125121-40d3-11e6-9335-c194860f047c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[158,45,159,46,47],"tindex":"bd125122-40d3-11e6-9335-6531dca2a48d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:360","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"bd125123-40d3-11e6-9335-a5aa1b6cbd83","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"variableMap":{"obj":"obj","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:533","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"bd127834-40d3-11e6-9335-e929ebd8f239","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"variableMap":{"t":"e1","left":"v"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"status":-2},{"failures":[134,14,15],"tindex":"bd127835-40d3-11e6-9335-7321bd9379a8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:750","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:639","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"bd127836-40d3-11e6-9335-31d5ccba107a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.BCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"status":0},{"failures":[],"tindex":"bd127837-40d3-11e6-9335-8d3e650988fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = dc.substring(0, 1)"},"variableMap":{"dc":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"status":-2},{"failures":[160,161,162,163],"tindex":"bd127838-40d3-11e6-9335-cf1acb556d60","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-1},{"failures":[4,6,164,8,9,10,13],"tindex":"bd127839-40d3-11e6-9335-517afec79fd5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[134,83,14,15],"tindex":"bd129f4a-40d3-11e6-9335-bb43644e6f80","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:677","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"TION\")) {\n    result.append('X');\n    index += 3;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TIA\", \"TCH\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"TH\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"TTH\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n        result.append('T');\n    } else {\n        result.append('0', 'T');\n    }\n    index += 2;\n} else {\n    result.append('T');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1;\n}"},"status":-1},{"failures":[165,36,37,38,166,167,168,169],"tindex":"bd129f4b-40d3-11e6-9335-cde66de80564","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"sBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"status":-1},{"failures":[],"tindex":"bd129f4c-40d3-11e6-9335-fbabd9c63c7d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:321","type":"CtAssignmentImpl","sourcecode":"name2Char[i] = ' '"},"variableMap":{"name2Char":"name1Char","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"status":-2},{"failures":[34,35],"tindex":"bd129f4d-40d3-11e6-9335-f3315f09d598","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[84,134,83,85,15],"tindex":"bd129f4e-40d3-11e6-9335-33597adf42cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:963","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} "},"status":-1},{"failures":[76,77,78,79],"tindex":"bd129f4f-40d3-11e6-9335-f739a25abdd6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:377","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)"},"variableMap":{"ph":"ph","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtIfImpl","sourcecode":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String java.lang.String = ph.substring(0, open);\n    final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n}"},"status":-1},{"failures":[],"tindex":"bd12c660-40d3-11e6-9335-61c12328b190","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"variableMap":{"encodeTable":"lineSeparator","org.apache.commons.codec.binary.Base32.HEX_ENCODE_TABLE":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:293","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"status":0},{"failures":[14,15],"tindex":"bd12c661-40d3-11e6-9335-15f75c5339b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:613","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[130],"tindex":"bd12c662-40d3-11e6-9335-d9c21c83a6f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:602","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"valueToDigest","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:495","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha256(key, valueToDigest))"},"status":-1},{"failures":[170],"tindex":"bd12c663-40d3-11e6-9335-5762e2bfdaa0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:93","type":"CtAssignmentImpl","sourcecode":"out[i] = ((byte)(f & 255))"},"variableMap":{"f":"i","i":"i","out":"tmp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:187","type":"CtAssignmentImpl","sourcecode":"tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte"},"status":-1},{"failures":[],"tindex":"bd12c664-40d3-11e6-9335-296b97df32f1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:562","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[165,166,167,168,171,169],"tindex":"bd12ed75-40d3-11e6-9335-4767e9419f0a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:458","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer)"},"status":-1},{"failures":[34,39,40,35],"tindex":"bd12ed76-40d3-11e6-9335-c9aa0b12a517","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:237","type":"CtForImpl","sourcecode":"for ( ; j < 6 ; j++) {\n    c <<= 1;\n    if (((b[y]) & u) != 0) {\n        c |= 1;\n    } \n    u >>>= 1;\n    if (u == 0) {\n        y++;\n        u = 128;\n    } \n    buffer.setCharAt(i, ((char)(org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][c])));\n}"},"status":-1},{"failures":[],"tindex":"bd12ed77-40d3-11e6-9335-8d7123ac0a52","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:830","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[14,15],"tindex":"bd12ed78-40d3-11e6-9335-55107442dab6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:553","type":"CtInvocationImpl","sourcecode":"result.appendPrimary('L')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:488","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[145,147,149],"tindex":"bd12ed79-40d3-11e6-9335-45b74079e061","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:122","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[],"tindex":"bd12ed7a-40d3-11e6-9335-17aa3213fd66","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:83","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:425","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String)"},"status":-2},{"failures":[],"tindex":"bd12ed7b-40d3-11e6-9335-4507ef7a23bf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"ascii","key":"ascii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:156","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray())"},"status":-2},{"failures":[165,36,37,38,172,16,17,18,166,167,168,169,19,21,22,23],"tindex":"bd13148c-40d3-11e6-9335-0fd74a6ff09c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:61","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt((w & 63)))"},"status":-1},{"failures":[150,151,152,153,154,155],"tindex":"bd13148d-40d3-11e6-9335-21cdb8d604f0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:493","type":"CtInvocationImpl","sourcecode":"currentBranches.add(new org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch())"},"variableMap":{"currentBranches":"currentBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:542","type":"CtInvocationImpl","sourcecode":"currentBranches.addAll(nextBranches)"},"status":-1},{"failures":[173],"tindex":"bd13148e-40d3-11e6-9335-b1217404daf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"status":-1},{"failures":[],"tindex":"bd13148f-40d3-11e6-9335-f73258c55625","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-2},{"failures":[134,14,15],"tindex":"bd131490-40d3-11e6-9335-d90c7e59e00c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:524","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.isBase64(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(base64))"},"variableMap":{"base64":"org.apache.commons.codec.language.DoubleMetaphone.VOWELS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:866","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String.indexOf(ch)) != (-1)"},"status":-1},{"failures":[],"tindex":"bd133ba1-40d3-11e6-9335-b78a647914ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:177","type":"CtBreakImpl","sourcecode":"break"},"status":0},{"failures":[66],"tindex":"bd133ba2-40d3-11e6-9335-9f05107a93fd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"status":-1},{"failures":[14,15],"tindex":"bd133ba3-40d3-11e6-9335-65da4796f86f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:706","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
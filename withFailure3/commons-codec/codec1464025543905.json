{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":39,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":33,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":32,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":47,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":96,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":95,"org.apache.commons.codec.binary.Base64Test.testTriplets":63,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":0,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":23,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":21,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":24,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":53,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":76,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":84,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":87,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":43,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":70,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":71,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":75,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":55,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":51,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":72,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":73,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":56,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":92,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":26,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":11,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":13,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":80,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":16,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":25,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":57,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":22,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":65,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":35,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":48,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":89,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":52,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":5,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":59,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":88,"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":30,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":64,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":94,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":50,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":44,"org.apache.commons.codec.language.MetaphoneTest.testTCH":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":1,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":45,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":86,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":91,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":78,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":98,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":40,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":18,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":85,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":37,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":74,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":34,"org.apache.commons.codec.binary.Base64Test.testBase64":83,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":12,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":8,"org.apache.commons.codec.binary.Base64Test.testUUID":67,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":77,"org.apache.commons.codec.binary.Base64Test.testSingletons":79,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":90,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":82,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":15,"org.apache.commons.codec.binary.Base64Test.testPairs":66,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":54,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":14,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":17,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":38,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":93,"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull":58,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":97,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":46,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":60,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":62,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":49,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":3,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":69,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":81,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":36,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":61,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":7,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":68,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":9,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":41},"transformations":[{"failures":[0,1,2,3,4,5],"tindex":"2c61e33c-210e-11e6-b61e-5deacd7dec73","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:482","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:461","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer)"},"status":-1},{"failures":[6,7,8],"tindex":"2c620a4d-210e-11e6-b61e-c5a27693f5d9","series":0,"name":"add","transplant":{"toString":"result.append('J', 'K')","position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S', 'X')","position":"org.apache.commons.codec.language.DoubleMetaphone:291","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[9,10],"tindex":"2c620a4e-210e-11e6-b61e-777180270419","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule)","position":"org.apache.commons.codec.digest.UnixCrypt:288","type":"CtAssignmentImpl","sourcecode":"right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule)"},"status":-1},{"failures":[],"tindex":"2c620a4f-210e-11e6-b61e-d7655afacdb8","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"string","key":"string"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.TRUE_LENGTH, string.length())) : string","position":"org.apache.commons.codec.language.Nysiis:316","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.this.isStrict() ? string.substring(0, java.lang.Math.min(org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.int, string.length())) : string"},"status":-2},{"failures":[],"tindex":"2c620a50-210e-11e6-b61e-f79b0c81c91a","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (final java.lang.String part : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}","position":"org.apache.commons.codec.language.bm.Rule:389","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : body.split(\"[|]\")) {\n    phs.add(org.apache.commons.codec.language.bm.Rule.parsePhoneme(part));\n}"},"status":-2},{"failures":[],"tindex":"2c623161-210e-11e6-b61e-d9ac9480e3a4","series":0,"name":"replace","transplant":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base32:518","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"variableMap":{"currentLinePos":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","pos":"currentLinePos","context":"context","length":"org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK","buffer":"lineSeparator","lineSeparator":"encodeTable","lineLength":"org.apache.commons.codec.binary.Base32.MASK_5BITS"},"type":"adrStmt","transplantationPoint":{"toString":"if (0 == (context.modulus)) {\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 35))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 30))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 25))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 20))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 15))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 10))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(((context.lbitWorkArea) >> 5))) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    buffer[((context.pos)++)] = encodeTable[(((int)(context.lbitWorkArea)) & (org.apache.commons.codec.binary.Base32.MASK_5BITS))];\n    context.currentLinePos += org.apache.commons.codec.binary.Base32.BYTES_PER_ENCODED_BLOCK;\n    if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n        java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n        context.pos += lineSeparator.length;\n        context.currentLinePos = 0;\n    } \n} ","position":"org.apache.commons.codec.binary.Base32:508","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n    context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":-2},{"failures":[],"tindex":"2c62cda2-210e-11e6-b61e-fbcf0967ef6a","series":0,"name":"replace","transplant":{"toString":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))","position":"org.apache.commons.codec.binary.BaseNCodec:394","type":"CtReturnImpl","sourcecode":"return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray))"},"variableMap":{"pArray":"key"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[11,12,13,14,15],"tindex":"2c631bc3-210e-11e6-b61e-7398a204f5b9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"h\", \"2\")","position":"org.apache.commons.codec.language.Caverphone2:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"h\", \"2\")"},"status":-1},{"failures":[16,6,7,8],"tindex":"2c631bc4-210e-11e6-b61e-39199c65d4cb","series":0,"name":"replace","transplant":{"toString":"result.append('J', ' ')","position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}","position":"org.apache.commons.codec.language.DoubleMetaphone:765","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}"},"status":-1},{"failures":[],"tindex":"2c631bc5-210e-11e6-b61e-fd823e0d6722","series":0,"name":"replace","transplant":{"toString":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE;\n}","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"avail","minRating":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"avail","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"avail"},"type":"adrStmt","transplantationPoint":{"toString":"if (avail > 0) {\n    final byte[] buf = new byte[avail];\n    final int c = baseNCodec.readResults(buf, 0, avail, context);\n    if (c > 0) {\n        out.write(buf, 0, c);\n    } \n} ","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (avail > 0) {\n    final byte[] byte[] = new byte[avail];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (c > 0) {\n        java.io.OutputStream.write(buf, 0, c);\n    } \n} "},"status":-3},{"failures":[17,18,19,20,21,22,23,24],"tindex":"2c6342d6-210e-11e6-b61e-65bba0e12c9b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n        inMultilineComment = true;\n    } else {\n        final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE)) {\n            final java.lang.String incl = line.substring(org.apache.commons.codec.language.bm.Rule.HASH_INCLUDE.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] parts = line.split(\"\\\\s+\");\n            if ((parts.length) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int cLine = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(myLine);\n                            sb.append(\", loc='\").append(loc).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String patternKey = r.pattern.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:412","type":"CtIfImpl","sourcecode":"if (inMultilineComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inMultilineComment = true;\n    } else {\n        final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n        if (cmtI >= 0) {\n            line = line.substring(0, cmtI);\n        } \n        line = line.trim();\n        if ((line.length()) == 0) {\n            continue;\n        } \n        if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n            final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n            if (incl.contains(\" \")) {\n                throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n            } else {\n                lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n            }\n        } else {\n            final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n            if ((parts.int) != 4) {\n                throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n            } else {\n                try {\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                    final int int = currentLine;\n                    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                        private final int myLine = cLine;\n\n                        private final java.lang.String loc = location;\n\n                        @java.lang.Override\n                        public java.lang.String toString() {\n                            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                            sb.append(\"Rule\");\n                            sb.append(\"{line=\").append(int);\n                            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                            sb.append(\", pat='\").append(pat).append('\\'');\n                            sb.append(\", lcon='\").append(lCon).append('\\'');\n                            sb.append(\", rcon='\").append(rCon).append('\\'');\n                            sb.append('}');\n                            return sb.toString();\n                        }\n                    };\n                    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                    if (rules == null) {\n                        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                        lines.put(patternKey, rules);\n                    } \n                    rules.add(r);\n                } catch (final java.lang.IllegalArgumentException e) {\n                    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n                }\n            }\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"2c6390f7-210e-11e6-b61e-01cb53b5c544","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())","position":"org.apache.commons.codec.net.QuotedPrintableCodec:430","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.encode(str, getCharset())"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return str","position":"org.apache.commons.codec.language.bm.Rule:621","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"failures":[9,25,26,10],"tindex":"2c6390f8-210e-11e6-b61e-8dfb8b840c4a","series":0,"name":"replace","transplant":{"toString":"key[i] = 0","position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"iValue","key":"b"},"type":"adrStmt","transplantationPoint":{"toString":"b[(offset++)] = ((byte)(iValue & 255))","position":"org.apache.commons.codec.digest.UnixCrypt:399","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)(iValue & 255))"},"status":-1},{"failures":[],"tindex":"2c6390f9-210e-11e6-b61e-6dcc4c7c36e0","series":0,"name":"replace","transplant":{"toString":"int v = r ^ (r >>> 16)","position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"maxLength"},"type":"adrStmt","transplantationPoint":{"toString":"final int addChars = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.maxLength) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.primary.length())","position":"org.apache.commons.codec.language.DoubleMetaphone:979","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length())"},"status":-2},{"failures":[],"tindex":"2c63b80a-210e-11e6-b61e-958402607568","series":0,"name":"replace","transplant":{"toString":"char nextChar","position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"char lastChar = '\u0000'","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"status":-2},{"failures":[],"tindex":"2c63b80b-210e-11e6-b61e-53d23943f8ff","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())","position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"variableMap":{"array":"bytes"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)","position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"status":-2},{"failures":[],"tindex":"2c63b80c-210e-11e6-b61e-f7148064d153","series":0,"name":"add","transplant":{"toString":"name = getFirst3Last3(name)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"name = getFirst3Last3(name)"},"variableMap":{"name":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"p+\", \"P\")","position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-2},{"failures":[27,28],"tindex":"2c63b80d-210e-11e6-b61e-615a5745a284","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"code.append('X')","position":"org.apache.commons.codec.language.Metaphone:199","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39],"tindex":"2c63b80e-210e-11e6-b61e-b39dc072b38f","series":0,"name":"add","transplant":{"toString":"lastReplacement = null","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:84","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"variableMap":{"lastReplacement":"cachedString"},"type":"adrStmt","transplantationPoint":{"toString":"cachedString = builder.toString()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"2c647b5f-210e-11e6-b61e-6f8966e6732b","series":0,"name":"replace","transplant":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:617","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":0},{"failures":[40,6,41,8],"tindex":"2c647b60-210e-11e6-b61e-4bf1b431bb22","series":0,"name":"replace","transplant":{"toString":"return \"B\"","position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.alternate.toString()","position":"org.apache.commons.codec.language.DoubleMetaphone:1001","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"2c647b61-210e-11e6-b61e-5b6b7361c5e5","series":0,"name":"add","transplant":{"toString":"txt = txt.replaceAll(\"cq\", \"2q\")","position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"toString":"line = line.trim()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-2},{"failures":[42,43,44,45],"tindex":"2c64a172-210e-11e6-b61e-e1a214f12a3e","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"^enough\", \"enou2f\")","position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":-1},{"failures":[],"tindex":"2c64a173-210e-11e6-b61e-21526d6569fb","series":0,"name":"replace","transplant":{"toString":"if (text == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"source"},"type":"adrStmt","transplantationPoint":{"toString":"if (source == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"status":-3},{"failures":[],"tindex":"2c64a174-210e-11e6-b61e-799ddb53c534","series":0,"name":"replace","transplant":{"toString":"return colognePhonetic(text1).equals(colognePhonetic(text2))","position":"org.apache.commons.codec.language.ColognePhonetic:422","type":"CtReturnImpl","sourcecode":"return colognePhonetic(text1).equals(colognePhonetic(text2))"},"variableMap":{"text1":"str2","text2":"str1"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))","position":"org.apache.commons.codec.language.AbstractCaverphone:77","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(str1).equals(org.apache.commons.codec.language.AbstractCaverphone.this.encode(str2))"},"status":-2},{"failures":[],"tindex":"2c64a175-210e-11e6-b61e-eb6832f490f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"))","position":"org.apache.commons.codec.net.QuotedPrintableCodec:535","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable decoded\"))"},"status":-2},{"failures":[],"tindex":"2c64a176-210e-11e6-b61e-0d4808d6c230","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"for (java.lang.String lang : languages) {\n    if (sl.languages.contains(lang)) {\n        ls.add(lang);\n    } \n}","position":"org.apache.commons.codec.language.bm.Languages:123","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n    if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n        ls.add(lang);\n    } \n}"},"status":-2},{"failures":[46],"tindex":"2c64a177-210e-11e6-b61e-613f8cdf6a48","series":0,"name":"replace","transplant":{"toString":"return new org.apache.commons.codec.binary.Base64().decode(base64String)","position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))","position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[47,48,49,50,51,52],"tindex":"2c64a178-210e-11e6-b61e-81edaaad5507","series":0,"name":"replace","transplant":{"toString":"local.setCharAt(0, 'W')","position":"org.apache.commons.codec.language.Metaphone:132","type":"CtInvocationImpl","sourcecode":"local.setCharAt(0, 'W')"},"variableMap":{"local":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[53,54,21,22,23,24],"tindex":"2c64c889-210e-11e6-b61e-73fea18bf570","series":0,"name":"replace","transplant":{"toString":"int index2 = start","position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"i"},"type":"adrStmt","transplantationPoint":{"toString":"final int c = (o1.phonemeText.charAt(i)) - (o2.phonemeText.charAt(i))","position":"org.apache.commons.codec.language.bm.Rule:92","type":"CtLocalVariableImpl","sourcecode":"final int int = (o1.java.lang.StringBuilder.charAt(i)) - (o2.java.lang.StringBuilder.charAt(i))"},"status":-1},{"failures":[7],"tindex":"2c64c88a-210e-11e6-b61e-5ff1b85e1f23","series":0,"name":"replace","transplant":{"toString":"result.append('X', 'S')","position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.appendAlternate('S')","position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"status":-1},{"failures":[],"tindex":"2c64c88b-210e-11e6-b61e-b72e782c3dfa","series":0,"name":"add","transplant":{"toString":"if (input == null) {\n    return null;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"toString":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)","position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-2},{"failures":[],"tindex":"2c64c88c-210e-11e6-b61e-7f314301db29","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)","position":"org.apache.commons.codec.language.Caverphone:89","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone.this.caverphone(str)"},"variableMap":{"str":"original"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.UTF_8))","position":"org.apache.commons.codec.digest.UnixCrypt:263","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.UnixCrypt.crypt(original.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"2c64c88d-210e-11e6-b61e-7787a69f1242","series":0,"name":"add","transplant":{"toString":"return -1","position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return (data.length) - (length)","position":"org.apache.commons.codec.language.ColognePhonetic:270","type":"CtReturnImpl","sourcecode":"return (char[].int) - (int)"},"status":-2},{"failures":[],"tindex":"2c64c88e-210e-11e6-b61e-817af3acd38a","series":0,"name":"replace","transplant":{"toString":"key.append(str.charAt(0))","position":"org.apache.commons.codec.language.Nysiis:274","type":"CtInvocationImpl","sourcecode":"key.append(str.charAt(0))"},"variableMap":{"str":"loc","key":"sb"},"type":"adrStmt","transplantationPoint":{"toString":"sb.append(\", loc='\").append(loc).append('\\'')","position":"org.apache.commons.codec.language.bm.Rule:464","type":"CtInvocationImpl","sourcecode":"sb.append(\", loc='\").append(java.lang.String).append('\\'')"},"status":0},{"failures":[],"tindex":"2c64c88f-210e-11e6-b61e-31d102b57667","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")","position":"org.apache.commons.codec.language.bm.Rule:700","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))","position":"org.apache.commons.codec.language.bm.Rule:437","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location))"},"status":0},{"failures":[55,56,57],"tindex":"2c64efa0-210e-11e6-b61e-37c61a9426ce","series":0,"name":"add","transplant":{"toString":"nextChar = '-'","position":"org.apache.commons.codec.language.ColognePhonetic:344","type":"CtAssignmentImpl","sourcecode":"nextChar = '-'"},"variableMap":{"nextChar":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-1},{"failures":[],"tindex":"2c64efa1-210e-11e6-b61e-039bb424819c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"this.decodeTable = org.apache.commons.codec.binary.Base32.DECODE_TABLE","position":"org.apache.commons.codec.binary.Base32:288","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[],"tindex":"2c64efa2-210e-11e6-b61e-b7f6b6b37bc9","series":0,"name":"replace","transplant":{"toString":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"primary","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"primary"},"type":"adrStmt","transplantationPoint":{"toString":"appendPrimary(primary)","position":"org.apache.commons.codec.language.DoubleMetaphone:974","type":"CtInvocationImpl","sourcecode":"appendPrimary(primary)"},"status":-3},{"failures":[58,59],"tindex":"2c64efa3-210e-11e6-b61e-9f9c2ef9e595","series":0,"name":"replace","transplant":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return null","position":"org.apache.commons.codec.net.BCodec:178","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"tindex":"2c64efa4-210e-11e6-b61e-8b7625909691","series":0,"name":"replace","transplant":{"toString":"cp += blocksize","position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"b","cp":"b"},"type":"adrStmt","transplantationPoint":{"toString":"context.ibitWorkArea = ((context.ibitWorkArea) << 8) + b","position":"org.apache.commons.codec.binary.Base64:385","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << 8) + b"},"status":-1},{"failures":[],"tindex":"2c64efa5-210e-11e6-b61e-91ac5c98028f","series":0,"name":"replace","transplant":{"toString":"final byte[] buf = new byte[avail]","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:113","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[avail]"},"variableMap":{"avail":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final byte[] l_ascii = new byte[(raw.length) << 3]","position":"org.apache.commons.codec.binary.BinaryCodec:243","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(raw.int) << 3]"},"status":-2},{"failures":[98],"tindex":"2c64efa6-210e-11e6-b61e-d95f14139755","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (arrayOctet == null) {\n    return false;\n} ","position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"2c6516b7-210e-11e6-b61e-6de4bb0b3e05","series":0,"name":"replace","transplant":{"toString":"int startSrc = 0","position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final int c = (o1.phonemeText.charAt(i)) - (o2.phonemeText.charAt(i))","position":"org.apache.commons.codec.language.bm.Rule:92","type":"CtLocalVariableImpl","sourcecode":"final int int = (o1.java.lang.StringBuilder.charAt(i)) - (o2.java.lang.StringBuilder.charAt(i))"},"status":-2},{"failures":[],"tindex":"2c6516b8-210e-11e6-b61e-752037adde71","series":0,"name":"add","transplant":{"toString":"return null","position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return \"Q\"","position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"status":-2},{"failures":[],"tindex":"2c6516b9-210e-11e6-b61e-ab37b7f184fb","series":0,"name":"replace","transplant":{"toString":"return toString().hashCode()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:124","type":"CtReturnImpl","sourcecode":"return toString().hashCode()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return 0","position":"org.apache.commons.codec.language.SoundexUtils:112","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[55,56],"tindex":"2c6516ba-210e-11e6-b61e-8f3a23203f7b","series":0,"name":"add","transplant":{"toString":"code = '8'","position":"org.apache.commons.codec.language.ColognePhonetic:367","type":"CtAssignmentImpl","sourcecode":"code = '8'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '3'","position":"org.apache.commons.codec.language.ColognePhonetic:359","type":"CtAssignmentImpl","sourcecode":"code = '3'"},"status":-1},{"failures":[],"tindex":"2c6516bb-210e-11e6-b61e-bbdb9542c9e1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (bigInt == null) {\n    throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n} ","position":"org.apache.commons.codec.binary.Base64:735","type":"CtIfImpl","sourcecode":"if (bigInt == null) {\n    throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n} "},"status":0},{"failures":[],"tindex":"2c6516bc-210e-11e6-b61e-cf3ae594fe9d","series":0,"name":"replace","transplant":{"toString":"this.unencodedBlockSize = unencodedBlockSize","position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index = handleGH(value, result, index)","position":"org.apache.commons.codec.language.DoubleMetaphone:411","type":"CtAssignmentImpl","sourcecode":"index = handleGH(value, result, index)"},"status":-2},{"failures":[7,8],"tindex":"2c6516bd-210e-11e6-b61e-0fbacd259bb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"2c6516be-210e-11e6-b61e-c119ee33dea8","series":0,"name":"replace","transplant":{"toString":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")","position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException(e)","position":"org.apache.commons.codec.digest.HmacUtils:424","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":51,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
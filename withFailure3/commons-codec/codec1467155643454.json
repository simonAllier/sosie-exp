{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":62,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":78,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":117,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":71,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":27,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":26,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":119,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":57,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":87,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":132,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":47,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":111,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":103,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":15,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":81,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":24,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":141,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeNull":53,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":143,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":142,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":9,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":10,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":93,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":124,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":14,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":70,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":85,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":11,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":12,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":69,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":30,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":86,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptWithoutSalt":127,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":133,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":79,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":108,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":96,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":2,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":73,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":106,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":75,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptExplicitCall":126,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":56,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":5,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":60,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_One_Letter_to_Nothing":51,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":90,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":33,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":89,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":131,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":25,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":137,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":59,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":140,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":1,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":4,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":48,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":80,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":42,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":32,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":77,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":109,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":144,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_6_Returns4_Successfully":121,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":128,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":99,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Space_to_Nothing":52,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":16,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":88,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":41,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_NoSpace_to_Nothing":50,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":13,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":66,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":63,"org.apache.commons.codec.binary.Base64Test.testBase64":21,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":46,"org.apache.commons.codec.binary.Base64Test.testUUID":7,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":40,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":134,"org.apache.commons.codec.binary.Base64Test.testSingletons":18,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":34,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":95,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":44,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":113,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":20,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":55,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":74,"org.apache.commons.codec.binary.Base64Test.testPairs":6,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testEncodeEmpty":54,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":82,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":112,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":100,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":0,"org.apache.commons.codec.binary.Base64Test.testCodec112":17,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":45,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":116,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":92,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":31,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":110,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully2":123,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":3,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":136,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":28,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":104,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":97,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":101,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":138,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":35,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":37,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_Null_to_Nothing":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":84,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":58,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":115,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":91,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":114,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":130,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":105,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":94,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":19,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_7_Returns4_Successfully":122,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":129,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":65,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":83,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":36,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testgetMinRating_5_Returns4_Successfully":125,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetMinRating_7_Return4_Successfully":120,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":8,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":107,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":118},"transformations":[{"failures":[0,1,2,3],"tindex":"01195cbc-3d86-11e6-9a16-6111ad515a55","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:94","type":"CtReturnImpl","sourcecode":"return c"},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer)"},"status":-1},{"failures":[],"tindex":"011983cd-3d86-11e6-9a16-454ea8093393","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"line","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:279","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"011983ce-3d86-11e6-9a16-b1b372ad2f43","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:344","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 0 :\n        break;\n    case 1 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    case 2 :\n        buffer[((context.int)++)] = byte[][(((context.int) >> 10) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) >> 4) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        buffer[((context.int)++)] = byte[][(((context.int) << 2) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n        if ((byte[]) == (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[])) {\n            buffer[((context.int)++)] = byte;\n        } \n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-1},{"failures":[],"tindex":"011983cf-3d86-11e6-9a16-fd3ab116fcb0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:118","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[38,39,40,41,42,43],"tindex":"0119aae0-3d86-11e6-9a16-9dd63852ddaa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-1},{"failures":[44,45,46,47,48,35,36,37],"tindex":"0119aae1-3d86-11e6-9a16-8589cab086ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:81","type":"CtReturnImpl","sourcecode":"return buffer.toString()"},"status":-1},{"failures":[49,50,51,52,53,54],"tindex":"0119aae2-3d86-11e6-9a16-e18ef37c4ff5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"status":-1},{"failures":[],"tindex":"0119aae3-3d86-11e6-9a16-71b4d2b2ee23","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:78","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"c\", \"k\")"},"status":0},{"failures":[],"tindex":"0119aae4-3d86-11e6-9a16-dbd026138e5f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":-2},{"failures":[],"tindex":"0119d1f5-3d86-11e6-9a16-07f25d517fba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:358","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang))"},"variableMap":{"nameType":"value","rt":"value","lang":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[55],"tindex":"0119d1f6-3d86-11e6-9a16-d123dabd8f9e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:890","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[56,57],"tindex":"0119d1f7-3d86-11e6-9a16-e3c5e8a7c99f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:601","type":"CtIfImpl","sourcecode":"if ((prefix.length()) > (input.length())) {\n    return false;\n} "},"variableMap":{"input":"chars","prefix":"chars"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:240","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (chars.length()) ; i++) {\n    if ((chars.charAt(i)) == input) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"0119d1f8-3d86-11e6-9a16-db824c27fcf3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.RuleType:38","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[58,59,60,61,62,63,64,65,66],"tindex":"0119d1f9-3d86-11e6-9a16-8f192c7a5f76","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean boolean = ((replacements.int) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n            for (final java.lang.String java.lang.String : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-1},{"failures":[67],"tindex":"0119d1fa-3d86-11e6-9a16-358ff62f8203","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:579","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[],"tindex":"0119f90b-3d86-11e6-9a16-059f5df961aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n    index++;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[39,40],"tindex":"0119f90c-3d86-11e6-9a16-3fbd00c3c7e9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"variableMap":{"index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:844","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'M') {\n    return true;\n} "},"status":-1},{"failures":[],"tindex":"0119f90d-3d86-11e6-9a16-d75a070af210","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:645","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = pattern"},"variableMap":{"pattern":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:144","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[39,40],"tindex":"0119f90e-3d86-11e6-9a16-234eb6097802","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:718","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[],"tindex":"0119f90f-3d86-11e6-9a16-875583b33d08","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":0},{"failures":[],"tindex":"0119f910-3d86-11e6-9a16-e78b2487e064","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:507","type":"CtAssignmentImpl","sourcecode":"context.long = ((context.long) << 8) + b"},"variableMap":{"b":"org.apache.commons.codec.binary.Base32.BITS_PER_ENCODED_BYTE","context":"context","lbitWorkArea":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:358","type":"CtAssignmentImpl","sourcecode":"context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result"},"status":-2},{"failures":[],"tindex":"011a2021-3d86-11e6-9a16-cd554dadf3a3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"text","org.apache.commons.codec.language.Caverphone1.SIX_1":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"011a2022-3d86-11e6-9a16-cbe362441d46","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:260","type":"CtReturnImpl","sourcecode":"return count >= minRating"},"variableMap":{"count":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:847","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")))"},"status":-2},{"failures":[],"tindex":"011a2023-3d86-11e6-9a16-5bf958b212d3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:251","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":0},{"failures":[68,69,70,71,72,73],"tindex":"011a2024-3d86-11e6-9a16-b10d9bc2bbab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:228","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUsAscii(encode(str.getBytes(charset)))"},"status":-1},{"failures":[],"tindex":"011a2025-3d86-11e6-9a16-190d8caeae48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:283","type":"CtIfImpl","sourcecode":"if (useHex) {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n} else {\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n    this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[];\n}"},"status":-2},{"failures":[56,57],"tindex":"011a2026-3d86-11e6-9a16-f1ac484ffe0b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","content":"bContent"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:559","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n        }\n    };\n} "},"status":-1},{"failures":[74],"tindex":"011a2027-3d86-11e6-9a16-c3c21fd54a18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:350","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1(data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"status":-1},{"failures":[],"tindex":"011a4738-3d86-11e6-9a16-db95459fdad2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"status":-2},{"failures":[39,40,75,43],"tindex":"011a4739-3d86-11e6-9a16-653adcde9fad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:410","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 1))) == 'H') {\n    index = handleGH(value, result, index);\n} else if ((charAt(value, (index + 1))) == 'N') {\n    if (((index == 1) && (isVowel(charAt(value, 0)))) && (!slavoGermanic)) {\n        result.append(\"KN\", \"N\");\n    } else if (((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"EY\"))) && ((charAt(value, (index + 1))) != 'Y')) && (!slavoGermanic)) {\n        result.append(\"N\", \"KN\");\n    } else {\n        result.append(\"KN\");\n    }\n    index = index + 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"LI\")) && (!slavoGermanic)) {\n    result.append(\"KL\", \"L\");\n    index += 2;\n} else if ((index == 0) && (((charAt(value, (index + 1))) == 'Y') || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[])))) {\n    result.append('K', 'J');\n    index += 2;\n} else if (((((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ER\")) || ((charAt(value, (index + 1))) == 'Y')) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"E\", \"I\")))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"RGY\", \"OGY\")))) {\n    result.append('K', 'J');\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"E\", \"I\", \"Y\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"AGGI\", \"OGGI\"))) {\n    if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n        result.append('K');\n    } else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n        result.append('J');\n    } else {\n        result.append('J', 'K');\n    }\n    index += 2;\n} else if ((charAt(value, (index + 1))) == 'G') {\n    index += 2;\n    result.append('K');\n} else {\n    index++;\n    result.append('K');\n}"},"status":-1},{"failures":[],"tindex":"011a473a-3d86-11e6-9a16-cd1117042b10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"buffer","ascii":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:269","type":"CtIfImpl","sourcecode":"if (((context.byte[]) == null) || ((context.byte[].int) < ((context.int) + size))) {\n    return resizeBuffer(context);\n} "},"status":-2},{"failures":[],"tindex":"011a473b-3d86-11e6-9a16-c5b8fac1383c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"variableMap":{"last":"mapped","mapped":"mapped"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:273","type":"CtAssignmentImpl","sourcecode":"mapped = getMappingCode(str, (incount++))"},"status":-2},{"failures":[],"tindex":"011a473c-3d86-11e6-9a16-6b95bcaed976","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:66","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('!')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"status":0},{"failures":[],"tindex":"011a473d-3d86-11e6-9a16-51440fdb1901","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"sumLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:252","type":"CtAssignmentImpl","sourcecode":"minRating = getMinRating(sumLength)"},"status":-2},{"failures":[],"tindex":"011a473e-3d86-11e6-9a16-e584bc61d603","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:604","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (prefix.length()) ; i++) {\n    if ((input.charAt(i)) != (prefix.charAt(i))) {\n        return false;\n    } \n}"},"variableMap":{"input":"suffix","prefix":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:279","type":"CtForImpl","sourcecode":"for (int int = (input.length()) - 1, int int = (suffix.length()) - 1 ; j >= 0 ; i-- , j--) {\n    if ((input.charAt(i)) != (suffix.charAt(j))) {\n        return false;\n    } \n}"},"status":-2},{"failures":[44,46,76,48,77,78,79,80,81,82,0,83,84],"tindex":"011a473f-3d86-11e6-9a16-65dbfe243ca5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:312","type":"CtIfImpl","sourcecode":"if (pos > ((org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int) - 2)) {\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n    buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n} "},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.LF":"org.apache.commons.codec.net.QuotedPrintableCodec.CR","pos":"i","org.apache.commons.codec.net.QuotedPrintableCodec.ESCAPE_CHAR":"org.apache.commons.codec.net.QuotedPrintableCodec.CR","buffer":"buffer","org.apache.commons.codec.net.QuotedPrintableCodec.SAFE_LENGTH":"i","org.apache.commons.codec.net.QuotedPrintableCodec.CR":"org.apache.commons.codec.net.QuotedPrintableCodec.CR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:360","type":"CtTryImpl","sourcecode":"try {\n    if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n        continue;\n    } \n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n}"},"status":-1},{"failures":[],"tindex":"011a4740-3d86-11e6-9a16-0b85c9ecbbbf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:309","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"pad must not be in alphabet or whitespace\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"011a6e51-3d86-11e6-9a16-8de1d5d863d4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:71","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ce\", \"se\")"},"status":-2},{"failures":[],"tindex":"011a6e52-3d86-11e6-9a16-7d4dfdbd50cc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:429","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"status":0},{"failures":[],"tindex":"011a6e53-3d86-11e6-9a16-4dd6f70a9731","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (avail > 0) {\n    final byte[] byte[] = new byte[avail];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (c > 0) {\n        java.io.OutputStream.write(buf, 0, c);\n    } \n} "},"status":-2},{"failures":[85,86],"tindex":"011a6e54-3d86-11e6-9a16-e703be0e267a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:351","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"011a6e55-3d86-11e6-9a16-91abe987d062","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final byte byte = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    }\n}"},"variableMap":{"org.apache.commons.codec.net.QCodec.BLANK":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR","bytes":"bytes","tmp":"bytes","length":"b","org.apache.commons.codec.net.QCodec.UNDERSCORE":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:168","type":"CtIfImpl","sourcecode":"if (b == '+') {\n    buffer.write(' ');\n} else if (b == (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte)) {\n    try {\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n    }\n} else {\n    buffer.write(b);\n}"},"status":-2},{"failures":[87],"tindex":"011a6e56-3d86-11e6-9a16-d7f87ca8fe21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:762","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-1},{"failures":[39,40,75,43],"tindex":"011a6e57-3d86-11e6-9a16-0b58b0811704","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:552","type":"CtIfImpl","sourcecode":"if (conditionL0(value, index)) {\n    result.appendPrimary('L');\n} else {\n    result.append('L');\n}"},"status":-1},{"failures":[],"tindex":"011a6e58-3d86-11e6-9a16-e5747db833d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:57","type":"CtLocalVariableImpl","sourcecode":"int int = (((b2 << 16) & 16777215) | ((b1 << 8) & 65535)) | (b0 & 255)"},"status":-2},{"failures":[],"tindex":"011a6e59-3d86-11e6-9a16-83837968768e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:356","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[58,59],"tindex":"011a6e5a-3d86-11e6-9a16-ffbef74b565a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:147","type":"CtAssignmentImpl","sourcecode":"java.lang.String = replacement"},"status":-1},{"failures":[],"tindex":"011a6e5b-3d86-11e6-9a16-3da65c31dfbd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (b == ' ') {\n    b = '+';\n} "},"variableMap":{"b":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"status":-2},{"failures":[],"tindex":"011a6e5c-3d86-11e6-9a16-33285e6ee781","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.NameType:42","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = name"},"status":-2},{"failures":[88],"tindex":"011a6e5d-3d86-11e6-9a16-6b86e2154659","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtInvocationImpl","sourcecode":"code.append('J')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"status":-1},{"failures":[],"tindex":"011a956e-3d86-11e6-9a16-4b92b4674f19","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"variableMap":{"b":"org.apache.commons.codec.net.URLCodec.ESCAPE_CHAR","org.apache.commons.codec.net.URLCodec.RADIX":"org.apache.commons.codec.net.URLCodec.RADIX","i":"org.apache.commons.codec.net.URLCodec.RADIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:130","type":"CtForEachImpl","sourcecode":"for (final byte byte : bytes) {\n    int int = c;\n    if (b < 0) {\n        b = 256 + b;\n    } \n    if (urlsafe.get(b)) {\n        if (b == ' ') {\n            b = '+';\n        } \n        buffer.write(b);\n    } else {\n        buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n        buffer.write(hex1);\n        buffer.write(hex2);\n    }\n}"},"status":-2},{"failures":[89,90,91],"tindex":"011a956f-3d86-11e6-9a16-2dcea8e21dce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:595","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true))"},"variableMap":{"binaryData":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Crypt:69","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt)"},"status":-1},{"failures":[92,93,6,7,8,94,9,10,11,12,14,15,95,96,97,98,18,19,21,99,100,101,25,102,103,104,105,26,106,107,27,108,109,110,28,111,112,113,114,115,33,34,35,36,116],"tindex":"011a9570-3d86-11e6-9a16-295f4eca22fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:443","type":"CtIfImpl","sourcecode":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n    final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n    if (result >= 0) {\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n        context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n        if ((context.int) == 0) {\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        } \n    } \n} "},"status":-1},{"failures":[117,90,91],"tindex":"011a9571-3d86-11e6-9a16-0b0320b50c53","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:485","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer)"},"status":-1},{"failures":[],"tindex":"011a9572-3d86-11e6-9a16-ed56c39df071","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"variableMap":{"inExtendedComment":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:878","type":"CtAssignmentImpl","sourcecode":"result = true"},"status":-2},{"failures":[],"tindex":"011a9573-3d86-11e6-9a16-537943dee2c3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:705","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:602","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"status":-2},{"failures":[118,119],"tindex":"011a9574-3d86-11e6-9a16-53789cb3196c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:153","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"variableMap":{"n":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = s"},"status":-1},{"failures":[120,121,122,123,124,125],"tindex":"011a9575-3d86-11e6-9a16-935f083b1ca0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:190","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-1},{"failures":[],"tindex":"011a9576-3d86-11e6-9a16-a1a62d065258","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:339","type":"CtWhileImpl","sourcecode":"while (cp < (saltLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, sBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"org.apache.commons.codec.binary.BaseNCodec.EOF","sBytes":"singleByte","tempResult":"singleByte","saltLen":"org.apache.commons.codec.binary.BaseNCodec.EOF","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[118,126,127,119],"tindex":"011a9577-3d86-11e6-9a16-bb99805ff5aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:217","type":"CtAssignmentImpl","sourcecode":"key[i] = 0"},"variableMap":{"i":"iValue","key":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"011a9578-3d86-11e6-9a16-379f7527abca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:329","type":"CtLocalVariableImpl","sourcecode":"char char"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = key.charAt(((key.length()) - 1))"},"status":-2},{"failures":[118,119],"tindex":"011abc89-3d86-11e6-9a16-39d6bcf595a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"left","to":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"status":-1},{"failures":[],"tindex":"011abc8a-3d86-11e6-9a16-e180fa11df7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:295","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name1.toCharArray()"},"variableMap":{"name1":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:296","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = name2.toCharArray()"},"status":-2},{"failures":[70],"tindex":"011abc8b-3d86-11e6-9a16-057cf0a9a65b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:83","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[92,93,6,7,8,9,10,11,12,14,15,96,97,98,18,19,21,100,101,25,102,105,26,106,107,27,28,111,112,113,114,115,33,34,35,36,116],"tindex":"011b0aac-3d86-11e6-9a16-8982bb00d7b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:85","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[len >> 1]"},"variableMap":{"len":"decodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:462","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = ensureBufferSize(int, context)"},"status":-1},{"failures":[],"tindex":"011b0aad-3d86-11e6-9a16-a5e3618e59a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-2},{"failures":[39],"tindex":"011b0aae-3d86-11e6-9a16-13ae969e3373","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:983","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value.substring(0, addChars))"},"status":-1},{"failures":[58,59,60,61,62],"tindex":"011b0aaf-3d86-11e6-9a16-b9101c40fd2e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:516","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.clear();\n} "},"variableMap":{"nextBranches":"nextBranches","branching":"branching"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:540","type":"CtIfImpl","sourcecode":"if (branching) {\n    currentBranches.clear();\n    currentBranches.addAll(nextBranches);\n} "},"status":-1},{"failures":[],"tindex":"011b0ab0-3d86-11e6-9a16-315e9a9930e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r$\", \"3\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2},{"failures":[],"tindex":"011b0ab1-3d86-11e6-9a16-490bf9c0e308","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:233","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:251","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"011b0ab2-3d86-11e6-9a16-035ea0084f59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:203","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"011b0ab3-3d86-11e6-9a16-b79e68b59cbc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"status":-2},{"failures":[39,40],"tindex":"011b0ab4-3d86-11e6-9a16-c73c39816fb9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:472","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[128,129,130,131,132,117,90,91],"tindex":"011b31c5-3d86-11e6-9a16-fde2b042a0c3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"status":-1},{"failures":[],"tindex":"011b58d6-3d86-11e6-9a16-8f8a3751651f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:249","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[39,40,75],"tindex":"011b7fe7-3d86-11e6-9a16-356e013716b5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"status":-1},{"failures":[44,45,46,76,48,35,36,116],"tindex":"011b7fe8-3d86-11e6-9a16-d194d9e32d36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:209","type":"CtOperatorAssignmentImpl","sourcecode":"n += 2"},"variableMap":{"n":"to"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"011b7fe9-3d86-11e6-9a16-e101c433c342","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:92","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[],"tindex":"011b7fea-3d86-11e6-9a16-1f11fb66c80e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:315","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"variableMap":{"obj":"source","this":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:60","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.AbstractCaverphone.this.encode(((java.lang.String)(source)))"},"status":-2},{"failures":[],"tindex":"011b7feb-3d86-11e6-9a16-f1d1548bdff1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"c","y":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:160","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[39,40,41,75,43],"tindex":"011b7fec-3d86-11e6-9a16-ed89f41c7660","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:385","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DG\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n        result.append('J');\n        index += 3;\n    } else {\n        result.append(\"TK\");\n        index += 2;\n    }\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"DT\", \"DD\")) {\n    result.append('T');\n    index += 2;\n} else {\n    result.append('T');\n    index++;\n}"},"status":-1},{"failures":[39,40,43],"tindex":"011b7fed-3d86-11e6-9a16-cb7d10a3e573","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[],"tindex":"011b7fee-3d86-11e6-9a16-8b6ea1195bc8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[],"tindex":"011b7fef-3d86-11e6-9a16-0f3c9af96e48","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"status":-2},{"failures":[39,40],"tindex":"011b7ff0-3d86-11e6-9a16-4d640c322240","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-1},{"failures":[133,134,135,136,137,138,139,140],"tindex":"011b7ff1-3d86-11e6-9a16-41211d431088","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:288","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), finalb[11], 2, passwd)"},"status":-1},{"failures":[141,142,143],"tindex":"011b7ff2-3d86-11e6-9a16-7de6a2cf95a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:189","type":"CtIfImpl","sourcecode":"if (('H' == hwChar) || ('W' == hwChar)) {\n    final char char = str.charAt((index - 2));\n    final char char = org.apache.commons.codec.language.Soundex.this.map(preHWChar);\n    if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n        return 0;\n    } \n} "},"status":-1},{"failures":[],"tindex":"011b7ff3-3d86-11e6-9a16-5d5a16dc13ee","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:368","type":"CtIfImpl","sourcecode":"if ((i & 1) != 0) {\n    ctx.update(pBytes, 0, keyLen);\n} else {\n    ctx.update(altResult, 0, blocksize);\n}"},"status":0},{"failures":[118,119],"tindex":"011b7ff4-3d86-11e6-9a16-451226752b72","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:301","type":"CtAssignmentImpl","sourcecode":"left = results[1]"},"status":-1},{"failures":[],"tindex":"011ba605-3d86-11e6-9a16-29305f36f142","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"lastCode = code"},"variableMap":{"code":"code","lastCode":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:363","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[39,40],"tindex":"011bf426-3d86-11e6-9a16-43a0be7f51bb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:730","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[44,45,46],"tindex":"011bf427-3d86-11e6-9a16-6bf075dc6520","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:90","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[],"tindex":"011bf428-3d86-11e6-9a16-97dd884062c9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[],"tindex":"011bf429-3d86-11e6-9a16-6395f0061451","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-2},{"failures":[118,119],"tindex":"011c1b3a-3d86-11e6-9a16-453836c00673","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:356","type":"CtAssignmentImpl","sourcecode":"c = results[1]"},"status":-1},{"failures":[39,40],"tindex":"011c1b3b-3d86-11e6-9a16-7b800fce9cb3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"status":-1},{"failures":[39,40,43],"tindex":"011c1b3c-3d86-11e6-9a16-876aa50dfec5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[144,69,72,73],"tindex":"011c1b3d-3d86-11e6-9a16-9766dbd86b4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:68","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('#')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:91","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(' ')"},"status":-1},{"failures":[],"tindex":"011c1b3e-3d86-11e6-9a16-070ebda94526","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-2},{"failures":[39,40,75],"tindex":"011c1b3f-3d86-11e6-9a16-614baefc0855","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:454","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":71,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":159,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":143,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":141,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":142,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":144,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":192,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":108,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":80,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":130,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":156,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":59,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":165,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":135,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":164,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":149,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":148,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":34,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":35,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":38,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":75,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":36,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":37,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":74,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":154,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":90,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":197,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":23,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":55,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":182,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":116,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":123,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":111,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":107,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":87,"org.apache.commons.codec.language.SoundexTest.testB650":140,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":134,"org.apache.commons.codec.language.SoundexTest.testNewInstance":145,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2":127,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":56,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":105,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":89,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":172,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":200,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":45,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":125,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":113,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":126,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact":92,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":173,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":24,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":1,"org.apache.commons.codec.binary.Base64Test.testUUID":31,"org.apache.commons.codec.binary.Base64Test.testSingletons":115,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":61,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":117,"org.apache.commons.codec.binary.Base64Test.testPairs":112,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero":104,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":60,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":88,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":131,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":26,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":155,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":146,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException":97,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":179,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":102,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":58,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":76,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":187,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":4,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":133,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":195,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":42,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":122,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":136,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":171,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":63,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":137,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":129,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":11,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":86,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":52,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":184,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":85,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":151,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":189,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":77,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":186,"org.apache.commons.codec.binary.HexTest.testCustomCharset":177,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":166,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":81,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":14,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":185,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":190,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":13,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":162,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":167,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":69,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":54,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject":99,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":53,"org.apache.commons.codec.binary.Base64Test.testTriplets":110,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":174,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":78,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":18,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException":91,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":16,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":19,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":124,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":50,"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative":103,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":39,"org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks":128,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":119,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException":98,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":193,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":15,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":30,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":106,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":7,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":28,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":157,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":147,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":183,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":188,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":0,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":109,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":198,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":25,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":175,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":41,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":181,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":79,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":132,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":70,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":17,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":82,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":64,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh":95,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat":96,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":48,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":160,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":161,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":6,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":178,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":170,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":121,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":73,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":2,"org.apache.commons.codec.language.MetaphoneTest.testTCH":152,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":194,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":84,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":153,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":138,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":139,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":10,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":118,"org.apache.commons.codec.binary.Base64Test.testBase64":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":12,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":22,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":201,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":40,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":65,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":169,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":94,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":202,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":196,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":93,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":180,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull":100,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":199,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":46,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":158,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":168,"org.apache.commons.codec.binary.Base64Test.testCodec112":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":8,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":68,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":29,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":120,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":57,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":3,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":150,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":176,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":51,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":47,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":66,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":163,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":101,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":83,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":62,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":27,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":191,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":43,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":72,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":67,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":21,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":32},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"8621e07d-41b2-11e6-85f3-41b90c328f54","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:238","type":"CtIfImpl","sourcecode":"if ((ii & 1) == 1) {\n    ctx.update(finalb[j]);\n} else {\n    ctx.update(keyBytes[j]);\n}"},"status":-1},{"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"86222e9e-41b2-11e6-85f3-39a92281cb46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:532","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.startsWith(input, content)"},"variableMap":{"input":"prefix","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:605","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (prefix.charAt(i))) {\n    return false;\n} "},"status":-1},{"failures":[20],"tindex":"86222e9f-41b2-11e6-85f3-6bce3392b382","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:175","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes)"},"status":-1},{"failures":[],"tindex":"86222ea0-41b2-11e6-85f3-694b10bb1034","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:305","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 2))"},"variableMap":{"key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"status":-2},{"failures":[],"tindex":"862255b1-41b2-11e6-85f3-4fdfeb097121","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"variableMap":{"maxPhonemes":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:541","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"862255b2-41b2-11e6-85f3-b182ba4e4002","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[21,22],"tindex":"86245183-41b2-11e6-85f3-c3bed8c32fe9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"86245184-41b2-11e6-85f3-8f32b2e557d2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"86247895-41b2-11e6-85f3-dbe3ae3afdbb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"variableMap":{"algorithm":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:226","type":"CtAssignmentImpl","sourcecode":"name2 = cleanName(name2)"},"status":-2},{"failures":[],"tindex":"86247896-41b2-11e6-85f3-2b79fde363ec","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:153","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.StringBuilder.toString()"},"status":-2},{"failures":[],"tindex":"86247897-41b2-11e6-85f3-cf366005b50f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:328","type":"CtOperatorAssignmentImpl","sourcecode":"v &= e1"},"variableMap":{"v":"encodeSize","e1":"encodeSize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:292","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"status":0},{"failures":[21,22],"tindex":"86247898-41b2-11e6-85f3-7bdb08476244","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:388","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"status":-1},{"failures":[23,24,25,26,27],"tindex":"86249fa9-41b2-11e6-85f3-f15bcdc751d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[],"tindex":"86249faa-41b2-11e6-85f3-c93b992e3e27","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:126","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"86249fab-41b2-11e6-85f3-0790ef8be90f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"status":-2},{"failures":[],"tindex":"86249fac-41b2-11e6-85f3-35ddcc1c52a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:171","type":"CtTryImpl","sourcecode":"try {\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n    buffer.write(((char)((u << 4) + l)));\n} catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n    throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e);\n}"},"status":-2},{"failures":[28],"tindex":"8624c6bd-41b2-11e6-85f3-f3fa0b405989","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:97","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(mapping, 0, org.apache.commons.codec.language.Soundex.this.char[], 0, mapping.int)"},"status":-1},{"failures":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"tindex":"8624c6be-41b2-11e6-85f3-a1b93ccdbbcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:230","type":"CtAssignmentImpl","sourcecode":"b[8] = 0"},"variableMap":{"b":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-1},{"failures":[],"tindex":"8624c6bf-41b2-11e6-85f3-4fea3b9bfec6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:96","type":"CtReturnImpl","sourcecode":"return \"\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:161","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.Hex.encodeHex(data))"},"status":-2},{"failures":[],"tindex":"8624c6c0-41b2-11e6-85f3-a11be12fcaa9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:415","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"U\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"salt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"status":-2},{"failures":[],"tindex":"8624edd1-41b2-11e6-85f3-273dcaa3b0bb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:192","type":"CtIfImpl","sourcecode":"if (n < 0) {\n    throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n));\n} "},"variableMap":{"n":"lbitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:374","type":"CtIfImpl","sourcecode":"if ((context.boolean) && ((context.int) >= 2)) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    switch (context.int) {\n        case 2 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 3 :\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 4 :\n            context.long = (context.long) >> 4;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 5 :\n            context.long = (context.long) >> 1;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 6 :\n            context.long = (context.long) >> 6;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        case 7 :\n            context.long = (context.long) >> 3;\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            break;\n        default :\n            throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n    }\n} "},"status":-2},{"failures":[],"tindex":"862514e2-41b2-11e6-85f3-310394b43de9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"variableMap":{"result":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:211","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"862514e3-41b2-11e6-85f3-bdf5ef3b5be9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"finalb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:273","type":"CtInvocationImpl","sourcecode":"ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int)"},"status":-1},{"failures":[69,70,71,21,22],"tindex":"862514e4-41b2-11e6-85f3-893612221c61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"variableMap":{"boxContent":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:919","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = value.substring(start, (start + length))"},"status":-1},{"failures":[72,73,74,75,76],"tindex":"86253bf5-41b2-11e6-85f3-831fb6e3a091","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:139","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[],"tindex":"86253bf6-41b2-11e6-85f3-f35efdb85c7e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:97","type":"CtWhileImpl","sourcecode":"while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n    switch (value.charAt(index)) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n        case 'Y' :\n            index = handleAEIOUY(result, index);\n            break;\n        case 'B' :\n            result.append('P');\n            index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n            break;\n        case '\\u00c7' :\n            result.append('S');\n            index++;\n            break;\n        case 'C' :\n            index = handleC(value, result, index);\n            break;\n        case 'D' :\n            index = handleD(value, result, index);\n            break;\n        case 'F' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n            break;\n        case 'G' :\n            index = handleG(value, result, index, slavoGermanic);\n            break;\n        case 'H' :\n            index = handleH(value, result, index);\n            break;\n        case 'J' :\n            index = handleJ(value, result, index, slavoGermanic);\n            break;\n        case 'K' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n            break;\n        case 'L' :\n            index = handleL(value, result, index);\n            break;\n        case 'M' :\n            result.append('M');\n            index = conditionM0(value, index) ? index + 2 : index + 1;\n            break;\n        case 'N' :\n            result.append('N');\n            index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n            break;\n        case '\\u00d1' :\n            result.append('N');\n            index++;\n            break;\n        case 'P' :\n            index = handleP(value, result, index);\n            break;\n        case 'Q' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n            break;\n        case 'R' :\n            index = handleR(value, result, index, slavoGermanic);\n            break;\n        case 'S' :\n            index = handleS(value, result, index, slavoGermanic);\n            break;\n        case 'T' :\n            index = handleT(value, result, index);\n            break;\n        case 'V' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n            break;\n        case 'W' :\n            index = handleW(value, result, index);\n            break;\n        case 'X' :\n            index = handleX(value, result, index);\n            break;\n        case 'Z' :\n            index = handleZ(value, result, index, slavoGermanic);\n            break;\n        default :\n            index++;\n            break;\n    }\n}"},"variableMap":{"result":"result","this":"this","index":"index","slavoGermanic":"slavoGermanic","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:765","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ZO\", \"ZI\", \"ZA\")) || (slavoGermanic && ((index > 0) && ((charAt(value, (index - 1))) != 'T')))) {\n    result.append(\"S\", \"TS\");\n} else {\n    result.append('S');\n}"},"status":-2},{"failures":[77,78],"tindex":"86253bf7-41b2-11e6-85f3-ed471be11e7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"86253bf8-41b2-11e6-85f3-89cf846f87d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"index","left":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"status":-2},{"failures":[],"tindex":"86256309-41b2-11e6-85f3-6f39d75c7f36","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:76","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cy\", \"sy\")"},"status":0},{"failures":[75,79],"tindex":"8625630a-41b2-11e6-85f3-27328765772a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:88","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('.')"},"status":-1},{"failures":[],"tindex":"8625630b-41b2-11e6-85f3-d3f79fe76b7f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"nextChar","c2":"nextChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:370","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[], nextChar)) {\n    code = '4';\n} else {\n    code = '8';\n}"},"status":-2},{"failures":[],"tindex":"86269b8c-41b2-11e6-85f3-a9482b7257a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:618","type":"CtAssignmentImpl","sourcecode":"str = str.substring(0, ((str.length()) - 1))"},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[80,81,82,83,84,85,86,87],"tindex":"86269b8d-41b2-11e6-85f3-6fc08f7c22e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:248","type":"CtIfImpl","sourcecode":"if ((cnt & 1) != 0) {\n    ctx.update(altResult, 0, blocksize);\n} else {\n    ctx.update(keyBytes);\n}"},"variableMap":{"blocksize":"cnt","altResult":"altResult","keyBytes":"altResult","ctx":"ctx","cnt":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[77,78],"tindex":"8626c29e-41b2-11e6-85f3-6be0ce9e62f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:275","type":"CtUnaryOperatorImpl","sourcecode":"(int)--"},"variableMap":{"length":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-1},{"failures":[88],"tindex":"8626c29f-41b2-11e6-85f3-5b49a5e3d36d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"status":-1},{"failures":[89],"tindex":"8626c2a0-41b2-11e6-85f3-87331c5f8983","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ry\", \"Ry\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[],"tindex":"8626c2a1-41b2-11e6-85f3-13b135512010","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"c","to":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"status":-2},{"failures":[],"tindex":"8626c2a2-41b2-11e6-85f3-87324897e912","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:94","type":"CtReturnImpl","sourcecode":"return null"},"status":-2},{"failures":[90],"tindex":"8626e9b3-41b2-11e6-85f3-51f56a3a2795","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"index","l_ascii":"element","bits":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"status":-1},{"failures":[],"tindex":"8626e9b4-41b2-11e6-85f3-7faba243413f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"status":-2},{"failures":[],"tindex":"8626e9b5-41b2-11e6-85f3-27b5745f476c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:200","type":"CtWhileImpl","sourcecode":"while (todo > 0) {\n    int int = ((int)(java.lang.Math.min(b.int, todo)));\n    len = org.apache.commons.codec.binary.BaseNCodecInputStream.this.read(b, 0, len);\n    if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n        break;\n    } \n    todo -= len;\n}"},"status":0},{"failures":[],"tindex":"8626e9b6-41b2-11e6-85f3-a369c326b157","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:480","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer)"},"variableMap":{"altResult":"obj","buffer":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"8626e9b7-41b2-11e6-85f3-73fc9e67978d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:92","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"s+\", \"S\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"z\", \"s\")"},"status":0},{"failures":[7,8,91,92,9,10,20,93,94,11,12,95,96,13,14,97,15,98,99,100,101,102,16,17,18,19,103,104],"tindex":"8626e9b8-41b2-11e6-85f3-3ba4ef1ee770","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-1},{"failures":[],"tindex":"862710c9-41b2-11e6-85f3-69f143b5a774","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:291","type":"CtIfImpl","sourcecode":"if (lineSeparator == null) {\n    throw new java.lang.IllegalArgumentException(((\"lineLength \" + lineLength) + \" > 0, but lineSeparator is null\"));\n} "},"variableMap":{"lineSeparator":"buffer","lineLength":"readPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:296","type":"CtIfImpl","sourcecode":"if ((context.int) >= (context.int)) {\n    context.byte[] = null;\n} "},"status":-2},{"failures":[105],"tindex":"862710ca-41b2-11e6-85f3-ebd4ee0a12c1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"status":-1},{"failures":[],"tindex":"862710cb-41b2-11e6-85f3-edb19466f6a7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest)"},"status":-2},{"failures":[],"tindex":"862710cc-41b2-11e6-85f3-4fe86a56b5df","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:506","type":"CtIfImpl","sourcecode":"if (startsWith && endsWith) {\n    if ((content.length()) == 0) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return (input.length()) == 0;\n            }\n        };\n    } else {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return input.equals(content);\n            }\n        };\n    }\n} else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n    return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n} else if (startsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n        }\n    };\n} else if (endsWith) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n        }\n    };\n} "},"status":0},{"failures":[50,55,56,57,106,107,108,109],"tindex":"862710cd-41b2-11e6-85f3-cf3e98de23cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"todo"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-1},{"failures":[],"tindex":"862710ce-41b2-11e6-85f3-33056d074352","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:269","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\")"},"status":-2},{"failures":[110,111,112,31,32,33,34,35,36,37,39,40,113,114,115,116,43,117,44,118,119,48,53,58,120,121,64,65,66,67,122],"tindex":"862737df-41b2-11e6-85f3-eb59093bd7c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:215","type":"CtReturnImpl","sourcecode":"return l_raw"},"variableMap":{"l_raw":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:621","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false)"},"status":-1},{"failures":[77,78],"tindex":"862737e0-41b2-11e6-85f3-ed19c78b50cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:353","type":"CtAssignmentImpl","sourcecode":"d = results[1]"},"status":-1},{"failures":[123,124,125],"tindex":"862737e1-41b2-11e6-85f3-79bd765dd7da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n    if ((ascii[(jj - bits)]) == '1') {\n        l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n    } \n}"},"status":-1},{"failures":[80,81,82,83,84,85,86,87],"tindex":"862737e2-41b2-11e6-85f3-49a0ff821def","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:142","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"variableMap":{"from":"cp","to":"cp"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"status":-1},{"failures":[126,127,70,71,22],"tindex":"862737e3-41b2-11e6-85f3-f7b4de2a3386","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:953","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"status":-1},{"failures":[77,78],"tindex":"862737e4-41b2-11e6-85f3-3d821a58493a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:354","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(d, c, 1, 1431655765, results)"},"status":-1},{"failures":[],"tindex":"86275ef5-41b2-11e6-85f3-71129baa37c9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:392","type":"CtReturnImpl","sourcecode":"return replacedName"},"variableMap":{"replacedName":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(keyBytes.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[],"tindex":"86275ef6-41b2-11e6-85f3-7549e52262b9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"status":-2},{"failures":[128],"tindex":"86275ef7-41b2-11e6-85f3-f71e9493708d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:462","type":"CtInvocationImpl","sourcecode":"sb.append(\"Rule\")"},"variableMap":{"sb":"phonemeText"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:116","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.append(phonemeRight.java.lang.StringBuilder)"},"status":-1},{"failures":[129,130],"tindex":"86275ef8-41b2-11e6-85f3-e91a09753fd9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:611","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha384(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[],"tindex":"86275ef9-41b2-11e6-85f3-8988b4e7b155","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:93","type":"CtIfImpl","sourcecode":"if (c != 0) {\n    return c;\n} "},"variableMap":{"c":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:377","type":"CtReturnImpl","sourcecode":"return index + 2"},"status":-2},{"failures":[],"tindex":"8627860a-41b2-11e6-85f3-dbf6cbea02a1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-2},{"failures":[131,132],"tindex":"8627860b-41b2-11e6-85f3-6581c037da30","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[],"tindex":"8627860c-41b2-11e6-85f3-9b26d387f9c3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"status":0},{"failures":[29,30,112,31,32,33,34,35,36,37,38,39,40,41,133,42,115,43,44,45,46,47,48,49,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68],"tindex":"8627860d-41b2-11e6-85f3-133862141c37","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:447","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result"},"status":-1},{"failures":[],"tindex":"8627860e-41b2-11e6-85f3-bb09d5775ca0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"status":-2},{"failures":[123],"tindex":"8627860f-41b2-11e6-85f3-7500b43a2fb4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:153","type":"CtIfImpl","sourcecode":"if (ascii == null) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[134,111,113,116,117,135,53,58,120,64,65],"tindex":"86278610-41b2-11e6-85f3-452469639f17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:499","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(pBytes, ((byte)(0)))"},"variableMap":{"pBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:374","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-1},{"failures":[136],"tindex":"8627ad21-41b2-11e6-85f3-1b67daae36a5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:468","type":"CtInvocationImpl","sourcecode":"sb.append('}')"},"variableMap":{"sb":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:304","type":"CtInvocationImpl","sourcecode":"code.append('0')"},"status":-1},{"failures":[],"tindex":"8627ad22-41b2-11e6-85f3-7f89ea3b3216","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:793","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.int]"},"variableMap":{"org.apache.commons.codec.digest.DigestUtils.STREAM_BUFFER_LENGTH":"saltLen"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:337","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[saltLen]"},"status":-2},{"failures":[22],"tindex":"8627ad23-41b2-11e6-85f3-97034625b465","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"status":-1},{"failures":[],"tindex":"8627ad24-41b2-11e6-85f3-87e4f9a0ab19","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:254","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)]"},"status":-2},{"failures":[137,138,139,140,141,142,143,144,145,146,28,147,148,149],"tindex":"8627ad25-41b2-11e6-85f3-9dd61c20c73c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:278","type":"CtAssignmentImpl","sourcecode":"last = mapped"},"status":-1},{"failures":[],"tindex":"8627ad26-41b2-11e6-85f3-85a77ef75c97","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:969","type":"CtInvocationImpl","sourcecode":"appendPrimary(value)"},"variableMap":{"this":"result","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"status":-2},{"failures":[150,151,152,153,154,136,155,156,157,158,159,160,161,162],"tindex":"8627d437-41b2-11e6-85f3-43418512794a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}"},"status":-1},{"failures":[],"tindex":"8627d438-41b2-11e6-85f3-b3b9d8833130","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:262","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-2},{"failures":[71,22],"tindex":"8629a8f9-41b2-11e6-85f3-87ba6a645a1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:836","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"8629a8fa-41b2-11e6-85f3-0d9cd114915c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:161","type":"CtIfImpl","sourcecode":"if ((line.length()) == 0) {\n    continue;\n} "},"variableMap":{"line":"target"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (target.equals(element)) {\n    result = true;\n    break;\n} "},"status":0},{"failures":[77,78],"tindex":"8629a8fb-41b2-11e6-85f3-c7362dba169f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:309","type":"CtAssignmentImpl","sourcecode":"left = results[0]"},"status":-1},{"failures":[163,164,165,166,167,168,169,170,171,172,173,174],"tindex":"8629a8fc-41b2-11e6-85f3-1dd3b733bcf7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:500","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < inAvail ; i++) {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n    int int = in[(inPos++)];\n    if (b < 0) {\n        b += 256;\n    } \n    context.long = ((context.long) << 8) + b;\n    if (0 == (context.int)) {\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 30))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 15))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 10))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 5))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        buffer[((context.int)++)] = byte[][(((int)(context.long)) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))];\n        context.int += org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int;\n        if (((int) > 0) && ((int) <= (context.int))) {\n            java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n            context.int += byte[].int;\n            context.int = 0;\n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"8629d00d-41b2-11e6-85f3-2341078ebd89","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ry\", \"Ry\")"},"status":-2},{"failures":[70,21,22],"tindex":"8629d00e-41b2-11e6-85f3-3193eba4472e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:417","type":"CtInvocationImpl","sourcecode":"result.append(\"N\", \"KN\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"8629d00f-41b2-11e6-85f3-6b464a0ce63a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:315","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = key.toString()"},"status":-2},{"failures":[80,81,82,83,84,85,86,87],"tindex":"8629d010-41b2-11e6-85f3-f51db4493056","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"variableMap":{"altCtx":"ctx","altResult":"keyBytes","saltBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:166","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"8629d011-41b2-11e6-85f3-b78dc7a8f71a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:58","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.StringEncoder = stringEncoder"},"status":-2},{"failures":[],"tindex":"8629d012-41b2-11e6-85f3-fda2620da57a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:549","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1))"},"variableMap":{"content":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:304","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String"},"status":-2},{"failures":[175],"tindex":"8629d013-41b2-11e6-85f3-4fcd62b1340d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-1},{"failures":[21,22],"tindex":"8629f724-41b2-11e6-85f3-1112b1ef34ab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"status":-1},{"failures":[176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,175,196,129,197,198,199,200,130,201],"tindex":"8629f725-41b2-11e6-85f3-1f7a6e84bb70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:46","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[len]"},"variableMap":{"len":"l"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"status":-1},{"failures":[77,78],"tindex":"8629f726-41b2-11e6-85f3-fba47ad005a4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:282","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"variableMap":{"index":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:304","type":"CtAssignmentImpl","sourcecode":"right = results[1]"},"status":-1},{"failures":[],"tindex":"8629f727-41b2-11e6-85f3-4d4ba39ae6e5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:120","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(((byte[])(ascii)))"},"variableMap":{"ascii":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:338","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[77,78],"tindex":"8629f728-41b2-11e6-85f3-c9b521c0c5cb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:299","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 1, 1431655765, results)"},"variableMap":{"left":"left","right":"right","results":"results"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:302","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 8, 16711935, results)"},"status":-1},{"failures":[],"tindex":"8629f729-41b2-11e6-85f3-b51b032d727c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"length","y":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n    final int int = original[i];\n    key[i] = ((byte)(iChar << 1));\n}"},"status":-2},{"failures":[202,27],"tindex":"8629f72a-41b2-11e6-85f3-d54ec203d7a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:74","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ci\", \"si\")"},"status":-1},{"failures":[],"tindex":"8629f72b-41b2-11e6-85f3-bd195a38203b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:123","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat()"},"status":0},{"failures":[],"tindex":"862a1e3c-41b2-11e6-85f3-0b98b2277ada","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"variableMap":{"ctx":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:57","type":"CtIfImpl","sourcecode":"if (!(source instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[],"tindex":"862a1e3d-41b2-11e6-85f3-3dc2e1dfcd97","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:601","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"862a1e3e-41b2-11e6-85f3-8900d3b14381","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:277","type":"CtAssignmentImpl","sourcecode":"line = line.trim()"},"status":-2},{"failures":[],"tindex":"862a1e3f-41b2-11e6-85f3-cf62dfe72572","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"status":-2},{"failures":[],"tindex":"862a1e40-41b2-11e6-85f3-cdc0dd3e3698","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
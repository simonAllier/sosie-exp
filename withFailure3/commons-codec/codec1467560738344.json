{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":87,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":179,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":28,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":34,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":94,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":196,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":4,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse":137,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":154,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":172,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":24,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":180,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":108,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":40,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":123,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":122,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":43,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":99,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":41,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":98,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":125,"org.apache.commons.codec.binary.HexTest.testEncodeClassCastException":161,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":162,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":57,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":128,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":189,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMacFail":60,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":174,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":50,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":160,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":70,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":31,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":95,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":145,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":25,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":107,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully":130,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":37,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":178,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":52,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveDoubleDoubleVowel_BEETLE_NotRemoved":131,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":139,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":191,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":21,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":146,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":192,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":71,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":47,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":126,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":93,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":163,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":30,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":78,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":91,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":147,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":110,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":18,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":166,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":165,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":133,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":23,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":11,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":150,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":124,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse":143,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":67,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":19,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":81,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":177,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":171,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":185,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":187,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMacNullKey":62,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":5,"org.apache.commons.codec.digest.B64Test.testB64from24bit":157,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":45,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":118,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":59,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":100,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":56,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":35,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":72,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnameCornerCase_Nulls_NoMatch":134,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":42,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMacFail":64,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse":141,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":193,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":33,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":49,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":55,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":117,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":8,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":61,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":73,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":7,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":183,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":184,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":149,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse":140,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":14,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":12,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":15,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":190,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":195,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMacFail":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse":135,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":167,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":9,"org.apache.commons.codec.digest.HmacUtilsTest.testGetHMac":63,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":0,"org.apache.commons.codec.digest.HmacUtilsTest.testEmptyKey":75,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":188,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":58,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":68,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":77,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":105,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":106,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":127,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":164,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch":144,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":102,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompareNameNullSpace_ReturnsFalseSuccessfully":136,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":86,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":13,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":82,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":48,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":101,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":155,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":152,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":84,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":194,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":20,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":38,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":83,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":132,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":186,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":39,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":97,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":79,"org.apache.commons.codec.digest.HmacUtilsTest.testNullKey":74,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":158,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":3,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch":142,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":89,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":153,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":168,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":198,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":197,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully":129,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":1,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":51,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":115,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":176,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":46,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":151,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":181,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":80,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":170,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMacFail":69,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":113,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":112,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":26,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":10,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":156,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse":138,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":169,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":76,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":182,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":96,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":111,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":114,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":2,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":88,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":90,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":53},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"307f747d-4135-11e6-bf91-1fe8a5e20e40","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:181","type":"CtWhileImpl","sourcecode":"while (lsScanner.hasNextLine()) {\n    final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n    if (inExtendedComment) {\n        if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = false;\n        } \n    } else {\n        if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n            inExtendedComment = true;\n        } else if ((line.length()) > 0) {\n            ls.add(line);\n        } \n    }\n}"},"status":-1},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"3080fb1e-4135-11e6-bf91-2b6940f0b238","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":-1},{"failures":[],"tindex":"3081222f-4135-11e6-bf91-f91e81a8dca0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:75","type":"CtInvocationImpl","sourcecode":"buffer.append(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char)"},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.SEP":"symb","buffer":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:266","type":"CtInvocationImpl","sourcecode":"code.append(symb)"},"status":-2},{"failures":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"tindex":"30812230-4135-11e6-bf91-25b74818d03e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:724","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha512(key, valueToDigest))"},"variableMap":{"valueToDigest":"algorithm","key":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:91","type":"CtReturnImpl","sourcecode":"return java.lang.String"},"status":-1},{"failures":[77,78,79,80,81,82,83],"tindex":"30814941-4135-11e6-bf91-112dd9948e5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:265","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"30814942-4135-11e6-bf91-570de6a2f253","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:93","type":"CtIfImpl","sourcecode":"if (source == null) {\n    return null;\n} "},"variableMap":{"source":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:180","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":0},{"failures":[],"tindex":"30814943-4135-11e6-bf91-eba70d153c0e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:74","type":"CtReturnImpl","sourcecode":"return charset == null ? java.nio.charset.Charset.defaultCharset() : charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"status":0},{"failures":[77,78,84,79,80,85,81,82,83],"tindex":"30814944-4135-11e6-bf91-8117454b35d2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:273","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(str.length())"},"variableMap":{"str":"saltString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:249","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(((prefix + saltString) + \"$\"))"},"status":-1},{"failures":[86,87,88,89],"tindex":"30817055-4135-11e6-bf91-891589796813","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:684","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"OM\", \"AM\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) {\n    result.append('T');\n} else {\n    result.append('0', 'T');\n}"},"status":-1},{"failures":[],"tindex":"30817056-4135-11e6-bf91-31ccf98a0ada","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:226","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],"tindex":"30817057-4135-11e6-bf91-1588d7540551","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:211","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.md2(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"variableMap":{"data":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:163","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.getBytes(string, org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[103],"tindex":"30819768-4135-11e6-bf91-075deb1a41e1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:165","type":"CtReturnImpl","sourcecode":"return firstThree + lastThree"},"variableMap":{"firstThree":"str","lastThree":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-1},{"failures":[],"tindex":"30819769-4135-11e6-bf91-b345677b7f0d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:112","type":"CtIfImpl","sourcecode":"if (avail > 0) {\n    final byte[] byte[] = new byte[avail];\n    final int int = org.apache.commons.codec.binary.BaseNCodec.readResults(buf, 0, avail, org.apache.commons.codec.binary.BaseNCodec.Context);\n    if (c > 0) {\n        java.io.OutputStream.write(buf, 0, c);\n    } \n} "},"status":-2},{"failures":[],"tindex":"3081976a-4135-11e6-bf91-d7345d82afef","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:553","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"3081976b-4135-11e6-bf91-3d6d11561946","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"index","y":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:387","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 1, \"I\", \"E\", \"Y\")) {\n    result.append('J');\n    index += 3;\n} else {\n    result.append(\"TK\");\n    index += 2;\n}"},"status":-2},{"failures":[110,116],"tindex":"3081be7c-4135-11e6-bf91-05cd934fe711","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:169","type":"CtInvocationImpl","sourcecode":"buffer.write(' ')"},"variableMap":{"buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:297","type":"CtInvocationImpl","sourcecode":"buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)"},"status":-1},{"failures":[117,118],"tindex":"3081be7d-4135-11e6-bf91-7717e002b2c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:338","type":"CtAssignmentImpl","sourcecode":"cp = 0"},"status":-1},{"failures":[],"tindex":"3081be7e-4135-11e6-bf91-cd66c9e8bcd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:313","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"3081be7f-4135-11e6-bf91-cf69061d24ce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:78","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"status":0},{"failures":[119,120],"tindex":"3081e590-4135-11e6-bf91-91b7f4ce9cc8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:332","type":"CtOperatorAssignmentImpl","sourcecode":"el ^= (((((((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(t & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((t >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][((t >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][((t >>> 24) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(u & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][((u >>> 8) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][((u >>> 16) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((u >>> 24) & 63)])"},"status":-1},{"failures":[],"tindex":"3081e591-4135-11e6-bf91-f73e09dc7308","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:253","type":"CtOperatorAssignmentImpl","sourcecode":"cnt >>= 1"},"variableMap":{"cnt":"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-2},{"failures":[88,89],"tindex":"3081e592-4135-11e6-bf91-fbb8284e3d20","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:660","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-1},{"failures":[121,122,123,124,125,126,127,128],"tindex":"30820ca3-4135-11e6-bf91-a1ce14f57b7c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:236","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-1},{"failures":[],"tindex":"30820ca4-4135-11e6-bf91-4b30b4416958","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:682","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[92],"tindex":"30834525-4135-11e6-bf91-03ab4f3f33ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:182","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (bytes.int) ; i++) {\n    final byte byte = bytes[i];\n    if (b != (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        tmp[i] = b;\n    } else {\n        tmp[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    }\n}"},"status":-1},{"failures":[],"tindex":"30834526-4135-11e6-bf91-bfbfb498c7e8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:365","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i])"},"variableMap":{"bytes":"bytes","i":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:305","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(((bytes.int) - 3), bytes)"},"status":-2},{"failures":[],"tindex":"30836c37-4135-11e6-bf91-1d30ed5b976d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:129","type":"CtIfImpl","sourcecode":"if ((!(text.startsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String))) || (!(text.endsWith(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.java.lang.String)))) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\");\n} "},"variableMap":{"org.apache.commons.codec.net.RFC1522Codec.POSTFIX":"lang","org.apache.commons.codec.net.RFC1522Codec.PREFIX":"lang","text":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-2},{"failures":[91,92,93,94,95,113,114,115],"tindex":"30836c38-4135-11e6-bf91-8d48f512f412","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:151","type":"CtAssignmentImpl","sourcecode":"from = to + 1"},"status":-1},{"failures":[],"tindex":"30836c39-4135-11e6-bf91-2fbbc138c3f7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:417","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"variableMap":{"obj":"value","this":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:225","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(value)))"},"status":-2},{"failures":[],"tindex":"30836c3a-4135-11e6-bf91-63ae199f4037","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"variableMap":{"boxContent":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"status":-2},{"failures":[],"tindex":"30836c3b-4135-11e6-bf91-fd9f637653ff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:361","type":"CtAssignmentImpl","sourcecode":"ctx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"variableMap":{"ctx":"altCtx","algorithm":"algorithm"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:307","type":"CtAssignmentImpl","sourcecode":"altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[16,17,18,19,20,21,22,23,24,25,26,129,130,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,131,43,44,46,47,48,49,50,51,52,53,54,55,56],"tindex":"3083934c-4135-11e6-bf91-9519634964da","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"dc"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-1},{"failures":[108,110,132,116,133],"tindex":"3083934d-4135-11e6-bf91-759c518310a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"variableMap":{"maxPhonemes":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}"},"status":-1},{"failures":[],"tindex":"3083934e-4135-11e6-bf91-d18057a009bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"variableMap":{"length":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"status":-2},{"failures":[],"tindex":"3083934f-4135-11e6-bf91-b722edd21267","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"variableMap":{"roundsCustom":"doEncode"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:48","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"status":-2},{"failures":[],"tindex":"30839350-4135-11e6-bf91-f789faeb0a88","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"rawLine","salt":"location","prefix":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:286","type":"CtIfImpl","sourcecode":"if ((parts.int) != 2) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    final java.lang.String java.lang.String = parts[0];\n    final java.lang.String java.lang.String = parts[1];\n    if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n    } \n    asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n}"},"status":-2},{"failures":[134,135,136,137,138],"tindex":"3083ba61-4135-11e6-bf91-4db85ab7f2bd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:215","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[97],"tindex":"3083ba62-4135-11e6-bf91-477135b13848","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:126","type":"CtAssignmentImpl","sourcecode":"urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet"},"status":-1},{"failures":[],"tindex":"3083ba63-4135-11e6-bf91-913652cd80c8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:740","type":"CtIfImpl","sourcecode":"if (index == 0) {\n    result.append('S');\n    index++;\n} else {\n    if (!((index == ((value.length()) - 1)) && ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 3), 3, \"IAU\", \"EAU\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AU\", \"OU\"))))) {\n        result.append(\"KS\");\n    } \n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"X\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[57,58,61,65,67,68,73,76],"tindex":"3083ba64-4135-11e6-bf91-d5b17e4aaf13","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:769","type":"CtWhileImpl","sourcecode":"while (read > (-1)) {\n    mac.update(buffer, 0, read);\n    read = valueToDigest.read(buffer, 0, org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.int);\n}"},"status":-1},{"failures":[87,88,89],"tindex":"3083ba65-4135-11e6-bf91-2363681d5871","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:767","type":"CtInvocationImpl","sourcecode":"result.append(\"S\", \"TS\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"status":-1},{"failures":[139],"tindex":"3083ba66-4135-11e6-bf91-b320d17195a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:564","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha384Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"status":-1},{"failures":[],"tindex":"3083e177-4135-11e6-bf91-59f8a7b99844","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:111","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l\", \"2\")"},"variableMap":{"txt":"name2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:226","type":"CtAssignmentImpl","sourcecode":"name2 = cleanName(name2)"},"status":-2},{"failures":[],"tindex":"3083e178-4135-11e6-bf91-3f1bf2325a41","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"accentedWord","txt":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (accentedWord == null) {\n    return null;\n} "},"status":-2},{"failures":[89],"tindex":"3083e179-4135-11e6-bf91-231be1cfd08d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-1},{"failures":[],"tindex":"3083e17a-4135-11e6-bf91-e9cf4b820584","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:516","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n        result.append('H');\n    } else {\n        result.append('J', 'H');\n    }\n    index++;\n} else {\n    if ((index == 0) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"JOSE\")))) {\n        result.append('J', 'A');\n    } else if (((isVowel(charAt(value, (index - 1)))) && (!slavoGermanic)) && (((charAt(value, (index + 1))) == 'A') || ((charAt(value, (index + 1))) == 'O'))) {\n        result.append('J', 'H');\n    } else if (index == ((value.length()) - 1)) {\n        result.append('J', ' ');\n    } else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 1, \"S\", \"K\", \"L\")))) {\n        result.append('J');\n    } \n    if ((charAt(value, (index + 1))) == 'J') {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[140,141,142,143,144],"tindex":"3083e17b-4135-11e6-bf91-d55023b12fbb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:217","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"3083e17c-4135-11e6-bf91-070b0e351edd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:222","type":"CtReturnImpl","sourcecode":"return (context.byte[]) != null"},"variableMap":{"context":"other","buffer":"other"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:109","type":"CtReturnImpl","sourcecode":"return toString().equals(((org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch)(other)).toString())"},"status":0},{"failures":[],"tindex":"3084088d-4135-11e6-bf91-9f3000930c83","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:292","type":"CtTryImpl","sourcecode":"try {\n    return decode(str, getDefaultCharset());\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"3084088e-4135-11e6-bf91-73f922ba6463","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"variableMap":{"txt":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:85","type":"CtAssignmentImpl","sourcecode":"java.lang.String = null"},"status":-2},{"failures":[],"tindex":"3084088f-4135-11e6-bf91-45c2216c368c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(bytes)"},"variableMap":{"bytes":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[],"tindex":"30840890-4135-11e6-bf91-dd6346296a95","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-2},{"failures":[145,146,147,148,149,150,151,152,153],"tindex":"30840891-4135-11e6-bf91-6b12edbfddb8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"lineSeparator"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:393","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int)"},"status":-1},{"failures":[],"tindex":"30840892-4135-11e6-bf91-35404fdf4e50","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:190","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(tmp)"},"variableMap":{"tmp":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:453","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha256Digest().digest(data)"},"status":-2},{"failures":[154,117,155,156,157,77,78,79,158,159,118,160,80,81,82,83],"tindex":"30842ea3-4135-11e6-bf91-9dc33b0fc0cb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:296","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"variableMap":{"index":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:62","type":"CtOperatorAssignmentImpl","sourcecode":"w >>= 6"},"status":-1},{"failures":[161],"tindex":"30842ea4-4135-11e6-bf91-77d73a54d513","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:301","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(e.getMessage() , e)"},"status":-1},{"failures":[4],"tindex":"30854015-4135-11e6-bf91-75434f6feec9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:175","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine = new org.apache.commons.codec.language.bm.PhoneticEngine(org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getNameType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.getRuleType() , org.apache.commons.codec.language.bm.BeiderMorseEncoder.this.org.apache.commons.codec.language.bm.PhoneticEngine.isConcat() , maxPhonemes)"},"status":-1},{"failures":[77,78,79,80,81,82,83],"tindex":"30854016-4135-11e6-bf91-d9d8ed6dbf9b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:201","type":"CtInvocationImpl","sourcecode":"ctx.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"30854017-4135-11e6-bf91-273685e6ddea","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64Data)"},"variableMap":{"base64Data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":-2},{"failures":[91,92,93,94,95,103,104,105,106,107,108,109,110,111,112],"tindex":"30854018-4135-11e6-bf91-83c9256a2a18","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:359","type":"CtIfImpl","sourcecode":"if (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    try {\n        if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n            continue;\n        } \n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[i]);\n        final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)]);\n        buffer.write(((char)((u << 4) + l)));\n    } catch (final java.lang.ArrayIndexOutOfBoundsException e) {\n        throw new org.apache.commons.codec.DecoderException(\"Invalid quoted-printable encoding\" , e);\n    }\n} else if ((b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) && (b != (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))) {\n    buffer.write(b);\n} "},"status":-1},{"failures":[],"tindex":"3085dc59-4135-11e6-bf91-0b785f9fd717","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:975","type":"CtInvocationImpl","sourcecode":"appendAlternate(alternate)"},"variableMap":{"this":"result","alternate":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:652","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n    result.append(\"X\", \"SK\");\n} else {\n    result.append(\"SK\");\n}"},"status":-2},{"failures":[],"tindex":"3086036a-4135-11e6-bf91-d38c45327fb2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:361","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"status":-2},{"failures":[119,120],"tindex":"3086036b-4135-11e6-bf91-43ebffe917e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"offset","l_ascii":"b","bits":"offset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"status":-1},{"failures":[],"tindex":"3086036c-4135-11e6-bf91-bf8871cd55b1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":-2},{"failures":[],"tindex":"3086036d-4135-11e6-bf91-e166104e72a7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:308","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(left, right, 16, 65535, results)"},"variableMap":{"left":"length","right":"length","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:208","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-2},{"failures":[],"tindex":"3086036e-4135-11e6-bf91-1b2224647e87","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:64","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^enough\", \"enou2f\")"},"status":0},{"failures":[86,88,89],"tindex":"3086036f-4135-11e6-bf91-119bcccc52d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:309","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[162,163,164,165,166,167,168,169],"tindex":"30862a80-4135-11e6-bf91-e16d8bb17653","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[170,171,172,173,174,175,176,177,178,179,180,181,182,183],"tindex":"30862a81-4135-11e6-bf91-9f2386ab1c75","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((index > 0) && (index < (string.length()))) {\n    matches = (string.charAt((index - 1))) == c;\n} "},"status":-1},{"failures":[13,14],"tindex":"30862a82-4135-11e6-bf91-51b8b6b9a427","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:371","type":"CtReturnImpl","sourcecode":"return (n + 1) == wdsz"},"variableMap":{"wdsz":"i","n":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:241","type":"CtIfImpl","sourcecode":"if ((chars.charAt(i)) == input) {\n    return true;\n} "},"status":-1},{"failures":[184,86,87,88,89],"tindex":"30862a83-4135-11e6-bf91-05b22b66550d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"t = right"},"variableMap":{"t":"index","right":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:571","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[185,172,175,183],"tindex":"30862a84-4135-11e6-bf91-9f29fa807825","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:185","type":"CtInvocationImpl","sourcecode":"code.append('S')"},"status":-1},{"failures":[],"tindex":"30862a85-4135-11e6-bf91-453a2ee579c8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"index","encodeSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":0},{"failures":[119,120],"tindex":"30865196-4135-11e6-bf91-fb316984f01a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"status":-1},{"failures":[167],"tindex":"30865197-4135-11e6-bf91-758ad6feabe7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r3\", \"R3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:81","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"v\", \"f\")"},"status":-1},{"failures":[171,175,176,177,178,186,181],"tindex":"30865198-4135-11e6-bf91-8bb1531f9e00","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"variableMap":{"text":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:103","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = txt.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale).toCharArray()"},"status":-1},{"failures":[187,188],"tindex":"30865199-4135-11e6-bf91-639be9488dcb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:232","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"The character is not mapped: \" + ch))"},"status":-1},{"failures":[189,190,191],"tindex":"3086519a-4135-11e6-bf91-91ee2e5e128a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:401","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 16) & 255))"},"variableMap":{"b":"l_raw","offset":"bits","iValue":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:184","type":"CtOperatorAssignmentImpl","sourcecode":"l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits]"},"status":-1},{"failures":[],"tindex":"3086519b-4135-11e6-bf91-19637a36e4f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"tempResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"status":-2},{"failures":[],"tindex":"3086519c-4135-11e6-bf91-e5d47fb23c59","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:292","type":"CtAssignmentImpl","sourcecode":"right = t"},"variableMap":{"t":"a","right":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:394","type":"CtAssignmentImpl","sourcecode":"a = (a ^ t) ^ (t >>> (16 - n))"},"status":-2},{"failures":[],"tindex":"308678ad-4135-11e6-bf91-f5cb9f978162","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:62","type":"CtIfImpl","sourcecode":"if (c1 == c2) {\n    continue;\n} "},"variableMap":{"c1":"ch","c2":"ch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-2},{"failures":[110,116],"tindex":"308678ae-4135-11e6-bf91-a3f21cdc9aa7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:764","type":"CtUnaryOperatorImpl","sourcecode":"len--"},"variableMap":{"len":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:299","type":"CtAssignmentImpl","sourcecode":"pos = 1"},"status":-1},{"failures":[192,87,193,88,89,194],"tindex":"308678af-4135-11e6-bf91-15a394ac5455","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:97","type":"CtWhileImpl","sourcecode":"while ((!(result.isComplete())) && (index <= ((value.length()) - 1))) {\n    switch (value.charAt(index)) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n        case 'Y' :\n            index = handleAEIOUY(result, index);\n            break;\n        case 'B' :\n            result.append('P');\n            index = (charAt(value, (index + 1))) == 'B' ? index + 2 : index + 1;\n            break;\n        case '\\u00c7' :\n            result.append('S');\n            index++;\n            break;\n        case 'C' :\n            index = handleC(value, result, index);\n            break;\n        case 'D' :\n            index = handleD(value, result, index);\n            break;\n        case 'F' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'F' ? index + 2 : index + 1;\n            break;\n        case 'G' :\n            index = handleG(value, result, index, slavoGermanic);\n            break;\n        case 'H' :\n            index = handleH(value, result, index);\n            break;\n        case 'J' :\n            index = handleJ(value, result, index, slavoGermanic);\n            break;\n        case 'K' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'K' ? index + 2 : index + 1;\n            break;\n        case 'L' :\n            index = handleL(value, result, index);\n            break;\n        case 'M' :\n            result.append('M');\n            index = conditionM0(value, index) ? index + 2 : index + 1;\n            break;\n        case 'N' :\n            result.append('N');\n            index = (charAt(value, (index + 1))) == 'N' ? index + 2 : index + 1;\n            break;\n        case '\\u00d1' :\n            result.append('N');\n            index++;\n            break;\n        case 'P' :\n            index = handleP(value, result, index);\n            break;\n        case 'Q' :\n            result.append('K');\n            index = (charAt(value, (index + 1))) == 'Q' ? index + 2 : index + 1;\n            break;\n        case 'R' :\n            index = handleR(value, result, index, slavoGermanic);\n            break;\n        case 'S' :\n            index = handleS(value, result, index, slavoGermanic);\n            break;\n        case 'T' :\n            index = handleT(value, result, index);\n            break;\n        case 'V' :\n            result.append('F');\n            index = (charAt(value, (index + 1))) == 'V' ? index + 2 : index + 1;\n            break;\n        case 'W' :\n            index = handleW(value, result, index);\n            break;\n        case 'X' :\n            index = handleX(value, result, index);\n            break;\n        case 'Z' :\n            index = handleZ(value, result, index, slavoGermanic);\n            break;\n        default :\n            index++;\n            break;\n    }\n}"},"status":-1},{"failures":[91,92,93,195,95,103,104,105,106,109,196,112],"tindex":"308678b0-4135-11e6-bf91-379a6dfe5b54","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:367","type":"CtInvocationImpl","sourcecode":"buffer.write(((char)((u << 4) + l)))"},"variableMap":{"u":"b","buffer":"buffer","l":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:329","type":"CtIfImpl","sourcecode":"if (printable.get(b)) {\n    buffer.write(b);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n}"},"status":-1},{"failures":[],"tindex":"308678b1-4135-11e6-bf91-15cae0567f0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:203","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"variableMap":{"b":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:317","type":"CtForImpl","sourcecode":"for (int int = (bytes.int) - 2 ; i < (bytes.int) ; i++) {\n    b = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    encode = (!(printable.get(b))) || ((i > ((bytes.int) - 2)) && (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b)));\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer);\n}"},"status":-2},{"failures":[],"tindex":"308678b2-4135-11e6-bf91-55c79f7b502d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:353","type":"CtAssignmentImpl","sourcecode":"code = '-'"},"status":-2},{"failures":[],"tindex":"308678b3-4135-11e6-bf91-33866195a90c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:279","type":"CtIfImpl","sourcecode":"if (containsAlphabetOrPad(lineSeparator)) {\n    final java.lang.String java.lang.String = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n    throw new java.lang.IllegalArgumentException(((\"lineSeparator must not contain base64 characters: [\" + sep) + \"]\"));\n} "},"variableMap":{"this":"baseNCodec","lineSeparator":"buf"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:162","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"30869fc4-4135-11e6-bf91-d3bd8b67c37d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:175","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName))"},"status":-2},{"failures":[],"tindex":"30869fc5-4135-11e6-bf91-9fc80771d3ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:212","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = altCtx.digest()"},"variableMap":{"altCtx":"ctx1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:220","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = ctx1.digest()"},"status":-2},{"failures":[],"tindex":"30869fc6-4135-11e6-bf91-af437530e73f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"status":0},{"failures":[],"tindex":"30869fc7-4135-11e6-bf91-a5fe2879cbcf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:130","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: malformed encoded content\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:736","type":"CtThrowImpl","sourcecode":"throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\")"},"status":-2},{"failures":[0,1,2,3,4,197,198,5,6,7,8,9,10,11,12,13,14,15],"tindex":"30869fc8-4135-11e6-bf91-6944b78f201d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:160","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.NameType org.apache.commons.codec.language.bm.NameType : org.apache.commons.codec.language.bm.NameType.values()) {\n    org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.util.Map<org.apache.commons.codec.language.bm.NameType, org.apache.commons.codec.language.bm.Languages>.put(s, org.apache.commons.codec.language.bm.Languages.getInstance(org.apache.commons.codec.language.bm.Languages.langResourceName(s)));\n}"},"status":-1},{"failures":[],"tindex":"30869fc9-4135-11e6-bf91-37c5add75dc0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"mapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:96","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-2},{"failures":[0,1,2,3,4,197,198,5,6,7,8,9,10,11,12,13,14,15],"tindex":"30869fca-4135-11e6-bf91-2d0e42b6bb45","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:411","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(2)"},"variableMap":{"input":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"status":-1},{"failures":[],"tindex":"30869fcb-4135-11e6-bf91-c1d052fa9428","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[1,3,5,12,13,14,15],"tindex":"30869fcc-4135-11e6-bf91-171c2886ca2b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:450","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"status":-1},{"failures":[],"tindex":"3086c6dd-4135-11e6-bf91-69ecc7834730","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"variableMap":{"b":"buffer","offset":"pos","iValue":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:365","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[0,1,2,3,4,197,198,5,6,7,8,9,10,11,12,13,14,15],"tindex":"3086c6de-4135-11e6-bf91-71512a28b2d3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:418","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = true"},"status":-1},{"failures":[],"tindex":"3086c6df-4135-11e6-bf91-459f95ef98ad","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:48","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Caverphone1.org.apache.commons.codec.language.Caverphone1.java.lang.String"},"variableMap":{"org.apache.commons.codec.language.Caverphone1.SIX_1":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:144","type":"CtReturnImpl","sourcecode":"return name"},"status":-2},{"failures":[170,171,172,173,174,175,176,177,178,179,180,181,182,183],"tindex":"3086c6e0-4135-11e6-bf91-6f56d667f5f3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:348","type":"CtReturnImpl","sourcecode":"return matches"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
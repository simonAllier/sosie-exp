{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":40,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":62,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":54,"org.apache.commons.codec.language.NysiisTest.testDropBy":48,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":65,"org.apache.commons.codec.binary.Base64Test.testBase64":39,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":9,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":59,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base64Test.testUUID":24,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":5,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":33,"org.apache.commons.codec.binary.Base64Test.testSingletons":37,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":17,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":6,"org.apache.commons.codec.binary.Base64Test.testPairs":23,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":32,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":41,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":61,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":58,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":27,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":22,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":28,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":31,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":47,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":56,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":15,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":29,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":49,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":60,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":30,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":55,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":13,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":16,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":50,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":34,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":7,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":10,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":35,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":42,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":45,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":36,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":57,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":3,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":4,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":20,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":43,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":63,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":64,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":8,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":26,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":38,"org.apache.commons.codec.language.MetaphoneTest.testWhy":53,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":44,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":14,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":51,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":46,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":1,"org.apache.commons.codec.language.MetaphoneTest.testTCH":52,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":11,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":25},"transformations":[{"failures":[],"tindex":"b8659f5b-21df-11e6-9eb0-ab42d20f37ab","series":0,"name":"replace","transplant":{"toString":"int txtLength","position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int patternLength = 1","position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[0,1,2],"tindex":"b865c66c-21df-11e6-9eb0-e1d9c58dac17","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"result.append('A')","position":"org.apache.commons.codec.language.DoubleMetaphone:716","type":"CtInvocationImpl","sourcecode":"result.append('A')"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"tindex":"b865c66d-21df-11e6-9eb0-3900178ff269","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n    context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[48,49],"tindex":"b865ed7e-21df-11e6-9eb0-0bf088420151","series":0,"name":"add","transplant":{"toString":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.CHARS_NN;\n    } else {\n        return org.apache.commons.codec.language.Nysiis.CHARS_C;\n    }\n} ","position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_SSS","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_SSS","curr":"next"},"type":"adrStmt","transplantationPoint":{"toString":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.CHARS_SSS;\n} ","position":"org.apache.commons.codec.language.Nysiis:148","type":"CtIfImpl","sourcecode":"if (((curr == 'S') && (next == 'C')) && (aNext == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[1,2],"tindex":"b865ed7f-21df-11e6-9eb0-650b00dea93e","series":0,"name":"replace","transplant":{"toString":"return false","position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return true","position":"org.apache.commons.codec.language.DoubleMetaphone:809","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[],"tindex":"b865ed80-21df-11e6-9eb0-5578ebde9f2e","series":0,"name":"add","transplant":{"toString":"this.data = data","position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"toString":"this.soundexMapping = org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING","position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"status":-2},{"failures":[],"tindex":"b86689c1-21df-11e6-9eb0-f5398305d1e3","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")","position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"status":-2},{"failures":[50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"b86689c2-21df-11e6-9eb0-8d1d4e9d592a","series":0,"name":"replace","transplant":{"toString":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())","position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"toString":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} ","position":"org.apache.commons.codec.language.Metaphone:331","type":"CtIfImpl","sourcecode":"if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n    code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":8,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
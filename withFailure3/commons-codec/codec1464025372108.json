{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":49,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":69,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":73,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":14,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":13,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":63,"org.apache.commons.codec.language.NysiisTest.testDropBy":7,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":18,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":15,"org.apache.commons.codec.binary.Base64Test.testBase64":48,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":64,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":25,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":22,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":4,"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde":70,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":77,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64Test.testUUID":33,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":42,"org.apache.commons.codec.binary.Base64Test.testSingletons":46,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":55,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":56,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":58,"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty":65,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":74,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":19,"org.apache.commons.codec.binary.Base64Test.testPairs":32,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":41,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":57,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":75,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":50,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":2,"org.apache.commons.codec.language.NysiisTest.testRule6":6,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":36,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":81,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":31,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":37,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":40,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":62,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":30,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":76,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":28,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":38,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":39,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":9,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":29,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":20,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":67,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":68,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":44,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":51,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":60,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":45,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":12,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":16,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":54,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":5,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":82,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":52,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":59,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":11,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":21,"org.apache.commons.codec.language.NysiisTest.testOthers":8,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":35,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":47,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":79,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":53,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":17,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":27,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":66,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":61,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":3,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":24,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":34,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":78,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":71},"transformations":[{"failures":[],"tindex":"c5fbbee3-210d-11e6-80a2-a1e0cafd8b80","series":0,"name":"replace","transplant":{"toString":"final char ch = getNextChar()","position":"org.apache.commons.codec.language.ColognePhonetic:274","type":"CtLocalVariableImpl","sourcecode":"final char char = getNextChar()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"final char patternKey = r.pattern.charAt(0)","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:314","type":"CtLocalVariableImpl","sourcecode":"final char char = r.java.lang.String.charAt(0)"},"status":-2},{"failures":[],"tindex":"c5fbe5f4-210d-11e6-80a2-19d0e91ebe2a","series":0,"name":"add","transplant":{"toString":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.charset","position":"org.apache.commons.codec.net.QuotedPrintableCodec:548","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.QuotedPrintableCodec.this.java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.binary.Hex.this.charset","position":"org.apache.commons.codec.binary.Hex:312","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.this.java.nio.charset.Charset"},"status":-2},{"failures":[0,1],"tindex":"c5fbe5f5-210d-11e6-80a2-09da5a03b3ca","series":0,"name":"replace","transplant":{"toString":"result.append(\"KN\", \"N\")","position":"org.apache.commons.codec.language.DoubleMetaphone:414","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\", \"N\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"toString":"result.append('J')","position":"org.apache.commons.codec.language.DoubleMetaphone:448","type":"CtInvocationImpl","sourcecode":"result.append('J')"},"status":-1},{"failures":[2,3],"tindex":"c5fc0d06-210d-11e6-80a2-09b652bbd489","series":0,"name":"replace","transplant":{"toString":"txt = txt.replaceAll(\"3\", \"\")","position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"wy\", \"Wy\")","position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"wy\", \"Wy\")"},"status":-1},{"failures":[],"tindex":"c5fc0d07-210d-11e6-80a2-53ad9bb500ba","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('|')","position":"org.apache.commons.codec.net.QCodec:101","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('|')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set('-')","position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-2},{"failures":[],"tindex":"c5fc0d08-210d-11e6-80a2-abd66451537d","series":0,"name":"add","transplant":{"toString":"return lines","position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"rules"},"type":"adrStmt","transplantationPoint":{"toString":"return rules","position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"status":-2},{"failures":[],"tindex":"c5fc0d09-210d-11e6-80a2-ffe6265e9807","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this","position":"org.apache.commons.codec.language.bm.Rule:126","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.phonemeText.toString()) + (right.phonemeText.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.languages.restrictTo(right.languages))","position":"org.apache.commons.codec.language.bm.Rule:151","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(((org.apache.commons.codec.language.bm.Rule.Phoneme.this.java.lang.StringBuilder.toString()) + (right.java.lang.StringBuilder.toString())) , org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet.restrictTo(right.org.apache.commons.codec.language.bm.Languages.LanguageSet))"},"status":0},{"failures":[4,5],"tindex":"c5fc341a-210d-11e6-80a2-e1a4cdb67eb0","series":0,"name":"replace","transplant":{"toString":"java.util.Arrays.fill(tempResult, ((byte)(0)))","position":"org.apache.commons.codec.digest.Sha2Crypt:498","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(tempResult, ((byte)(0)))"},"variableMap":{"tempResult":"singleByte"},"type":"adrStmt","transplantationPoint":{"toString":"write(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:62","type":"CtInvocationImpl","sourcecode":"write(byte[], 0, 1)"},"status":-1},{"failures":[],"tindex":"c5fc341b-210d-11e6-80a2-b54625563527","series":0,"name":"replace","transplant":{"toString":"right = (left >>> 1) | (left << 31)","position":"org.apache.commons.codec.digest.UnixCrypt:296","type":"CtAssignmentImpl","sourcecode":"right = (left >>> 1) | (left << 31)"},"variableMap":{"left":"c","right":"c"},"type":"adrStmt","transplantationPoint":{"toString":"c <<= 1","position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"status":-2},{"failures":[6,7,8],"tindex":"c5fc341c-210d-11e6-80a2-ddddd1209cec","series":0,"name":"replace","transplant":{"toString":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} ","position":"org.apache.commons.codec.language.Nysiis:296","type":"CtIfImpl","sourcecode":"if (lastChar == 'S') {\n    key.deleteCharAt(((key.length()) - 1));\n    lastChar = key.charAt(((key.length()) - 1));\n} "},"variableMap":{"lastChar":"last2Char","key":"key"},"type":"adrStmt","transplantationPoint":{"toString":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} ","position":"org.apache.commons.codec.language.Nysiis:304","type":"CtIfImpl","sourcecode":"if ((last2Char == 'A') && (lastChar == 'Y')) {\n    key.deleteCharAt(((key.length()) - 2));\n} "},"status":-1},{"failures":[],"tindex":"c5fc341d-210d-11e6-80a2-f74728a5d4bf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"tia\", \"sia\")","position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tia\", \"sia\")"},"status":0},{"failures":[],"tindex":"c5fc341e-210d-11e6-80a2-756ce1812ab1","series":0,"name":"replace","transplant":{"toString":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE)) {\n    str = str.substring(1);\n} ","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"languagesResourceName","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"languagesResourceName"},"type":"adrStmt","transplantationPoint":{"toString":"if (langIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n} ","position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtIfImpl","sourcecode":"if (langIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n} "},"status":-3},{"failures":[],"tindex":"c5fc5b2f-210d-11e6-80a2-87c27c9b6fd1","series":0,"name":"replace","transplant":{"toString":"lastChar = ch","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:549","type":"CtAssignmentImpl","sourcecode":"lastChar = ch"},"variableMap":{"ch":"code","lastChar":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code = '4'","position":"org.apache.commons.codec.language.ColognePhonetic:361","type":"CtAssignmentImpl","sourcecode":"code = '4'"},"status":-2},{"failures":[9],"tindex":"c5fc5b30-210d-11e6-80a2-5d5e9a1e3e71","series":0,"name":"replace","transplant":{"toString":"if (langIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n} ","position":"org.apache.commons.codec.language.bm.Languages:174","type":"CtIfImpl","sourcecode":"if (langIS == null) {\n    throw new java.lang.IllegalArgumentException((\"Unable to resolve required resource: \" + languagesResourceName));\n} "},"variableMap":{"languagesResourceName":"obj","langIS":"obj"},"type":"adrStmt","transplantationPoint":{"toString":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:203","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\");\n} "},"status":-1},{"failures":[],"tindex":"c5fc5b31-210d-11e6-80a2-f1b54cd93834","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('[')","position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"status":0},{"failures":[],"tindex":"c5fc5b32-210d-11e6-80a2-c351ff3f057e","series":0,"name":"add","transplant":{"toString":"final int nextIndex = getPatternLength()","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:185","type":"CtLocalVariableImpl","sourcecode":"final int int = getPatternLength()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"int compareCode = 0","position":"org.apache.commons.codec.StringEncoderComparator:77","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[10,11,12,13,14,15,16,17,18],"tindex":"c5fc5b33-210d-11e6-80a2-832abb627f5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] replacements = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean branchingRequired = ((replacements.length) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch branch : currentBranches) {\n            for (final java.lang.String nextReplacement : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch nextBranch = branchingRequired ? branch.createBranch() : branch;\n                final boolean force = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:514","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule : rules) {\n    if (rule.matches(inputContext)) {\n        if (branching) {\n            nextBranches.clear();\n        } \n        final java.lang.String[] java.lang.String[] = rule.getReplacements(inputContext, (lastChar == '\u0000'));\n        final boolean boolean = ((replacements.int) > 1) && branching;\n        for (final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch : currentBranches) {\n            for (final java.lang.String java.lang.String : replacements) {\n                final org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch org.apache.commons.codec.language.DaitchMokotoffSoundex.Branch = branchingRequired ? branch.createBranch() : branch;\n                final boolean boolean = ((lastChar == 'm') && (ch == 'n')) || ((lastChar == 'n') && (ch == 'm'));\n                nextBranch.processNextReplacement(nextReplacement, force);\n                if (branching) {\n                    nextBranches.add(nextBranch);\n                } else {\n                    break;\n                }\n            }\n        }\n        if (branching) {\n            currentBranches.clear();\n            currentBranches.addAll(nextBranches);\n        } \n        index += (rule.getPatternLength()) - 1;\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"c5fc8244-210d-11e6-80a2-37fd082e7f98","series":0,"name":"replace","transplant":{"toString":"inMultilineComment = false","position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"hard"},"type":"adrStmt","transplantationPoint":{"toString":"hard = true","position":"org.apache.commons.codec.language.Metaphone:231","type":"CtAssignmentImpl","sourcecode":"hard = true"},"status":0},{"failures":[],"tindex":"c5fc8245-210d-11e6-80a2-cb792f888010","series":0,"name":"replace","transplant":{"toString":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")","position":"org.apache.commons.codec.net.RFC1522Codec:136","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:193","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))"},"status":-2},{"failures":[],"tindex":"c5fca956-210d-11e6-80a2-6380deca9b59","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.language.Metaphone.this.maxCodeLen = maxCodeLen","position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index++","position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[],"tindex":"c5fca957-210d-11e6-80a2-93a4836a3b5d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"status":0},{"failures":[],"tindex":"c5fca958-210d-11e6-80a2-39a301a09a64","series":0,"name":"add","transplant":{"toString":"final char[] out = new char[l << 1]","position":"org.apache.commons.codec.binary.Hex:142","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[l << 1]"},"variableMap":{"l":"length"},"type":"adrStmt","transplantationPoint":{"toString":"final char[] newData = new char[length]","position":"org.apache.commons.codec.language.ColognePhonetic:241","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[length]"},"status":-2},{"failures":[],"tindex":"c5fca959-210d-11e6-80a2-492767287b8c","series":0,"name":"replace","transplant":{"toString":"try {\n    final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int cLine = currentLine;\n    final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(myLine);\n            sb.append(\", loc='\").append(loc).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String patternKey = r.pattern.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}","position":"org.apache.commons.codec.language.bm.Rule:449","type":"CtTryImpl","sourcecode":"try {\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n    final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n    final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n    final int int = currentLine;\n    final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n        private final int myLine = cLine;\n\n        private final java.lang.String loc = location;\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            sb.append(\"Rule\");\n            sb.append(\"{line=\").append(int);\n            sb.append(\", loc='\").append(java.lang.String).append('\\'');\n            sb.append(\", pat='\").append(pat).append('\\'');\n            sb.append(\", lcon='\").append(lCon).append('\\'');\n            sb.append(\", rcon='\").append(rCon).append('\\'');\n            sb.append('}');\n            return sb.toString();\n        }\n    };\n    final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n    java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n    if (rules == null) {\n        rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n        lines.put(patternKey, rules);\n    } \n    rules.add(r);\n} catch (final java.lang.IllegalArgumentException e) {\n    throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n}"},"variableMap":{"loc":"$anonymous0","$anonymous0":"$anonymous2","e":"e","this":"this","pattern":"$anonymous2","$anonymous3":"$anonymous3","$anonymous2":"pattern","$anonymous1":"$anonymous1","myLine":"length","parts":"parts","location":"$anonymous1","lines":"lines","currentLine":"currentLine"},"type":"adrStmt","transplantationPoint":{"toString":"if ((parts.length) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.length)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String pat = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String lCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String rCon = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr ph = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int cLine = currentLine;\n        final org.apache.commons.codec.language.bm.Rule r = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(myLine);\n                sb.append(\", loc='\").append(loc).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String patternKey = r.pattern.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> rules = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-3},{"failures":[],"tindex":"c5fcd06a-210d-11e6-80a2-8915fdb36980","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.binary.BaseNCodec.EOF","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:105","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int"},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"toString":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX) - (strB.length())))","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:339","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())))"},"status":-2},{"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,5,55,56,57,58,59,60,61,62],"tindex":"c5fcf77b-210d-11e6-80a2-97bbe565e883","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (result >= 0) {\n    context.modulus = ((context.modulus) + 1) % (org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK);\n    context.ibitWorkArea = ((context.ibitWorkArea) << (org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE)) + result;\n    if ((context.modulus) == 0) {\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)(((context.ibitWorkArea) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n        buffer[((context.pos)++)] = ((byte)((context.ibitWorkArea) & (org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS)));\n    } \n} ","position":"org.apache.commons.codec.binary.Base64:445","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n    context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[],"tindex":"c5fcf77c-210d-11e6-80a2-1b39144d30ab","series":0,"name":"add","transplant":{"toString":"this.maxLength = maxLength","position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"variableMap":{"maxLength":"r"},"type":"adrStmt","transplantationPoint":{"toString":"r = read(singleByte, 0, 1)","position":"org.apache.commons.codec.binary.BaseNCodecInputStream:99","type":"CtAssignmentImpl","sourcecode":"r = read(byte[], 0, 1)"},"status":-2},{"failures":[0,1,63,64,65,66,67,68,69,70,71],"tindex":"c6002bcd-210d-11e6-80a2-cf49cc649694","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"value = cleanInput(value)","position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-1},{"failures":[22,29,72,73,74,75,5,55,76],"tindex":"c6002bce-210d-11e6-80a2-8ddd640547ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (((lineLength) > 0) && ((lineLength) <= (context.currentLinePos))) {\n    java.lang.System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);\n    context.pos += lineSeparator.length;\n    context.currentLinePos = 0;\n} ","position":"org.apache.commons.codec.binary.Base64:392","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((int) <= (context.int))) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n    context.int = 0;\n} "},"status":-1},{"failures":[],"tindex":"c6002bcf-210d-11e6-80a2-fbba9dc64642","series":0,"name":"replace","transplant":{"toString":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} ","position":"org.apache.commons.codec.language.Nysiis:287","type":"CtIfImpl","sourcecode":"if ((chars[i]) != (chars[(i - 1)])) {\n    key.append(chars[i]);\n} "},"variableMap":{"i":"length","chars":"inwd","key":"local"},"type":"adrStmt","transplantationPoint":{"toString":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.length) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}","position":"org.apache.commons.codec.language.Metaphone:108","type":"CtSwitchImpl","sourcecode":"switch (inwd[0]) {\n    case 'K' :\n    case 'G' :\n    case 'P' :\n        if ((inwd[1]) == 'N') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'A' :\n        if ((inwd[1]) == 'E') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'W' :\n        if ((inwd[1]) == 'R') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            break;\n        } \n        if ((inwd[1]) == 'H') {\n            local.append(inwd, 1, ((inwd.int) - 1));\n            local.setCharAt(0, 'W');\n        } else {\n            local.append(inwd);\n        }\n        break;\n    case 'X' :\n        inwd[0] = 'S';\n        local.append(inwd);\n        break;\n    default :\n        local.append(inwd);\n}"},"status":-2},{"failures":[],"tindex":"c6002bd0-210d-11e6-80a2-23f3dc38403f","series":0,"name":"add","transplant":{"toString":"int b = in[(inPos++)]","position":"org.apache.commons.codec.binary.Base32:503","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"variableMap":{"in":"keyBytes","inPos":"length"},"type":"adrStmt","transplantationPoint":{"toString":"int cnt = keyBytes.length","position":"org.apache.commons.codec.digest.Sha2Crypt:222","type":"CtLocalVariableImpl","sourcecode":"int int = keyBytes.int"},"status":-2},{"failures":[10,13,14,16,18],"tindex":"c60051e1-210d-11e6-80a2-1188713df0aa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += (rule.getPatternLength()) - 1","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:544","type":"CtOperatorAssignmentImpl","sourcecode":"index += (rule.getPatternLength()) - 1"},"status":-1},{"failures":[],"tindex":"c60051e2-210d-11e6-80a2-51c7c8de3948","series":0,"name":"add","transplant":{"toString":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} ","position":"org.apache.commons.codec.language.bm.Rule:699","type":"CtIfImpl","sourcecode":"if (i < 0) {\n    throw new java.lang.IndexOutOfBoundsException(\"Can not match pattern at negative indexes\");\n} "},"variableMap":{"i":"patternLength"},"type":"adrStmt","transplantationPoint":{"toString":"for (final org.apache.commons.codec.language.bm.Rule rule : rules) {\n    final java.lang.String pattern = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.input, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.i)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.found = true;\n        break;\n    } \n}","position":"org.apache.commons.codec.language.bm.PhoneticEngine:211","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n    final java.lang.String java.lang.String = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n        break;\n    } \n}"},"status":0},{"failures":[77,78,79,80,81,82],"tindex":"c60051e3-210d-11e6-80a2-0513f2e3cfdb","series":0,"name":"add","transplant":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)","position":"org.apache.commons.codec.digest.Sha2Crypt:463","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer)"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":33,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
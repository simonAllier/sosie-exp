{"failureDictionary":{"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter":163,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":28,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize":182,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects":19,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":8,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":102,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":61,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":68,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":188,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":45,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":168,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":96,"org.apache.commons.codec.language.NysiisTest.testCap":78,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":97,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":32,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":147,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":202,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":144,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":145,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":201,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":186,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":126,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":46,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":160,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":137,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize":113,"org.apache.commons.codec.binary.Base64Test.testEmptyBase64":158,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":101,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":35,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":75,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds":217,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":42,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":25,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":136,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":175,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":14,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":129,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":91,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":11,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":205,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":60,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":170,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":185,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":152,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":181,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":176,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":193,"org.apache.commons.codec.language.NysiisTest.testDropBy":86,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":23,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":12,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":30,"org.apache.commons.codec.binary.Base64Test.testUUID":140,"org.apache.commons.codec.binary.Base64Test.testSingletons":159,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":21,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":190,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize":127,"org.apache.commons.codec.binary.Base64Test.testPairs":139,"org.apache.commons.codec.binary.Base64Test.testConstructors":142,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":189,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":38,"org.apache.commons.codec.language.Caverphone1Test.testEndMb":196,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":22,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":93,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":120,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":90,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":65,"org.apache.commons.codec.language.NysiisTest.testBran":82,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":89,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput":76,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":41,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":216,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":131,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize":184,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":203,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":51,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":155,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":107,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":156,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":177,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":100,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":108,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":123,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize":178,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":57,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":9,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":74,"org.apache.commons.codec.language.NysiisTest.testDad":79,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter":148,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":48,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":117,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":143,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":73,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":180,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":77,"org.apache.commons.codec.language.NysiisTest.testDan":80,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":43,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":124,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":94,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":194,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":50,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":99,"org.apache.commons.codec.binary.HexTest.testCustomCharset":63,"org.apache.commons.codec.language.NysiisTest.testSnat":84,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize":112,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":15,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage":111,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":69,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":49,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":53,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":213,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":212,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":132,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":26,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":125,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":119,"org.apache.commons.codec.binary.Base64Test.testTriplets":134,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":13,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":95,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":2,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":5,"org.apache.commons.codec.net.QCodecTest.testEncodeObjects":24,"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe":157,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":115,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":149,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":118,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":173,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":197,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":138,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":214,"org.apache.commons.codec.language.Caverphone2Test.testEndMb":37,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":98,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":207,"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage":218,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":47,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":52,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":58,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":103,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":16,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":17,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":55,"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64":204,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":67,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":153,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":40,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":121,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":27,"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds":109,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":31,"org.apache.commons.codec.binary.Base64Test.testNonBase64Test":167,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":34,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":70,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":110,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":174,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":195,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":36,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":179,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":39,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":64,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":10,"org.apache.commons.codec.language.NysiisTest.testTranan":88,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":192,"org.apache.commons.codec.language.NysiisTest.testFal":81,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":200,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":29,"org.apache.commons.codec.language.NysiisTest.testSnad":83,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":72,"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111":198,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly":164,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":92,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize":128,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":7,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":169,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":146,"org.apache.commons.codec.binary.Base64Test.testBase64":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":211,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":114,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":150,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":133,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":210,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":56,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":209,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":66,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":59,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":18,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":171,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":122,"org.apache.commons.codec.binary.Base64Test.testCodec112":154,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":6,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":106,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":85,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":135,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":33,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":187,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":130,"org.apache.commons.codec.binary.Base64Test.testCodec68":161,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":62,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":116,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be":206,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":172,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":104,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":20,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":44,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":215,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":71,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":191,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":54,"org.apache.commons.codec.language.NysiisTest.testOthers":87,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":162,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":199,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize":183,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":105,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":208,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked":151,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":141},"transformations":[{"failures":[],"tindex":"fc6136c2-3fc7-11e6-82cf-f5802ed27ecc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:88","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"sh\", \"s2\")"},"status":0},{"failures":[],"tindex":"fc615dd3-3fc7-11e6-82cf-3fe27bfeb550","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:155","type":"CtWhileImpl","sourcecode":"while (readLen == 0) {\n    if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n        final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n        final int int = java.io.InputStream.read(buf);\n        if (boolean) {\n            org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        } else {\n            org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n        }\n    } \n    readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-2},{"failures":[0,1],"tindex":"fc6184e4-3fc7-11e6-82cf-21d332693f76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:423","type":"CtInvocationImpl","sourcecode":"result.append(\"KL\", \"L\")"},"status":-1},{"failures":[],"tindex":"fc6184e5-3fc7-11e6-82cf-ed43e89d9277","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":-2},{"failures":[2,3,4,5,6,7,8,9],"tindex":"fc6184e6-3fc7-11e6-82cf-419a51747830","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:362","type":"CtReturnImpl","sourcecode":"return rules"},"variableMap":{"rules":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:417","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inMultilineComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    if (line.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n        final java.lang.String java.lang.String = line.substring(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String.length()).trim();\n        if (incl.contains(\" \")) {\n            throw new java.lang.IllegalArgumentException((((\"Malformed import statement '\" + rawLine) + \"' in \") + location));\n        } else {\n            lines.putAll(org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(incl), ((location + \"->\") + incl)));\n        }\n    } else {\n        final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n        if ((parts.int) != 4) {\n            throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n        } else {\n            try {\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n                final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n                final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n                final int int = currentLine;\n                final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n                    private final int myLine = cLine;\n\n                    private final java.lang.String loc = location;\n\n                    @java.lang.Override\n                    public java.lang.String toString() {\n                        final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                        sb.append(\"Rule\");\n                        sb.append(\"{line=\").append(int);\n                        sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                        sb.append(\", pat='\").append(pat).append('\\'');\n                        sb.append(\", lcon='\").append(lCon).append('\\'');\n                        sb.append(\", rcon='\").append(rCon).append('\\'');\n                        sb.append('}');\n                        return sb.toString();\n                    }\n                };\n                final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n                java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n                if (rules == null) {\n                    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n                    lines.put(patternKey, rules);\n                } \n                rules.add(r);\n            } catch (final java.lang.IllegalArgumentException e) {\n                throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n            }\n        }\n    }\n}"},"status":-1},{"failures":[10,11,12,13],"tindex":"fc61abf7-3fc7-11e6-82cf-376dcd991d11","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"variableMap":{"c":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:505","type":"CtOperatorAssignmentImpl","sourcecode":"b += 256"},"status":-1},{"failures":[],"tindex":"fc61abf8-3fc7-11e6-82cf-4530cf975302","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:316","type":"CtAssignmentImpl","sourcecode":"this.boolean = concat"},"variableMap":{"concat":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:338","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"fc61abf9-3fc7-11e6-82cf-510997a5cd73","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:329","type":"CtIfImpl","sourcecode":"if (printable.get(b)) {\n    buffer.write(b);\n} else {\n    org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n}"},"status":-1},{"failures":[26,27,28,0,1],"tindex":"fc61d30a-3fc7-11e6-82cf-f1a1cc3574cb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:922","type":"CtIfImpl","sourcecode":"if (target.equals(element)) {\n    result = true;\n    break;\n} "},"status":-1},{"failures":[],"tindex":"fc61d30b-3fc7-11e6-82cf-b160c03997af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"variableMap":{"array":"array","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:232","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.decodeHex(new java.lang.String(array , getCharset()).toCharArray())"},"status":-2},{"failures":[],"tindex":"fc61d30c-3fc7-11e6-82cf-3b4e31c2cbd7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"line","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:283","type":"CtIfImpl","sourcecode":"if (line.contains(\"=\")) {\n    final java.lang.String[] java.lang.String[] = line.split(\"=\");\n    if ((parts.int) != 2) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed folding statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        final java.lang.String java.lang.String = parts[0];\n        final java.lang.String java.lang.String = parts[1];\n        if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n            throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n        } \n        asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));\n    }\n} else {\n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 4) {\n        throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n    } else {\n        try {\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n            final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n            final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n            final char char = r.java.lang.String.charAt(0);\n            java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n            if (rules == null) {\n                rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n                ruleMapping.put(patternKey, rules);\n            } \n            rules.add(r);\n        } catch (final java.lang.IllegalArgumentException e) {\n            throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n        }\n    }\n}"},"status":-2},{"failures":[],"tindex":"fc61fa1d-3fc7-11e6-82cf-17fd50e4d1f0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"inMultilineComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:262","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"status":-2},{"failures":[],"tindex":"fc61fa1e-3fc7-11e6-82cf-6ff7d10f8ec5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:181","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"mark/reset not supported\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:128","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"argument not a byte array\")"},"status":-2},{"failures":[],"tindex":"fc61fa1f-3fc7-11e6-82cf-77be499f577b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:265","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = java.lang.String.format(\"org/apache/commons/codec/language/bm/%s.txt\", lang)"},"variableMap":{"lang":"ph"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:372","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1))"},"status":-2},{"failures":[0],"tindex":"fc61fa20-3fc7-11e6-82cf-d961e34ecd11","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:143","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int))"},"variableMap":{"b":"index","org.apache.commons.codec.net.URLCodec.RADIX":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = charAt(value, (index + 2))"},"status":-1},{"failures":[],"tindex":"fc61fa21-3fc7-11e6-82cf-e3a94ea7bf78","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"next","curr":"next"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:153","type":"CtIfImpl","sourcecode":"if ((curr == 'P') && (next == 'H')) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":0},{"failures":[],"tindex":"fc622132-3fc7-11e6-82cf-6353ad68b27a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:188","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-2},{"failures":[],"tindex":"fc622133-3fc7-11e6-82cf-51eefcaa1997","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:129","type":"CtIfImpl","sourcecode":"if (b == null) {\n    throw new java.lang.NullPointerException();\n} else if ((offset < 0) || (len < 0)) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if ((offset > (b.int)) || ((offset + len) > (b.int))) {\n    throw new java.lang.IndexOutOfBoundsException();\n} else if (len == 0) {\n    return 0;\n} else {\n    int int = 0;\n    while (readLen == 0) {\n        if (!(org.apache.commons.codec.binary.BaseNCodec.hasData(org.apache.commons.codec.binary.BaseNCodec.Context))) {\n            final byte[] byte[] = new byte[boolean ? 4096 : 8192];\n            final int int = java.io.InputStream.read(buf);\n            if (boolean) {\n                org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            } else {\n                org.apache.commons.codec.binary.BaseNCodec.decode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context);\n            }\n        } \n        readLen = org.apache.commons.codec.binary.BaseNCodec.readResults(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context);\n    }\n    return readLen;\n}"},"status":-2},{"failures":[29,30,31,32,33,34,35],"tindex":"fc622134-3fc7-11e6-82cf-bb920e3b63a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:253","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.this.int"},"variableMap":{"maxCodeLen":"org.apache.commons.codec.language.MatchRatingApproachEncoder.SIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:339","type":"CtReturnImpl","sourcecode":"return java.lang.Math.abs(((org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int) - (strB.length())))"},"status":-1},{"failures":[],"tindex":"fc622135-3fc7-11e6-82cf-51065a973982","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:310","type":"CtIfImpl","sourcecode":"if (obj == null) {\n    return null;\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be decoded using Q codec\"));\n}"},"status":-2},{"failures":[],"tindex":"fc624846-3fc7-11e6-82cf-3f13ba0e7711","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"status":-2},{"failures":[36],"tindex":"fc624847-3fc7-11e6-82cf-67dd32042443","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:180","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"fc624848-3fc7-11e6-82cf-1151e5b5ae40","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:292","type":"CtIfImpl","sourcecode":"if ((key.length()) > 1) {\n    char char = key.charAt(((key.length()) - 1));\n    if (lastChar == 'S') {\n        key.deleteCharAt(((key.length()) - 1));\n        lastChar = key.charAt(((key.length()) - 1));\n    } \n    if ((key.length()) > 2) {\n        final char char = key.charAt(((key.length()) - 2));\n        if ((last2Char == 'A') && (lastChar == 'Y')) {\n            key.deleteCharAt(((key.length()) - 2));\n        } \n    } \n    if (lastChar == 'A') {\n        key.deleteCharAt(((key.length()) - 1));\n    } \n} "},"variableMap":{"key":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:332","type":"CtInvocationImpl","sourcecode":"code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())"},"status":-2},{"failures":[37],"tindex":"fc624849-3fc7-11e6-82cf-17e8146b9f6e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":-1},{"failures":[],"tindex":"fc626f5a-3fc7-11e6-82cf-01d0850b09a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:331","type":"CtAssignmentImpl","sourcecode":"t = (t >>> 4) | (t << 28)"},"variableMap":{"t":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:321","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-2},{"failures":[],"tindex":"fc626f5b-3fc7-11e6-82cf-0144ecce38e0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"prefix","salt":"prefix","prefix":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:206","type":"CtInvocationImpl","sourcecode":"ctx.update(prefix.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset))"},"status":-2},{"failures":[38,39,40,41],"tindex":"fc626f5c-3fc7-11e6-82cf-636069918209","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:312","type":"CtSwitchImpl","sourcecode":"switch (byteToCheck) {\n    case ' ' :\n    case '\\n' :\n    case '\\r' :\n    case '\\t' :\n        return true;\n    default :\n        return false;\n}"},"variableMap":{"byteToCheck":"org.apache.commons.codec.net.QuotedPrintableCodec.SPACE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-1},{"failures":[42,43],"tindex":"fc626f5d-3fc7-11e6-82cf-af7f7646bbf3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:791","type":"CtInvocationImpl","sourcecode":"mac.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[],"tindex":"fc626f5e-3fc7-11e6-82cf-ab8d483ed35a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[44],"tindex":"fc626f5f-3fc7-11e6-82cf-d325e465950e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:187","type":"CtIfImpl","sourcecode":"if (nextCharIsVowel) {\n    return java.lang.String[];\n} "},"status":-1},{"failures":[45,38,39,40,41],"tindex":"fc626f60-3fc7-11e6-82cf-69c2d2b6a86d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-1},{"failures":[],"tindex":"fc629671-3fc7-11e6-82cf-27b2dd87e949","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:286","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"variableMap":{"e":"obj","charsetName":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:291","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be encoded using Q codec\"))"},"status":-2},{"failures":[46,47,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"fc629672-3fc7-11e6-82cf-812ad5597033","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:144","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; i < l ; i++) {\n    out[(j++)] = toDigits[((240 & (data[i])) >>> 4)];\n    out[(j++)] = toDigits[(15 & (data[i]))];\n}"},"status":-1},{"failures":[],"tindex":"fc629673-3fc7-11e6-82cf-45c863fc3873","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.MatchRatingApproachEncoder.PLAIN_ASCII","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-2},{"failures":[],"tindex":"fc629674-3fc7-11e6-82cf-89d8d51204fa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:183","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:311","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3])"},"status":-2},{"failures":[],"tindex":"fc629675-3fc7-11e6-82cf-732209af45bc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:828","type":"CtIfImpl","sourcecode":"if ((index == ((value.length()) - 3)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ILLO\", \"ILLA\", \"ALLE\"))) {\n    return true;\n} else if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 2), 2, \"AS\", \"OS\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, ((value.length()) - 1), 1, \"A\", \"O\"))) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 4, \"ALLE\"))) {\n    return true;\n} else {\n    return false;\n}"},"status":-2},{"failures":[0,1],"tindex":"fc629676-3fc7-11e6-82cf-d9dbe1f25b0c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:321","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"index = (charAt(value, (index + 1))) == 'Z' ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"fc629677-3fc7-11e6-82cf-d13b35f57288","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:184","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8);\n} else {\n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(((\"^\" + (prefix.replace(\"$\", \"\\\\$\"))) + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\"));\n    final java.util.regex.Matcher java.util.regex.Matcher = p.matcher(salt);\n    if ((m == null) || (!(m.find()))) {\n        throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt));\n    } \n    saltString = m.group(1);\n}"},"variableMap":{"saltString":"line","salt":"line","prefix":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"fc62bd88-3fc7-11e6-82cf-bd14a16a1f35","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"variableMap":{"b":"lineSeparator","len":"length","context":"context","buffer":"buffer","readPos":"org.apache.commons.codec.binary.Base64.MASK_6BITS","bPos":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:386","type":"CtIfImpl","sourcecode":"if (0 == (context.int)) {\n    buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 12) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][(((context.int) >> 6) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))];\n    context.int += org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int;\n    if (((int) > 0) && ((int) <= (context.int))) {\n        java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n        context.int += byte[].int;\n        context.int = 0;\n    } \n} "},"status":-2},{"failures":[],"tindex":"fc62bd89-3fc7-11e6-82cf-9f12daadc238","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"inAvail","to":"inAvail"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:432","type":"CtIfImpl","sourcecode":"if (inAvail < 0) {\n    context.boolean = true;\n} "},"status":-2},{"failures":[],"tindex":"fc62bd8a-3fc7-11e6-82cf-fd30ad1a8e7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"variableMap":{"saltString":"code","num":"n","org.apache.commons.codec.digest.B64.B64T":"org.apache.commons.codec.language.Metaphone.VARSON"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n    final char char = local.charAt(n);\n    if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n        n++;\n    } else {\n        switch (symb) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (n == 0) {\n                    code.append(symb);\n                } \n                break;\n            case 'B' :\n                if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                    break;\n                } \n                code.append(symb);\n                break;\n            case 'C' :\n                if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    break;\n                } \n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                } \n                if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    code.append('S');\n                    break;\n                } \n                if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                    code.append('K');\n                    break;\n                } \n                if (isNextChar(local, n, 'H')) {\n                    if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                        code.append('K');\n                    } else {\n                        code.append('X');\n                    }\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'G' :\n                if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                    break;\n                } \n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                    break;\n                } \n                if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                    break;\n                } \n                if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H' :\n                if (isLastChar(wdsz, n)) {\n                    break;\n                } \n                if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                    break;\n                } \n                if (isVowel(local, (n + 1))) {\n                    code.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                code.append(symb);\n                break;\n            case 'K' :\n                if (n > 0) {\n                    if (!(isPreviousChar(local, n, 'C'))) {\n                        code.append(symb);\n                    } \n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P' :\n                if (isNextChar(local, n, 'H')) {\n                    code.append('F');\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'Q' :\n                code.append('K');\n                break;\n            case 'S' :\n                if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                    code.append('X');\n                } else {\n                    code.append('S');\n                }\n                break;\n            case 'T' :\n                if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                    code.append('X');\n                    break;\n                } \n                if (regionMatch(local, n, \"TCH\")) {\n                    break;\n                } \n                if (regionMatch(local, n, \"TH\")) {\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V' :\n                code.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                    code.append(symb);\n                } \n                break;\n            case 'X' :\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z' :\n                code.append('S');\n                break;\n            default :\n                break;\n        }\n        n++;\n    }\n    if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n        code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n    } \n}"},"status":-2},{"failures":[],"tindex":"fc62bd8b-3fc7-11e6-82cf-75a66e5b79f6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:183","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(e.getMessage() , e)"},"variableMap":{"e":"e"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:144","type":"CtThrowImpl","sourcecode":"throw org.apache.commons.codec.binary.StringUtils.newIllegalStateException(charsetName, e)"},"status":-2},{"failures":[],"tindex":"fc62bd8c-3fc7-11e6-82cf-318dca4808a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:82","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:177","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Null key\")"},"status":-2},{"failures":[27,0,1],"tindex":"fc62e49d-3fc7-11e6-82cf-f31996bb2e1f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:713","type":"CtInvocationImpl","sourcecode":"result.append('A', 'F')"},"status":-1},{"failures":[68,69,70,71,72,73,74,75],"tindex":"fc62e49e-3fc7-11e6-82cf-b1139cbb762d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:257","type":"CtAssignmentImpl","sourcecode":"ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{"ctx1":"altCtx"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:307","type":"CtAssignmentImpl","sourcecode":"altCtx = org.apache.commons.codec.digest.DigestUtils.getDigest(algorithm)"},"status":-1},{"failures":[],"tindex":"fc62e49f-3fc7-11e6-82cf-f50aab9b64db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":0},{"failures":[76],"tindex":"fc62e4a0-3fc7-11e6-82cf-ebb050510e7b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:204","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"DoubleMetaphone encode parameter is not of type String\")"},"status":-1},{"failures":[],"tindex":"fc62e4a1-3fc7-11e6-82cf-ed708dcadd60","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"status":-2},{"failures":[],"tindex":"fc62e4a2-3fc7-11e6-82cf-7f0e60759e27","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"c","len":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:370","type":"CtLocalVariableImpl","sourcecode":"int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))])"},"status":-2},{"failures":[],"tindex":"fc630bb3-3fc7-11e6-82cf-17d7d31cda33","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:284","type":"CtAssignmentImpl","sourcecode":"this.byte[] = org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.byte[]"},"status":-2},{"failures":[26,27,28,0,1],"tindex":"fc630bb4-3fc7-11e6-82cf-b10c35426ead","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:302","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"fc630bb5-3fc7-11e6-82cf-8955a39f8ccb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^gn\", \"2n\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"status":0},{"failures":[0,1],"tindex":"fc630bb6-3fc7-11e6-82cf-5756aab97da3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:587","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:660","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"status":-1},{"failures":[77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"fc630bb7-3fc7-11e6-82cf-63aa92eb8ce0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:139","type":"CtIfImpl","sourcecode":"if (curr == 'K') {\n    if (next == 'N') {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    } else {\n        return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n    }\n} "},"variableMap":{"next":"curr","org.apache.commons.codec.language.Nysiis.CHARS_NN":"org.apache.commons.codec.language.Nysiis.CHARS_A","org.apache.commons.codec.language.Nysiis.CHARS_C":"org.apache.commons.codec.language.Nysiis.CHARS_A","curr":"curr"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:125","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Nysiis.isVowel(curr)) {\n    return org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char[];\n} "},"status":-1},{"failures":[],"tindex":"fc630bb8-3fc7-11e6-82cf-d9fac8960463","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:311","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 4, 252645135, results)"},"status":-2},{"failures":[],"tindex":"fc630bb9-3fc7-11e6-82cf-29ef970a11de","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:81","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[90],"tindex":"fc630bba-3fc7-11e6-82cf-ed048280a945","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:83","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(keyBytes, null)"},"status":-1},{"failures":[],"tindex":"fc630bbb-3fc7-11e6-82cf-939902b610d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:302","type":"CtLocalVariableImpl","sourcecode":"final char char = key.charAt(((key.length()) - 2))"},"variableMap":{"key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:293","type":"CtLocalVariableImpl","sourcecode":"char char = key.charAt(((key.length()) - 1))"},"status":-2},{"failures":[],"tindex":"fc6332cc-3fc7-11e6-82cf-69bfed770c34","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:142","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Salt must not be null\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"status":0},{"failures":[27,0,1],"tindex":"fc6332cd-3fc7-11e6-82cf-ad8352cd82d5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"status":-1},{"failures":[],"tindex":"fc6332ce-3fc7-11e6-82cf-e5a2ab22b9f0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"fc6332cf-3fc7-11e6-82cf-61dbbc3899b2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:256","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int) ; i++) {\n    ctx1 = org.apache.commons.codec.digest.DigestUtils.getMd5Digest();\n    if ((i & 1) != 0) {\n        ctx1.update(keyBytes);\n    } else {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    }\n    if ((i % 3) != 0) {\n        ctx1.update(saltBytes);\n    } \n    if ((i % 7) != 0) {\n        ctx1.update(keyBytes);\n    } \n    if ((i & 1) != 0) {\n        ctx1.update(finalb, 0, org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.int);\n    } else {\n        ctx1.update(keyBytes);\n    }\n    finalb = ctx1.digest();\n}"},"variableMap":{"ctx1":"ctx","keyBytes":"finalb","finalb":"finalb","org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE":"ii","saltBytes":"finalb","org.apache.commons.codec.digest.Md5Crypt.ROUNDS":"ii"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:223","type":"CtInvocationImpl","sourcecode":"ctx.update(finalb, 0, (ii > 16 ? 16 : ii))"},"status":-2},{"failures":[91],"tindex":"fc6332d0-3fc7-11e6-82cf-676ef6283cad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:96","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"f+\", \"F\")"},"status":-1},{"failures":[46,47,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"fc63f621-3fc7-11e6-82cf-899c5dd20bbe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"toDigits","name1Size":"j","i":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[],"tindex":"fc63f622-3fc7-11e6-82cf-9d71452b1181","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:261","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:133","type":"CtAssignmentImpl","sourcecode":"b = 256 + b"},"status":-2},{"failures":[],"tindex":"fc644443-3fc7-11e6-82cf-e92f7a81d38c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:261","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"MCC\")"},"status":-2},{"failures":[],"tindex":"fc644444-3fc7-11e6-82cf-8f2f6d2804dc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:289","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[92,93],"tindex":"fc644445-3fc7-11e6-82cf-87b97efde278","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:287","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[94,95],"tindex":"fc644446-3fc7-11e6-82cf-4d3f63fb321d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:378","type":"CtAssignmentImpl","sourcecode":"schedule[(j++)] = s"},"status":-1},{"failures":[96,97],"tindex":"fc644447-3fc7-11e6-82cf-41447945d2b6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:56","type":"CtLocalVariableImpl","sourcecode":"int int = length"},"variableMap":{"length":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"status":-1},{"failures":[10,98,99,100,101,102,103,11,12,13],"tindex":"fc644448-3fc7-11e6-82cf-fbb594f9cc54","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:347","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    final byte[] byte[] = ensureBufferSize(int, context);\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n            context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"fc644449-3fc7-11e6-82cf-1525a2d23829","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:84","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(':')"},"status":0},{"failures":[],"tindex":"fc64444a-3fc7-11e6-82cf-d93b6d7448de","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.MD2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:85","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"fc646b5b-3fc7-11e6-82cf-db3b8a769ea8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:196","type":"CtLocalVariableImpl","sourcecode":"final java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:216","type":"CtLocalVariableImpl","sourcecode":"java.security.MessageDigest java.security.MessageDigest = org.apache.commons.codec.digest.DigestUtils.getMd5Digest()"},"status":-2},{"failures":[],"tindex":"fc646b5c-3fc7-11e6-82cf-1bd1a64bb3ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"org.apache.commons.codec.language.bm.RuleType.RULES","ruleType":"rt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:228","type":"CtIfImpl","sourcecode":"if (!(rt.equals(org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType))) {\n    rs.put(\"common\", org.apache.commons.codec.language.bm.Rule.parseRules(org.apache.commons.codec.language.bm.Rule.createScanner(s, rt, \"common\"), org.apache.commons.codec.language.bm.Rule.createResourceName(s, rt, \"common\")));\n} "},"status":-2},{"failures":[],"tindex":"fc646b5d-3fc7-11e6-82cf-2dff4ca9d1a3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:411","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"A\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"status":-2},{"failures":[],"tindex":"fc646b5e-3fc7-11e6-82cf-8db6f59d1850","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:444","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\")"},"status":-2},{"failures":[],"tindex":"fc646b5f-3fc7-11e6-82cf-6dbbb533b144","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:116","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < lengthToMatch ; i++) {\n    if ((es1.charAt(i)) == (es2.charAt(i))) {\n        diff++;\n    } \n}"},"variableMap":{"es1":"value","es2":"value","diff":"start","lengthToMatch":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtIfImpl","sourcecode":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String java.lang.String = value.substring(start, (start + length));\n    for (final java.lang.String java.lang.String : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,96,97,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,10,177,178,179,180,181,182,11,183,184,12,13,185,186,187,188,189,190,191,192],"tindex":"fc646b60-3fc7-11e6-82cf-1303c424a1f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:504","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"fc649271-3fc7-11e6-82cf-ab06455b4cd0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"status":0},{"failures":[],"tindex":"fc649272-3fc7-11e6-82cf-53a1e40c94e5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:309","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"status":-2},{"failures":[],"tindex":"fc64b983-3fc7-11e6-82cf-5f5e61e7d9ff","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:297","type":"CtAssignmentImpl","sourcecode":"context.byte[] = null"},"status":-2},{"failures":[],"tindex":"fc64b984-3fc7-11e6-82cf-11eaa4957d2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:421","type":"CtAssignmentImpl","sourcecode":"index = index + 2"},"variableMap":{"index":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:194","type":"CtAssignmentImpl","sourcecode":"minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"status":-2},{"failures":[],"tindex":"fc64b985-3fc7-11e6-82cf-bb46cbb3f59c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:266","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = new char[]{ '0' , '0' , '0' , '0' }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:283","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = org.apache.commons.codec.language.Nysiis.transcodeRemaining(chars[(i - 1)], chars[i], next, aNext)"},"status":-2},{"failures":[],"tindex":"fc64b986-3fc7-11e6-82cf-abb8ea5d13f1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:297","type":"CtAssignmentImpl","sourcecode":"left = (t >>> 1) | (t << 31)"},"variableMap":{"t":"currentLinePos","left":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[193,27,28,194,0,195],"tindex":"fc64b987-3fc7-11e6-82cf-6bce61dd4acc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:957","type":"CtIfImpl","sourcecode":"if ((org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length()) < (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int)) {\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value);\n} "},"status":-1},{"failures":[196,197,91,198],"tindex":"fc64b988-3fc7-11e6-82cf-759a4193c8ab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:79","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"tio\", \"sio\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:117","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"2\", \"\")"},"status":-1},{"failures":[199,200,201,202,203],"tindex":"fc64b989-3fc7-11e6-82cf-3b1182eebd35","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:139","type":"CtInvocationImpl","sourcecode":"buffer.write(b)"},"status":-1},{"failures":[104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,96,97,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,204,164,165,166,167,168,169,170,171,172,173,205,174,175,185,186,187,188,189,190,191,192],"tindex":"fc64b98a-3fc7-11e6-82cf-59654b90b8cd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"org.apache.commons.codec.binary.Base64.DECODE_TABLE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:438","type":"CtIfImpl","sourcecode":"if (b == (byte)) {\n    context.boolean = true;\n    break;\n} else {\n    if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[].int))) {\n        final int int = org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.byte[][b];\n        if (result >= 0) {\n            context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int);\n            context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result;\n            if ((context.int) == 0) {\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)(((context.int) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n                buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            } \n        } \n    } \n}"},"status":-1},{"failures":[],"tindex":"fc64e09b-3fc7-11e6-82cf-ad9de73ca4d8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:231","type":"CtLocalVariableImpl","sourcecode":"int int = 2"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[],"tindex":"fc64e09c-3fc7-11e6-82cf-dd7fcf1584f1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((str == null) || ((str.length()) == 0)) {\n    return str;\n} "},"variableMap":{"str":"upperName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:94","type":"CtReturnImpl","sourcecode":"return upperName"},"status":-2},{"failures":[46,47,48,49,50,51,52,43,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"fc64e09d-3fc7-11e6-82cf-e3b634af01c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[69,70,71],"tindex":"fc64e09e-3fc7-11e6-82cf-e5895ccba181","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:479","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer)"},"status":-1},{"failures":[],"tindex":"fc64e09f-3fc7-11e6-82cf-0f155403bc62","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:451","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = ((byte)((context.int) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)))"},"variableMap":{"ibitWorkArea":"pos","pos":"pos","org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS":"pos","context":"context","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:355","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[],"tindex":"fc64e0a0-3fc7-11e6-82cf-07fd93996a0a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:379","type":"CtForEachImpl","sourcecode":"for (char char : input.toCharArray()) {\n    if (java.lang.Character.isWhitespace(ch)) {\n        continue;\n    } \n    ch = java.lang.Character.toLowerCase(ch);\n    if ((boolean) && (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.containsKey(ch))) {\n        ch = org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.util.Map<java.lang.Character, java.lang.Character>.get(ch);\n    } \n    sb.append(ch);\n}"},"status":0},{"failures":[206],"tindex":"fc64e0a1-3fc7-11e6-82cf-6b0590399437","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:351","type":"CtReturnImpl","sourcecode":"return new java.lang.String(bytes , org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-1},{"failures":[2,3,4,5,207,6,208,7,8,209,210,9,211,212,213,214,215,216],"tindex":"fc64e0a2-3fc7-11e6-82cf-fd2ce60b7abf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:613","type":"CtIfImpl","sourcecode":"if (str.startsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(1);\n} "},"variableMap":{"str":"org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[0],"tindex":"fc64e0a3-3fc7-11e6-82cf-79e88519ab0f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:497","type":"CtLocalVariableImpl","sourcecode":"final char char = input.charAt(index)"},"variableMap":{"input":"value","index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:791","type":"CtLocalVariableImpl","sourcecode":"final char char = charAt(value, (index + 2))"},"status":-1},{"failures":[],"tindex":"fc6507b4-3fc7-11e6-82cf-491d9cf7769d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:212","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\")"},"status":0},{"failures":[108,109,110,111,112,113,114,125,100,217,183,218,184,12,13],"tindex":"fc6507b5-3fc7-11e6-82cf-73f907cfab01","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:298","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize)"},"variableMap":{"blocksize":"org.apache.commons.codec.binary.BaseNCodec.EOF","tempResult":"singleByte","pBytes":"singleByte","cp":"org.apache.commons.codec.binary.BaseNCodec.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:144","type":"CtIfImpl","sourcecode":"if (boolean) {\n    org.apache.commons.codec.binary.BaseNCodec.encode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n} else {\n    org.apache.commons.codec.binary.BaseNCodec.decode(byte[], 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, org.apache.commons.codec.binary.BaseNCodec.Context);\n}"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
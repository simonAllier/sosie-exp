{"failureDictionary":{"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":151,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":3,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":109,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":125,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":105,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":10,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MICKY_MICHAEL_SuccessfullyMatched":111,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":9,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":129,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":67,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":66,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":134,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":100,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":63,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":23,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":94,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":5,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":29,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":47,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":73,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":71,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":74,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":175,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_KARL_ALESSANDRO_DoesNotMatch":131,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":149,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":55,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":135,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":88,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":156,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":161,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":117,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":158,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":82,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":148,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":68,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":120,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":59,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":133,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched":118,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":169,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":86,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":150,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":37,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":77,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":79,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":91,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":171,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":2,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":142,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":146,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4":110,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":147,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":87,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":72,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":8,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString":27,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":49,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":42,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":124,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":12,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":31,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":24,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":36,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":126,"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull":19,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":159,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":98,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SMITH_SMYTH_SuccessfullyMatched":108,"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8":165,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":93,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":7,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":43,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":115,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":143,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":90,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":153,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEVEN_STEFAN_SuccessfullyMatched":121,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":114,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":53,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":116,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":168,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0":95,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":39,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":128,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":33,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars":26,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":99,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":173,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":48,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":62,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":157,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":123,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":11,"org.apache.commons.codec.binary.Base64Test.testBase64":155,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":22,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":65,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":78,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":107,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":1,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":38,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_AllLower_SuccessfullyRemoved":140,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":25,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":163,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":83,"org.apache.commons.codec.binary.Base64Test.testConstructors":172,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":162,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":89,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":96,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":81,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":80,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":15,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":127,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":174,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":51,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject":28,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":152,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":17,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":122,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":56,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":145,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":40,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":92,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":101,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":70,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":45,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":76,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":170,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":44,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":144,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched":97,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":41,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":52,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":46,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":103,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":132,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":6,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":21,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":166,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":160,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":137,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":69,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":64,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":32,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":138,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":35,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":84,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":164,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":154,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":34,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":57,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":130,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":13,"org.apache.commons.codec.language.SoundexTest.testDifference":75,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":167,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched":112,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":136,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":61,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":0,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched":106,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":16,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":119,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":4},"transformations":[{"failures":[],"tindex":"8bd9357d-40f2-11e6-8e74-c5a49512eefc","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"pattern","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"rawLine"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:303","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[2]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.DaitchMokotoffSoundex.stripQuotes(parts[3]);\n        final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule = new org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule(pattern , replacement1 , replacement2 , replacement3);\n        final char char = r.java.lang.String.charAt(0);\n        java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> java.util.List<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule> = ruleMapping.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n            ruleMapping.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-2},{"failures":[],"tindex":"8bd9839e-40f2-11e6-8e74-2194baea81f2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"variableMap":{"blocksize":"u","tempResult":"b","pBytes":"b","keyLen":"y","cp":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:239","type":"CtIfImpl","sourcecode":"if (((b[y]) & u) != 0) {\n    c |= 1;\n} "},"status":-2},{"failures":[],"tindex":"8bd9839f-40f2-11e6-8e74-112402940dd4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8bd983a0-40f2-11e6-8e74-41aa063b1782","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:635","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:307","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":0},{"failures":[],"tindex":"8bd983a1-40f2-11e6-8e74-294ad8d61732","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.BCodec:88","type":"CtReturnImpl","sourcecode":"return \"B\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:224","type":"CtReturnImpl","sourcecode":"return new java.lang.String(copyData(0, int))"},"status":-2},{"failures":[0,1],"tindex":"8bda9512-40f2-11e6-8e74-c1c7570fd4c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:361","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[2,3,0],"tindex":"8bdabc23-40f2-11e6-8e74-27192090d7ea","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:981","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.append(value)"},"status":-1},{"failures":[4,5],"tindex":"8bdabc24-40f2-11e6-8e74-2dd4a61db3a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"v"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"status":-1},{"failures":[],"tindex":"8bdabc25-40f2-11e6-8e74-b5f4cec62d46","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:847","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"UMB\")) && (((index + 1) == ((value.length()) - 1)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 2), 2, \"ER\")))"},"status":-2},{"failures":[],"tindex":"8bdbcd96-40f2-11e6-8e74-01111249bf7a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:366","type":"CtLocalVariableImpl","sourcecode":"final int int = ph.indexOf(\"[\")"},"variableMap":{"ph":"org.apache.commons.codec.language.MatchRatingApproachEncoder.UNICODE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:361","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c)"},"status":-2},{"failures":[],"tindex":"8bdbcd97-40f2-11e6-8e74-b3ec72893a69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:340","type":"CtLocalVariableImpl","sourcecode":"int int = org.apache.commons.codec.digest.UnixCrypt.fourBytesToInt(key, 0)"},"status":-2},{"failures":[],"tindex":"8bdbf4a8-40f2-11e6-8e74-8b794794ce3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:187","type":"CtInvocationImpl","sourcecode":"buffer.write(hex2)"},"variableMap":{"hex2":"hex1","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:144","type":"CtInvocationImpl","sourcecode":"buffer.write(hex1)"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"8bdbf4a9-40f2-11e6-8e74-25d35ae4a9c8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:316","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>();\n    ruleMapping.put(patternKey, rules);\n} "},"status":-1},{"failures":[19],"tindex":"8bdbf4aa-40f2-11e6-8e74-a5f9e7aa5906","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:160","type":"CtReturnImpl","sourcecode":"return null"},"status":-1},{"failures":[20,21,22,23,24,25],"tindex":"8bdbf4ab-40f2-11e6-8e74-e142282633fa","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(b, offset, len, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-1},{"failures":[26,27,28],"tindex":"8bdbf4ac-40f2-11e6-8e74-1f19e9f4743b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"l_ascii","name1Size":"jj","i":"bits"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:283","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"status":-1},{"failures":[],"tindex":"8bdcdf0d-40f2-11e6-8e74-5baf4f7cc73b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.StringEncoderComparator:77","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[29,30,31,32,33,34,35,36],"tindex":"8bdcdf0e-40f2-11e6-8e74-45235e65a35e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:211","type":"CtInvocationImpl","sourcecode":"ctx.update(saltBytes)"},"variableMap":{"ctx":"altCtx","saltBytes":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:316","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= (16 + ((altResult[0]) & 255)) ; i++) {\n    altCtx.update(saltBytes);\n}"},"status":-1},{"failures":[],"tindex":"8bdcdf0f-40f2-11e6-8e74-b137013f5db5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:231","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Unable to load resource: \" + (org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)))"},"variableMap":{"org.apache.commons.codec.language.DaitchMokotoffSoundex.RESOURCE_FILE":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:509","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (obj.getClass().getName())) + \" cannot be quoted-printable encoded\"))"},"status":-2},{"failures":[],"tindex":"8bdcdf10-40f2-11e6-8e74-572e7baf2ddd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:523","type":"CtReturnImpl","sourcecode":"return len"},"variableMap":{"len":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:209","type":"CtReturnImpl","sourcecode":"return n - todo"},"status":-2},{"failures":[],"tindex":"8bdcdf11-40f2-11e6-8e74-eb3911232b74","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:470","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha256Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:274","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd5Digest(), data)"},"status":-2},{"failures":[0,1],"tindex":"8bdd0622-40f2-11e6-8e74-d9f03d19d8fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"variableMap":{"u":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:343","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"8bdd0623-40f2-11e6-8e74-31bde76928d9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:63","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^tough\", \"tou2f\")"},"status":0},{"failures":[37,38,39,40,41,42,43],"tindex":"8bdd0624-40f2-11e6-8e74-eb310915a2b1","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"status":-1},{"failures":[],"tindex":"8bdd0625-40f2-11e6-8e74-835a09b2b5f1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:302","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\")"},"status":-2},{"failures":[],"tindex":"8bdd0626-40f2-11e6-8e74-c75ddda6b02f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"status":0},{"failures":[],"tindex":"8bdd0627-40f2-11e6-8e74-8b70f2ee7057","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:892","type":"CtAssignmentImpl","sourcecode":"input = input.trim()"},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:263","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"C\")"},"status":-2},{"failures":[],"tindex":"8bdd0628-40f2-11e6-8e74-3b8847f4b7b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:766","type":"CtLocalVariableImpl","sourcecode":"final int int = (bitlen / 8) - len"},"variableMap":{"bitlen":"length","len":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[],"tindex":"8bdd2d39-40f2-11e6-8e74-3365778ce0ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[],"tindex":"8bdd2d3a-40f2-11e6-8e74-876b2a55a2fe","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:198","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} else if (value instanceof java.lang.String) {\n    return encode(((java.lang.String)(value)));\n} else {\n    throw new org.apache.commons.codec.EncoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be encoded using BCodec\"));\n}"},"variableMap":{"this":"obj","value":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:338","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"8bdd2d3b-40f2-11e6-8e74-dbe9adce4096","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"status":0},{"failures":[0,1],"tindex":"8bdd2d3c-40f2-11e6-8e74-add8a71e80aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:809","type":"CtReturnImpl","sourcecode":"return true"},"status":-1},{"failures":[44],"tindex":"8bdd2d3d-40f2-11e6-8e74-d9966a388d4f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:74","type":"CtIfImpl","sourcecode":"if ((cs1 == null) || (cs2 == null)) {\n    return false;\n} "},"status":-1},{"failures":[45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"8bdd2d3e-40f2-11e6-8e74-6f15dca831d9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:344","type":"CtIfImpl","sourcecode":"if ((index > 0) && (index < (string.length()))) {\n    matches = (string.charAt((index - 1))) == c;\n} "},"status":-1},{"failures":[],"tindex":"8bdd544f-40f2-11e6-8e74-cd61b31f95bf","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:82","type":"CtAssignmentImpl","sourcecode":"this.char[] = org.apache.commons.codec.language.Soundex.org.apache.commons.codec.language.Soundex.char[]"},"variableMap":{"org.apache.commons.codec.language.Soundex.US_ENGLISH_MAPPING":"soundexMapping","soundexMapping":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:77","type":"CtAssignmentImpl","sourcecode":"this.char[] = new char[mapping.int]"},"status":-2},{"failures":[6,7,8,9,10,14],"tindex":"8bdd5450-40f2-11e6-8e74-65e0fed7a453","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:517","type":"CtInvocationImpl","sourcecode":"nextBranches.clear()"},"variableMap":{"nextBranches":"nextBranches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.add(nextBranch);\n} else {\n    break;\n}"},"status":-1},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"8bdd5451-40f2-11e6-8e74-ebde4a0d6d85","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"status":-1},{"failures":[],"tindex":"8bdd5452-40f2-11e6-8e74-f393b4e4261e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:156","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.fromAscii(ascii.toCharArray())"},"variableMap":{"ascii":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"8bdd5453-40f2-11e6-8e74-6b30915a86ec","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.MULTILINE_COMMENT_END","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"line"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:261","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    inMultilineComment = false;\n} "},"status":-2},{"failures":[],"tindex":"8bdd5454-40f2-11e6-8e74-b3d6444046a4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"str","txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:248","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"8bdd5455-40f2-11e6-8e74-a7c678c609c2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:121","type":"CtReturnImpl","sourcecode":"return diff"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:697","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[75,76],"tindex":"8bdd7b66-40f2-11e6-8e74-139840ea79bf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:263","type":"CtIfImpl","sourcecode":"if ((str.length()) == 0) {\n    return str;\n} "},"status":-1},{"failures":[],"tindex":"8bdd7b67-40f2-11e6-8e74-6f8369dc2fc8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:392","type":"CtReturnImpl","sourcecode":"return metaphone(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:153","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"8bdd7b68-40f2-11e6-8e74-2761c3c405e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:332","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:331","type":"CtLocalVariableImpl","sourcecode":"char char = '-'"},"status":-2},{"failures":[],"tindex":"8bdd7b69-40f2-11e6-8e74-b11f23dd5dce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:441","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"8bdd7b6a-40f2-11e6-8e74-511b457094b6","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:414","type":"CtAssignmentImpl","sourcecode":"inMultilineComment = false"},"variableMap":{"inMultilineComment":"inExtendedComment"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:185","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = false"},"status":0},{"failures":[77,78,79,80,81,82,83,84],"tindex":"8be0619b-40f2-11e6-8e74-b5996d69da5e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:91","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[aeiou]\", \"3\")"},"status":-1},{"failures":[85,86,87],"tindex":"8be0619c-40f2-11e6-8e74-33b64961ad9f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:327","type":"CtAssignmentImpl","sourcecode":"name2Char[(name2Size - i)] = ' '"},"variableMap":{"name2Char":"chrs","i":"index","name2Size":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:437","type":"CtAssignmentImpl","sourcecode":"chrs[index] = element[1]"},"status":-1},{"failures":[],"tindex":"8be0619d-40f2-11e6-8e74-e96fe31e5773","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Hex:141","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"variableMap":{"data":"keyBytes","length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:222","type":"CtLocalVariableImpl","sourcecode":"int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"8be0619e-40f2-11e6-8e74-07e3415b4a7f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:495","type":"CtLocalVariableImpl","sourcecode":"char char = '\u0000'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:282","type":"CtLocalVariableImpl","sourcecode":"final char char = i < (len - 2) ? chars[(i + 2)] : org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.char"},"status":-2},{"failures":[],"tindex":"8be088af-40f2-11e6-8e74-9d39eb3f3a1c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"index","to":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:518","type":"CtIfImpl","sourcecode":"if ((((index == 0) && ((charAt(value, (index + 4))) == ' ')) || ((value.length()) == 4)) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"SAN \"))) {\n    result.append('H');\n} else {\n    result.append('J', 'H');\n}"},"status":-2},{"failures":[],"tindex":"8be088b0-40f2-11e6-8e74-33fdba7d8f0d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:193","type":"CtAssignmentImpl","sourcecode":"this.boolean = strict"},"variableMap":{"strict":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"status":-2},{"failures":[6,7,9,10,11,12,13,14],"tindex":"8be088b1-40f2-11e6-8e74-69b4da6629cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"variableMap":{"source":"source"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:490","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = cleanup(source)"},"status":-1},{"failures":[6,7,8,9,10,11,12,13,14],"tindex":"8be088b2-40f2-11e6-8e74-45542dd1e8ad","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:466","type":"CtInvocationImpl","sourcecode":"sb.append(\", lcon='\").append(lCon).append('\\'')"},"variableMap":{"lCon":"replacement","sb":"builder"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:139","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(replacement)"},"status":-1},{"failures":[],"tindex":"8be088b3-40f2-11e6-8e74-6d0c584bf211","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:505","type":"CtIfImpl","sourcecode":"if (!boxes) {\n    if (startsWith && endsWith) {\n        if ((content.length()) == 0) {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return (input.length()) == 0;\n                }\n            };\n        } else {\n            return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                @java.lang.Override\n                public boolean isMatch(final java.lang.CharSequence input) {\n                    return input.equals(content);\n                }\n            };\n        }\n    } else if ((startsWith || endsWith) && ((content.length()) == 0)) {\n        return org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.RPattern;\n    } else if (startsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n            }\n        };\n    } else if (endsWith) {\n        return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n            @java.lang.Override\n            public boolean isMatch(final java.lang.CharSequence input) {\n                return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n            }\n        };\n    } \n} else {\n    final boolean boolean = content.startsWith(\"[\");\n    final boolean boolean = content.endsWith(\"]\");\n    if (startsWithBox && endsWithBox) {\n        java.lang.String java.lang.String = content.substring(1, ((content.length()) - 1));\n        if (!(boxContent.contains(\"[\"))) {\n            final boolean boolean = boxContent.startsWith(\"^\");\n            if (negate) {\n                boxContent = boxContent.substring(1);\n            } \n            final java.lang.String java.lang.String = boxContent;\n            final boolean boolean = !negate;\n            if (startsWith && endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (startsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n                    }\n                };\n            } else if (endsWith) {\n                return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n                    @java.lang.Override\n                    public boolean isMatch(final java.lang.CharSequence input) {\n                        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n                    }\n                };\n            } \n        } \n    } \n}"},"status":0},{"failures":[],"tindex":"8be0afc4-40f2-11e6-8e74-8ba7c5549ce6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:208","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:988","type":"CtLocalVariableImpl","sourcecode":"final int int = (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.int) - (org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.length())"},"status":-2},{"failures":[88,89,90,91,92],"tindex":"8be0afc5-40f2-11e6-8e74-c1f0d8ba8cb6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < ((bytes.int) - 3) ; i++) {\n    int int = org.apache.commons.codec.net.QuotedPrintableCodec.getUnsignedOctet(i, bytes);\n    if (pos < (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.int)) {\n        pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, (!(printable.get(b))), buffer);\n    } else {\n        org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, ((!(printable.get(b))) || (org.apache.commons.codec.net.QuotedPrintableCodec.isWhitespace(b))), buffer);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        buffer.write(org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte);\n        pos = 1;\n    }\n}"},"status":-1},{"failures":[],"tindex":"8be28486-40f2-11e6-8e74-63b6a509abc7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:73","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[],"tindex":"8be28487-40f2-11e6-8e74-cf56268d3872","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"variableMap":{"replacedName":"value","dc":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:918","type":"CtIfImpl","sourcecode":"if ((start >= 0) && ((start + length) <= (value.length()))) {\n    final java.lang.String java.lang.String = value.substring(start, (start + length));\n    for (final java.lang.String java.lang.String : criteria) {\n        if (target.equals(element)) {\n            result = true;\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"8be2ab98-40f2-11e6-8e74-ff110fb85711","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"8be2ab99-40f2-11e6-8e74-15f4b552bc5c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"variableMap":{"languages":"org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:64","type":"CtReturnImpl","sourcecode":"return langs.isEmpty() ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : new org.apache.commons.codec.language.bm.Languages.SomeLanguages(langs)"},"status":-2},{"failures":[],"tindex":"8be2ab9a-40f2-11e6-8e74-633aff6637cc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"rightLength","len":"rightLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:341","type":"CtIfImpl","sourcecode":"if ((rightLength = input.length()) > 0) {\n    nextChar = input.getNextChar();\n} else {\n    nextChar = '-';\n}"},"status":-2},{"failures":[93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],"tindex":"8be2ab9b-40f2-11e6-8e74-e34fcbd1f366","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:419","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = input.substring(((l.length()) + 1))"},"variableMap":{"input":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","l":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:333","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(name2Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-1},{"failures":[93,94,96,97,98,99,100,101,131,102,103,132,104,105,106,107,133,108,134,109,111,135,112,113,114,136,115,116,117,118,119,120,121,137,138,122,123,124,125,126,127,128,139,140,141,142,129,130],"tindex":"8be2f9bc-40f2-11e6-8e74-8bd16a01ff17","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:359","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < n ; i++) {\n    final char char = accentedWord.charAt(i);\n    final int int = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.indexOf(c);\n    if (pos > (-1)) {\n        sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n    } else {\n        sb.append(c);\n    }\n}"},"status":-1},{"failures":[29,33,34,35,36],"tindex":"8be2f9bd-40f2-11e6-8e74-3f4a5ff723f5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:230","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(finalb, ((byte)(0)))"},"variableMap":{"finalb":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:462","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer)"},"status":-1},{"failures":[],"tindex":"8be2f9be-40f2-11e6-8e74-1519c8e58009","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:202","type":"CtLocalVariableImpl","sourcecode":"int int = bytes[index]"},"variableMap":{"bytes":"keyBytes","index":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:180","type":"CtLocalVariableImpl","sourcecode":"final int int = keyBytes.int"},"status":-2},{"failures":[],"tindex":"8be2f9bf-40f2-11e6-8e74-0b6dff98a914","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:216","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (key.int) ; i++) {\n    key[i] = 0;\n}"},"variableMap":{"length":"cnt","key":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-2},{"failures":[],"tindex":"8be2f9c0-40f2-11e6-8e74-85fea8ad39a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"index","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:468","type":"CtIfImpl","sourcecode":"if ((++index) < (branches.int)) {\n    sb.append('|');\n} "},"status":-2},{"failures":[],"tindex":"8be2f9c1-40f2-11e6-8e74-87fb95a1acbb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"index","t":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:397","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8be2f9c2-40f2-11e6-8e74-e1051a42a1ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:481","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"8be320d3-40f2-11e6-8e74-255af5d25fca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"variableMap":{"mappedChar":"java.lang.Character.MIN_VALUE","preHWChar":"java.lang.Character.MIN_VALUE","firstCode":"java.lang.Character.MIN_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:906","type":"CtReturnImpl","sourcecode":"return java.lang.Character.java.lang.Character.char"},"status":-2},{"failures":[],"tindex":"8be320d4-40f2-11e6-8e74-2f0170956d1d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:76","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('+')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:134","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n} "},"status":-2},{"failures":[0,1],"tindex":"8be320d5-40f2-11e6-8e74-9b6c7b2612e7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:295","type":"CtInvocationImpl","sourcecode":"result.append('X')"},"status":-1},{"failures":[143,144,145,146,147],"tindex":"8be3bd16-40f2-11e6-8e74-7986cefe96ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:185","type":"CtInvocationImpl","sourcecode":"sBuf.append(str.charAt(0))"},"status":-1},{"failures":[],"tindex":"8be3bd17-40f2-11e6-8e74-bd8af789e30f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ly\", \"Ly\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:103","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":0},{"failures":[60],"tindex":"8be3bd18-40f2-11e6-8e74-e92e30848aa5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:277","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[148,149],"tindex":"8be3bd19-40f2-11e6-8e74-154294b5c331","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:199","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(ascii)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"raw","ascii":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"status":-1},{"failures":[],"tindex":"8be4324a-40f2-11e6-8e74-937a2f298149","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:246","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"data","key":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:485","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(data))"},"status":-2},{"failures":[],"tindex":"8be4595b-40f2-11e6-8e74-336ae090b2f3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:111","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.size()) == 1"},"status":-2},{"failures":[150,151],"tindex":"8be4595c-40f2-11e6-8e74-a53aa0d7c297","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-1},{"failures":[],"tindex":"8be4595d-40f2-11e6-8e74-31b130b39450","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"variableMap":{"line":"lang","ls":"ls"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:125","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"status":0},{"failures":[152,153,154,155,156,157,158,159,160,161,162,163,164,20,21,165,166],"tindex":"8be4595e-40f2-11e6-8e74-5b320ef93c1d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:223","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md2(data))"},"variableMap":{"data":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:257","type":"CtReturnImpl","sourcecode":"return bytes == null ? null : new java.lang.String(bytes , charset)"},"status":-1},{"failures":[],"tindex":"8be4595f-40f2-11e6-8e74-ef3f310ef076","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:468","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":0},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"8be45960-40f2-11e6-8e74-c7fc08cdf6a0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:311","type":"CtIfImpl","sourcecode":"if (ruleType == (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)) {\n    throw new java.lang.IllegalArgumentException((\"ruleType must not be \" + (org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType.org.apache.commons.codec.language.bm.RuleType)));\n} "},"variableMap":{"org.apache.commons.codec.language.bm.RuleType.RULES":"rt","ruleType":"rt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:357","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    throw new java.lang.IllegalArgumentException(java.lang.String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang));\n} "},"status":-1},{"failures":[],"tindex":"8be48071-40f2-11e6-8e74-d10ee85beaff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:109","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.this.java.lang.String = charset"},"variableMap":{"charset":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"status":-2},{"failures":[],"tindex":"8be48072-40f2-11e6-8e74-575a9a2a218e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"status":-2},{"failures":[],"tindex":"8be48073-40f2-11e6-8e74-1be7add94f39","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:432","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(context.int) - (context.int)]"},"variableMap":{"pos":"pos","context":"context","readPos":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:412","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[context.int]"},"status":-2},{"failures":[59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"8be48074-40f2-11e6-8e74-a95a1fdd8e02","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (lsScanner.hasNextLine()) {\n        final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else if ((line.length()) > 0) {\n                ls.add(line);\n            } \n        }\n    }\n} finally {\n    lsScanner.close();\n}"},"status":-1},{"failures":[],"tindex":"8be48075-40f2-11e6-8e74-73de51324f18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:650","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 3), 2, \"ER\", \"EN\")) {\n        result.append(\"X\", \"SK\");\n    } else {\n        result.append(\"SK\");\n    }\n} else {\n    if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n        result.append('X', 'S');\n    } else {\n        result.append('X');\n    }\n}"},"variableMap":{"result":"result","this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:599","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 1), 3, \"ISL\", \"YSL\")) {\n    index++;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 5, \"SUGAR\"))) {\n    result.append('X', 'S');\n    index++;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SH\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n        result.append('S');\n    } else {\n        result.append('X');\n    }\n    index += 2;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"SIO\", \"SIA\")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"SIAN\"))) {\n    if (slavoGermanic) {\n        result.append('S');\n    } else {\n        result.append('S', 'X');\n    }\n    index += 3;\n} else if (((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"M\", \"N\", \"L\", \"W\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\"))) {\n    result.append('S', 'X');\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"Z\") ? index + 2 : index + 1;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"SC\")) {\n    index = handleSC(value, result, index);\n} else {\n    if ((index == ((value.length()) - 1)) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 2, \"AI\", \"OI\"))) {\n        result.appendAlternate('S');\n    } else {\n        result.append('S');\n    }\n    index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1;\n}"},"status":-2},{"failures":[],"tindex":"8be48076-40f2-11e6-8e74-d1035b30702e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:720","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha512(data))"},"variableMap":{"data":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:167","type":"CtReturnImpl","sourcecode":"return name"},"status":-2},{"failures":[167,168,169,170,171],"tindex":"8be4a787-40f2-11e6-8e74-bdf1d3f55ed8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:93","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\\\')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:79","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i)"},"status":-1},{"failures":[60],"tindex":"8be4a788-40f2-11e6-8e74-b9d534da5216","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:277","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"8be4a789-40f2-11e6-8e74-851da2e8d2db","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:187","type":"CtIfImpl","sourcecode":"if (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if ((sumLength >= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) && (sumLength <= (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int))) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else if (sumLength == (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int)) {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n} else {\n    minRating = org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.int;\n}"},"variableMap":{"sumLength":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWELVE":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.SEVEN":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.TWO":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"cmtI","minRating":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.EIGHT":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.FOUR":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.ELEVEN":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.THREE":"cmtI","org.apache.commons.codec.language.MatchRatingApproachEncoder.ONE":"cmtI"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:272","type":"CtIfImpl","sourcecode":"if (cmtI >= 0) {\n    line = line.substring(0, cmtI);\n} "},"status":-2},{"failures":[],"tindex":"8be4a78a-40f2-11e6-8e74-e1098c52e875","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:614","type":"CtAssignmentImpl","sourcecode":"str = str.substring(1)"},"status":-2},{"failures":[],"tindex":"8be4a78b-40f2-11e6-8e74-7f9c2d5ba7dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"status":0},{"failures":[],"tindex":"8be4a78c-40f2-11e6-8e74-dfe7b712aac4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:227","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[9]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:194","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = saltString.getBytes(org.apache.commons.codec.Charsets.org.apache.commons.codec.Charsets.java.nio.charset.Charset)"},"status":-2},{"failures":[172,173],"tindex":"8be4a78d-40f2-11e6-8e74-a7a895f3300a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:499","type":"CtForEachImpl","sourcecode":"for (final byte byte : arrayOctet) {\n    if (((byte) == element) || (isInAlphabet(element))) {\n        return true;\n    } \n}"},"status":-1},{"failures":[],"tindex":"8be4ce9e-40f2-11e6-8e74-219306ac595b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:149","type":"CtReturnImpl","sourcecode":"return \"Q\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:434","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"8be4ce9f-40f2-11e6-8e74-454f25ae2985","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"variableMap":{"curr":"prev"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:159","type":"CtReturnImpl","sourcecode":"return new char[]{ prev }"},"status":-2},{"failures":[174,175],"tindex":"8be4cea0-40f2-11e6-8e74-6df92480950e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:193","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Negative skip length: \" + n))"},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":111,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":244,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":215,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched":257,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":82,"org.apache.commons.codec.digest.HmacUtilsTest.testInternalNoSuchAlgorithmException":58,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4":137,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":135,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3":136,"org.apache.commons.codec.language.NysiisTest.testRule4Dot2":157,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens":138,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_HARPER_HRPR":192,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":241,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":270,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":51,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":77,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":228,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":238,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":179,"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty":186,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":245,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":100,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":178,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":148,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched":279,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":150,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":149,"org.apache.commons.codec.language.NysiisTest.testCap":158,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot":195,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":256,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":90,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":175,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":216,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":89,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":249,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":73,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":231,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":34,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":56,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":154,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant":203,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":155,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":176,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":240,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":211,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":50,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":200,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":227,"org.apache.commons.codec.digest.HmacUtilsTest.testInitializedMac":63,"org.apache.commons.codec.language.SoundexTest.testB650":134,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":206,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":83,"org.apache.commons.codec.language.SoundexTest.testNewInstance":142,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":99,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":11,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BURNS_BOURNE_SuccessfullyMatched":259,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":243,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":35,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":95,"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched":262,"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples":128,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":53,"org.apache.commons.codec.binary.Base64Test.testIsStringBase64":9,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":69,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":76,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull":47,"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad":188,"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength":109,"org.apache.commons.codec.language.NysiisTest.testDropBy":171,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMacFail":266,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":210,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":81,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":54,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":232,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ShortNames_AL_ED_WorksButNoMatch":190,"org.apache.commons.codec.binary.Base64Test.testUUID":1,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":79,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":3,"org.apache.commons.codec.language.NysiisTest.testRule2":163,"org.apache.commons.codec.language.NysiisTest.testRule1":162,"org.apache.commons.codec.language.NysiisTest.testRule7":166,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":102,"org.apache.commons.codec.language.NysiisTest.testRule6":165,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":80,"org.apache.commons.codec.language.NysiisTest.testRule5":164,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEVEN_SuccessfullyMatched":253,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":125,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":234,"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported":27,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":233,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeWithInvalidObject":264,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":219,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":143,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":214,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":21,"org.apache.commons.codec.language.NysiisTest.testBran":167,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":174,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":254,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":275,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":37,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":61,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":184,"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0":44,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":124,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":237,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8":14,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant":189,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":48,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":38,"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute":144,"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic":130,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull":30,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant":196,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":72,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":230,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":197,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":226,"org.apache.commons.codec.language.NysiisTest.testDad":159,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le":18,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":24,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":91,"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds":46,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":225,"org.apache.commons.codec.language.NysiisTest.testRule4Dot1":156,"org.apache.commons.codec.language.NysiisTest.testDan":160,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":64,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString":12,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":31,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch":280,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual":112,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":115,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":43,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":60,"org.apache.commons.codec.binary.HexTest.testCustomCharset":120,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_STEPHEN_STEFAN_SuccessfullyMatched":258,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch":261,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":180,"org.apache.commons.codec.language.NysiisTest.testSnat":169,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":96,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":209,"org.apache.commons.codec.language.NysiisTest.testEncodeEmpty":187,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":208,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched":263,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":276,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":66,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":59,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":273,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":248,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":272,"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding":93,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":181,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":32,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":26,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":55,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":116,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":114,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":117,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":119,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipWrongArgument":49,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":22,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":282,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved":193,"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0":25,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":8,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":127,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1":15,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":67,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":281,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":274,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":42,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":267,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved":191,"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis":147,"org.apache.commons.codec.language.SoundexTest.testNewInstance2":145,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":250,"org.apache.commons.codec.language.SoundexTest.testNewInstance3":146,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":57,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":62,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":52,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":74,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":70,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":97,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":98,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":121,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":28,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":94,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":107,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":118,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable":139,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":207,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":223,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":199,"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects":92,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":277,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":39,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":217,"org.apache.commons.codec.language.SoundexTest.testBadCharacters":129,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":218,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":10,"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone":108,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":126,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":222,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":251,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":252,"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported":45,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":151,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":20,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":41,"org.apache.commons.codec.language.NysiisTest.testTranan":173,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_PETERSON_PETERS_SuccessfullyMatched":260,"org.apache.commons.codec.language.NysiisTest.testFal":161,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":88,"org.apache.commons.codec.language.NysiisTest.testSnad":168,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":220,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":68,"org.apache.commons.codec.language.MetaphoneTest.testTCH":204,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":224,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":123,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1":131,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2":132,"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3":133,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":5,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":239,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":269,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":213,"org.apache.commons.codec.binary.Base64Test.testBase64":4,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":271,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":78,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":106,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":40,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":183,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":235,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":71,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":101,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":6,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":182,"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":229,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipWrongArgument":33,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":86,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":242,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":0,"org.apache.commons.codec.language.NysiisTest.testTrueVariant":170,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":198,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":36,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be":17,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":246,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":153,"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes":140,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":221,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":122,"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty":185,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":19,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCodec184":110,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":152,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":7,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":84,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":104,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_CATHERINE_KATHRYN_SuccessfullyMatched":255,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":205,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":177,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":278,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":236,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":65,"org.apache.commons.codec.language.NysiisTest.testOthers":172,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":2,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":247,"org.apache.commons.codec.language.SoundexTest.testDifference":141,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":212,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":87,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":103,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":85,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testAccentRemovalNormalString_NoChange":194,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":268,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":105,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":202,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeNull":265,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMYTH_to_SMYTH":201,"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16":13},"transformations":[{"failures":[],"tindex":"d65202ae-3dc1-11e6-8e32-df9781a89d4e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:86","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = new java.lang.String[]{ \"\\\\-\" , \"[&]\" , \"\\\\\\'\" , \"\\\\.\" , \"[\\\\,]\" }"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:285","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String[] java.lang.String[] = line.split(\"=\")"},"status":-2},{"failures":[],"tindex":"d65229bf-3dc1-11e6-8e32-e52e419930ca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"d65229c0-3dc1-11e6-8e32-1d58f7f5fa41","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:692","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(base64String)"},"variableMap":{"base64String":"string"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.StringUtils:96","type":"CtReturnImpl","sourcecode":"return string.getBytes(charset)"},"status":-1},{"failures":[],"tindex":"d65229c1-3dc1-11e6-8e32-1d59f6f8a11d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"cp","name2Size":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:297","type":"CtWhileImpl","sourcecode":"while (cp < (keyLen - blocksize)) {\n    java.lang.System.arraycopy(tempResult, 0, pBytes, cp, blocksize);\n    cp += blocksize;\n}"},"status":-2},{"failures":[],"tindex":"d65229c2-3dc1-11e6-8e32-cd96da3d41f7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:384","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"d65229c3-3dc1-11e6-8e32-c18b5bd17581","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:48","type":"CtAssignmentImpl","sourcecode":"this.boolean = doEncode"},"status":-2},{"failures":[],"tindex":"d65229c4-3dc1-11e6-8e32-a34b31800dcb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:335","type":"CtReturnImpl","sourcecode":"return el"},"variableMap":{"el":"minRating"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:199","type":"CtReturnImpl","sourcecode":"return minRating"},"status":-2},{"failures":[],"tindex":"d65229c5-3dc1-11e6-8e32-af9627a975f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:75","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"q\", \"k\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:60","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^rough\", \"rou2f\")"},"status":0},{"failures":[105,106,107],"tindex":"d65250d6-3dc1-11e6-8e32-a7a3130e66a7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:532","type":"CtInvocationImpl","sourcecode":"result.append('J', ' ')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:442","type":"CtIfImpl","sourcecode":"if (((org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 4, \"VAN \", \"VON \")) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 3, \"SCH\"))) || (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"ET\"))) {\n    result.append('K');\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"IER\")) {\n    result.append('J');\n} else {\n    result.append('J', 'K');\n}"},"status":-1},{"failures":[],"tindex":"d65250d7-3dc1-11e6-8e32-f1778df3b38a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"bPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:294","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], context.int, b, bPos, len)"},"status":-2},{"failures":[],"tindex":"d65250d8-3dc1-11e6-8e32-7539fdb32b5c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"nextReplacement","org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE":"nextReplacement"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:530","type":"CtInvocationImpl","sourcecode":"nextBranch.processNextReplacement(nextReplacement, force)"},"status":-2},{"failures":[108,105,109,110,111,112],"tindex":"d65250d9-3dc1-11e6-8e32-a5bbdd2c8967","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:997","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.this.java.lang.StringBuilder.toString()"},"status":-1},{"failures":[],"tindex":"d65250da-3dc1-11e6-8e32-59e1e8d6fba2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"b","to":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:132","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b = 256 + b;\n} "},"status":-2},{"failures":[79,80,81,82,83,113,84,85,86],"tindex":"d65250db-3dc1-11e6-8e32-9decb4c8ef9a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = name.substring(0, 1)"},"variableMap":{"name":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:138","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = text.substring(from, to)"},"status":-1},{"failures":[],"tindex":"d65250dc-3dc1-11e6-8e32-b1cee16ac30d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:101","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(((byte[])(raw)))"},"variableMap":{"raw":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:531","type":"CtReturnImpl","sourcecode":"return decode(((byte[])(obj)))"},"status":-2},{"failures":[],"tindex":"d65277ed-3dc1-11e6-8e32-37aedbda9681","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:215","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[8]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:197","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[512]"},"status":-2},{"failures":[],"tindex":"d65277ee-3dc1-11e6-8e32-fb5a44d1fe60","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:116","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.lang.Math.min(java.util.Set<java.lang.String>.size(), sl.java.util.Set<java.lang.String>.size()));\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>) {\n        if (sl.java.util.Set<java.lang.String>.contains(lang)) {\n            ls.add(lang);\n        } \n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"variableMap":{"other":"other","languages":"languages","this":"org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"other","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"other"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:134","type":"CtIfImpl","sourcecode":"if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this;\n} else if (other == (org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)) {\n    return other;\n} else {\n    final org.apache.commons.codec.language.bm.Languages.SomeLanguages org.apache.commons.codec.language.bm.Languages.SomeLanguages = ((org.apache.commons.codec.language.bm.Languages.SomeLanguages)(other));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Set<java.lang.String>);\n    for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n        ls.add(lang);\n    }\n    return org.apache.commons.codec.language.bm.Languages.LanguageSet.from(ls);\n}"},"status":-2},{"failures":[114],"tindex":"d65277ef-3dc1-11e6-8e32-356107197a46","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:577","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) > 0) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(((input.length()) - 1)))) == shouldMatch);\n    }\n}"},"variableMap":{"input":"input","bContent":"bContent","shouldMatch":"shouldMatch"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:561","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return ((input.length()) == 1) && ((org.apache.commons.codec.language.bm.Rule.contains(bContent, input.charAt(0))) == shouldMatch);\n    }\n}"},"status":-1},{"failures":[],"tindex":"d65277f0-3dc1-11e6-8e32-811988993042","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:243","type":"CtIfImpl","sourcecode":"if (u == 0) {\n    y++;\n    u = 128;\n} "},"variableMap":{"u":"len","y":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:48","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < len ; i++) {\n    if (java.lang.Character.isLetter(str.charAt(i))) {\n        chars[(count++)] = str.charAt(i);\n    } \n}"},"status":-2},{"failures":[115,116],"tindex":"d65277f1-3dc1-11e6-8e32-691525963dfe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:310","type":"CtAssignmentImpl","sourcecode":"right = results[1]"},"status":-1},{"failures":[],"tindex":"d65277f2-3dc1-11e6-8e32-e53e28f08b19","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = basedCodec"},"variableMap":{"basedCodec":"baseNCodec","baseNCodec":"baseNCodec"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:47","type":"CtAssignmentImpl","sourcecode":"this.org.apache.commons.codec.binary.BaseNCodec = baseNCodec"},"status":-2},{"failures":[],"tindex":"d6529f03-3dc1-11e6-8e32-fd083f58b77b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:338","type":"CtReturnImpl","sourcecode":"return encode(((byte[])(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:507","type":"CtReturnImpl","sourcecode":"return encode(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"d6529f04-3dc1-11e6-8e32-3bdd9bccb60b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:255","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int)"},"variableMap":{"b":"buffer","context":"context","length":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:378","type":"CtSwitchImpl","sourcecode":"switch (context.int) {\n    case 2 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 2) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 3 :\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 7) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 4 :\n        context.long = (context.long) >> 4;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 5 :\n        context.long = (context.long) >> 1;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 6 :\n        context.long = (context.long) >> 6;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    case 7 :\n        context.long = (context.long) >> 3;\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        break;\n    default :\n        throw new java.lang.IllegalStateException((\"Impossible modulus \" + (context.int)));\n}"},"status":-2},{"failures":[105,106],"tindex":"d6529f05-3dc1-11e6-8e32-8dd382325b49","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:502","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:338","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"status":-1},{"failures":[],"tindex":"d6529f06-3dc1-11e6-8e32-173644e1ef1a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:88","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"status":-2},{"failures":[],"tindex":"d6529f07-3dc1-11e6-8e32-95c451a6f431","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"status":-2},{"failures":[],"tindex":"d6529f08-3dc1-11e6-8e32-85a6986f07fa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QCodec:72","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\\'')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:69","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('$')"},"status":0},{"failures":[],"tindex":"d652c619-3dc1-11e6-8e32-1909b061138d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"variableMap":{"txt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:541","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))"},"status":-2},{"failures":[117,118,114,119],"tindex":"d652c61a-3dc1-11e6-8e32-41616d01705c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:714","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"d652c61b-3dc1-11e6-8e32-9121cbe6e1d1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:340","type":"CtReturnImpl","sourcecode":"return str"},"status":-2},{"failures":[],"tindex":"d652c61c-3dc1-11e6-8e32-5f757b5424c3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:388","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = ph.substring(1, ((ph.length()) - 1))"},"variableMap":{"ph":"boxContent"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:556","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = boxContent"},"status":-2},{"failures":[120,21,121],"tindex":"d652c61d-3dc1-11e6-8e32-d35c6fdf49a2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"variableMap":{"bytes":"array"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:275","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(array).getBytes(org.apache.commons.codec.binary.Hex.this.getCharset())"},"status":-1},{"failures":[122,123,124,125,126],"tindex":"d652c61e-3dc1-11e6-8e32-130b26a4649d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:249","type":"CtBreakImpl","sourcecode":"break"},"status":-1},{"failures":[127,128],"tindex":"d652c61f-3dc1-11e6-8e32-1f026d21360f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[],"tindex":"d652c620-3dc1-11e6-8e32-07eece401c3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.AbstractCaverphone:58","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:147","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException((\"Invalid salt value: \" + salt))"},"status":-2},{"failures":[],"tindex":"d652c621-3dc1-11e6-8e32-25a21e174084","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:376","type":"CtAssignmentImpl","sourcecode":"s = (s >>> 16) | (t & -65536)"},"variableMap":{"s":"maxPhonemes","t":"maxPhonemes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:188","type":"CtAssignmentImpl","sourcecode":"this.int = maxPhonemes"},"status":-2},{"failures":[70],"tindex":"d652ed32-3dc1-11e6-8e32-f395524f9c91","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:658","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getSha512Digest(), data)"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:199","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.digest(org.apache.commons.codec.digest.DigestUtils.getMd2Digest(), data)"},"status":-1},{"failures":[],"tindex":"d652ed33-3dc1-11e6-8e32-b7b900fdc448","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:203","type":"CtIfImpl","sourcecode":"if (len == (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)) {\n    break;\n} "},"variableMap":{"org.apache.commons.codec.binary.BaseNCodec.EOF":"length","len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:466","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : branches) {\n    sb.append(branch);\n    if ((++index) < (branches.int)) {\n        sb.append('|');\n    } \n}"},"status":-2},{"failures":[129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174],"tindex":"d652ed34-3dc1-11e6-8e32-4bfc6cb1dc0e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:50","type":"CtAssignmentImpl","sourcecode":"chars[(count++)] = str.charAt(i)"},"status":-1},{"failures":[175,176],"tindex":"d652ed35-3dc1-11e6-8e32-b5586f876e8e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:357","type":"CtAssignmentImpl","sourcecode":"code = '2'"},"variableMap":{"code":"lastChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:398","type":"CtAssignmentImpl","sourcecode":"lastChar = chr"},"status":-1},{"failures":[],"tindex":"d652ed36-3dc1-11e6-8e32-69a8134efc54","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:240","type":"CtOperatorAssignmentImpl","sourcecode":"c |= 1"},"variableMap":{"c":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:329","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"status":-2},{"failures":[],"tindex":"d652ed37-3dc1-11e6-8e32-abe9335bed2a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:801","type":"CtIfImpl","sourcecode":"if (index != 0) {\n    return false;\n} else if ((!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 5, \"HARAC\", \"HARIS\"))) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")))) {\n    return false;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 5, \"CHORE\")) {\n    return false;\n} else {\n    return true;\n}"},"variableMap":{"index":"index","value":"org.apache.commons.codec.language.Metaphone.VOWELS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:339","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(string.charAt(index))) >= 0"},"status":-2},{"failures":[],"tindex":"d652ed38-3dc1-11e6-8e32-bfd159e25a6f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:112","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"j\", \"y\")"},"status":0},{"failures":[],"tindex":"d652ed39-3dc1-11e6-8e32-1b1fee2e9f76","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:314","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha1(key).doFinal(valueToDigest)"},"variableMap":{"valueToDigest":"l_raw","key":"l_raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:188","type":"CtReturnImpl","sourcecode":"return l_raw"},"status":-2},{"failures":[],"tindex":"d653144a-3dc1-11e6-8e32-ff4c19e00ce9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.SoundexUtils.clean(str)"},"variableMap":{"str":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:269","type":"CtAssignmentImpl","sourcecode":"str = org.apache.commons.codec.language.Nysiis.org.apache.commons.codec.language.Nysiis.java.util.regex.Pattern.matcher(str).replaceFirst(\"Y\")"},"status":0},{"failures":[],"tindex":"d653144b-3dc1-11e6-8e32-a5a73e0c2ebf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:236","type":"CtLocalVariableImpl","sourcecode":"final int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:465","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"d653144c-3dc1-11e6-8e32-8b9689b43d98","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:104","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"m+\", \"M\")"},"status":-2},{"failures":[177,178,179,180,181,182,183,41,48,53,54,55],"tindex":"d653144d-3dc1-11e6-8e32-b3787cfeff3b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:61","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(i))"},"variableMap":{"i":"org.apache.commons.codec.binary.Base32.MASK_5BITS","singleByte":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:511","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 25))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-1},{"failures":[],"tindex":"d653144e-3dc1-11e6-8e32-054718790be0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:601","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-2},{"failures":[184,141,185,151,186,187],"tindex":"d653144f-3dc1-11e6-8e32-b30e2b43275f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:43","type":"CtReturnImpl","sourcecode":"return str"},"status":-1},{"failures":[],"tindex":"d6531450-3dc1-11e6-8e32-7d15a59e68db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:201","type":"CtAssignmentImpl","sourcecode":"this.java.nio.charset.Charset = charset"},"status":-2},{"failures":[],"tindex":"d6531451-3dc1-11e6-8e32-45c39eb95073","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"variableMap":{"a":"length","m":"length","n":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[188],"tindex":"d6531452-3dc1-11e6-8e32-579a3cf71d57","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (arrayOctet == null) {\n    return false;\n} "},"status":-1},{"failures":[115,116],"tindex":"d6533b63-3dc1-11e6-8e32-074c1ade37ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:238","type":"CtOperatorAssignmentImpl","sourcecode":"c <<= 1"},"status":-1},{"failures":[189,190,191,192,193,194,195,196,197,198,199,200,201,202,203],"tindex":"d6533b64-3dc1-11e6-8e32-7b386df85ef3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"status":-1},{"failures":[122,204],"tindex":"d6533b65-3dc1-11e6-8e32-2fce03365de3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:199","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-1},{"failures":[],"tindex":"d6533b66-3dc1-11e6-8e32-db13fc5c86ba","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"matches","value":"test","element":"test"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:362","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (((index + (test.length())) - 1) < (string.length()))) {\n    final java.lang.String java.lang.String = string.substring(index, (index + (test.length())));\n    matches = substring.equals(test);\n} "},"status":-2},{"failures":[205,206,207,208,209,210,211,212,213,214,215],"tindex":"d6533b67-3dc1-11e6-8e32-39df204c11ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-1},{"failures":[216,217,218,219,220,221,222,223],"tindex":"d6533b68-3dc1-11e6-8e32-b14572bd17ab","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.B64:74","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= num ; i++) {\n    saltString.append(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.charAt(new java.util.Random().nextInt(org.apache.commons.codec.digest.B64.org.apache.commons.codec.digest.B64.java.lang.String.length())));\n}"},"status":-1},{"failures":[],"tindex":"d6533b69-3dc1-11e6-8e32-cf2c07f78897","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:102","type":"CtIfImpl","sourcecode":"if (salt == null) {\n    salt = (org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8));\n} "},"variableMap":{"salt":"valueToDigest","org.apache.commons.codec.digest.Sha2Crypt.SHA256_PREFIX":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:816","type":"CtInvocationImpl","sourcecode":"messageDigest.update(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[],"tindex":"d6533b6a-3dc1-11e6-8e32-ef5d49f6caf2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacAlgorithms:78","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = algorithm"},"variableMap":{"algorithm":"saltString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:185","type":"CtAssignmentImpl","sourcecode":"saltString = org.apache.commons.codec.digest.B64.getRandomSalt(8)"},"status":-2},{"failures":[],"tindex":"d653627b-3dc1-11e6-8e32-db92a09e3021","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"dg\", \"2g\")"},"status":-2},{"failures":[],"tindex":"d653627c-3dc1-11e6-8e32-ffc4670ba40c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:206","type":"CtAssignmentImpl","sourcecode":"this.int = unencodedBlockSize"},"variableMap":{"unencodedBlockSize":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:490","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-2},{"failures":[],"tindex":"d653627d-3dc1-11e6-8e32-5d410de64b4d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:99","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w3\", \"W3\")"},"status":0},{"failures":[224,225,226,219,227,228],"tindex":"d653627e-3dc1-11e6-8e32-c517656e5cc0","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:483","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:465","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer)"},"status":-1},{"failures":[229,230,117,118,114,119],"tindex":"d653627f-3dc1-11e6-8e32-3766671fa8b4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:529","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.startsWith(input, content);\n    }\n}"},"status":-1},{"failures":[105,106,111],"tindex":"d6536280-3dc1-11e6-8e32-7bde1a492c18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:723","type":"CtInvocationImpl","sourcecode":"result.appendAlternate('F')"},"status":-1},{"failures":[],"tindex":"d6536281-3dc1-11e6-8e32-dfad1646771d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"status":0},{"failures":[],"tindex":"d6536282-3dc1-11e6-8e32-df2a5e6db659","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"variableMap":{"value":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:259","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":0},{"failures":[197],"tindex":"d6538993-3dc1-11e6-8e32-4f68e7c06890","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":-1},{"failures":[],"tindex":"d6538994-3dc1-11e6-8e32-25acd082bbc6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:167","type":"CtReturnImpl","sourcecode":"return new char[]{ curr }"},"variableMap":{"curr":"prev"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:164","type":"CtReturnImpl","sourcecode":"return new char[]{ prev }"},"status":-2},{"failures":[231,232,233,234,235,236],"tindex":"d6538995-3dc1-11e6-8e32-93e22be1a2db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:85","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"d\", \"t\")"},"status":-1},{"failures":[],"tindex":"d6538996-3dc1-11e6-8e32-5b814c5dc84d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:144","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\");\n} "},"variableMap":{"terminator":"length","to":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:353","type":"CtIfImpl","sourcecode":"if ((b >= 0) && (b < (org.apache.commons.codec.binary.Base32.this.byte[].int))) {\n    final int int = org.apache.commons.codec.binary.Base32.this.byte[][b];\n    if (result >= 0) {\n        context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n        context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n        if ((context.int) == 0) {\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n            buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        } \n    } \n} "},"status":-2},{"failures":[122,237,238,239,240,241,242,124,243,244,245,246,247,248],"tindex":"d6538997-3dc1-11e6-8e32-ddae27ca08ac","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:233","type":"CtAssignmentImpl","sourcecode":"hard = false"},"variableMap":{"hard":"matches"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:346","type":"CtAssignmentImpl","sourcecode":"matches = (string.charAt((index - 1))) == c"},"status":-1},{"failures":[],"tindex":"d6538998-3dc1-11e6-8e32-8f0fab312d08","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:90","type":"CtAssignmentImpl","sourcecode":"salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt"},"variableMap":{"salt":"txt","org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:101","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"p+\", \"P\")"},"status":-2},{"failures":[105,106,107],"tindex":"d6538999-3dc1-11e6-8e32-85936b997c70","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:604","type":"CtInvocationImpl","sourcecode":"result.append('X', 'S')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:455","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":-1},{"failures":[],"tindex":"d653b0aa-3dc1-11e6-8e32-897954cce21a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:377","type":"CtIfImpl","sourcecode":"if (obj instanceof byte[]) {\n    return decode(((byte[])(obj)));\n} else if (obj instanceof java.lang.String) {\n    return decode(((java.lang.String)(obj)));\n} else {\n    throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base-N decode is not a byte[] or a String\");\n}"},"status":-2},{"failures":[],"tindex":"d653b0ab-3dc1-11e6-8e32-8f21079009ce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:338","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"d653b0ac-3dc1-11e6-8e32-cfa5b12b0e34","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:291","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = parts[1]"},"status":-2},{"failures":[],"tindex":"d653b0ad-3dc1-11e6-8e32-3d57ca0fa096","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:390","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:45","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b))"},"status":-2},{"failures":[204,123,249,124,125,250,251],"tindex":"d653b0ae-3dc1-11e6-8e32-dbd18519f4d2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:365","type":"CtAssignmentImpl","sourcecode":"matches = substring.equals(test)"},"status":-1},{"failures":[252,253,254,255,256,257,258,259,260,261,262,263],"tindex":"d653b0af-3dc1-11e6-8e32-2f4e4f7d28a5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:281","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"i","l_ascii":"name1Char","bits":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:320","type":"CtAssignmentImpl","sourcecode":"name1Char[i] = ' '"},"status":-1},{"failures":[],"tindex":"d653b0b0-3dc1-11e6-8e32-358bdb753e65","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"variableMap":{"inExtendedComment":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:349","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"d653b0b1-3dc1-11e6-8e32-fbffc5d6cf21","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:421","type":"CtReturnImpl","sourcecode":"return firstLetter + name"},"variableMap":{"name":"str","firstLetter":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:248","type":"CtReturnImpl","sourcecode":"return encode(str, getDefaultCharset())"},"status":-2},{"failures":[205,206,207,208,209,210,211,212,213,264,265,214,215],"tindex":"d653b0b2-3dc1-11e6-8e32-e344168c4338","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:336","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-1},{"failures":[266,65],"tindex":"d653d7c3-3dc1-11e6-8e32-dfac5aa2edc0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:606","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true)"},"variableMap":{"binaryData":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:635","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest)"},"status":-1},{"failures":[267,229,268,269,270,230,271,272,273,274,275,117,118,114,119],"tindex":"d653d7c4-3dc1-11e6-8e32-ef57e691feb4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:280","type":"CtIfImpl","sourcecode":"if ((input.charAt(i)) != (suffix.charAt(j))) {\n    return false;\n} "},"variableMap":{"input":"input","i":"i","j":"ipl","suffix":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:713","type":"CtIfImpl","sourcecode":"if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"d653d7c5-3dc1-11e6-8e32-c98b47d156aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:213","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.ColognePhonetic.CologneBuffer.this.int = 0"},"variableMap":{"length":"chunkSeparatorLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:210","type":"CtAssignmentImpl","sourcecode":"this.int = chunkSeparatorLength"},"status":-2},{"failures":[],"tindex":"d653d7c6-3dc1-11e6-8e32-59e82227bd03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:253","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '1'"},"variableMap":{"jj":"ibitWorkArea","l_ascii":"buffer","bits":"ibitWorkArea"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:390","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][((context.int) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"status":-2},{"failures":[229],"tindex":"d653d7c7-3dc1-11e6-8e32-396087969c5a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:277","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"d653d7c8-3dc1-11e6-8e32-9bd76a6fffd7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:118","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:113","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y3\", \"Y3\")"},"status":0},{"failures":[],"tindex":"d653d7c9-3dc1-11e6-8e32-b3d5883ba3a0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[276,277,278],"tindex":"d653d7ca-3dc1-11e6-8e32-e5df6e62d264","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:488","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer)"},"status":-1},{"failures":[],"tindex":"d653fedb-3dc1-11e6-8e32-cd803c4044f2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:364","type":"CtAssignmentImpl","sourcecode":"this.boolean = folding"},"variableMap":{"folding":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:440","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[115,116],"tindex":"d653fedc-3dc1-11e6-8e32-8311642dfe1d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"u","cp":"u"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:242","type":"CtOperatorAssignmentImpl","sourcecode":"u >>>= 1"},"status":-1},{"failures":[279,280],"tindex":"d653fedd-3dc1-11e6-8e32-af00079c67cf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:240","type":"CtAssignmentImpl","sourcecode":"name2 = getFirst3Last3(name2)"},"status":-1},{"failures":[281,282],"tindex":"d653fede-3dc1-11e6-8e32-e7ab823bc0f8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:250","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-1},{"failures":[276,277,278],"tindex":"d653fedf-3dc1-11e6-8e32-551ad28f18f7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:487","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer)"},"status":-1},{"failures":[],"tindex":"d653fee0-3dc1-11e6-8e32-9d77ac8bb503","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:125","type":"CtIfImpl","sourcecode":"if (urlsafe == null) {\n    urlsafe = org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet;\n} "},"variableMap":{"urlsafe":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS","org.apache.commons.codec.net.URLCodec.WWW_FORM_URL":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:67","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('\"')"},"status":-2},{"failures":[],"tindex":"d653fee1-3dc1-11e6-8e32-d54b7ec68aa5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:268","type":"CtTryImpl","sourcecode":"try {\n    return decodeText(str);\n} catch (final java.io.UnsupportedEncodingException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
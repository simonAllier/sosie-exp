{"failureDictionary":{"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":15,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_TOMASZ_TOM_SuccessfullyMatched":25,"org.apache.commons.codec.language.NysiisTest.testSnat":31,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":22,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":10,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":21,"org.apache.commons.codec.language.NysiisTest.testDropBy":32,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":23,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":0,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":13,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":2,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":20,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":1,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":18,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":24,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":11,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":17,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":9,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":30,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":8,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":14,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":12,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":4,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":26,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":7,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":3,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":19,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":6,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":29,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_PETE_NoMatchExpected":27,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testGetEncoding_SMITH_to_SMTH":28,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":33,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":5,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":16},"transformations":[{"failures":[0],"tindex":"6a62c267-210c-11e6-9ae7-fd1e11212901","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"index += 3","position":"org.apache.commons.codec.language.DoubleMetaphone:679","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-1},{"failures":[],"tindex":"6a62e978-210c-11e6-9ae7-8775e3a29351","series":0,"name":"add","transplant":{"toString":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} ","position":"org.apache.commons.codec.net.RFC1522Codec:148","type":"CtIfImpl","sourcecode":"if (!(getEncoding().equalsIgnoreCase(encoding))) {\n    throw new org.apache.commons.codec.DecoderException(((\"This codec cannot decode \" + encoding) + \" encoded content\"));\n} "},"variableMap":{"encoding":"org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE"},"type":"adrStmt","transplantationPoint":{"toString":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE)) {\n    str = str.substring(0, ((str.length()) - 1));\n} ","position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"status":-2},{"failures":[],"tindex":"6a62e979-210c-11e6-9ae7-470c16c17b45","series":0,"name":"replace","transplant":{"toString":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}","position":"org.apache.commons.codec.language.bm.Rule:508","type":"CtIfImpl","sourcecode":"if ((content.length()) == 0) {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return (input.length()) == 0;\n        }\n    };\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n        @java.lang.Override\n        public boolean isMatch(final java.lang.CharSequence input) {\n            return input.equals(content);\n        }\n    };\n}"},"variableMap":{"input":"this","this":"this","content":"input"},"type":"adrStmt","transplantationPoint":{"toString":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        final java.util.regex.Matcher matcher = pattern.matcher(input);\n        return matcher.find();\n    }\n}","position":"org.apache.commons.codec.language.bm.Rule:589","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(regex);\n\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        final java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern.matcher(input);\n        return matcher.find();\n    }\n}"},"status":-2},{"failures":[],"tindex":"6a63108a-210c-11e6-9ae7-7beda774055e","series":0,"name":"add","transplant":{"toString":"flush()","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} ","position":"org.apache.commons.codec.language.Metaphone:353","type":"CtIfImpl","sourcecode":"if ((index >= 0) && (index < ((string.length()) - 1))) {\n    matches = (string.charAt((index + 1))) == c;\n} "},"status":-2},{"failures":[1,2,3,4],"tindex":"6a63108b-210c-11e6-9ae7-9b1381c690bf","series":0,"name":"replace","transplant":{"toString":"buffer.append(\"$\")","position":"org.apache.commons.codec.digest.Sha2Crypt:427","type":"CtInvocationImpl","sourcecode":"buffer.append(\"$\")"},"variableMap":{"buffer":"code"},"type":"adrStmt","transplantationPoint":{"toString":"code.append('K')","position":"org.apache.commons.codec.language.Metaphone:240","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"status":-1},{"failures":[5,6,7,8,9,10,11,12],"tindex":"6a63108c-210c-11e6-9ae7-e15738dd17fd","series":0,"name":"replace","transplant":{"toString":"ctx.reset()","position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"variableMap":{"ctx":"ctx"},"type":"adrStmt","transplantationPoint":{"toString":"ctx.update(saltBytes)","position":"org.apache.commons.codec.digest.Sha2Crypt:181","type":"CtInvocationImpl","sourcecode":"ctx.update(saltBytes)"},"status":-1},{"failures":[],"tindex":"6a63108d-210c-11e6-9ae7-29ad04b2d59e","series":0,"name":"replace","transplant":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set(')')","position":"org.apache.commons.codec.net.QCodec:74","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(')')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.URLCodec.WWW_FORM_URL"},"type":"adrStmt","transplantationPoint":{"toString":"for (int i = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.WWW_FORM_URL.set(i);\n}","position":"org.apache.commons.codec.net.URLCodec:75","type":"CtForImpl","sourcecode":"for (int int = 'a' ; i <= 'z' ; i++) {\n    org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set(i);\n}"},"status":-2},{"failures":[],"tindex":"6a63108e-210c-11e6-9ae7-d5b079ba48f1","series":0,"name":"replace","transplant":{"toString":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)","position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"length","d":"length"},"type":"adrStmt","transplantationPoint":{"toString":"(length)++","position":"org.apache.commons.codec.language.ColognePhonetic:254","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":-2},{"failures":[],"tindex":"6a63379f-210c-11e6-9ae7-555a398e8117","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"txt = txt.replaceAll(\"^trough\", \"trou2f\")","position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"status":0},{"failures":[],"tindex":"6a6337a0-210c-11e6-9ae7-bd9862311d88","series":0,"name":"replace","transplant":{"toString":"this.lineSeparator = null","position":"org.apache.commons.codec.binary.Base32:304","type":"CtAssignmentImpl","sourcecode":"this.byte[] = null"},"variableMap":{"lineSeparator":"data"},"type":"adrStmt","transplantationPoint":{"toString":"data = doDecoding(data)","position":"org.apache.commons.codec.net.RFC1522Codec:154","type":"CtAssignmentImpl","sourcecode":"data = doDecoding(data)"},"status":-3},{"failures":[],"tindex":"6a6337a1-210c-11e6-9ae7-d5a5d2e6e42f","series":0,"name":"replace","transplant":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)","position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"variableMap":{"key":"key","algorithm":"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256"},"type":"adrStmt","transplantationPoint":{"toString":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256, key)","position":"org.apache.commons.codec.digest.HmacUtils:99","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"status":-2},{"failures":[],"tindex":"6a6337a2-210c-11e6-9ae7-bbb0ecb93089","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}","position":"org.apache.commons.codec.digest.HmacUtils:634","type":"CtTryImpl","sourcecode":"try {\n    return org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key).doFinal(valueToDigest);\n} catch (final java.lang.IllegalStateException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-2},{"failures":[],"tindex":"6a6337a3-210c-11e6-9ae7-fddcbe4fdebd","series":0,"name":"replace","transplant":{"toString":"flush(false)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:97","type":"CtInvocationImpl","sourcecode":"flush(false)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS.set('<')","position":"org.apache.commons.codec.net.QCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('<')"},"status":-2},{"failures":[13,14,15],"tindex":"6a635eb4-210c-11e6-9ae7-91a8cee36fa9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"for (int ii = 0, jj = (ascii.length) - 1 ; ii < (l_raw.length) ; ii++ , jj -= 8) {\n    for (int bits = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.BITS.length) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.BITS[bits];\n        } \n    }\n}","position":"org.apache.commons.codec.binary.BinaryCodec:181","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (ascii.int) - 1 ; ii < (l_raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if ((ascii[(jj - bits)]) == '1') {\n            l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n        } \n    }\n}"},"status":-1},{"failures":[16,17],"tindex":"6a635eb5-210c-11e6-9ae7-0d09a2d814af","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"right = results[0]","position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"right = results[0]"},"status":-1},{"failures":[18,19,20,21,22,23],"tindex":"6a635eb6-210c-11e6-9ae7-3fef20a4ccde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"toString":"if (branching) {\n    nextBranches.add(nextBranch);\n} else {\n    break;\n}","position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:532","type":"CtIfImpl","sourcecode":"if (branching) {\n    nextBranches.add(nextBranch);\n} else {\n    break;\n}"},"status":-1},{"failures":[],"tindex":"6a635eb7-210c-11e6-9ae7-0b39934d4a09","series":0,"name":"replace","transplant":{"toString":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} ","position":"org.apache.commons.codec.language.DoubleMetaphone:877","type":"CtIfImpl","sourcecode":"if (value.startsWith(element)) {\n    result = true;\n    break;\n} "},"variableMap":{"result":"inExtendedComment","value":"org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START","element":"line"},"type":"adrStmt","transplantationPoint":{"toString":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_START)) {\n    inExtendedComment = true;\n} else {\n    final int cmtI = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.CMT);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] parts = line.split(\"\\\\s+\");\n    if ((parts.length) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] langs = parts[1].split(\"\\\\+\");\n    final boolean accept = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}","position":"org.apache.commons.codec.language.bm.Lang:149","type":"CtIfImpl","sourcecode":"if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = true;\n} else {\n    final int int = line.indexOf(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String);\n    if (cmtI >= 0) {\n        line = line.substring(0, cmtI);\n    } \n    line = line.trim();\n    if ((line.length()) == 0) {\n        continue;\n    } \n    final java.lang.String[] java.lang.String[] = line.split(\"\\\\s+\");\n    if ((parts.int) != 3) {\n        throw new java.lang.IllegalArgumentException(((((\"Malformed line '\" + rawLine) + \"' in language resource '\") + languageRulesResourceName) + \"'\"));\n    } \n    final java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern.compile(parts[0]);\n    final java.lang.String[] java.lang.String[] = parts[1].split(\"\\\\+\");\n    final boolean boolean = parts[2].equals(\"true\");\n    rules.add(new org.apache.commons.codec.language.bm.Lang.LangRule(pattern , new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(langs)) , accept));\n}"},"status":-2},{"failures":[24,25,26,27,28],"tindex":"6a6385c8-210c-11e6-9ae7-8b3e82efe344","series":0,"name":"replace","transplant":{"toString":"java.lang.String txt = source","position":"org.apache.commons.codec.language.Caverphone1:46","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = source"},"variableMap":{"source":"name"},"type":"adrStmt","transplantationPoint":{"toString":"java.lang.String upperName = name.toUpperCase(java.util.Locale.ENGLISH)","position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:84","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = name.toUpperCase(java.util.Locale.java.util.Locale.java.util.Locale)"},"status":-1},{"failures":[],"tindex":"6a6385c9-210c-11e6-9ae7-9b771d3d7fbe","series":0,"name":"replace","transplant":{"toString":"flush(true)","position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:132","type":"CtInvocationImpl","sourcecode":"flush(true)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"toString":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} ","position":"org.apache.commons.codec.digest.Sha2Crypt:378","type":"CtIfImpl","sourcecode":"if ((i % 3) != 0) {\n    ctx.update(sBytes, 0, saltLen);\n} "},"status":-2},{"failures":[29,30],"tindex":"6a6385ca-210c-11e6-9ae7-6bb4e67acc21","series":0,"name":"add","transplant":{"toString":"startSrc = 1","position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"startSrc = 1"},"variableMap":{"startSrc":"index"},"type":"adrStmt","transplantationPoint":{"toString":"index += 2","position":"org.apache.commons.codec.language.DoubleMetaphone:424","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[31,32,33],"tindex":"6a6385cb-210c-11e6-9ae7-797ca20d8378","series":0,"name":"replace","transplant":{"toString":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((curr == 'W') && (org.apache.commons.codec.language.Nysiis.isVowel(prev))) {\n    return new char[]{ prev };\n} "},"variableMap":{"prev":"curr","curr":"curr"},"type":"adrStmt","transplantationPoint":{"toString":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} ","position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((curr == 'H') && ((!(org.apache.commons.codec.language.Nysiis.isVowel(prev))) || (!(org.apache.commons.codec.language.Nysiis.isVowel(next))))) {\n    return new char[]{ prev };\n} "},"status":-1}],"header":{"groupId":"commons-codec","transformationCount":21,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
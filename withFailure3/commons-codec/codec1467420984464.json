{"failureDictionary":{"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":47,"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB":73,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":94,"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2":104,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithByteArray":209,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":12,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan":64,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":202,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":38,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis":60,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":116,"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation":70,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary":75,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":87,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":145,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":172,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1":106,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3":108,"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2":107,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer":128,"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella":127,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":180,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":181,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":185,"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode":162,"org.apache.commons.codec.language.ColognePhoneticTest.testExamples":126,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":182,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":216,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN":59,"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode":161,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":183,"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases":130,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":196,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2HexLength":214,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":97,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacMd5Hex":22,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":143,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2":155,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3":156,"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen":133,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":141,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite":63,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":201,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":120,"org.apache.commons.codec.language.SoundexTest.testB650":103,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":95,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":140,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid":151,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright":68,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip":84,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":168,"org.apache.commons.codec.digest.DigestUtilsTest.testSha512":37,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Length":213,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":192,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":195,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":142,"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe":131,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":93,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":169,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":98,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":110,"org.apache.commons.codec.binary.Base64Test.testUUID":177,"org.apache.commons.codec.binary.Base64Test.testSingletons":188,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":92,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":144,"org.apache.commons.codec.binary.Base64Test.testPairs":176,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":89,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":122,"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX":69,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":99,"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals":218,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptExplicitCall":206,"org.apache.commons.codec.language.SoundexTest.testEncodeBasic":105,"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom":42,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":150,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":139,"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":129,"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects":163,"org.apache.commons.codec.digest.HmacUtilsTest.testSha384HMac":27,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":113,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithByteArray":212,"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour":157,"org.apache.commons.codec.language.MetaphoneTest.testMetaphone":67,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":125,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1":56,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2":57,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":173,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":200,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1Hex":34,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":15,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert":65,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testcleanName_SuccessfullyClean":121,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":119,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithByteArray":24,"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid":152,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":179,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":118,"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY":53,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithString":29,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":2,"org.apache.commons.codec.digest.HmacUtilsTest.testSha1HMac":26,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":199,"org.apache.commons.codec.binary.HexTest.testCustomCharset":40,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":85,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":100,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Length":207,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":18,"org.apache.commons.codec.digest.HmacUtilsTest.testSha256HMac":25,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1UpdateWithInpustream":30,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":17,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY":80,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":165,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":138,"org.apache.commons.codec.binary.Base64Test.testTriplets":175,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":170,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":3,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":6,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":4,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":7,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":51,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":186,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":193,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":50,"org.apache.commons.codec.digest.DigestUtilsTest.testSha1UpdateWithString":210,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":19,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":198,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":8,"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX":71,"org.apache.commons.codec.digest.HmacUtilsTest.testHmacSha1Hex":23,"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean":96,"org.apache.commons.codec.digest.HmacUtilsTest.testMd5HMac":28,"org.apache.commons.codec.digest.DigestUtilsTest.testSha256":35,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":109,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":203,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111":0,"org.apache.commons.codec.digest.DigestUtilsTest.testMd2Hex":32,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode":86,"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan":132,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode":147,"org.apache.commons.codec.binary.HexTest.testRequiredCharset":44,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":149,"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode":164,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":46,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":5,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":114,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":101,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":136,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":217,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptExplicitCall":135,"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG":78,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":194,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":205,"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA":79,"org.apache.commons.codec.language.RefinedSoundexTest.testDifference":82,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":115,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":148,"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex":41,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero":74,"org.apache.commons.codec.language.MetaphoneTest.testWhy":55,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":167,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":197,"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet":160,"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException":208,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":111,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":204,"org.apache.commons.codec.language.MetaphoneTest.testTCH":54,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5HexLength":211,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":117,"org.apache.commons.codec.language.MetaphoneTest.testPHTOF":58,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":11,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan":62,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":191,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter":61,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":184,"org.apache.commons.codec.binary.Base64Test.testBase64":190,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":16,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":49,"org.apache.commons.codec.digest.DigestUtilsTest.testShaUpdateWithString":215,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":137,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":187,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":166,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":14,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":158,"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex":33,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":13,"org.apache.commons.codec.binary.HexTest.testEncodeZeroes":43,"org.apache.commons.codec.digest.DigestUtilsTest.testSha384":36,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode":88,"org.apache.commons.codec.language.MetaphoneTest.testExceedLength":72,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":174,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":9,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight":66,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":134,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay":81,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":146,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn":76,"org.apache.commons.codec.language.RefinedSoundexTest.testEncode":154,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":112,"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH":52,"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex":39,"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance":153,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":123,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode":91,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":171,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":20,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":102,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":1,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":31,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":189,"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary":77,"org.apache.commons.codec.language.SoundexTest.testDifference":83,"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla":45,"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip":159,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects":90,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":124,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":10,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":48,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":178},"transformations":[{"failures":[0,1],"tindex":"ccab711a-3fef-11e6-be8e-5b1117b42aff","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:115","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"l3\", \"L3\")"},"status":-1},{"failures":[],"tindex":"ccab982b-3fef-11e6-be8e-bf9f26726246","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:184","type":"CtIfImpl","sourcecode":"if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n    inExtendedComment = false;\n} "},"variableMap":{"inExtendedComment":"found","org.apache.commons.codec.language.bm.ResourceConstants.EXT_CMT_END":"input","line":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:211","type":"CtForEachImpl","sourcecode":"for (final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule : rules) {\n    final java.lang.String java.lang.String = rule.getPattern();\n    patternLength = pattern.length();\n    if (rule.patternAndContextMatches(org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.java.lang.CharSequence, org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int)) {\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.org.apache.commons.codec.language.bm.PhoneticEngine.PhonemeBuilder.apply(rule.getPhoneme(), int);\n        org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true;\n        break;\n    } \n}"},"status":-2},{"failures":[2,3],"tindex":"ccabbf3c-3fef-11e6-be8e-013df4150663","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:305","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(right, left, 2, 858993459, results)"},"variableMap":{"left":"j","right":"d","results":"schedule"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:360","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < 16 ; i++) {\n    if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n        c = (c >>> 2) | (c << 26);\n        d = (d >>> 2) | (d << 26);\n    } else {\n        c = (c >>> 1) | (c << 27);\n        d = (d >>> 1) | (d << 27);\n    }\n    c &= 268435455;\n    d &= 268435455;\n    int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n    final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n    schedule[(j++)] = (t << 16) | (s & 65535);\n    s = (s >>> 16) | (t & -65536);\n    s = (s << 4) | (s >>> 28);\n    schedule[(j++)] = s;\n}"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"ccabbf3d-3fef-11e6-be8e-3b9877d4442b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"lang","remainder":"lang"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:254","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.createResourceName(nameType, rt, lang)"},"status":-1},{"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"ccabbf3e-3fef-11e6-be8e-0b8894f2085b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:326","type":"CtAssignmentImpl","sourcecode":"name1Char[(name1Size - i)] = ' '"},"variableMap":{"name1Char":"out","name1Size":"j","i":"j"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:146","type":"CtAssignmentImpl","sourcecode":"out[(j++)] = toDigits[(15 & (data[i]))]"},"status":-1},{"failures":[45,46,47,48,49],"tindex":"ccabbf3f-3fef-11e6-be8e-19e5206e0e52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:639","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"S\", \"Z\") ? index + 2 : index + 1"},"status":-1},{"failures":[],"tindex":"ccabe650-3fef-11e6-be8e-79688f7535d7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:503","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = content.contains(\"[\")"},"status":-2},{"failures":[50,51],"tindex":"ccabe651-3fef-11e6-be8e-e9d50039d2f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:248","type":"CtForImpl","sourcecode":"for (int int = 0, int int = (l_ascii.int) - 1 ; ii < (raw.int) ; ii++ , jj -= 8) {\n    for (int int = 0 ; bits < (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[].int) ; ++bits) {\n        if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n            l_ascii[(jj - bits)] = '0';\n        } else {\n            l_ascii[(jj - bits)] = '1';\n        }\n    }\n}"},"status":-1},{"failures":[],"tindex":"ccabe652-3fef-11e6-be8e-bdba6135ae56","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:220","type":"CtForImpl","sourcecode":"for (int int = 0 ; (i < (key.int)) && (i < (original.int)) ; i++) {\n    final int int = original[i];\n    key[i] = ((byte)(iChar << 1));\n}"},"variableMap":{"original":"buffer","length":"readPos","key":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:249","type":"CtIfImpl","sourcecode":"if ((context.byte[]) == null) {\n    context.byte[] = new byte[getDefaultBufferSize()];\n    context.int = 0;\n    context.int = 0;\n} else {\n    final byte[] byte[] = new byte[(context.byte[].int) * (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)];\n    java.lang.System.arraycopy(context.byte[], 0, b, 0, context.byte[].int);\n    context.byte[] = b;\n}"},"status":-2},{"failures":[],"tindex":"ccabe653-3fef-11e6-be8e-ab98fe89d9ae","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:140","type":"CtLocalVariableImpl","sourcecode":"boolean boolean = false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:557","type":"CtLocalVariableImpl","sourcecode":"final boolean boolean = !negate"},"status":-2},{"failures":[],"tindex":"ccabe654-3fef-11e6-be8e-9f2003b3c7f0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"languages","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"languages","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"status":-2},{"failures":[],"tindex":"ccac0d65-3fef-11e6-be8e-c32282210a04","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:343","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(tempResult, 0, sBytes, cp, (saltLen - cp))"},"variableMap":{"sBytes":"pArray","tempResult":"pArray","saltLen":"length","cp":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:410","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, pArray.int, context)"},"status":-2},{"failures":[52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"tindex":"ccac0d66-3fef-11e6-be8e-51bb80d621b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.language.Metaphone.FRONTV"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:148","type":"CtWhileImpl","sourcecode":"while (((code.length()) < (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) && (n < wdsz)) {\n    final char char = local.charAt(n);\n    if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n        n++;\n    } else {\n        switch (symb) {\n            case 'A' :\n            case 'E' :\n            case 'I' :\n            case 'O' :\n            case 'U' :\n                if (n == 0) {\n                    code.append(symb);\n                } \n                break;\n            case 'B' :\n                if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                    break;\n                } \n                code.append(symb);\n                break;\n            case 'C' :\n                if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    break;\n                } \n                if (regionMatch(local, n, \"CIA\")) {\n                    code.append('X');\n                    break;\n                } \n                if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                    code.append('S');\n                    break;\n                } \n                if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                    code.append('K');\n                    break;\n                } \n                if (isNextChar(local, n, 'H')) {\n                    if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                        code.append('K');\n                    } else {\n                        code.append('X');\n                    }\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'D' :\n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                    code.append('J');\n                    n += 2;\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'G' :\n                if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                    break;\n                } \n                if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                    break;\n                } \n                if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                    break;\n                } \n                if (isPreviousChar(local, n, 'G')) {\n                    hard = true;\n                } else {\n                    hard = false;\n                }\n                if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                    code.append('J');\n                } else {\n                    code.append('K');\n                }\n                break;\n            case 'H' :\n                if (isLastChar(wdsz, n)) {\n                    break;\n                } \n                if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                    break;\n                } \n                if (isVowel(local, (n + 1))) {\n                    code.append('H');\n                } \n                break;\n            case 'F' :\n            case 'J' :\n            case 'L' :\n            case 'M' :\n            case 'N' :\n            case 'R' :\n                code.append(symb);\n                break;\n            case 'K' :\n                if (n > 0) {\n                    if (!(isPreviousChar(local, n, 'C'))) {\n                        code.append(symb);\n                    } \n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'P' :\n                if (isNextChar(local, n, 'H')) {\n                    code.append('F');\n                } else {\n                    code.append(symb);\n                }\n                break;\n            case 'Q' :\n                code.append('K');\n                break;\n            case 'S' :\n                if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                    code.append('X');\n                } else {\n                    code.append('S');\n                }\n                break;\n            case 'T' :\n                if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                    code.append('X');\n                    break;\n                } \n                if (regionMatch(local, n, \"TCH\")) {\n                    break;\n                } \n                if (regionMatch(local, n, \"TH\")) {\n                    code.append('0');\n                } else {\n                    code.append('T');\n                }\n                break;\n            case 'V' :\n                code.append('F');\n                break;\n            case 'W' :\n            case 'Y' :\n                if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                    code.append(symb);\n                } \n                break;\n            case 'X' :\n                code.append('K');\n                code.append('S');\n                break;\n            case 'Z' :\n                code.append('S');\n                break;\n            default :\n                break;\n        }\n        n++;\n    }\n    if ((code.length()) > (org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen())) {\n        code.setLength(org.apache.commons.codec.language.Metaphone.this.getMaxCodeLen());\n    } \n}"},"status":-1},{"failures":[],"tindex":"ccac3477-3fef-11e6-be8e-cbceb259aa18","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:369","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n    result.append('K');\n} else {\n    result.append('X', 'K');\n}"},"variableMap":{"result":"raw","value":"raw"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:98","type":"CtIfImpl","sourcecode":"if (!(raw instanceof byte[])) {\n    throw new org.apache.commons.codec.EncoderException(\"argument not a byte array\");\n} "},"status":-2},{"failures":[82,83],"tindex":"ccac3478-3fef-11e6-be8e-e387c07ba4aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:383","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\")\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme starts with '(' so must end with ')'\");\n} "},"variableMap":{"ph":"es2"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:117","type":"CtIfImpl","sourcecode":"if ((es1.charAt(i)) == (es2.charAt(i))) {\n    diff++;\n} "},"status":-1},{"failures":[84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"ccac5b89-3fef-11e6-be8e-59be1a7dcbfc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"i","name2Size":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:362","type":"CtIfImpl","sourcecode":"if ((bytes[(++i)]) == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) {\n    continue;\n} "},"status":-1},{"failures":[96],"tindex":"ccac5b8a-3fef-11e6-be8e-336de4b4de5b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:467","type":"CtReturnImpl","sourcecode":"return false"},"status":-1},{"failures":[],"tindex":"ccac5b8b-3fef-11e6-be8e-d11174410897","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:431","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = text.toCharArray()"},"variableMap":{"text":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:277","type":"CtLocalVariableImpl","sourcecode":"final char[] char[] = str.toCharArray()"},"status":-2},{"failures":[],"tindex":"ccac5b8c-3fef-11e6-be8e-d5aa2084686b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:88","type":"CtAssignmentImpl","sourcecode":"this.boolean = acceptOnMatch"},"variableMap":{"acceptOnMatch":"eof"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:433","type":"CtAssignmentImpl","sourcecode":"context.boolean = true"},"status":-2},{"failures":[],"tindex":"ccac5b8d-3fef-11e6-be8e-359b6af7ce2f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Soundex:246","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Soundex.this.int = maxLength"},"variableMap":{"maxLength":"left"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:290","type":"CtAssignmentImpl","sourcecode":"t = left"},"status":-2},{"failures":[48,49],"tindex":"ccac829e-3fef-11e6-be8e-e7cae16cb333","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:707","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":-1},{"failures":[],"tindex":"ccac829f-3fef-11e6-be8e-af40007efa7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:280","type":"CtIfImpl","sourcecode":"if (conditionC0(value, index)) {\n    result.append('K');\n    index += 2;\n} else if ((index == 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 6, \"CAESAR\"))) {\n    result.append('S');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CH\")) {\n    index = handleCH(value, result, index);\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CZ\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index - 2), 4, \"WICZ\")))) {\n    result.append('S', 'X');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 3, \"CIA\")) {\n    result.append('X');\n    index += 3;\n} else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CC\")) && (!((index == 1) && ((charAt(value, 0)) == 'M')))) {\n    return handleCC(value, result, index);\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) {\n    result.append('K');\n    index += 2;\n} else if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 2, \"CI\", \"CE\", \"CY\")) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) {\n        result.append('S', 'X');\n    } else {\n        result.append('S');\n    }\n    index += 2;\n} else {\n    result.append('K');\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \" C\", \" Q\", \" G\")) {\n        index += 3;\n    } else if ((org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"C\", \"K\", \"Q\")) && (!(org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 2, \"CE\", \"CI\")))) {\n        index += 2;\n    } else {\n        index++;\n    }\n}"},"status":-2},{"failures":[],"tindex":"ccac82a0-3fef-11e6-be8e-a302fe3d8e4c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:351","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.UnixCrypt.permOp(c, d, 8, 16711935, results)"},"variableMap":{"c":"ii","d":"jj","results":"org.apache.commons.codec.binary.BinaryCodec.BITS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:280","type":"CtIfImpl","sourcecode":"if (((raw[ii]) & (org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits])) == 0) {\n    l_ascii[(jj - bits)] = '0';\n} else {\n    l_ascii[(jj - bits)] = '1';\n}"},"status":-2},{"failures":[97,98,0,99,1],"tindex":"ccac82a1-3fef-11e6-be8e-af5df9e6b87a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:114","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"r\", \"2\")"},"status":-1},{"failures":[37],"tindex":"ccaca9b2-3fef-11e6-be8e-7348f9ff7a06","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:554","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false)"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:641","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha512Digest().digest(data)"},"status":-1},{"failures":[100,101,102],"tindex":"ccaca9b3-3fef-11e6-be8e-e5193de191b0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:490","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), ((byte)(0)), altResult[63], 2, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:476","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer)"},"status":-1},{"failures":[46,48,49],"tindex":"ccaca9b4-3fef-11e6-be8e-1972d28593b1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:450","type":"CtInvocationImpl","sourcecode":"result.append('J', 'K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:471","type":"CtIfImpl","sourcecode":"if ((charAt(value, (index + 2))) == 'I') {\n    result.append('J');\n} else {\n    result.append('K');\n}"},"status":-1},{"failures":[34,38],"tindex":"ccaca9b5-3fef-11e6-be8e-87b18d7a60cf","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:244","type":"CtReturnImpl","sourcecode":"return \"NO_LANGUAGES\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[23,26],"tindex":"ccaca9b6-3fef-11e6-be8e-a76f5e5d1894","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:426","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"variableMap":{"data":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:388","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha1(key, valueToDigest))"},"status":-1},{"failures":[103,104,105,106,107,108],"tindex":"ccaca9b7-3fef-11e6-be8e-6d5718b83820","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Soundex:197","type":"CtReturnImpl","sourcecode":"return mappedChar"},"variableMap":{"mappedChar":"preHWChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:192","type":"CtIfImpl","sourcecode":"if (((firstCode == mappedChar) || ('H' == preHWChar)) || ('W' == preHWChar)) {\n    return 0;\n} "},"status":-1},{"failures":[53,70,72],"tindex":"ccaca9b8-3fef-11e6-be8e-f902d2a52b13","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:275","type":"CtInvocationImpl","sourcecode":"code.append('F')"},"variableMap":{"code":"local"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:122","type":"CtInvocationImpl","sourcecode":"local.append(inwd)"},"status":-1},{"failures":[25],"tindex":"ccacd0c9-3fef-11e6-be8e-09f6db6e554b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:353","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha1(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"key","key":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:460","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha256(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[22,28],"tindex":"ccacd0ca-3fef-11e6-be8e-094506f8577c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:567","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha384(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"variableMap":{"valueToDigest":"key","key":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:246","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacMd5(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-1},{"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"tindex":"ccacd0cb-3fef-11e6-be8e-97cfd4a33926","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:430","type":"CtContinueImpl","sourcecode":"continue"},"status":-1},{"failures":[],"tindex":"ccacd0cc-3fef-11e6-be8e-2f701036772c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:337","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[saltLen]"},"variableMap":{"saltLen":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:203","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[(ascii.int) >> 3]"},"status":-2},{"failures":[],"tindex":"ccacd0cd-3fef-11e6-be8e-efe6573f0bce","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:211","type":"CtIfImpl","sourcecode":"if (!(obj instanceof java.lang.String)) {\n    throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Nysiis encode is not of type java.lang.String\");\n} "},"status":0},{"failures":[],"tindex":"ccacd0ce-3fef-11e6-be8e-e3d178eaf4d8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:93","type":"CtIfImpl","sourcecode":"if (string == null) {\n    return null;\n} "},"variableMap":{"string":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:674","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.hmacSha512(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(key), org.apache.commons.codec.binary.StringUtils.getBytesUtf8(valueToDigest))"},"status":-2},{"failures":[14],"tindex":"ccacd0cf-3fef-11e6-be8e-216ceffe75a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:106","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.isEmpty()"},"variableMap":{"languages":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:111","type":"CtReturnImpl","sourcecode":"return (org.apache.commons.codec.language.bm.Languages.SomeLanguages.this.java.util.Set<java.lang.String>.size()) == 1"},"status":-1},{"failures":[],"tindex":"ccacd0d0-3fef-11e6-be8e-bd2a0e00228b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:512","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 20))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"variableMap":{"encodeTable":"buffer","pos":"pos","org.apache.commons.codec.binary.Base32.MASK_5BITS":"org.apache.commons.codec.binary.Base32.MASK_5BITS","context":"context","lbitWorkArea":"lbitWorkArea","buffer":"encodeTable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:509","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((int)(((context.long) >> 35))) & (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int))]"},"status":-2},{"failures":[109,110,111,112,113,114,115],"tindex":"ccacf7e1-3fef-11e6-be8e-41988330e01a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"variableMap":{"messageDigest":"ctx1","valueToDigest":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:218","type":"CtInvocationImpl","sourcecode":"ctx1.update(saltBytes)"},"status":-1},{"failures":[116,117,118,119,120],"tindex":"ccacf7e2-3fef-11e6-be8e-ef0915fa043b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:467","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(((byte)(0)), altResult[31], altResult[30], 3, buffer)"},"variableMap":{"altResult":"altResult","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:459","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer)"},"status":-1},{"failures":[48,49],"tindex":"ccacf7e3-3fef-11e6-be8e-1dfabf901811","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:419","type":"CtInvocationImpl","sourcecode":"result.append(\"KN\")"},"status":-1},{"failures":[121],"tindex":"ccacf7e4-3fef-11e6-be8e-5d03155b5aca","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:87","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : charsToTrim) {\n    upperName = upperName.replaceAll(str, org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String);\n}"},"status":-1},{"failures":[4,6,7],"tindex":"ccacf7e5-3fef-11e6-be8e-839e1aae95d6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:537","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return org.apache.commons.codec.language.bm.Rule.endsWith(input, content);\n    }\n}"},"variableMap":{"input":"input","content":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:517","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.RPattern() {\n    @java.lang.Override\n    public boolean isMatch(final java.lang.CharSequence input) {\n        return input.equals(content);\n    }\n}"},"status":-1},{"failures":[],"tindex":"ccacf7e6-3fef-11e6-be8e-9b5e7a157657","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:92","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('[')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:73","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('(')"},"status":0},{"failures":[],"tindex":"ccacf7e7-3fef-11e6-be8e-6be6c012f431","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:540","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:501","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[122],"tindex":"ccad1ef8-3fef-11e6-be8e-c71dfaf1a34a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:159","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < (data.int) ; i++) {\n    if ((data[i]) == (org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte)) {\n        data[i] = org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.byte;\n    } \n}"},"status":-1},{"failures":[123,124,125],"tindex":"ccad1ef9-3fef-11e6-be8e-33e9ccb541ca","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"variableMap":{"binaryData":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:96","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.encodeBase64(bytes)"},"status":-1},{"failures":[126,127,128,129,130,131,132,133],"tindex":"ccad1efa-3fef-11e6-be8e-bd7ccb6561fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"status":-1},{"failures":[],"tindex":"ccad1efb-3fef-11e6-be8e-b597ea81d143","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:89","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"3gh3\", \"3kh3\")"},"variableMap":{"txt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:87","type":"CtAssignmentImpl","sourcecode":"value = cleanInput(value)"},"status":-2},{"failures":[],"tindex":"ccad1efc-3fef-11e6-be8e-3f1ce1be230a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:447","type":"CtAssignmentImpl","sourcecode":"context.int = ((context.int) << (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int)) + result"},"variableMap":{"result":"currentLinePos","ibitWorkArea":"currentLinePos","context":"context","org.apache.commons.codec.binary.Base64.BITS_PER_ENCODED_BYTE":"currentLinePos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:521","type":"CtAssignmentImpl","sourcecode":"context.int = 0"},"status":-2},{"failures":[],"tindex":"ccad1efd-3fef-11e6-be8e-454e81940571","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:139","type":"CtIfImpl","sourcecode":"if (charset.equals(\"\")) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset not specified\");\n} "},"variableMap":{"charset":"dc"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:387","type":"CtIfImpl","sourcecode":"if (replacedName.contains(dc)) {\n    final java.lang.String java.lang.String = dc.substring(0, 1);\n    replacedName = replacedName.replace(dc, singleLetter);\n} "},"status":-2},{"failures":[92,122,93,94,95,123,124,134],"tindex":"ccad1efe-3fef-11e6-be8e-5946663a7cd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:213","type":"CtAssignmentImpl","sourcecode":"patternLength = pattern.length()"},"variableMap":{"patternLength":"from","pattern":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[46,48,49],"tindex":"ccad1eff-3fef-11e6-be8e-2b8229d18d7a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:527","type":"CtInvocationImpl","sourcecode":"result.append('J', 'A')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:284","type":"CtInvocationImpl","sourcecode":"result.append('S')"},"status":-1},{"failures":[],"tindex":"ccad4610-3fef-11e6-be8e-775e681c55b3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:201","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[].int"},"variableMap":{"org.apache.commons.codec.digest.UnixCrypt.SALT_CHARS":"data","length":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:79","type":"CtLocalVariableImpl","sourcecode":"final int int = data.int"},"status":-2},{"failures":[],"tindex":"ccad4611-3fef-11e6-be8e-0343cd5d077c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:500","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(sBytes, ((byte)(0)))"},"variableMap":{"sBytes":"saltBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:504","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"status":-2},{"failures":[135],"tindex":"ccad4612-3fef-11e6-be8e-d144ae67006f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Crypt:69","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(keyBytes, salt)"},"variableMap":{"salt":"org.apache.commons.codec.digest.Md5Crypt.MD5_PREFIX","keyBytes":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:141","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Md5Crypt.md5Crypt(keyBytes, ((org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + (org.apache.commons.codec.digest.B64.getRandomSalt(8))))"},"status":-1},{"failures":[],"tindex":"ccad4613-3fef-11e6-be8e-8531bf779fe4","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:893","type":"CtIfImpl","sourcecode":"if ((input.length()) == 0) {\n    return null;\n} "},"variableMap":{"input":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:76","type":"CtReturnImpl","sourcecode":"return doubleMetaphone(value, false)"},"status":-2},{"failures":[136,137,138,139,140,141,142,143,144,145,146],"tindex":"ccad4614-3fef-11e6-be8e-79bd7294b4ed","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:375","type":"CtOperatorAssignmentImpl","sourcecode":"context.int += byte[].int"},"status":-1},{"failures":[],"tindex":"ccad4615-3fef-11e6-be8e-4b67f716a9e5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:145","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: encoding token not found\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:135","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\")"},"status":-2},{"failures":[],"tindex":"ccad4616-3fef-11e6-be8e-bdb12c7cc8c8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:543","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:238","type":"CtReturnImpl","sourcecode":"return (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte)) || (b == (org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.byte))"},"status":-2},{"failures":[46,47,48,49],"tindex":"ccad4617-3fef-11e6-be8e-5dac1eb3e944","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:299","type":"CtOperatorAssignmentImpl","sourcecode":"cp += blocksize"},"variableMap":{"blocksize":"index","cp":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:457","type":"CtUnaryOperatorImpl","sourcecode":"index++"},"status":-1},{"failures":[34,38],"tindex":"ccad6d28-3fef-11e6-be8e-b91c0e319dc2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"variableMap":{"data":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.sha1(data))"},"status":-1},{"failures":[2,3],"tindex":"ccad6d29-3fef-11e6-be8e-d94ba9459fbb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:210","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(1)"},"variableMap":{"salt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:209","type":"CtLocalVariableImpl","sourcecode":"final char char = salt.charAt(0)"},"status":-1},{"failures":[],"tindex":"ccad6d2a-3fef-11e6-be8e-4bed5af04652","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:286","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < 32 ; i += 4) {\n    left = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(left, right, i, eSwap0, eSwap1, schedule);\n    right = org.apache.commons.codec.digest.UnixCrypt.dEncrypt(right, left, (i + 2), eSwap0, eSwap1, schedule);\n}"},"variableMap":{"schedule":"schedule","left":"j","eSwap0":"d","right":"c","eSwap1":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:360","type":"CtForImpl","sourcecode":"for (int int = 0 ; i < 16 ; i++) {\n    if (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.boolean[][i]) {\n        c = (c >>> 2) | (c << 26);\n        d = (d >>> 2) | (d << 26);\n    } else {\n        c = (c >>> 1) | (c << 27);\n        d = (d >>> 1) | (d << 27);\n    }\n    c &= 268435455;\n    d &= 268435455;\n    int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][0][(c & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][1][(((c >>> 6) & 3) | ((c >>> 7) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][2][(((c >>> 13) & 15) | ((c >>> 14) & 48))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][3][((((c >>> 20) & 1) | ((c >>> 21) & 6)) | ((c >>> 22) & 56))]);\n    final int int = (((org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][4][(d & 63)]) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][5][(((d >>> 7) & 3) | ((d >>> 8) & 60))])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][6][((d >>> 15) & 63)])) | (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.int[][][7][(((d >>> 21) & 15) | ((d >>> 22) & 48))]);\n    schedule[(j++)] = (t << 16) | (s & 65535);\n    s = (s >>> 16) | (t & -65536);\n    s = (s << 4) | (s >>> 28);\n    schedule[(j++)] = s;\n}"},"status":-2},{"failures":[],"tindex":"ccad6d2b-3fef-11e6-be8e-514687f5ff03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:210","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.net.URLCodec.decodeUrl(bytes)"},"variableMap":{"bytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:528","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getHmacSha384(key).doFinal(valueToDigest)"},"status":-2},{"failures":[],"tindex":"ccad6d2c-3fef-11e6-be8e-c51ee3effb10","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:239","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.binary.BinaryCodec.isEmpty(raw)) {\n    return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[];\n} "},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"bytes","raw":"bytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:93","type":"CtIfImpl","sourcecode":"if (bytes == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"ccad6d2d-3fef-11e6-be8e-ed26a4e70439","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:308","type":"CtIfImpl","sourcecode":"if (i > name2Size) {\n    break;\n} "},"variableMap":{"i":"len","name2Size":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:88","type":"CtForImpl","sourcecode":"for (int int = 0, int int = 0 ; j < len ; i++) {\n    int int = (org.apache.commons.codec.binary.Hex.toDigit(data[j], j)) << 4;\n    j++;\n    f = f | (org.apache.commons.codec.binary.Hex.toDigit(data[j], j));\n    j++;\n    out[i] = ((byte)(f & 255));\n}"},"status":-2},{"failures":[4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21],"tindex":"ccad943e-3fef-11e6-be8e-676bdee834db","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:179","type":"CtTryImpl","sourcecode":"try {\n    boolean boolean = false;\n    while (lsScanner.hasNextLine()) {\n        final java.lang.String java.lang.String = lsScanner.nextLine().trim();\n        if (inExtendedComment) {\n            if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = false;\n            } \n        } else {\n            if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n                inExtendedComment = true;\n            } else if ((line.length()) > 0) {\n                ls.add(line);\n            } \n        }\n    }\n} finally {\n    lsScanner.close();\n}"},"status":-1},{"failures":[84,86,147,89,148,149,150],"tindex":"ccad943f-3fef-11e6-be8e-03b6163d15ae","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:103","type":"CtForImpl","sourcecode":"for (int int = 62 ; i <= 126 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[151,152],"tindex":"ccad9440-3fef-11e6-be8e-c7729e78e40b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.RFC1522Codec:135","type":"CtIfImpl","sourcecode":"if (to == terminator) {\n    throw new org.apache.commons.codec.DecoderException(\"RFC 1522 violation: charset token not found\");\n} "},"variableMap":{"terminator":"i","to":"org.apache.commons.codec.net.URLCodec.RADIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.Utils:44","type":"CtIfImpl","sourcecode":"if (i == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Invalid URL encoding: not a valid digit (radix \" + (org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int)) + \"): \") + b));\n} "},"status":-1},{"failures":[82,153,154,155,156],"tindex":"ccad9441-3fef-11e6-be8e-2f71f50922a6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:193","type":"CtIfImpl","sourcecode":"if (current == last) {\n    continue;\n} else if (current != 0) {\n    sBuf.append(current);\n} "},"status":-1},{"failures":[82,157,83],"tindex":"ccad9442-3fef-11e6-be8e-8bec934d3dd4","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:226","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.SoundexUtils:112","type":"CtReturnImpl","sourcecode":"return 0"},"status":-1},{"failures":[],"tindex":"ccad9443-3fef-11e6-be8e-9bdea35822d0","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:569","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false))"},"variableMap":{"binaryData":"data"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:296","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.md5(data))"},"status":-3},{"failures":[116,118],"tindex":"ccad9444-3fef-11e6-be8e-53dc37c1b6fe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:426","type":"CtInvocationImpl","sourcecode":"buffer.append(rounds)"},"status":-1},{"failures":[],"tindex":"ccad9445-3fef-11e6-be8e-4330c0777030","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:266","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(resName)"},"variableMap":{"resName":"languagesResourceName","org.apache.commons.codec.language.bm.Languages.class":"org.apache.commons.codec.language.bm.Languages.class"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:172","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName)"},"status":-2},{"failures":[97,98,158],"tindex":"ccad9446-3fef-11e6-be8e-af631e6fcc36","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"ph\", \"fh\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:109","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"w\", \"2\")"},"status":-1},{"failures":[],"tindex":"ccadbb57-3fef-11e6-be8e-e30cfad4b41a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:392","type":"CtInvocationImpl","sourcecode":"result.append(\"TK\")"},"variableMap":{"result":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:948","type":"CtInvocationImpl","sourcecode":"appendAlternate(value)"},"status":-2},{"failures":[],"tindex":"ccadbb58-3fef-11e6-be8e-a50289f4fe0c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:395","type":"CtReturnImpl","sourcecode":"return a"},"variableMap":{"a":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:576","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[159,160,161,162,163,164],"tindex":"ccadbb59-3fef-11e6-be8e-5f795d9d4302","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:100","type":"CtForImpl","sourcecode":"for (int int = 33 ; i <= 60 ; i++) {\n    org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet.set(i);\n}"},"variableMap":{"org.apache.commons.codec.net.QuotedPrintableCodec.PRINTABLE_CHARS":"urlsafe"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:135","type":"CtIfImpl","sourcecode":"if (urlsafe.get(b)) {\n    if (b == ' ') {\n        b = '+';\n    } \n    buffer.write(b);\n} else {\n    buffer.write(org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.byte);\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit(((b >> 4) & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    final char char = java.lang.Character.toUpperCase(java.lang.Character.forDigit((b & 15), org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.int));\n    buffer.write(hex1);\n    buffer.write(hex2);\n}"},"status":-1},{"failures":[99],"tindex":"ccadbb5a-3fef-11e6-be8e-6deee9dd30c9","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:110","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^h\", \"A\")"},"status":-1},{"failures":[],"tindex":"ccadbb5b-3fef-11e6-be8e-97b2ae0256e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:65","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^trough\", \"trou2f\")"},"status":0},{"failures":[],"tindex":"ccadbb5c-3fef-11e6-be8e-bb50390c78aa","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:617","type":"CtIfImpl","sourcecode":"if (str.endsWith(org.apache.commons.codec.language.bm.Rule.org.apache.commons.codec.language.bm.Rule.java.lang.String)) {\n    str = str.substring(0, ((str.length()) - 1));\n} "},"variableMap":{"str":"patternKey","org.apache.commons.codec.language.bm.Rule.DOUBLE_QUOTE":"patternKey"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:474","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n    lines.put(patternKey, rules);\n} "},"status":-2},{"failures":[],"tindex":"ccadbb5d-3fef-11e6-be8e-2165ed4594ad","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:387","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte[][(((context.int) >> 18) & (org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64.int))]"},"variableMap":{"encodeTable":"buffer","ibitWorkArea":"pos","pos":"pos","context":"context","org.apache.commons.codec.binary.Base64.MASK_6BITS":"pos","buffer":"buffer"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:355","type":"CtAssignmentImpl","sourcecode":"buffer[((context.int)++)] = byte"},"status":-2},{"failures":[162],"tindex":"ccadbb5e-3fef-11e6-be8e-9b585ab131ee","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:86","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.URLCodec.org.apache.commons.codec.net.URLCodec.java.util.BitSet.set('-')"},"status":-1},{"failures":[46],"tindex":"ccadbb5f-3fef-11e6-be8e-115e5d6da750","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:654","type":"CtInvocationImpl","sourcecode":"result.append(\"X\", \"SK\")"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:619","type":"CtInvocationImpl","sourcecode":"result.append('S', 'X')"},"status":-1},{"failures":[165,166,167,168,169,170],"tindex":"ccade270-3fef-11e6-be8e-8591beaf8907","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:495","type":"CtIfImpl","sourcecode":"if (((int) > 0) && ((context.int) > 0)) {\n    java.lang.System.arraycopy(byte[], 0, buffer, context.int, byte[].int);\n    context.int += byte[].int;\n} "},"status":-1},{"failures":[],"tindex":"ccade271-3fef-11e6-be8e-41536f70a45d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:63","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms.org.apache.commons.codec.digest.HmacAlgorithms, key)"},"variableMap":{"org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5":"algorithm","key":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:155","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.getInitializedMac(algorithm.toString(), key)"},"status":-2},{"failures":[],"tindex":"ccade272-3fef-11e6-be8e-65d579d3b8bc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:186","type":"CtThrowImpl","sourcecode":"throw new java.lang.IllegalArgumentException(e)"},"status":-2},{"failures":[],"tindex":"ccade273-3fef-11e6-be8e-578f25a03e8c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:446","type":"CtLocalVariableImpl","sourcecode":"final int int = context.int"},"status":-2},{"failures":[],"tindex":"ccade274-3fef-11e6-be8e-7746fa935c39","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:527","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.this.int"},"variableMap":{"maxPhonemes":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:222","type":"CtIfImpl","sourcecode":"if (encode) {\n    return org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(b, buffer);\n} else {\n    buffer.write(b);\n    return 1;\n}"},"status":-2},{"failures":[123,124,125,136,137,138,139,171,172,173,174,166,175,140,141,176,177,178,179,180,181,182,183,184,185,186,187,142,188,143,189,144,190,145,191,192,193,194,167,168,169,170,195,196,146,197],"tindex":"ccade275-3fef-11e6-be8e-85b53c330eb2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:433","type":"CtInvocationImpl","sourcecode":"readResults(buf, 0, buf.int, context)"},"status":-1},{"failures":[],"tindex":"ccade276-3fef-11e6-be8e-45c769df0ccd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:420","type":"CtIfImpl","sourcecode":"if (isVowel(firstLetter)) {\n    return firstLetter + name;\n} else {\n    return name;\n}"},"status":-2},{"failures":[],"tindex":"ccade277-3fef-11e6-be8e-598e7929a4f9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:69","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"cq\", \"2q\")"},"variableMap":{"txt":"salt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:202","type":"CtAssignmentImpl","sourcecode":"salt = (\"\" + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])) + (org.apache.commons.codec.digest.UnixCrypt.org.apache.commons.codec.digest.UnixCrypt.char[][randomGenerator.nextInt(numSaltChars)])"},"status":-2},{"failures":[167,198,199,200,201,202,203,168,169,170],"tindex":"ccade278-3fef-11e6-be8e-5b6746c1dddd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:355","type":"CtIfImpl","sourcecode":"if (result >= 0) {\n    context.int = ((context.int) + 1) % (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int);\n    context.long = ((context.long) << (org.apache.commons.codec.binary.Base32.org.apache.commons.codec.binary.Base32.int)) + result;\n    if ((context.int) == 0) {\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 32) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 24) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 16) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)(((context.long) >> 8) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n        buffer[((context.int)++)] = ((byte)((context.long) & (org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int)));\n    } \n} "},"status":-1},{"failures":[],"tindex":"ccae0989-3fef-11e6-be8e-47460bca4f2f","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:296","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(keyBytes, ((byte)(0)))"},"variableMap":{"keyBytes":"valueToDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:776","type":"CtInvocationImpl","sourcecode":"messageDigest.update(valueToDigest)"},"status":0},{"failures":[47,48,49],"tindex":"ccae098a-3fef-11e6-be8e-cdbc38b1388b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:281","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[116,100,101,102,204,109,110,135,111,112,205,113,114,115,117,118,119,206,120,207,208,209,210,211,212,213,32,33,34,214,35,36,37,38,215,216,217],"tindex":"ccae098b-3fef-11e6-be8e-090d675aec03","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:67","type":"CtTryImpl","sourcecode":"try {\n    return java.security.MessageDigest.getInstance(algorithm);\n} catch (final java.security.NoSuchAlgorithmException e) {\n    throw new java.lang.IllegalArgumentException(e);\n}"},"status":-1},{"failures":[97,0,218,99,158,1],"tindex":"ccae098c-3fef-11e6-be8e-791183de81c1","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"y\", \"3\")"},"status":-1},{"failures":[],"tindex":"ccae098d-3fef-11e6-be8e-91405e70fc0e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:92","type":"CtAssignmentImpl","sourcecode":"upperName = upperName.replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"upperName":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:412","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"E\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
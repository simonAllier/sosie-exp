{"failureDictionary":{"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone":61,"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone":117,"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":42,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testLocaleIndependence":104,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic3":98,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet":145,"org.apache.commons.codec.net.QCodecTest.testDecodeObjects":168,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic2":97,"org.apache.commons.codec.digest.Sha512CryptTest.testSha256LargetThanBlocksize":108,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3":125,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2":124,"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked":44,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic":133,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec130":54,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched":153,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk":50,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testOOM":121,"org.apache.commons.codec.binary.Base64Test.testTriplets":3,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte":69,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SAM_SAMUEL_SuccessfullyMatched":150,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd":65,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptBytes":106,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testCompatibilityWithOriginalVersion":0,"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":1,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptRounds":135,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrGENERIC":127,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrASHKENAZI":129,"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder":73,"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject":147,"org.apache.commons.codec.binary.Base32Test.testRandomBytes":41,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptNullData":180,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd":47,"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":183,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":18,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean":31,"org.apache.commons.codec.binary.Base32Test.testBase32SamplesNonDefaultPadding":40,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF":130,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode":36,"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples":164,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples":173,"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes":182,"org.apache.commons.codec.binary.Base64Test.testCodeInteger1":12,"org.apache.commons.codec.binary.Base64Test.testKnownDecodings":7,"org.apache.commons.codec.binary.Base64Test.testCodeInteger2":13,"org.apache.commons.codec.language.NysiisTest.testCap":85,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname":126,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd":60,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_ZACH_ZAKARIA_SuccessfullyMatched":154,"org.apache.commons.codec.binary.Base64Test.testUrlSafe":17,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna":118,"org.apache.commons.codec.digest.Sha512CryptTest.testSha2CryptWrongSalt":178,"org.apache.commons.codec.binary.Base64Test.testCodeInteger3":14,"org.apache.commons.codec.digest.CryptTest.testDefaultCryptVariant":176,"org.apache.commons.codec.binary.Base64Test.testCodeInteger4":15,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder":71,"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipBig":66,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptBytes":161,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111":170,"org.apache.commons.codec.binary.Base64InputStreamTest.testAvailable":55,"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode":21,"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader":51,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial":131,"org.apache.commons.codec.binary.Base64Test.testTripletsChunked":26,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES":92,"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString":146,"org.apache.commons.codec.language.bm.PhoneticEngineRegressionTest.testSolrSEPHARDIC":128,"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked":6,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSpecialRomanianCharacters":96,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptExplicitCall":115,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch":157,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreTrimmable":100,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptBytes":109,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte":79,"org.apache.commons.codec.binary.Base32InputStreamTest.testAvailable":64,"org.apache.commons.codec.digest.CryptTest.testCryptWithBytes":177,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptStrings":139,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected":158,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode":37,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptWithoutSalt":113,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_OONA_OONAGH_SuccessfullyMatched":151,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SOPHIE_SOFIA_SuccessfullyMatched":149,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAdjacentCodes":95,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptStrings":116,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SmallInput_CARK_Kl_SuccessfullyMatched":155,"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe":5,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak":91,"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode":169,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":59,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode":77,"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3":134,"org.apache.commons.codec.binary.Base64Test.testDecodeWithInnerPad":38,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd":56,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptStrings":163,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptExplicitCall":181,"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk":67,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":62,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256CryptBytes":136,"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter":33,"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":70,"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray":148,"org.apache.commons.codec.binary.Base64Test.testKnownEncodings":20,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_Forenames_SEAN_JOHN_MatchExpected":152,"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations":32,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty":120,"org.apache.commons.codec.language.NysiisTest.testDropBy":88,"org.apache.commons.codec.binary.Base64Test.testObjectEncode":16,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testAccentedCharacterFolding":102,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched":156,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreHyphens":99,"org.apache.commons.codec.binary.Base64Test.testBase64":30,"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode":167,"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":68,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck":123,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111":171,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate":2,"org.apache.commons.codec.binary.Base64Test.testUUID":9,"org.apache.commons.codec.digest.Md5CryptTest.testMd5CryptLongInput":162,"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace":19,"org.apache.commons.codec.binary.Base64Test.testSingletons":25,"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk":80,"org.apache.commons.codec.binary.Base32Test.testBase32Chunked":46,"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip":165,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked":75,"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76":29,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException":142,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords":174,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException":141,"org.apache.commons.codec.binary.Base64Test.testPairs":8,"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder":74,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf":34,"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples":45,"org.apache.commons.codec.language.NysiisTest.testRule7":87,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptNullData":112,"org.apache.commons.codec.binary.Base64Test.testCodec112":22,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode":90,"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks":166,"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111":172,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter":119,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_SEAN_SHAUN_SuccessfullyMatched":159,"org.apache.commons.codec.net.BCodecTest.testDecodeObjects":83,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptWithEmptySalt":179,"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations":4,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeEmpty":103,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked":72,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipBig":57,"org.apache.commons.codec.language.NysiisTest.testSpecialBranches":89,"org.apache.commons.codec.binary.Base64Test.testCodec68":27,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1CryptBytes":111,"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes":132,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence":144,"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte":58,"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone":48,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2":23,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode":35,"org.apache.commons.codec.digest.Apr1CryptTest.testApr1LongSalt":114,"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip":81,"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3":24,"org.apache.commons.codec.net.BCodecTest.testEncodeObjects":84,"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding":43,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testSoundexBasic":94,"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec130":63,"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE":78,"org.apache.commons.codec.binary.Base32Test.testBase32Samples":39,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty":143,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters":122,"org.apache.commons.codec.digest.Sha512CryptTest.testSha512CryptStrings":110,"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode":76,"org.apache.commons.codec.digest.Sha256CryptTest.testSha256LargetThanBlocksize":138,"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples":175,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE":49,"org.apache.commons.codec.digest.HmacUtilsTest.testSha512HMac":107,"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter":11,"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode":28,"org.apache.commons.codec.digest.Sha256CryptTest.testSha2CryptRounds":137,"org.apache.commons.codec.language.MatchRatingApproachEncoderTest.testCompare_BRIAN_BRYAN_SuccessfullyMatched":160,"org.apache.commons.codec.language.DaitchMokotoffSoundexTest.testEncodeIgnoreApostrophes":101,"org.apache.commons.codec.language.NysiisTest.testDan":86,"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode":82,"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars":140,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105":53,"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary":93,"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall":10,"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101":52,"org.apache.commons.codec.digest.UnixCryptTest.testUnixCryptStrings":105},"transformations":[{"failures":[0],"tindex":"9e50ffa6-3ff3-11e6-8263-73c5c291c3f3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:141","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : sl.java.util.Set<java.lang.String>) {\n    ls.add(lang);\n}"},"status":-1},{"failures":[],"tindex":"9e5126b7-3ff3-11e6-8263-83e0b2ba523f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:118","type":"CtUnaryOperatorImpl","sourcecode":"diff++"},"variableMap":{"diff":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:469","type":"CtOperatorAssignmentImpl","sourcecode":"index += 2"},"status":0},{"failures":[1],"tindex":"9e514dc8-3ff3-11e6-8263-d7ade1b0a983","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.StringUtils:281","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.sha1Hex(data)"},"status":-1},{"failures":[2],"tindex":"9e514dc9-3ff3-11e6-8263-cb4cc080babd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:368","type":"CtIfImpl","sourcecode":"if (index > 0) {\n    if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n        result.append('K');\n    } else {\n        result.append('X', 'K');\n    }\n} else {\n    result.append('X');\n}"},"variableMap":{"result":"result","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:659","type":"CtIfImpl","sourcecode":"if (((index == 0) && (!(isVowel(charAt(value, 3))))) && ((charAt(value, 3)) != 'W')) {\n    result.append('X', 'S');\n} else {\n    result.append('X');\n}"},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"tindex":"9e514dca-3ff3-11e6-8263-2b4965d7c80d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:250","type":"CtAssignmentImpl","sourcecode":"context.byte[] = new byte[getDefaultBufferSize()]"},"status":-1},{"failures":[],"tindex":"9e5174db-3ff3-11e6-8263-3d069ddc140a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:192","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.int"},"variableMap":{"i":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:402","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"9e52ad5c-3ff3-11e6-8263-ef6590c19725","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:149","type":"CtInvocationImpl","sourcecode":"flush()"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecOutputStream:120","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.flush()"},"status":-2},{"failures":[85,86,87,88,89],"tindex":"9e52ad5d-3ff3-11e6-8263-7d6448a09a57","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:190","type":"CtInvocationImpl","sourcecode":"code.append('K')"},"variableMap":{"code":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:311","type":"CtInvocationImpl","sourcecode":"key.deleteCharAt(((key.length()) - 1))"},"status":-1},{"failures":[90,91],"tindex":"9e52d46e-3ff3-11e6-8263-4f5e24c0960a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:136","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:188","type":"CtReturnImpl","sourcecode":"return 3"},"status":-1},{"failures":[92,93,2],"tindex":"9e52d46f-3ff3-11e6-8263-090d077ac70e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:429","type":"CtInvocationImpl","sourcecode":"result.append('K', 'J')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:486","type":"CtInvocationImpl","sourcecode":"result.append('F')"},"status":-1},{"failures":[],"tindex":"9e52d470-3ff3-11e6-8263-0792fbe13be5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:758","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"status":-2},{"failures":[94,95,96,97,98,99,100,101,102,103,104],"tindex":"9e52fb81-3ff3-11e6-8263-f9119bf77fcb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:293","type":"CtIfImpl","sourcecode":"if (((leftCharacter.length()) != 1) || ((rightCharacter.length()) != 1)) {\n    throw new java.lang.IllegalArgumentException(((((\"Malformed folding statement - \" + \"patterns are not single characters: \") + rawLine) + \" in \") + location));\n} "},"variableMap":{"rawLine":"cachedString","leftCharacter":"cachedString","rightCharacter":"cachedString","location":"cachedString"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:152","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    java.lang.String = java.lang.StringBuilder.toString();\n} "},"status":-1},{"failures":[105,106],"tindex":"9e52fb82-3ff3-11e6-8263-511521e63fe9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"variableMap":{"jj":"iValue","l_ascii":"b","bits":"iValue"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:400","type":"CtAssignmentImpl","sourcecode":"b[(offset++)] = ((byte)((iValue >>> 8) & 255))"},"status":-1},{"failures":[],"tindex":"9e52fb83-3ff3-11e6-8263-fdf695280e17","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.RefinedSoundex:196","type":"CtInvocationImpl","sourcecode":"sBuf.append(current)"},"variableMap":{"current":"c","sBuf":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:365","type":"CtInvocationImpl","sourcecode":"sb.append(c)"},"status":-2},{"failures":[],"tindex":"9e52fb84-3ff3-11e6-8263-e5d05ddfcd26","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"variableMap":{"found":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"status":-2},{"failures":[107],"tindex":"9e532295-3ff3-11e6-8263-050381b1e016","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:769","type":"CtReturnImpl","sourcecode":"return resizedBytes"},"variableMap":{"resizedBytes":"key"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:659","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.getHmacSha512(key), valueToDigest).doFinal()"},"status":-1},{"failures":[],"tindex":"9e532296-3ff3-11e6-8263-eda14812a39b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:366","type":"CtAssignmentImpl","sourcecode":"d = (d >>> 1) | (d << 27)"},"variableMap":{"d":"patternLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"status":-2},{"failures":[108,109,110],"tindex":"9e532297-3ff3-11e6-8263-0f235bec76a5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:475","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer)"},"status":-1},{"failures":[111,112,113,114,115,116],"tindex":"9e532298-3ff3-11e6-8263-0767dd572f16","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:368","type":"CtIfImpl","sourcecode":"if (!(ph.endsWith(\"]\"))) {\n    throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n} "},"variableMap":{"ph":"org.apache.commons.codec.digest.Md5Crypt.APR1_PREFIX"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:89","type":"CtIfImpl","sourcecode":"if ((salt != null) && (!(salt.startsWith(org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String)))) {\n    salt = (org.apache.commons.codec.digest.Md5Crypt.org.apache.commons.codec.digest.Md5Crypt.java.lang.String) + salt;\n} "},"status":-1},{"failures":[105,106],"tindex":"9e5349a9-3ff3-11e6-8263-a325e5d1fa4b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:408","type":"CtUnaryOperatorImpl","sourcecode":"currentLine++"},"variableMap":{"currentLine":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:344","type":"CtAssignmentImpl","sourcecode":"d = results[0]"},"status":-1},{"failures":[],"tindex":"9e5349aa-3ff3-11e6-8263-25b6971b9a84","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:207","type":"CtAssignmentImpl","sourcecode":"this.char[] = data"},"variableMap":{"data":"soundexMapping"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:90","type":"CtAssignmentImpl","sourcecode":"this.char[] = mapping.toCharArray()"},"status":-2},{"failures":[105,106],"tindex":"9e5349ab-3ff3-11e6-8263-fbb78c1ecbce","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:357","type":"CtAssignmentImpl","sourcecode":"d = ((((d & 255) << 16) | (d & 65280)) | ((d & 16711680) >>> 16)) | ((c & -268435456) >>> 4)"},"variableMap":{"c":"s","d":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:377","type":"CtAssignmentImpl","sourcecode":"s = (s << 4) | (s >>> 28)"},"status":-1},{"failures":[],"tindex":"9e5349ac-3ff3-11e6-8263-37a6660a073e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:503","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"variableMap":{"in":"bigBytes","inPos":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:759","type":"CtLocalVariableImpl","sourcecode":"int int = bigBytes.int"},"status":-2},{"failures":[],"tindex":"9e5370bd-3ff3-11e6-8263-8f92ec300149","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:208","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"             \")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:106","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(10)"},"status":-2},{"failures":[117,93,2],"tindex":"9e5370be-3ff3-11e6-8263-4df9f2c66e94","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:589","type":"CtInvocationImpl","sourcecode":"result.append('R')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:520","type":"CtInvocationImpl","sourcecode":"result.append('H')"},"status":-1},{"failures":[118,119,120,121,122,123,124,125,126,127,128,0,129],"tindex":"9e5370bf-3ff3-11e6-8263-cf0672058327","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:327","type":"CtLocalVariableImpl","sourcecode":"int int = v & e0"},"variableMap":{"v":"i","e0":"patternLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:704","type":"CtLocalVariableImpl","sourcecode":"final int int = i + patternLength"},"status":-1},{"failures":[119,122,127,128,0,129],"tindex":"9e5397d0-3ff3-11e6-8263-bbcef01835dd","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:713","type":"CtIfImpl","sourcecode":"if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"9e5397d1-3ff3-11e6-8263-094394ce94b7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:68","type":"CtReturnImpl","sourcecode":"return java.security.MessageDigest.getInstance(algorithm)"},"variableMap":{"algorithm":"org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_256"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:128","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[],"tindex":"9e5397d2-3ff3-11e6-8263-b31d56a93e2a","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:81","type":"CtIfImpl","sourcecode":"if ((len & 1) != 0) {\n    throw new org.apache.commons.codec.DecoderException(\"Odd number of characters.\");\n} "},"variableMap":{"len":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:434","type":"CtIfImpl","sourcecode":"if ((chrs[index]) > 'Z') {\n    for (final char[] char[] : org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.char[][]) {\n        if ((chrs[index]) == (element[0])) {\n            chrs[index] = element[1];\n            break;\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"9e5397d3-3ff3-11e6-8263-51ac1413570f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"cnt -= blocksize"},"variableMap":{"blocksize":"n","cnt":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:329","type":"CtUnaryOperatorImpl","sourcecode":"n++"},"status":-2},{"failures":[],"tindex":"9e5397d4-3ff3-11e6-8263-5d4838900718","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:182","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = lsScanner.nextLine().trim()"},"variableMap":{"lsScanner":"scanner"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:409","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = scanner.nextLine()"},"status":0},{"failures":[],"tindex":"9e5397d5-3ff3-11e6-8263-2b4579c6aee7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:229","type":"CtReturnImpl","sourcecode":"return ls.equals(org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet) ? org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet : ls"},"variableMap":{"ls":"languages","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"languages","org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES":"languages"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:130","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.Rule.Phoneme.this.org.apache.commons.codec.language.bm.Languages.LanguageSet"},"status":-2},{"failures":[],"tindex":"9e53bee6-3ff3-11e6-8263-e3666b309803","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:801","type":"CtReturnImpl","sourcecode":"return digest"},"variableMap":{"digest":"messageDigest"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:817","type":"CtReturnImpl","sourcecode":"return messageDigest"},"status":-2},{"failures":[130,90,91,131,132],"tindex":"9e53bee7-3ff3-11e6-8263-bfd73c4d8907","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:223","type":"CtAssignmentImpl","sourcecode":"patternLength = 1"},"variableMap":{"patternLength":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:307","type":"CtOperatorAssignmentImpl","sourcecode":"pos += org.apache.commons.codec.net.QuotedPrintableCodec.encodeByte(b, encode, buffer)"},"status":-1},{"failures":[],"tindex":"9e53bee8-3ff3-11e6-8263-b1aae17cd4b7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:151","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"9e53bee9-3ff3-11e6-8263-4f2ab7a28f7e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:357","type":"CtReturnImpl","sourcecode":"return matches"},"variableMap":{"matches":"found"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:231","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean"},"status":0},{"failures":[],"tindex":"9e53beea-3ff3-11e6-8263-6347b8f62348","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:127","type":"CtIfImpl","sourcecode":"if ((((name == null) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || (org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.equalsIgnoreCase(name))) || ((name.length()) == 1)) {\n    return org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String;\n} "},"variableMap":{"name":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"str","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:575","type":"CtIfImpl","sourcecode":"if (str == null) {\n    return null;\n} "},"status":-2},{"failures":[133,134,92,117,93,2],"tindex":"9e53beeb-3ff3-11e6-8263-3f0ce5cde4de","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:224","type":"CtOperatorAssignmentImpl","sourcecode":"ii -= 16"},"variableMap":{"ii":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:695","type":"CtAssignmentImpl","sourcecode":"index = org.apache.commons.codec.language.DoubleMetaphone.contains(value, (index + 1), 1, \"T\", \"D\") ? index + 2 : index + 1"},"status":-1},{"failures":[119,122,127,128,0,129],"tindex":"9e53e5fc-3ff3-11e6-8263-a35f781accaf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:713","type":"CtIfImpl","sourcecode":"if (!(input.subSequence(i, ipl).equals(org.apache.commons.codec.language.bm.Rule.this.java.lang.String))) {\n    return false;\n} else if (!(org.apache.commons.codec.language.bm.Rule.this.org.apache.commons.codec.language.bm.Rule.RPattern.isMatch(input.subSequence(ipl, input.length())))) {\n    return false;\n} "},"status":-1},{"failures":[46,59,67,68,69],"tindex":"9e53e5fd-3ff3-11e6-8263-4513978e6c48","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:301","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base32.this.byte[], 0, lineSeparator.int)"},"status":-1},{"failures":[],"tindex":"9e53e5fe-3ff3-11e6-8263-c55e8189dabe","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:83","type":"CtAssignmentImpl","sourcecode":"java.lang.StringBuilder = new java.lang.StringBuilder()"},"variableMap":{"builder":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:295","type":"CtInvocationImpl","sourcecode":"code.append('X')"},"status":-2},{"failures":[135,136,137,138,139],"tindex":"9e551e7f-3ff3-11e6-8263-638c8a86be05","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:176","type":"CtIfImpl","sourcecode":"if (key == null) {\n    throw new java.lang.IllegalArgumentException(\"Null key\");\n} "},"variableMap":{"key":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:464","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer)"},"status":-1},{"failures":[92,117,93,2],"tindex":"9e551e80-3ff3-11e6-8263-f5168be9fea8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:748","type":"CtInvocationImpl","sourcecode":"result.append(\"KS\")"},"status":-1},{"failures":[118,119,140,120,121,141,142,122,123,124,125,126,143,144,127,128,0,129],"tindex":"9e551e81-3ff3-11e6-8263-9515bc5887dc","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:452","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2])"},"variableMap":{"parts":"parts"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:450","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0])"},"status":-1},{"failures":[],"tindex":"9e554592-3ff3-11e6-8263-d32efa4902b9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:320","type":"CtIfImpl","sourcecode":"if (text == null) {\n    return null;\n} "},"variableMap":{"text":"name"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:421","type":"CtReturnImpl","sourcecode":"return firstLetter + name"},"status":-2},{"failures":[],"tindex":"9e554593-3ff3-11e6-8263-c3c8d21c00a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:216","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.bm.PhoneticEngine.RulesApplication.this.boolean = true"},"variableMap":{"found":"roundsCustom"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:152","type":"CtAssignmentImpl","sourcecode":"roundsCustom = true"},"status":-2},{"failures":[],"tindex":"9e554594-3ff3-11e6-8263-57a3a460183e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:47","type":"CtIfImpl","sourcecode":"if ((txt == null) || ((txt.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone2.org.apache.commons.codec.language.Caverphone2.java.lang.String;\n} "},"variableMap":{"org.apache.commons.codec.language.Caverphone2.TEN_1":"value","txt":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:88","type":"CtIfImpl","sourcecode":"if (value == null) {\n    return null;\n} "},"status":-2},{"failures":[],"tindex":"9e554595-3ff3-11e6-8263-f14e49743ca3","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.PhoneticEngine:420","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = l + remainder"},"variableMap":{"l":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY","remainder":"org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:332","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = new java.lang.String(name1Char).replaceAll(\"\\\\s+\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"status":0},{"failures":[145],"tindex":"9e554596-3ff3-11e6-8263-8f5f9701d8c1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:103","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set('~')"},"variableMap":{"org.apache.commons.codec.net.QCodec.PRINTABLE_CHARS":"printable"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:277","type":"CtIfImpl","sourcecode":"if (printable == null) {\n    printable = org.apache.commons.codec.net.QuotedPrintableCodec.org.apache.commons.codec.net.QuotedPrintableCodec.java.util.BitSet;\n} "},"status":-1},{"failures":[105,106],"tindex":"9e554597-3ff3-11e6-8263-53a6284d9895","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:362","type":"CtAssignmentImpl","sourcecode":"c = (c >>> 2) | (c << 26)"},"status":-1},{"failures":[],"tindex":"9e554598-3ff3-11e6-8263-3f8c18ad419b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.QCodec:313","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"object","this":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:250","type":"CtTryImpl","sourcecode":"try {\n    final char[] char[] = object instanceof java.lang.String ? ((java.lang.String)(object)).toCharArray() : ((char[])(object));\n    return org.apache.commons.codec.binary.Hex.decodeHex(charArray);\n} catch (final java.lang.ClassCastException e) {\n    throw new org.apache.commons.codec.DecoderException(e.getMessage() , e);\n}"},"status":-2},{"failures":[],"tindex":"9e556ca9-3ff3-11e6-8263-55e496bc21c5","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:173","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getSha1Digest()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:112","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.getDigest(org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-2},{"failures":[94,95,97,98,100,102],"tindex":"9e556caa-3ff3-11e6-8263-5d9b206e6793","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:506","type":"CtIfImpl","sourcecode":"if (rules == null) {\n    continue;\n} "},"variableMap":{"rules":"ruleList"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:241","type":"CtInvocationImpl","sourcecode":"java.util.Collections.sort(ruleList, new java.util.Comparator<org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule>() {\n    @java.lang.Override\n    public int compare(final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule1, final org.apache.commons.codec.language.DaitchMokotoffSoundex.Rule rule2) {\n        return (rule2.getPatternLength()) - (rule1.getPatternLength());\n    }\n})"},"status":-1},{"failures":[119,120,121,122,127,128,0,129],"tindex":"9e556cab-3ff3-11e6-8263-9b70748527b2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:489","type":"CtReturnImpl","sourcecode":"return lines"},"variableMap":{"lines":"lines"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:445","type":"CtIfImpl","sourcecode":"if ((parts.int) != 4) {\n    throw new java.lang.IllegalArgumentException((((((\"Malformed rule statement split into \" + (parts.int)) + \" parts: \") + rawLine) + \" in \") + location));\n} else {\n    try {\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[0]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[1]);\n        final java.lang.String java.lang.String = org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[2]);\n        final org.apache.commons.codec.language.bm.Rule.PhonemeExpr org.apache.commons.codec.language.bm.Rule.PhonemeExpr = org.apache.commons.codec.language.bm.Rule.parsePhonemeExpr(org.apache.commons.codec.language.bm.Rule.stripQuotes(parts[3]));\n        final int int = currentLine;\n        final org.apache.commons.codec.language.bm.Rule org.apache.commons.codec.language.bm.Rule = new org.apache.commons.codec.language.bm.Rule(pat, lCon, rCon, ph) {\n            private final int myLine = cLine;\n\n            private final java.lang.String loc = location;\n\n            @java.lang.Override\n            public java.lang.String toString() {\n                final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                sb.append(\"Rule\");\n                sb.append(\"{line=\").append(int);\n                sb.append(\", loc='\").append(java.lang.String).append('\\'');\n                sb.append(\", pat='\").append(pat).append('\\'');\n                sb.append(\", lcon='\").append(lCon).append('\\'');\n                sb.append(\", rcon='\").append(rCon).append('\\'');\n                sb.append('}');\n                return sb.toString();\n            }\n        };\n        final java.lang.String java.lang.String = r.java.lang.String.substring(0, 1);\n        java.util.List<org.apache.commons.codec.language.bm.Rule> java.util.List<org.apache.commons.codec.language.bm.Rule> = lines.get(patternKey);\n        if (rules == null) {\n            rules = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule>();\n            lines.put(patternKey, rules);\n        } \n        rules.add(r);\n    } catch (final java.lang.IllegalArgumentException e) {\n        throw new java.lang.IllegalStateException((((\"Problem parsing line '\" + currentLine) + \"' in \") + location) , e);\n    }\n}"},"status":-1},{"failures":[],"tindex":"9e556cac-3ff3-11e6-8263-4b9c2e00371d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:287","type":"CtAssignmentImpl","sourcecode":"index = handleCH(value, result, index)"},"status":-2},{"failures":[146,147,148],"tindex":"9e556cad-3ff3-11e6-8263-6de70c24eeef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:183","type":"CtIfImpl","sourcecode":"if ((ascii[(jj - bits)]) == '1') {\n    l_raw[ii] |= org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.int[][bits];\n} "},"status":-1},{"failures":[],"tindex":"9e5593be-3ff3-11e6-8263-db5b83e31614","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:357","type":"CtInvocationImpl","sourcecode":"result.append('K', 'X')"},"variableMap":{"result":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:468","type":"CtInvocationImpl","sourcecode":"result.append('K')"},"status":0},{"failures":[],"tindex":"9e5593bf-3ff3-11e6-8263-c7ede11414a6","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:553","type":"CtIfImpl","sourcecode":"if (negate) {\n    boxContent = boxContent.substring(1);\n} "},"variableMap":{"negate":"hard","boxContent":"org.apache.commons.codec.language.Metaphone.VARSON"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:152","type":"CtIfImpl","sourcecode":"if ((symb != 'C') && (isPreviousChar(local, n, symb))) {\n    n++;\n} else {\n    switch (symb) {\n        case 'A' :\n        case 'E' :\n        case 'I' :\n        case 'O' :\n        case 'U' :\n            if (n == 0) {\n                code.append(symb);\n            } \n            break;\n        case 'B' :\n            if ((isPreviousChar(local, n, 'M')) && (isLastChar(wdsz, n))) {\n                break;\n            } \n            code.append(symb);\n            break;\n        case 'C' :\n            if (((isPreviousChar(local, n, 'S')) && (!(isLastChar(wdsz, n)))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                break;\n            } \n            if (regionMatch(local, n, \"CIA\")) {\n                code.append('X');\n                break;\n            } \n            if ((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) {\n                code.append('S');\n                break;\n            } \n            if ((isPreviousChar(local, n, 'S')) && (isNextChar(local, n, 'H'))) {\n                code.append('K');\n                break;\n            } \n            if (isNextChar(local, n, 'H')) {\n                if (((n == 0) && (wdsz >= 3)) && (isVowel(local, 2))) {\n                    code.append('K');\n                } else {\n                    code.append('X');\n                }\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'D' :\n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'G'))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 2)))) >= 0)) {\n                code.append('J');\n                n += 2;\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'G' :\n            if ((isLastChar(wdsz, (n + 1))) && (isNextChar(local, n, 'H'))) {\n                break;\n            } \n            if (((!(isLastChar(wdsz, (n + 1)))) && (isNextChar(local, n, 'H'))) && (!(isVowel(local, (n + 2))))) {\n                break;\n            } \n            if ((n > 0) && ((regionMatch(local, n, \"GN\")) || (regionMatch(local, n, \"GNED\")))) {\n                break;\n            } \n            if (isPreviousChar(local, n, 'G')) {\n                hard = true;\n            } else {\n                hard = false;\n            }\n            if (((!(isLastChar(wdsz, n))) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n + 1)))) >= 0)) && (!hard)) {\n                code.append('J');\n            } else {\n                code.append('K');\n            }\n            break;\n        case 'H' :\n            if (isLastChar(wdsz, n)) {\n                break;\n            } \n            if ((n > 0) && ((org.apache.commons.codec.language.Metaphone.org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(local.charAt((n - 1)))) >= 0)) {\n                break;\n            } \n            if (isVowel(local, (n + 1))) {\n                code.append('H');\n            } \n            break;\n        case 'F' :\n        case 'J' :\n        case 'L' :\n        case 'M' :\n        case 'N' :\n        case 'R' :\n            code.append(symb);\n            break;\n        case 'K' :\n            if (n > 0) {\n                if (!(isPreviousChar(local, n, 'C'))) {\n                    code.append(symb);\n                } \n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'P' :\n            if (isNextChar(local, n, 'H')) {\n                code.append('F');\n            } else {\n                code.append(symb);\n            }\n            break;\n        case 'Q' :\n            code.append('K');\n            break;\n        case 'S' :\n            if (((regionMatch(local, n, \"SH\")) || (regionMatch(local, n, \"SIO\"))) || (regionMatch(local, n, \"SIA\"))) {\n                code.append('X');\n            } else {\n                code.append('S');\n            }\n            break;\n        case 'T' :\n            if ((regionMatch(local, n, \"TIA\")) || (regionMatch(local, n, \"TIO\"))) {\n                code.append('X');\n                break;\n            } \n            if (regionMatch(local, n, \"TCH\")) {\n                break;\n            } \n            if (regionMatch(local, n, \"TH\")) {\n                code.append('0');\n            } else {\n                code.append('T');\n            }\n            break;\n        case 'V' :\n            code.append('F');\n            break;\n        case 'W' :\n        case 'Y' :\n            if ((!(isLastChar(wdsz, n))) && (isVowel(local, (n + 1)))) {\n                code.append(symb);\n            } \n            break;\n        case 'X' :\n            code.append('K');\n            code.append('S');\n            break;\n        case 'Z' :\n            code.append('S');\n            break;\n        default :\n            break;\n    }\n    n++;\n}"},"status":-2},{"failures":[],"tindex":"9e5593c0-3ff3-11e6-8263-a5910e3e1caa","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:206","type":"CtReturnImpl","sourcecode":"return b"},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:325","type":"CtReturnImpl","sourcecode":"return index"},"status":-2},{"failures":[],"tindex":"9e5593c1-3ff3-11e6-8263-85d61a517f69","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:55","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"[^a-z]\", \"\")"},"variableMap":{"txt":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:324","type":"CtAssignmentImpl","sourcecode":"text = preprocess(text)"},"status":-2},{"failures":[],"tindex":"9e5593c2-3ff3-11e6-8263-0984e547c092","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:521","type":"CtOperatorAssignmentImpl","sourcecode":"len += (((len + (int)) - 1) / (int)) * (int)"},"variableMap":{"chunkSeparatorLength":"len","len":"todo","lineLength":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:206","type":"CtOperatorAssignmentImpl","sourcecode":"todo -= len"},"status":-2},{"failures":[118,119,140,120,121,122,123,124,125,126,143,144,127,128,0,129],"tindex":"9e5593c3-3ff3-11e6-8263-d31062fe7b4d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:183","type":"CtIfImpl","sourcecode":"if (inExtendedComment) {\n    if (line.endsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = false;\n    } \n} else {\n    if (line.startsWith(org.apache.commons.codec.language.bm.ResourceConstants.org.apache.commons.codec.language.bm.ResourceConstants.java.lang.String)) {\n        inExtendedComment = true;\n    } else if ((line.length()) > 0) {\n        ls.add(line);\n    } \n}"},"status":-1},{"failures":[],"tindex":"9e55bad4-3ff3-11e6-8263-6f83d3d8cd44","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"boxContent = boxContent.substring(1)"},"variableMap":{"boxContent":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:94","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^y\", \"A\")"},"status":-2},{"failures":[],"tindex":"9e55bad5-3ff3-11e6-8263-c3c4f5faf31b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Soundex:268","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[],"tindex":"9e55bad6-3ff3-11e6-8263-310c9c496c59","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:380","type":"CtIfImpl","sourcecode":"if (java.lang.Character.isWhitespace(ch)) {\n    continue;\n} "},"variableMap":{"ch":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:362","type":"CtIfImpl","sourcecode":"if (pos > (-1)) {\n    sb.append(org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String.charAt(pos));\n} else {\n    sb.append(c);\n}"},"status":0},{"failures":[92,93,2],"tindex":"9e55bad7-3ff3-11e6-8263-67bc36ac92fc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:876","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : org.apache.commons.codec.language.DoubleMetaphone.org.apache.commons.codec.language.DoubleMetaphone.java.lang.String[]) {\n    if (value.startsWith(element)) {\n        result = true;\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"9e55bad8-3ff3-11e6-8263-35673207105c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:189","type":"CtAssignmentImpl","sourcecode":"inExtendedComment = true"},"variableMap":{"inExtendedComment":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:356","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.net.QCodec.this.boolean = b"},"status":-2},{"failures":[],"tindex":"9e55bad9-3ff3-11e6-8263-276b4f13b00e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:286","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(lineSeparator, 0, org.apache.commons.codec.binary.Base64.this.byte[], 0, lineSeparator.int)"},"variableMap":{"length":"keyLen","lineSeparator":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:275","type":"CtForImpl","sourcecode":"for (int int = 1 ; i <= keyLen ; i++) {\n    altCtx.update(keyBytes);\n}"},"status":-2},{"failures":[],"tindex":"9e55e1ea-3ff3-11e6-8263-03257a14d466","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:94","type":"CtLocalVariableImpl","sourcecode":"int int"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.URLCodec:172","type":"CtLocalVariableImpl","sourcecode":"final int int = org.apache.commons.codec.net.Utils.digit16(bytes[(++i)])"},"status":-2},{"failures":[],"tindex":"9e55e1eb-3ff3-11e6-8263-cb9442d838e2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:428","type":"CtAssignmentImpl","sourcecode":"org.apache.commons.codec.language.Metaphone.this.int = maxCodeLen"},"variableMap":{"maxCodeLen":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:621","type":"CtOperatorAssignmentImpl","sourcecode":"index += 3"},"status":-2},{"failures":[],"tindex":"9e55e1ec-3ff3-11e6-8263-91d818bdf40d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:114","type":"CtLocalVariableImpl","sourcecode":"final int int = java.lang.Math.min(es1.length(), es2.length())"},"variableMap":{"es1":"value","es2":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:93","type":"CtLocalVariableImpl","sourcecode":"int int = isSilentStart(value) ? 1 : 0"},"status":-2},{"failures":[149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"9e55e1ed-3ff3-11e6-8263-c1e9b0fe5f3f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:45","type":"CtLocalVariableImpl","sourcecode":"final int int = str.length()"},"variableMap":{"str":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:256","type":"CtLocalVariableImpl","sourcecode":"final int int = leftToRightThenRightToLeftProcessing(name1, name2)"},"status":-1},{"failures":[127,128,0,129],"tindex":"9e55e1ee-3ff3-11e6-8263-0f69c4e244a9","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:377","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet)"},"variableMap":{"ph":"ph","org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE":"org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:367","type":"CtIfImpl","sourcecode":"if (open >= 0) {\n    if (!(ph.endsWith(\"]\"))) {\n        throw new java.lang.IllegalArgumentException(\"Phoneme expression contains a '[' but does not end in ']'\");\n    } \n    final java.lang.String java.lang.String = ph.substring(0, open);\n    final java.lang.String java.lang.String = ph.substring((open + 1), ((ph.length()) - 1));\n    final java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(in.split(\"[+]\")));\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(before , org.apache.commons.codec.language.bm.Languages.LanguageSet.from(langs));\n} else {\n    return new org.apache.commons.codec.language.bm.Rule.Phoneme(ph , org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.LanguageSet);\n}"},"status":-1},{"failures":[161,162,163,111,114,115,116],"tindex":"9e567e2f-3ff3-11e6-8263-a3497a909ac2","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:294","type":"CtInvocationImpl","sourcecode":"ctx.reset()"},"variableMap":{"ctx":"ctx1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Md5Crypt:259","type":"CtInvocationImpl","sourcecode":"ctx1.update(keyBytes)"},"status":-1},{"failures":[],"tindex":"9e56a540-3ff3-11e6-8263-9779a0c81ddb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:417","type":"CtAssignmentImpl","sourcecode":"name = name.replaceAll(\"\\\\s{2,}\\\\b\", org.apache.commons.codec.language.MatchRatingApproachEncoder.org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"name":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.SPACE":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:95","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"k+\", \"K\")"},"status":-2},{"failures":[],"tindex":"9e56a541-3ff3-11e6-8263-f542aa687867","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Hex:90","type":"CtUnaryOperatorImpl","sourcecode":"j++"},"variableMap":{"j":"maxLength"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:943","type":"CtAssignmentImpl","sourcecode":"this.int = maxLength"},"status":-2},{"failures":[],"tindex":"9e56a542-3ff3-11e6-8263-29aea1069f40","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.URLCodec:176","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(\"Invalid URL encoding: \" , e)"},"variableMap":{"e":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:227","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException(((\"Objects of type \" + (value.getClass().getName())) + \" cannot be decoded using BCodec\"))"},"status":-2},{"failures":[],"tindex":"9e56a543-3ff3-11e6-8263-69dea4245f2a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.BeiderMorseEncoder:86","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"BeiderMorseEncoder encode parameter is not of type String\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:178","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index))"},"status":-2},{"failures":[164],"tindex":"9e56a544-3ff3-11e6-8263-cbeef085dfdc","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:98","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"n+\", \"N\")"},"status":-1},{"failures":[],"tindex":"9e56a545-3ff3-11e6-8263-e5ce2d3b5029","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:257","type":"CtReturnImpl","sourcecode":"return l_ascii"},"variableMap":{"l_ascii":"binaryData"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:663","type":"CtReturnImpl","sourcecode":"return binaryData"},"status":-2},{"failures":[],"tindex":"9e56cc56-3ff3-11e6-8263-71189ee32d98","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QuotedPrintableCodec:471","type":"CtReturnImpl","sourcecode":"return new java.lang.String(decode(org.apache.commons.codec.binary.StringUtils.getBytesUsAscii(str)) , charset)"},"status":-2},{"failures":[165,166,167,168,169,81,82,83],"tindex":"9e56cc57-3ff3-11e6-8263-ed4b609a19eb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:235","type":"CtAssignmentImpl","sourcecode":"ii = keyLen"},"variableMap":{"ii":"to","keyLen":"from"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.RFC1522Codec:152","type":"CtAssignmentImpl","sourcecode":"to = text.indexOf(org.apache.commons.codec.net.RFC1522Codec.org.apache.commons.codec.net.RFC1522Codec.char, from)"},"status":-1},{"failures":[],"tindex":"9e56cc58-3ff3-11e6-8263-49bf3434e3af","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base32:504","type":"CtIfImpl","sourcecode":"if (b < 0) {\n    b += 256;\n} "},"variableMap":{"b":"digit"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:177","type":"CtIfImpl","sourcecode":"if (digit == (-1)) {\n    throw new org.apache.commons.codec.DecoderException((((\"Illegal hexadecimal character \" + ch) + \" at index \") + index));\n} "},"status":-2},{"failures":[134,92,93,2],"tindex":"9e56cc59-3ff3-11e6-8263-892c2ec0a44e","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Rule:99","type":"CtReturnImpl","sourcecode":"return -1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:356","type":"CtIfImpl","sourcecode":"if ((index > 0) && (org.apache.commons.codec.language.DoubleMetaphone.contains(value, index, 4, \"CHAE\"))) {\n    result.append('K', 'X');\n    return index + 2;\n} else if (conditionCH0(value, index)) {\n    result.append('K');\n    return index + 2;\n} else if (conditionCH1(value, index)) {\n    result.append('K');\n    return index + 2;\n} else {\n    if (index > 0) {\n        if (org.apache.commons.codec.language.DoubleMetaphone.contains(value, 0, 2, \"MC\")) {\n            result.append('K');\n        } else {\n            result.append('X', 'K');\n        }\n    } else {\n        result.append('X');\n    }\n    return index + 2;\n}"},"status":-1},{"failures":[135,108,109,110,136,137,138,139],"tindex":"9e56cc5a-3ff3-11e6-8263-1b6511328155","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:297","type":"CtInvocationImpl","sourcecode":"java.util.Arrays.fill(saltBytes, ((byte)(0)))"},"variableMap":{"saltBytes":"altResult"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:230","type":"CtInvocationImpl","sourcecode":"ctx.update(altResult, 0, cnt)"},"status":-1},{"failures":[],"tindex":"9e56cc5b-3ff3-11e6-8263-59fee89a8a1d","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.UnixCrypt:326","type":"CtLocalVariableImpl","sourcecode":"int int = r ^ (r >>> 16)"},"variableMap":{"r":"inPos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:503","type":"CtLocalVariableImpl","sourcecode":"int int = in[(inPos++)]"},"status":-2},{"failures":[],"tindex":"9e56f36c-3ff3-11e6-8263-c7eb7222ae61","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:889","type":"CtIfImpl","sourcecode":"if (input == null) {\n    return null;\n} "},"variableMap":{"input":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:123","type":"CtReturnImpl","sourcecode":"return encodeText(value, charset)"},"status":-2},{"failures":[170,171,172,173,174,175],"tindex":"9e56f36d-3ff3-11e6-8263-8b39d24cc460","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:59","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"^cough\", \"cou2f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:100","type":"CtAssignmentImpl","sourcecode":"txt = txt.replaceAll(\"t+\", \"T\")"},"status":-1},{"failures":[],"tindex":"9e56f36e-3ff3-11e6-8263-89832d50f8e8","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.HmacUtils:617","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.HmacUtils.hmacSha384(key, valueToDigest))"},"variableMap":{"valueToDigest":"str","key":"str"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:269","type":"CtReturnImpl","sourcecode":"return decodeText(str)"},"status":-2},{"failures":[],"tindex":"9e56f36f-3ff3-11e6-8263-770ab94b89a1","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Lang:131","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Lang.org.apache.commons.codec.language.bm.Lang.java.lang.Class.getClassLoader().getResourceAsStream(languageRulesResourceName)"},"variableMap":{"org.apache.commons.codec.language.bm.Lang.class":"org.apache.commons.codec.language.bm.Languages.class","languageRulesResourceName":"languagesResourceName"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:172","type":"CtLocalVariableImpl","sourcecode":"final java.io.InputStream java.io.InputStream = org.apache.commons.codec.language.bm.Languages.org.apache.commons.codec.language.bm.Languages.java.lang.Class.getClassLoader().getResourceAsStream(languagesResourceName)"},"status":-2},{"failures":[],"tindex":"9e56f370-3ff3-11e6-8263-7d3599f234dd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:380","type":"CtReturnImpl","sourcecode":"return decode(((java.lang.String)(obj)))"},"variableMap":{"obj":"obj","this":"obj"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.RefinedSoundex:137","type":"CtReturnImpl","sourcecode":"return soundex(((java.lang.String)(obj)))"},"status":-2},{"failures":[],"tindex":"9e56f371-3ff3-11e6-8263-91be46ae2dde","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:411","type":"CtInvocationImpl","sourcecode":"decode(pArray, 0, org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec.int, context)"},"variableMap":{"pArray":"buf","org.apache.commons.codec.binary.BaseNCodec.EOF":"c","this":"baseNCodec","context":"context"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:160","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.binary.BaseNCodec.encode(buf, 0, c, org.apache.commons.codec.binary.BaseNCodec.Context)"},"status":-2},{"failures":[],"tindex":"9e56f372-3ff3-11e6-8263-29fb6d23e758","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:191","type":"CtInvocationImpl","sourcecode":"ls.add(line)"},"variableMap":{"line":"lang","ls":"ls"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Languages:125","type":"CtInvocationImpl","sourcecode":"ls.add(lang)"},"status":-2},{"failures":[],"tindex":"9e571a83-3ff3-11e6-8263-9977275b17c7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:117","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.org.apache.commons.codec.binary.BinaryCodec.byte[]"},"variableMap":{"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY":"byteArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Hex:299","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHex(byteArray)"},"status":-2},{"failures":[],"tindex":"9e571a84-3ff3-11e6-8263-05a17148cbeb","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:728","type":"CtOperatorAssignmentImpl","sourcecode":"index += 4"},"variableMap":{"index":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:291","type":"CtAssignmentImpl","sourcecode":"left = right"},"status":0},{"failures":[105,106],"tindex":"9e571a85-3ff3-11e6-8263-03338e4ea699","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.CharSequenceUtils:55","type":"CtLocalVariableImpl","sourcecode":"int int = start"},"variableMap":{"start":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:393","type":"CtLocalVariableImpl","sourcecode":"final int int = ((a << (16 - n)) ^ a) & m"},"status":-1},{"failures":[176,177,178,108,179,109,110,180,181],"tindex":"9e571a86-3ff3-11e6-8263-19769e071d85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:299","type":"CtReturnImpl","sourcecode":"return new java.lang.String(org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(raw))"},"variableMap":{"raw":"keyBytes"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:543","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.Sha2Crypt.sha2Crypt(keyBytes, salt, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.java.lang.String, org.apache.commons.codec.digest.Sha2Crypt.org.apache.commons.codec.digest.Sha2Crypt.int, org.apache.commons.codec.digest.MessageDigestAlgorithms.org.apache.commons.codec.digest.MessageDigestAlgorithms.java.lang.String)"},"status":-1},{"failures":[182,183],"tindex":"9e571a87-3ff3-11e6-8263-e391cf846204","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:251","type":"CtAssignmentImpl","sourcecode":"l_ascii[(jj - bits)] = '0'"},"status":-1},{"failures":[165,166,167],"tindex":"9e571a88-3ff3-11e6-8263-9df22241c783","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:89","type":"CtForImpl","sourcecode":"for (int int = 'A' ; i <= 'Z' ; i++) {\n    org.apache.commons.codec.net.QCodec.org.apache.commons.codec.net.QCodec.java.util.BitSet.set(i);\n}"},"status":-1},{"failures":[],"tindex":"9e571a89-3ff3-11e6-8263-39342d67fac7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:285","type":"CtAssignmentImpl","sourcecode":"this.byte[] = new byte[lineSeparator.int]"},"status":-2}],"header":{"groupId":"commons-codec","transformationCount":100,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"}}
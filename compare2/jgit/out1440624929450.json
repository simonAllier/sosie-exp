{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":68,"org.eclipse.jgit.notes.NoteMapTest.testReadFanout2_38":83,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":48,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":60,"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_NoParents":110,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":57,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":13,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":37,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":25,"org.eclipse.jgit.notes.NoteMapTest.testGetCachedBytes":82,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":14,"org.eclipse.jgit.notes.NoteMapTest.testRemoveDeletesTreeFanout2_38":81,"org.eclipse.jgit.notes.NoteMapMergerTest.testNoChange":102,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":38,"org.eclipse.jgit.notes.NoteMapMergerTest.testAddDifferentNotes":104,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":58,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":22,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":16,"org.eclipse.jgit.notes.NoteMapMergerTest.testEditSameNoteDifferentContent":91,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":7,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":63,"org.eclipse.jgit.notes.NoteMapMergerTest.testLargeTreesWithoutConflict":99,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":5,"org.eclipse.jgit.notes.NoteMapTest.testReadFlatTwoNotes":78,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":53,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":56,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":61,"org.eclipse.jgit.internal.storage.file.ReflogWriterTest.shouldFilterLineFeedFromMessage":113,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_ok":105,"org.eclipse.jgit.notes.NoteMapMergerTest.testCollapseFanoutAfterMerge":90,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":0,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":11,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":4,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":39,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":62,"org.eclipse.jgit.notes.NoteMapMergerTest.testFanoutAndLeafWithoutConflict":101,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooters":73,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":108,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadOneLine":117,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":45,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":23,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":69,"org.eclipse.jgit.notes.NoteMapMergerTest.testFanoutAndLeafWitConflict":92,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":15,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay":106,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":34,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":74,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":44,"org.eclipse.jgit.merge.ResolveMergerTest.mergeWithCrlfInWT":67,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":54,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":43,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":6,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadTwoLine":118,"org.eclipse.jgit.notes.NoteMapMergerTest.testEditDifferentNotes":97,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":2,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFanout2_38":80,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":94,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":36,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":65,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":41,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":24,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":40,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":18,"org.eclipse.jgit.notes.NoteMapTest.testReadFanout2_2_36":85,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":29,"org.eclipse.jgit.api.NotesCommandTest.testListNotes":76,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":50,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":55,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":52,"org.eclipse.jgit.notes.NoteMapMergerTest.testAddSameNoteDifferentContent":95,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_disjointhistories":107,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":9,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":51,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooterlikeLineInBody":70,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":75,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test024_createCommitNonAscii":119,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":28,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":20,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsTheirs":89,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":19,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":32,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooter":72,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadWhileAppendIsInProgress":114,"org.eclipse.jgit.notes.NoteMapTest.testReadFullyFannedOut":86,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":8,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":10,"org.eclipse.jgit.notes.NoteMapMergerTest.testEditDeleteConflict":98,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooterNoLineBreak":71,"org.eclipse.jgit.api.RebaseCommandTest.testAuthorScriptConverter":112,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsOurs":103,"org.eclipse.jgit.lib.T0001_PersonIdentTest.test002_NewIdent":111,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":30,"org.eclipse.jgit.notes.NoteMapTest.testLeafSplitsWhenFull":87,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":1,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":47,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReaderResolve":109,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":96,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test023_createCommitNonAnullii":120,"org.eclipse.jgit.api.NotesCommandTest.testAddAndRemoveNote":77,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":33,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":3,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadLineWithMissingComment":115,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFlat":88,"org.eclipse.jgit.notes.NoteMapTest.testEditFanout2_38":84,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":59,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":12,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":31,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":42,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":64,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":27,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":26,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":66,"org.eclipse.jgit.notes.NoteMapMergerTest.testOursEqualsTheirs":100,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":21,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":35,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":49,"org.eclipse.jgit.notes.NoteMapTest.testEditFlat":79,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":46,"org.eclipse.jgit.notes.NoteMapMergerTest.testDeleteDifferentNotes":93,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testSpecificEntryNumber":116},"transformations":[{"failures":[],"tindex":"5f41a600-4c3a-11e5-95e3-9fc9f0988fc0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:415","type":"CtDoImpl","sourcecode":"do {\n    if ((byte[][int]) != (byte[][int]))\n        break;\n    \n    int--;\n    int--;\n} while ((0 <= int) && (0 < (--int)) )"},"variableMap":{"res":"delta","resPtr":"length","src":"delta","srcPtr":"length","limit":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:261","type":"CtWhileImpl","sourcecode":"while (int < (byte[].int)) {\n    final int int = (byte[][int++]) & 255;\n    if ((int & 128) != 0) {\n        int int = 0;\n        if ((int & 1) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 2) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 4) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if ((int & 8) != 0)\n            int |= ((byte[][int++]) & 255) << 24;\n        \n        int int = 0;\n        if ((int & 16) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 32) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 64) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if (int == 0)\n            int = 65536;\n        \n        java.lang.StringBuilder.append(((((\"  COPY  (\" + int) + \", \") + int) + \")\\n\"));\n    } else if (int != 0) {\n        java.lang.StringBuilder.append(\"  INSERT(\");\n        java.lang.StringBuilder.append(org.eclipse.jgit.util.QuotedString.org.eclipse.jgit.util.QuotedString.GitPathStyle.quote(org.eclipse.jgit.util.RawParseUtils.decode(byte[], int, (int + int))));\n        java.lang.StringBuilder.append(\")\\n\");\n        int += int;\n    } else {\n        throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    }\n}"},"status":-2},{"failures":[],"tindex":"5f41f421-4c3a-11e5-95e3-5556cb330630","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:297","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.pack.DeltaIndex.int"},"variableMap":{"org.eclipse.jgit.internal.storage.pack.DeltaIndex.BLKSZ":"infoOffset"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:693","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.util.NB.decodeUInt16(org.eclipse.jgit.dircache.DirCacheEntry.byte[], ((org.eclipse.jgit.dircache.DirCacheEntry.int) + (org.eclipse.jgit.dircache.DirCacheEntry.int)))"},"status":-2},{"failures":[],"tindex":"5f41f422-4c3a-11e5-95e3-09f1a41024ba","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.RenameDetector:97","type":"CtReturnImpl","sourcecode":"return 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:301","type":"CtReturnImpl","sourcecode":"return 0"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"tindex":"5f41f423-4c3a-11e5-95e3-7fb6edbc1814","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:239","type":"CtIfImpl","sourcecode":"if (((int) != 0) && ((int) < ((int) + int)))\n    return false;\n"},"variableMap":{"p":"modeO","size":"modeT","limit":"modeO"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:594","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int)) && org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.nonTree(int))) {\n    if (org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator, org.eclipse.jgit.dircache.DirCacheEntry))\n        return false;\n    \n    if (org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.isGitLink(int)) || org.eclipse.jgit.merge.ResolveMerger.(org.eclipse.jgit.merge.ResolveMerger.isGitLink(int))) {\n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n        return true;\n    } \n    org.eclipse.jgit.merge.MergeResult<org.eclipse.jgit.diff.RawText> org.eclipse.jgit.merge.MergeResult<org.eclipse.jgit.diff.RawText> = org.eclipse.jgit.merge.ResolveMerger.contentMerge(org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    if (boolean)\n        org.eclipse.jgit.merge.MergeResult<org.eclipse.jgit.diff.RawText>.setContainsConflicts(false);\n    \n    org.eclipse.jgit.merge.ResolveMerger.updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.merge.MergeResult<org.eclipse.jgit.diff.RawText>);\n    if ((org.eclipse.jgit.merge.MergeResult<org.eclipse.jgit.diff.RawText>.containsConflicts()) && (!boolean))\n        java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n    \n    java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n} else if (int != int) {\n    if (((int != 0) && (!(org.eclipse.jgit.treewalk.NameConflictTreeWalk.idEqual(org.eclipse.jgit.merge.ResolveMerger.int, org.eclipse.jgit.merge.ResolveMerger.int)))) || ((int != 0) && (!(org.eclipse.jgit.treewalk.NameConflictTreeWalk.idEqual(org.eclipse.jgit.merge.ResolveMerger.int, org.eclipse.jgit.merge.ResolveMerger.int))))) {\n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = org.eclipse.jgit.merge.ResolveMerger.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath(), org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.dircache.DirCacheEntry.int, 0, 0);\n        if (int == 0) {\n            if (org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator, org.eclipse.jgit.dircache.DirCacheEntry))\n                return false;\n            \n            if (org.eclipse.jgit.merge.ResolveMerger.org.eclipse.jgit.merge.ResolveMerger.nonTree(int)) {\n                if (org.eclipse.jgit.dircache.DirCacheEntry != null)\n                    java.util.Map<java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry>.put(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString(), org.eclipse.jgit.dircache.DirCacheEntry);\n                \n            } \n        } \n        java.util.List<java.lang.String>.add(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString());\n        java.util.Map<java.lang.String, org.eclipse.jgit.merge.MergeResult<? extends org.eclipse.jgit.diff.Sequence>>.put(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString(), org.eclipse.jgit.merge.ResolveMerger.contentMerge(org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser));\n    } \n} "},"status":-1},{"failures":[],"tindex":"5f421b34-4c3a-11e5-95e3-c9a70c7a1289","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1386","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"Could not rewind to upstream commit\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:371","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"mode starts with \\'0\\'\")"},"status":-2},{"failures":[],"tindex":"5f424245-4c3a-11e5-95e3-093b3a26b931","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.DepthGenerator:129","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.DepthWalk.Commit == null)\n    return null;\n"},"variableMap":{"c":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.MergeBaseGenerator:139","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null) {\n    org.eclipse.jgit.revwalk.RevWalk.org.eclipse.jgit.lib.ObjectReader.walkAdviceEnd();\n    return null;\n} "},"status":0},{"failures":[70,71,72,73,16,74,75,24,34,40],"tindex":"5f424246-4c3a-11e5-95e3-8bdb597a25d4","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:788","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.lang.String).append(\"\\n\")"},"variableMap":{"result":"sb","line":"conflictingPath"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeMessageFormatter:156","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('\\t').append(java.lang.String).append('\\n')"},"status":-1},{"failures":[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"5f424247-4c3a-11e5-95e3-3baa7de64979","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.FanoutBucket:126","type":"CtReturnImpl","sourcecode":"return null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:117","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.notes.InMemoryNoteBucket"},"status":-1},{"failures":[105,106,107,108,12],"tindex":"5f424248-4c3a-11e5-95e3-43deeff99c11","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:296","type":"CtIfImpl","sourcecode":"if (int > int)\n    throw new java.lang.IllegalArgumentException();\n"},"variableMap":{"idx":"stage","cardinality":"stage"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheBuilder:175","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.treewalk.TreeWalk.next())\n    org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheBuilder.toEntry(int, org.eclipse.jgit.treewalk.TreeWalk));"},"status":-1},{"failures":[109],"tindex":"5f426959-4c3a-11e5-95e3-9f5922d270fb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:410","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader).resolve(java.util.Set<org.eclipse.jgit.lib.ObjectId>, org.eclipse.jgit.lib.AbbreviatedObjectId, int)"},"status":-1},{"failures":[],"tindex":"5f42695a-4c3a-11e5-95e3-4bfd82f60323","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:104","type":"CtReturnImpl","sourcecode":"return !(org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:1188","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"5f42695b-4c3a-11e5-95e3-0f5dba7fdb1e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevWalk:476","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.assertNotStarted()"},"status":-1},{"failures":[],"tindex":"5f42695c-4c3a-11e5-95e3-ef5f175bb7a8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:95","type":"CtTryImpl","sourcecode":"try {\n    return org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.open(new java.io.ByteArrayInputStream(byte[]), null, org.eclipse.jgit.lib.AnyObjectId, org.eclipse.jgit.internal.storage.file.WindowCursor);\n} finally {\n    org.eclipse.jgit.internal.storage.file.WindowCursor.release();\n}"},"variableMap":{"this":"this","raw":"hdr","id":"id","wc":"wc"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:176","type":"CtIfImpl","sourcecode":"if ((long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())) || (java.io.File == null)) {\n    java.io.InputStream.reset();\n    org.eclipse.jgit.util.IO.skipFully(java.io.InputStream, int);\n    java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n    java.io.InputStream java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.inflate(java.io.InputStream, java.util.zip.Inflater);\n    byte[] byte[] = new byte[((int)(long))];\n    org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, byte[].int);\n    org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream, java.util.zip.Inflater, org.eclipse.jgit.lib.AnyObjectId, byte[]);\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n} "},"status":-2},{"failures":[],"tindex":"5f42906d-4c3a-11e5-95e3-9324af970d47","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.StartGenerator:132","type":"CtOperatorAssignmentImpl","sourcecode":"int |= (org.eclipse.jgit.revwalk.Generator.int) | (org.eclipse.jgit.revwalk.Generator.int)"},"variableMap":{"pendingOutputType":"aPtr","org.eclipse.jgit.revwalk.Generator.NEEDS_REWRITE":"aPtr","org.eclipse.jgit.revwalk.Generator.HAS_REWRITE":"aPtr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RawTextComparator:293","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[110,111,112,113,114,115,116,117,118,119,120],"tindex":"5f42906e-4c3a-11e5-95e3-0597969ac2e6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:306","type":"CtAssignmentImpl","sourcecode":"char = ':'"},"variableMap":{"separator":"sign"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.PersonIdent:277","type":"CtAssignmentImpl","sourcecode":"char = '+'"},"status":-1}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
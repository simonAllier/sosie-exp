{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":21,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain":9,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveTwoLevelHigherRelativeUrl":2,"org.eclipse.jgit.internal.storage.file.T0004_PackReaderTest.test004_lookupDeltifiedObject":13,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_Defaults":12,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":0,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveWorkingDirectoryRelativeUrl":3,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_FailsOver2GiB":8,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":6,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":7,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveInvalidParentUrl":1,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":22,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooFewFiles":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":20,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveOneLevelHigherRelativeUrl":4,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooSmallLimit":10,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":14,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveSameLevelRelativeUrl":5,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":18,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":17,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":19,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":16,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":15},"transformations":[{"failures":[],"tindex":"8e696416-4c7e-11e5-a79e-c95530a5c6c7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RawText:250","type":"CtIfImpl","sourcecode":"if (int == (-1))\n    break;\n"},"variableMap":{"n":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PacketLineIn:152","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, int)"},"status":-2},{"failures":[],"tindex":"8e698b27-4c7e-11e5-a79e-37fe55c9bd6c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.SideBandInputStream:194","type":"CtIfImpl","sourcecode":"if (0 <= int)\n    int = int;\nelse if (0 <= int)\n    int = int;\nelse\n    break;\n"},"variableMap":{"s":"cnt","lf":"length","cr":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:157","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (int[].int) ; int++) {\n    int int = int[][int];\n    if (int == 0)\n        continue;\n    \n    int int = 0;\n    do {\n        if ((++int) == (org.eclipse.jgit.internal.storage.pack.DeltaIndex.int)) {\n            org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.int[][int] = 0;\n            break;\n        } \n        int = org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.int[][int];\n    } while (int != 0 );\n    int += int;\n}"},"status":-2},{"failures":[],"tindex":"8e698b28-4c7e-11e5-a79e-4f70238a02c0","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:198","type":"CtReturnImpl","sourcecode":"return 21"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefComparator:103","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.Ref.getName().compareTo(org.eclipse.jgit.lib.Ref.getName())"},"status":-2},{"failures":[],"tindex":"8e698b29-4c7e-11e5-a79e-a7ed41dbac67","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:560","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevCommit:594","type":"CtReturnImpl","sourcecode":"return java.util.ArrayList<java.lang.String>"},"status":-2},{"failures":[],"tindex":"8e698b2a-4c7e-11e5-a79e-b500b61a01b1","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleWriter:201","type":"CtInvocationImpl","sourcecode":"java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.addAll(java.util.Map<java.lang.String, org.eclipse.jgit.lib.ObjectId>.values())"},"status":-2},{"failures":[],"tindex":"8e69b23b-4c7e-11e5-a79e-2fffe42b9c28","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:376","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.file.ObjectDirectory.openLooseFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor, org.eclipse.jgit.lib.AnyObjectId)"},"variableMap":{"this":"db","curs":"wc","objectId":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:104","type":"CtTryImpl","sourcecode":"try {\n    java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.buffer(java.io.InputStream);\n    java.io.InputStream.mark(20);\n    final byte[] byte[] = new byte[64];\n    org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, 2);\n    if (org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])) {\n        java.io.InputStream.reset();\n        java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n        java.io.InputStream java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.inflate(java.io.InputStream, java.util.zip.Inflater);\n        int int = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.readSome(java.io.InputStream, byte[], 0, 64);\n        if (int < 5)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        final org.eclipse.jgit.util.MutableInteger org.eclipse.jgit.util.MutableInteger = new org.eclipse.jgit.util.MutableInteger();\n        int int = org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId, byte[], ((byte)(' ')), org.eclipse.jgit.util.MutableInteger);\n        long long = org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[], org.eclipse.jgit.util.MutableInteger.int, org.eclipse.jgit.util.MutableInteger);\n        if (long < 0)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        if ((byte[][(org.eclipse.jgit.util.MutableInteger.int)++]) != 0)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        if ((java.io.File == null) && ((java.lang.Integer.int) < long)) {\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit = new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit.setObjectId(org.eclipse.jgit.lib.AnyObjectId);\n            throw org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n        } \n        if ((long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())) || (java.io.File == null)) {\n            byte[] byte[] = new byte[((int)(long))];\n            int int = int - (org.eclipse.jgit.util.MutableInteger.int);\n            if (int > 0)\n                java.lang.System.arraycopy(byte[], org.eclipse.jgit.util.MutableInteger.int, byte[], 0, int);\n            \n            org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], int, ((byte[].int) - int));\n            org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream, java.util.zip.Inflater, org.eclipse.jgit.lib.AnyObjectId, byte[]);\n            return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n        } \n        return new org.eclipse.jgit.internal.storage.file.UnpackedObject.LargeObject(int , long , java.io.File , org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n    } else {\n        org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.readSome(java.io.InputStream, byte[], 2, 18);\n        int int = (byte[][0]) & 255;\n        int int = (int >> 4) & 7;\n        long long = int & 15;\n        int int = 4;\n        int int = 1;\n        while ((int & 128) != 0) {\n            int = (byte[][int++]) & 255;\n            long += ((long)((int & 127))) << int;\n            int += 7;\n        }\n        switch (int) {\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n                break;\n            default :\n                throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        }\n        if ((java.io.File == null) && ((java.lang.Integer.int) < long)) {\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit = new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit.setObjectId(org.eclipse.jgit.lib.AnyObjectId);\n            throw org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n        } \n        if ((long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())) || (java.io.File == null)) {\n            java.io.InputStream.reset();\n            org.eclipse.jgit.util.IO.skipFully(java.io.InputStream, int);\n            java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n            java.io.InputStream java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.inflate(java.io.InputStream, java.util.zip.Inflater);\n            byte[] byte[] = new byte[((int)(long))];\n            org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, byte[].int);\n            org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream, java.util.zip.Inflater, org.eclipse.jgit.lib.AnyObjectId, byte[]);\n            return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n        } \n        return new org.eclipse.jgit.internal.storage.file.UnpackedObject.LargeObject(int , long , java.io.File , org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n    }\n} catch (java.util.zip.ZipException badStream) {\n    throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6],"tindex":"8e69d94c-4c7e-11e5-a79e-a98ffd11e7c4","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:233","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"PUBLIC_READ\", java.lang.String))\n    java.lang.String = \"public-read\";\nelse\n    throw new java.lang.IllegalArgumentException((\"Invalid acl: \" + java.lang.String));\n"},"variableMap":{"acl":"remoteUrl","pacl":"remoteUrl"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:286","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = org.eclipse.jgit.lib.Repository.getWorkTree().getAbsolutePath();\n    if ('\\\\' == (java.io.File.char))\n        java.lang.String = java.lang.String.replace('\\\\', '/');\n    \n} "},"status":-1},{"failures":[7],"tindex":"8e69d94d-4c7e-11e5-a79e-b9115616c1ed","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.FetchProcess:186","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.FetchProcess.reopenConnection()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:166","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.FetchProcess.closeConnection(org.eclipse.jgit.transport.FetchResult)"},"status":-1},{"failures":[],"tindex":"8e69d94e-4c7e-11e5-a79e-f17a78b20d8c","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.URIish:714","type":"CtIfImpl","sourcecode":"if ((java.lang.String[].int) == 0)\n    throw new java.lang.IllegalArgumentException();\n"},"variableMap":{"elements":"lines","length":"firstFooterLine"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeMessageFormatter:145","type":"CtIfImpl","sourcecode":"if (int < (java.lang.String[].int))\n    java.lang.StringBuilder.append('\\n');\n"},"status":0},{"failures":[],"tindex":"8e69d94f-4c7e-11e5-a79e-775778e8fc90","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:310","type":"CtReturnImpl","sourcecode":"return java.lang.Math.max(int, int)"},"variableMap":{"next":"matchPos","minCommits":"matchPos"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawSubStringPattern:112","type":"CtReturnImpl","sourcecode":"return int"},"status":0},{"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"tindex":"8e69d950-4c7e-11e5-a79e-79d7b20fa483","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:786","type":"CtContinueImpl","sourcecode":"continue SEARCH"},"status":-1},{"failures":[],"tindex":"8e69d951-4c7e-11e5-a79e-0f5cd3f388b6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.AbstractTreeIterator:280","type":"CtWhileImpl","sourcecode":"while ((int < int) && (int > 0))\n    int <<= 1;"},"variableMap":{"newCapacity":"off","capacity":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.TemporaryBuffer:119","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    org.eclipse.jgit.util.TemporaryBuffer.Block org.eclipse.jgit.util.TemporaryBuffer.Block = org.eclipse.jgit.util.TemporaryBuffer.last();\n    if (org.eclipse.jgit.util.TemporaryBuffer.Block.isFull()) {\n        if (org.eclipse.jgit.util.TemporaryBuffer.reachedInCoreLimit())\n            break;\n        \n        org.eclipse.jgit.util.TemporaryBuffer.Block = new org.eclipse.jgit.util.TemporaryBuffer.Block();\n        java.util.ArrayList<org.eclipse.jgit.util.TemporaryBuffer.Block>.add(org.eclipse.jgit.util.TemporaryBuffer.Block);\n    } \n    final int int = java.lang.Math.min(((org.eclipse.jgit.util.TemporaryBuffer.Block.byte[].int) - (org.eclipse.jgit.util.TemporaryBuffer.Block.int)), int);\n    java.lang.System.arraycopy(byte[], int, org.eclipse.jgit.util.TemporaryBuffer.Block.byte[], org.eclipse.jgit.util.TemporaryBuffer.Block.int, int);\n    org.eclipse.jgit.util.TemporaryBuffer.Block.int += int;\n    int -= int;\n    int += int;\n}"},"status":-2},{"failures":[],"tindex":"8e6a0062-4c7e-11e5-a79e-cd52588f1085","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.BaseDirCacheEditor:111","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry[] = org.eclipse.jgit.dircache.DirCacheEntry[]"},"variableMap":{"entries":"org.eclipse.jgit.dircache.DirCache.NO_ENTRIES","n":"sortedEntries"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:442","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry[] = org.eclipse.jgit.dircache.DirCache.org.eclipse.jgit.dircache.DirCacheEntry[]"},"status":-2},{"failures":[],"tindex":"8e6a0063-4c7e-11e5-a79e-efecfaa2ee66","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.FileTreeIterator:145","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.treewalk.WorkingTreeIterator.Entry[]"},"variableMap":{"r":"org.eclipse.jgit.treewalk.WorkingTreeIterator.EOF"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.FileTreeIterator:141","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.treewalk.WorkingTreeIterator.org.eclipse.jgit.treewalk.WorkingTreeIterator.Entry[]"},"status":0},{"failures":[],"tindex":"8e6a0064-4c7e-11e5-a79e-bb6c5c2690fe","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:272","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.dircache.DirCacheIterator.byte[])) == (byte[].int))\n    org.eclipse.jgit.attributes.AttributesNode = new org.eclipse.jgit.dircache.DirCacheIterator.LazyLoadingAttributesNode(org.eclipse.jgit.dircache.DirCacheEntry.getObjectId());\n"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
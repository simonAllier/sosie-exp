{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":99,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveTwoLevelHigherRelativeUrl":16,"org.eclipse.jgit.util.ReadLinesTest.testReadLines_LF":81,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":96,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":172,"org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testWorkdirIsParent_CreateRepositoryFromGitDirOnlyWithBareConfigFalse":70,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitsEmptyTree":88,"org.eclipse.jgit.notes.NoteMapTest.testGetCachedBytes":77,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":121,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":168,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithNoHeadInSubmodule":22,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":116,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testUTF8withoutBOM":1,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":138,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":50,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":126,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":127,"org.eclipse.jgit.submodule.SubmoduleWalkTest.indexWithGitmodules":13,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitTwoTreeTwoBlob":86,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":120,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveSameLevelRelativeUrl":20,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":92,"org.eclipse.jgit.api.CommitCommandTest.commitAfterSquashMerge":57,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":125,"org.eclipse.jgit.internal.storage.file.GcTagTest.lightweightTag_objectNotPruned":155,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":111,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":31,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":106,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":89,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test008_FailOnWrongVersion":75,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":140,"org.eclipse.jgit.submodule.SubmoduleInitTest.repositoryWithUninitializedModule":18,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":104,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":113,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":124,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testLeadingWhitespaces":0,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":119,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":171,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Binary":37,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":60,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":129,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":137,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":58,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test006_ReadUglyConfig":73,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":64,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":51,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":67,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveInvalidParentUrl":15,"org.eclipse.jgit.diff.RawTextTest.testWriteLine1":28,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":166,"org.eclipse.jgit.internal.storage.file.GcTagTest.annotatedTag_objectNotPruned":154,"org.eclipse.jgit.diff.RawTextTest.testWriteLine3":30,"org.eclipse.jgit.submodule.SubmoduleWalkTest.treeIdWithGitmodules":12,"org.eclipse.jgit.diff.RawTextTest.testWriteLine2":29,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":32,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":167,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":95,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":160,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":165,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Delete":38,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":164,"org.eclipse.jgit.lib.T0002_TreeTest.test007_manyFileLookup":8,"org.eclipse.jgit.util.ReadLinesTest.testReadLines_mixed":80,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":93,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Modify":34,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":91,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":159,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":143,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":142,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":157,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testSystemEncoding":2,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_Add":36,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":174,"org.eclipse.jgit.submodule.SubmoduleWalkTest.testTreeIteratorWithGitmodules":14,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveWorkingDirectoryRelativeUrl":17,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFanout2_38":78,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":112,"org.eclipse.jgit.api.AddCommandTest.testExecutableRetention":48,"org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testNotBare_CreateRepositoryFromGitDirOnlyWithBareConfigFalse":72,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":123,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":66,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":61,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":65,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.branch_historyNotPruned":156,"org.eclipse.jgit.internal.storage.file.FileRepositoryBuilderTest.unknownRepositoryFormatVersion":69,"org.eclipse.jgit.api.DescribeCommandTest.t1sameDepthT2":40,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":53,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":101,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":150,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":147,"org.eclipse.jgit.lib.T0002_TreeTest.test004_addTree":5,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":107,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":47,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithInitializedSubmodule":24,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromFallback":63,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":98,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":131,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":117,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":151,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":176,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":130,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":49,"org.eclipse.jgit.revwalk.ObjectWalkTest.testEmptyTreeCorruption":87,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":114,"org.eclipse.jgit.revwalk.ObjectWalkTest.testCull":83,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":27,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":108,"org.eclipse.jgit.lib.T0002_TreeTest.test005_addRecursiveTree":7,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":54,"org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testNotBare_CreateRepositoryFromGitDirOnlyWithWorktreeConfig":71,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":152,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":149,"org.eclipse.jgit.lib.SquashCommitMsgTest.testReadWriteMergeMsg":4,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":146,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_relative_workdirconfig":76,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":175,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":158,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":56,"org.eclipse.jgit.internal.storage.file.FileRepositoryBuilderTest.invalidRepositoryFormatVersion":68,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":90,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromInserterSmallObjects":62,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_absolute_workdirconfig":74,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":55,"org.eclipse.jgit.lib.T0002_TreeTest.test005_addRecursiveFile":6,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":33,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":173,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":145,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":102,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":103,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":100,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":128,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveOneLevelHigherRelativeUrl":19,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree1":84,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree2":85,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":110,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":148,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":46,"org.eclipse.jgit.lib.MergeHeadMsgTest.testReadWriteMergeMsg":3,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":136,"org.eclipse.jgit.util.ReadLinesTest.testReadLines_endLF":79,"org.eclipse.jgit.api.DescribeCommandTest.testDescribeBranch":39,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":144,"org.eclipse.jgit.lib.T0002_TreeTest.test006_addDeepTree":10,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithDifferentRevCheckedOutSubmodule":25,"org.eclipse.jgit.diff.DiffFormatterTest.testCreateFileHeader_GitLink":35,"org.eclipse.jgit.lib.T0002_TreeTest.test002_addFile":9,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":105,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":139,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithNoSubmoduleRepository":21,"org.eclipse.jgit.api.CommitCommandTest.testExecutableRetention":59,"org.eclipse.jgit.revwalk.ObjectWalkTest.testOneCommitOneTreeTwoBlob":82,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":115,"org.eclipse.jgit.api.DescribeCommandTest.t1nearerT2":42,"org.eclipse.jgit.api.DescribeCommandTest.t1DominatesT2":41,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":163,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":170,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":45,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":162,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":161,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":133,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":122,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":134,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":169,"org.eclipse.jgit.submodule.SubmoduleStatusTest.repositoryWithUninitializedSubmodule":23,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":178,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":52,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":11,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":179,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":118,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":97,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":153,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":43,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":94,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":135,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":141,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":109,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":177,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":26,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":132},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"tindex":"eb643102-4c4e-11e5-9059-f189a8a9239f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RawText:295","type":"CtReturnImpl","sourcecode":"return \"\\n\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:847","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[], 0, byte[].int)"},"status":-1},{"failures":[78],"tindex":"eb645813-4c4e-11e5-9059-8f4e47d08ebb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.FanoutBucket:300","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.notes.NonNoteEntry.format(org.eclipse.jgit.lib.TreeFormatter)"},"status":-1},{"failures":[],"tindex":"eb645814-4c4e-11e5-9059-7f78f11c3502","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:852","type":"CtTryImpl","sourcecode":"try {\n    java.util.zip.GZIPOutputStream java.util.zip.GZIPOutputStream = new java.util.zip.GZIPOutputStream(org.eclipse.jgit.util.TemporaryBuffer);\n    org.eclipse.jgit.transport.TransportHttp.Service.HttpOutputStream.writeTo(java.util.zip.GZIPOutputStream, null);\n    java.util.zip.GZIPOutputStream.close();\n    if ((org.eclipse.jgit.transport.TransportHttp.Service.HttpOutputStream.length()) < (org.eclipse.jgit.util.TemporaryBuffer.length()))\n        org.eclipse.jgit.util.TemporaryBuffer = org.eclipse.jgit.transport.TransportHttp.Service.HttpOutputStream;\n    \n} catch (java.io.IOException err) {\n    org.eclipse.jgit.util.TemporaryBuffer = org.eclipse.jgit.transport.TransportHttp.Service.HttpOutputStream;\n}"},"variableMap":{"buf":"dst","out":"dst"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.TimeoutOutputStream:123","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.util.io.TimeoutOutputStream.beginWrite();\n    java.io.OutputStream.flush();\n} catch (java.io.InterruptedIOException e) {\n    throw org.eclipse.jgit.util.io.TimeoutOutputStream.writeTimedOut();\n} finally {\n    org.eclipse.jgit.util.io.TimeoutOutputStream.endWrite();\n}"},"status":-2},{"failures":[],"tindex":"eb645815-4c4e-11e5-9059-f74f47e3d73a","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:310","type":"CtUnaryOperatorImpl","sourcecode":"~((int & (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)) << (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int))"},"variableMap":{"org.eclipse.jgit.internal.storage.pack.ObjectToPack.EXT_SHIFT":"blkPtr","flag":"org.eclipse.jgit.internal.storage.pack.DeltaIndex.BLKSZ","org.eclipse.jgit.internal.storage.pack.ObjectToPack.EXT_MASK":"blkPtr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:371","type":"CtAssignmentImpl","sourcecode":"int = int + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.int)"},"status":-2},{"failures":[],"tindex":"eb647f26-4c4e-11e5-9059-a7efa98e41c3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:297","type":"CtLocalVariableImpl","sourcecode":"char char = '/'"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.fnmatch.FileNameMatcher:357","type":"CtLocalVariableImpl","sourcecode":"final char char = java.lang.String.charAt(int)"},"status":-2},{"failures":[],"tindex":"eb647f27-4c4e-11e5-9059-110222989714","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:376","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.file.ObjectDirectory.openLooseFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor, org.eclipse.jgit.lib.AnyObjectId)"},"variableMap":{"this":"db","curs":"wc","objectId":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:104","type":"CtTryImpl","sourcecode":"try {\n    java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.buffer(java.io.InputStream);\n    java.io.InputStream.mark(20);\n    final byte[] byte[] = new byte[64];\n    org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, 2);\n    if (org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])) {\n        java.io.InputStream.reset();\n        java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n        java.io.InputStream java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.inflate(java.io.InputStream, java.util.zip.Inflater);\n        int int = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.readSome(java.io.InputStream, byte[], 0, 64);\n        if (int < 5)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        final org.eclipse.jgit.util.MutableInteger org.eclipse.jgit.util.MutableInteger = new org.eclipse.jgit.util.MutableInteger();\n        int int = org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId, byte[], ((byte)(' ')), org.eclipse.jgit.util.MutableInteger);\n        long long = org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[], org.eclipse.jgit.util.MutableInteger.int, org.eclipse.jgit.util.MutableInteger);\n        if (long < 0)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        if ((byte[][(org.eclipse.jgit.util.MutableInteger.int)++]) != 0)\n            throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        if ((java.io.File == null) && ((java.lang.Integer.int) < long)) {\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit = new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit.setObjectId(org.eclipse.jgit.lib.AnyObjectId);\n            throw org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n        } \n        if ((long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())) || (java.io.File == null)) {\n            byte[] byte[] = new byte[((int)(long))];\n            int int = int - (org.eclipse.jgit.util.MutableInteger.int);\n            if (int > 0)\n                java.lang.System.arraycopy(byte[], org.eclipse.jgit.util.MutableInteger.int, byte[], 0, int);\n            \n            org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], int, ((byte[].int) - int));\n            org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream, java.util.zip.Inflater, org.eclipse.jgit.lib.AnyObjectId, byte[]);\n            return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n        } \n        return new org.eclipse.jgit.internal.storage.file.UnpackedObject.LargeObject(int , long , java.io.File , org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n    } else {\n        org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.readSome(java.io.InputStream, byte[], 2, 18);\n        int int = (byte[][0]) & 255;\n        int int = (int >> 4) & 7;\n        long long = int & 15;\n        int int = 4;\n        int int = 1;\n        while ((int & 128) != 0) {\n            int = (byte[][int++]) & 255;\n            long += ((long)((int & 127))) << int;\n            int += 7;\n        }\n        switch (int) {\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n                break;\n            default :\n                throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        }\n        if ((java.io.File == null) && ((java.lang.Integer.int) < long)) {\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit = new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n            org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit.setObjectId(org.eclipse.jgit.lib.AnyObjectId);\n            throw org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit;\n        } \n        if ((long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())) || (java.io.File == null)) {\n            java.io.InputStream.reset();\n            org.eclipse.jgit.util.IO.skipFully(java.io.InputStream, int);\n            java.util.zip.Inflater java.util.zip.Inflater = org.eclipse.jgit.internal.storage.file.WindowCursor.inflater();\n            java.io.InputStream java.io.InputStream = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.inflate(java.io.InputStream, java.util.zip.Inflater);\n            byte[] byte[] = new byte[((int)(long))];\n            org.eclipse.jgit.util.IO.readFully(java.io.InputStream, byte[], 0, byte[].int);\n            org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream, java.util.zip.Inflater, org.eclipse.jgit.lib.AnyObjectId, byte[]);\n            return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n        } \n        return new org.eclipse.jgit.internal.storage.file.UnpackedObject.LargeObject(int , long , java.io.File , org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n    }\n} catch (java.util.zip.ZipException badStream) {\n    throw new org.eclipse.jgit.errors.CorruptObjectException(org.eclipse.jgit.lib.AnyObjectId , org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n}"},"status":-2},{"failures":[79,80,81],"tindex":"eb64a638-4c4e-11e5-9059-8f5997d964f6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.IO:352","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.setLength(0)"},"status":-1},{"failures":[],"tindex":"eb64a639-4c4e-11e5-9059-4db926f19a72","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BasePackPushConnection:200","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>)"},"variableMap":{"this":"this","refUpdates":"refUpdates"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BasePackPushConnection:197","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.BasePackPushConnection.writePack(java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>, org.eclipse.jgit.lib.ProgressMonitor)"},"status":-2},{"failures":[],"tindex":"eb64a63a-4c4e-11e5-9059-7b58665ba48c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:256","type":"CtLocalVariableImpl","sourcecode":"int int = 128"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandInputStream:138","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[82,83,84,85,86,87,88,89,90,91,92,93,94,95,26,27,11,31,32,33,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,43,123,44,124,125,126,127,128,129,130,131,45,132,133,134,135,136,46,137,138,139,47,140,141,142,143,144,58,60,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],"tindex":"eb64a63b-4c4e-11e5-9059-19e32b77a46d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revplot.PlotCommit:127","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revplot.PlotCommit.getId().equals(org.eclipse.jgit.revplot.PlotCommit.getId()))\n    return ;\n"},"variableMap":{"c":"c","pc":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.BlockObjQueue:60","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.BlockObjQueue.Block == null) {\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.BlockFreeList.newBlock();\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block.add(org.eclipse.jgit.revwalk.RevObject);\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block;\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block;\n    return ;\n} else if (org.eclipse.jgit.revwalk.BlockObjQueue.Block.isFull()) {\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.BlockFreeList.newBlock();\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block.org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block;\n    org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block;\n} "},"status":-1},{"failures":[],"tindex":"eb64cd4c-4c4e-11e5-9059-edd1b926a19c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectInserter:266","type":"CtThrowImpl","sourcecode":"throw new java.io.EOFException(\"Unexpected end of input\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:657","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid name \\'PRN\\'\")"},"status":-2},{"failures":[],"tindex":"eb64cd4d-4c4e-11e5-9059-9f140a182e34","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:317","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long, java.util.zip.Inflater)"},"status":0},{"failures":[],"tindex":"eb64cd4e-4c4e-11e5-9059-41124ffa60fb","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:125","type":"CtLocalVariableImpl","sourcecode":"java.io.File java.io.File = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:870","type":"CtLocalVariableImpl","sourcecode":"final java.io.File java.io.File = java.io.File.getParentFile()"},"status":-2},{"failures":[],"tindex":"eb64cd4f-4c4e-11e5-9059-cbf879b59b43","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:795","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackFile.close()"},"status":-1}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
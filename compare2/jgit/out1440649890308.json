{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":16,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":29,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":47,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":53,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":13,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFoldersWithoutFastForward":49,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":81,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":40,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":87,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":30,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUntrackedFile":79,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":6,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":1,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":31,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":86,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":76,"org.eclipse.jgit.ignore.IgnoreMatcherTest.testNameOnlyMatches":98,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":5,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":26,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":77,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":22,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":57,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":80,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":75,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":74,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":8,"org.eclipse.jgit.merge.ResolveMergerTest.mergeWithCrlfInWT":21,"org.eclipse.jgit.treewalk.TreeWalkBasicDiffTest.testMissingSubtree_DetectFileAdded_FileModified":89,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":59,"org.eclipse.jgit.ignore.IgnoreMatcherTest.testFileNameWildcards":96,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":43,"org.eclipse.jgit.merge.ResolveMergerTest.checkLockedFilesToBeDeleted":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":42,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":4,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":66,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":11,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":72,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":14,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":24,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":85,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":71,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":73,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":61,"org.eclipse.jgit.lib.T0002_TreeTest.test008_SubtreeInternalSorting":92,"org.eclipse.jgit.lib.T0002_TreeTest.test004_addTree":90,"org.eclipse.jgit.diff.SimilarityIndexTest.testIndexingSmallObject":94,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":39,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":52,"org.eclipse.jgit.revwalk.ObjectWalkTest.testEmptyTreeCorruption":88,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_SmallBlocks3":95,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":56,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":60,"org.eclipse.jgit.lib.T0002_TreeTest.test005_addRecursiveTree":91,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":25,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":10,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":23,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":64,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":7,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":62,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":67,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":54,"org.eclipse.jgit.merge.ResolveMergerTest.failingDeleteOfDirectoryWithUntrackedContent":18,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":46,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":68,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":9,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":63,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":12,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":70,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":3,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":44,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":37,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":51,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":36,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":69,"org.eclipse.jgit.lib.T0002_TreeTest.test006_addDeepTree":93,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":38,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":0,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":48,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":84,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommitsOnDifferentBranches":82,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":20,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":65,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":32,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":34,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":28,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":35,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":27,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":58,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":78,"org.eclipse.jgit.ignore.IgnoreMatcherTest.testTargetWithoutLeadingSlash":97,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":41,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":83,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":19,"org.eclipse.jgit.api.RevertCommandTest.testRevert":45,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":33},"transformations":[{"failures":[],"tindex":"7de9f4ff-4c74-11e5-a32d-ff3851b80321","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:283","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 32"},"variableMap":{"cmd":"nDeleted"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.HunkHeader:273","type":"CtUnaryOperatorImpl","sourcecode":"(org.eclipse.jgit.patch.HunkHeader.OldImage.int)++"},"status":-2},{"failures":[],"tindex":"7def4c30-4c74-11e5-a32d-a11527e1c77d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:612","type":"CtIfImpl","sourcecode":"if (java.io.OutputStream != null)\n    java.io.OutputStream = java.io.OutputStream;\n"},"variableMap":{"messages":"overflow","msgOut":"overflow"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.TemporaryBuffer:332","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.close()"},"status":-2},{"failures":[],"tindex":"7df16f11-4c74-11e5-a32d-778fe4d6acdc","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.TeeInputStream:131","type":"CtIfImpl","sourcecode":"if ((byte[]) == null)\n    byte[] = new byte[2048];\n"},"variableMap":{"skipBuffer":"org.eclipse.jgit.patch.FileHeader.COPY_FROM"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:410","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseOldName(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewName(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else {\n    break;\n}"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"7df4f182-4c74-11e5-a32d-c1db2450c020","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:187","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry = null"},"variableMap":{"currentEntry":"ourDce"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:476","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry = org.eclipse.jgit.dircache.DirCacheBuildIterator.getDirCacheEntry()"},"status":-1},{"failures":[],"tindex":"7df51893-4c74-11e5-a32d-1b9c2d71618f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.AddCommand:238","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"update":"refLogIncludeResult"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefUpdate:388","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":0},{"failures":[],"tindex":"7df69f34-4c74-11e5-a32d-2f4ac411b80b","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.StartGenerator:115","type":"CtIfImpl","sourcecode":"if (boolean && (!boolean)) {\n    boolean = false;\n} "},"variableMap":{"boundary":"exact","uninteresting":"exact"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CleanCommand:148","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>)\n    if ((boolean && (java.lang.String.equals(java.lang.String))) || ((!boolean) && (java.lang.String.startsWith(java.lang.String)))) {\n        java.util.Set<java.lang.String>.remove(java.lang.String);\n        break;\n    } "},"status":0},{"failures":[],"tindex":"7e00ff75-4c74-11e5-a32d-613221585743","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:550","type":"CtOperatorAssignmentImpl","sourcecode":"int += 3"},"variableMap":{"ptr":"entrySpan"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheTree:482","type":"CtOperatorAssignmentImpl","sourcecode":"int += org.eclipse.jgit.dircache.DirCacheTree.int"},"status":-2},{"failures":[],"tindex":"7e0656a6-4c74-11e5-a32d-db7cfd9af3ca","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:254","type":"CtLocalVariableImpl","sourcecode":"long long = 12"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:475","type":"CtLocalVariableImpl","sourcecode":"long long = org.eclipse.jgit.internal.storage.file.ObjectDirectory.getLooseObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor, org.eclipse.jgit.lib.AnyObjectId)"},"status":-2},{"failures":[],"tindex":"7e076817-4c74-11e5-a32d-4bf4355b89f4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportGitSsh:212","type":"CtReturnImpl","sourcecode":"return (org.eclipse.jgit.util.SystemReader.getInstance().getenv(\"GIT_SSH\")) != null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:261","type":"CtReturnImpl","sourcecode":"return false"},"status":0},{"failures":[],"tindex":"7e07b638-4c74-11e5-a32d-d588c90ec5fc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:246","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.deleteCharAt(((java.lang.StringBuilder.length()) - 1))"},"variableMap":{"sb":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:221","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"tag \")"},"status":0},{"failures":[88,89,90,91,92,93],"tindex":"7e07b639-4c74-11e5-a32d-0ff6f0562998","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:509","type":"CtAssignmentImpl","sourcecode":"int = (int) + int"},"variableMap":{"pathLen":"slash","pathOffset":"offset","nameLen":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:337","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.lib.Tree.org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[], byte[], ((byte)('/')), int, int)"},"status":-1},{"failures":[94],"tindex":"7e0c230a-4c74-11e5-a32d-15845a2a510e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.LeafBucket:95","type":"CtIfImpl","sourcecode":"if (int < 0)\n    int = int;\nelse if (int == 0)\n    return int;\nelse\n    int = int + 1;\n"},"variableMap":{"high":"idSize","low":"key","cmp":"idSize","mid":"idSize"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityIndex:290","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (int) ; int++)\n    if (org.eclipse.jgit.diff.SimilarityIndex.(key(int)) == int)\n        return int;\n    "},"status":-1},{"failures":[95],"tindex":"7e0c4a1b-4c74-11e5-a32d-478ba8034e95","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandOutputStream:156","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":-1},{"failures":[96,97,98],"tindex":"7e0c4a1c-4c74-11e5-a32d-616c92a55f54","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:104","type":"CtReturnImpl","sourcecode":"return !(org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.IgnoreRule:224","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.fnmatch.FileNameMatcher.isMatch()) && org.eclipse.jgit.ignore.IgnoreRule.(doesMatchDirectoryExpectations(boolean, int, java.lang.String[].int)))\n    return true;\n"},"status":-1},{"failures":[],"tindex":"7e0c712d-4c74-11e5-a32d-5bc4b4d8555d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.TreeWalk:914","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.treewalk.AbstractTreeIterator = org.eclipse.jgit.treewalk.AbstractTreeIterator.createEmptyTreeIterator()"},"variableMap":{"t":"t","n":"t"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.NameConflictTreeWalk:188","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.treewalk.AbstractTreeIterator = org.eclipse.jgit.treewalk.AbstractTreeIterator"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":17,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":87,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":81,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":37,"org.eclipse.jgit.api.StashCreateCommandTest.workingDirectoryModifyInSubfolder":104,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":43,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":20,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFoldersWithoutFastForward":39,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":88,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":73,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":32,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":79,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":98,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":82,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUntrackedFile":71,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":11,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":3,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":45,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":78,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":83,"org.eclipse.jgit.ignore.IgnoreMatcherTest.testNameOnlyMatches":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":68,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":10,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":84,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":69,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":47,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":95,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":72,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":40,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":67,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":66,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":13,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":49,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":35,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":34,"org.eclipse.jgit.merge.ResolveMergerTest.checkLockedFilesToBeDeleted":86,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_DirPath2_NoParentRewriting":103,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":8,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":56,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":18,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":64,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":21,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":57,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":77,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":63,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":65,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":51,"org.eclipse.jgit.ignore.IgnoreMatcherTest.testParentDirectoryGitIgnores":0,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":31,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":96,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":42,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":46,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":50,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":58,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":6,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":15,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":54,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath3_NoParentRewriting":100,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath1_NoParentRewriting":102,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":94,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":12,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":52,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":59,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":44,"org.eclipse.jgit.merge.ResolveMergerTest.failingDeleteOfDirectoryWithUntrackedContent":89,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":36,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":60,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":14,"org.eclipse.jgit.revwalk.RevWalkPathFilter1Test.testStringOfPearls_FilePath2_NoParentRewriting":101,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":53,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":19,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":62,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":5,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":22,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":29,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":41,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":28,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":61,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":7,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":30,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":2,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":38,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":76,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommitsOnDifferentBranches":74,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":55,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":93,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":16,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":24,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":26,"org.eclipse.jgit.notes.NoteMapTest.testEditFanout2_38":99,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":27,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":80,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":85,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":48,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":70,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":90,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":97,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesInCore":92,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":33,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":75,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":91,"org.eclipse.jgit.api.RevertCommandTest.testRevert":23,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":25},"transformations":[{"failures":[0,1],"tindex":"2f4083bc-4c2b-11e5-b38e-854aba158a18","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:220","type":"CtIfImpl","sourcecode":"if ((boolean) && (!boolean))\n    return false;\n"},"variableMap":{"dirOnly":"nameOnly","assumeDirectory":"nameOnly"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.IgnoreRule:194","type":"CtIfImpl","sourcecode":"if (boolean) {\n    final java.lang.String[] java.lang.String[] = java.lang.String.split(\"/\");\n    for (int int = 0 ; int < (java.lang.String[].int) ; int++) {\n        final java.lang.String java.lang.String = java.lang.String[][int];\n        if ((java.lang.String.length()) == 0)\n            continue;\n        \n        if ((java.lang.String.equals(java.lang.String)) && org.eclipse.jgit.ignore.IgnoreRule.(doesMatchDirectoryExpectations(boolean, int, java.lang.String[].int)))\n            return true;\n        \n    }\n} "},"status":-1},{"failures":[],"tindex":"2f40aacd-4c2b-11e5-b38e-9797a7cbdb0f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:335","type":"CtIfImpl","sourcecode":"if ((1 << int) < int)\n    int++;\n"},"variableMap":{"sz":"nChildren","bits":"nChildren"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:132","type":"CtIfImpl","sourcecode":"if ((int == 1) && ((org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotCommit[][0].getParentCount()) < 2)) {\n    @java.lang.SuppressWarnings(value = \"unchecked\")\n    final org.eclipse.jgit.revplot.PlotCommit<L> org.eclipse.jgit.revplot.PlotCommit<L> = org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotCommit[][0];\n    org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane = org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane;\n    java.lang.Integer java.lang.Integer = java.util.HashMap<org.eclipse.jgit.revplot.PlotLane, java.lang.Integer>.get(org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane);\n    java.lang.Integer = java.lang.Integer.valueOf(((java.lang.Integer.intValue()) + 1));\n    java.util.HashMap<org.eclipse.jgit.revplot.PlotLane, java.lang.Integer>.put(org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane, java.lang.Integer);\n} else {\n    org.eclipse.jgit.revplot.PlotLane org.eclipse.jgit.revplot.PlotLane = null;\n    org.eclipse.jgit.revplot.PlotCommit org.eclipse.jgit.revplot.PlotCommit = null;\n    int int = -1;\n    for (int int = 0 ; int < int ; int++) {\n        @java.lang.SuppressWarnings(value = \"unchecked\")\n        final org.eclipse.jgit.revplot.PlotCommit<L> org.eclipse.jgit.revplot.PlotCommit<L> = org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotCommit[][int];\n        if ((org.eclipse.jgit.revplot.PlotCommit<L>.getParent(0)) == org.eclipse.jgit.revplot.PlotCommit<L>) {\n            java.lang.Integer java.lang.Integer = java.util.HashMap<org.eclipse.jgit.revplot.PlotLane, java.lang.Integer>.get(org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane);\n            if ((java.lang.Integer.intValue()) > int) {\n                org.eclipse.jgit.revplot.PlotLane = org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane;\n                org.eclipse.jgit.revplot.PlotCommit = org.eclipse.jgit.revplot.PlotCommit<L>;\n                int = java.lang.Integer.intValue();\n            } \n        } \n    }\n    if (org.eclipse.jgit.revplot.PlotLane != null) {\n        org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane = org.eclipse.jgit.revplot.PlotLane;\n        java.util.HashMap<org.eclipse.jgit.revplot.PlotLane, java.lang.Integer>.put(org.eclipse.jgit.revplot.PlotLane, java.lang.Integer.valueOf((int + 1)));\n        org.eclipse.jgit.revplot.PlotCommitList<L>.handleBlockedLanes(int, org.eclipse.jgit.revplot.PlotCommit<L>, org.eclipse.jgit.revplot.PlotCommit);\n    } else {\n        org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane = org.eclipse.jgit.revplot.PlotCommitList<L>.nextFreeLane();\n        org.eclipse.jgit.revplot.PlotCommitList<L>.handleBlockedLanes(int, org.eclipse.jgit.revplot.PlotCommit<L>, null);\n    }\n    for (int int = 0 ; int < int ; int++) {\n        final org.eclipse.jgit.revplot.PlotCommit org.eclipse.jgit.revplot.PlotCommit = org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotCommit[][int];\n        org.eclipse.jgit.revplot.PlotCommit org.eclipse.jgit.revplot.PlotCommit = ((org.eclipse.jgit.revplot.PlotCommit)(org.eclipse.jgit.revplot.PlotCommit.getParent(0)));\n        if (((org.eclipse.jgit.revplot.PlotCommit.org.eclipse.jgit.revplot.PlotLane) != null) && ((org.eclipse.jgit.revplot.PlotCommit.org.eclipse.jgit.revplot.PlotLane) != (org.eclipse.jgit.revplot.PlotCommit.org.eclipse.jgit.revplot.PlotLane)))\n            org.eclipse.jgit.revplot.PlotCommitList<L>.closeLane(org.eclipse.jgit.revplot.PlotCommit.org.eclipse.jgit.revplot.PlotLane);\n        \n    }\n}"},"status":-2},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],"tindex":"2f40d1de-4c2b-11e5-b38e-0b34b2a3c41a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileSnapshot:78","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:394","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.getStage()"},"status":-1},{"failures":[96,97,98],"tindex":"2f40d1df-4c2b-11e5-b38e-61c83053169d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:664","type":"CtInvocationImpl","sourcecode":"java.lang.System.runFinalization()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:430","type":"CtIfImpl","sourcecode":"if ((java.util.zip.Deflater) == null)\n    java.util.zip.Deflater = new java.util.zip.Deflater(org.eclipse.jgit.storage.pack.PackConfig.getCompressionLevel());\nelse\n    java.util.zip.Deflater.reset();\n"},"status":-1},{"failures":[],"tindex":"2f40d1e0-4c2b-11e5-b38e-35511cc0ab84","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RefList:274","type":"CtIfImpl","sourcecode":"if ((int) == 1)\n    return org.eclipse.jgit.util.RefList<T>.org.eclipse.jgit.util.RefList.emptyList();\n"},"variableMap":{"cnt":"idx","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefList:298","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.util.RefList<T>.set(int, T)"},"status":-2},{"failures":[],"tindex":"2f40d1e1-4c2b-11e5-b38e-539191f66610","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:490","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.PersonIdent = org.eclipse.jgit.lib.PersonIdent"},"variableMap":{"committer":"ident","author":"ident"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ReflogWriter:219","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.PersonIdent = new org.eclipse.jgit.lib.PersonIdent(org.eclipse.jgit.lib.PersonIdent)"},"status":0},{"failures":[],"tindex":"2f40d1e2-4c2b-11e5-b38e-afbf9d42bcf9","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:104","type":"CtReturnImpl","sourcecode":"return !(org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS:539","type":"CtReturnImpl","sourcecode":"return false"},"status":-2},{"failures":[],"tindex":"2f40d1e3-4c2b-11e5-b38e-27bf1c08b831","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:355","type":"CtReturnImpl","sourcecode":"return (long) + (int)"},"variableMap":{"currPtr":"org.eclipse.jgit.diff.SimilarityIndex.KEY_SHIFT","currPos":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityIndex:333","type":"CtReturnImpl","sourcecode":"return (((long)(int)) << (org.eclipse.jgit.diff.SimilarityIndex.int)) | long"},"status":-2},{"failures":[],"tindex":"2f40f8f4-4c2b-11e5-b38e-6595323c8145","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.PullCommand:218","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null)\n    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n"},"variableMap":{"org.eclipse.jgit.lib.Constants.DEFAULT_REMOTE_NAME":"readingObjectsFromLocalRepositoryFailed","remote":"readingObjectsFromLocalRepositoryFailed"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PushProcess:186","type":"CtForEachImpl","sourcecode":"for (final org.eclipse.jgit.transport.RemoteRefUpdate org.eclipse.jgit.transport.RemoteRefUpdate : java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.values()) {\n    final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.transport.PushConnection.getRef(org.eclipse.jgit.transport.RemoteRefUpdate.getRemoteName());\n    final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref == null ? org.eclipse.jgit.lib.ObjectId.zeroId() : org.eclipse.jgit.lib.Ref.getObjectId();\n    if (org.eclipse.jgit.transport.RemoteRefUpdate.getNewObjectId().equals(org.eclipse.jgit.lib.ObjectId)) {\n        if (org.eclipse.jgit.transport.RemoteRefUpdate.isDelete()) {\n            org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n        } else {\n            org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n        }\n        continue;\n    } \n    if ((org.eclipse.jgit.transport.RemoteRefUpdate.isExpectingOldObjectId()) && (!(org.eclipse.jgit.transport.RemoteRefUpdate.getExpectedOldObjectId().equals(org.eclipse.jgit.lib.ObjectId)))) {\n        org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n        continue;\n    } \n    if ((org.eclipse.jgit.lib.ObjectId.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) || (org.eclipse.jgit.transport.RemoteRefUpdate.isDelete())) {\n        org.eclipse.jgit.transport.RemoteRefUpdate.setFastForward(true);\n        java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.put(org.eclipse.jgit.transport.RemoteRefUpdate.getRemoteName(), org.eclipse.jgit.transport.RemoteRefUpdate);\n        continue;\n    } \n    boolean boolean = true;\n    try {\n        org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseAny(org.eclipse.jgit.lib.ObjectId);\n        final org.eclipse.jgit.revwalk.RevObject org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseAny(org.eclipse.jgit.transport.RemoteRefUpdate.getNewObjectId());\n        if (((!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(org.eclipse.jgit.revwalk.RevWalk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject)), ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject))))))\n            boolean = false;\n        \n    } catch (org.eclipse.jgit.errors.MissingObjectException x) {\n        boolean = false;\n    } catch (java.lang.Exception x) {\n        throw new org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.Transport.getURI() , java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Exception.getMessage()) , java.lang.Exception);\n    }\n    org.eclipse.jgit.transport.RemoteRefUpdate.setFastForward(boolean);\n    if ((!boolean) && (!(org.eclipse.jgit.transport.RemoteRefUpdate.isForceUpdate())))\n        org.eclipse.jgit.transport.RemoteRefUpdate.setStatus(org.eclipse.jgit.transport.RemoteRefUpdate.Status.org.eclipse.jgit.transport.RemoteRefUpdate.Status);\n    else\n        java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.put(org.eclipse.jgit.transport.RemoteRefUpdate.getRemoteName(), org.eclipse.jgit.transport.RemoteRefUpdate);\n    \n}"},"status":-2},{"failures":[],"tindex":"2f40f8f5-4c2b-11e5-b38e-f169926127e4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheTree:464","type":"CtIfImpl","sourcecode":"if (int < 0) {\n    int++;\n    (int)++;\n    continue;\n} "},"variableMap":{"p":"carry","entrySpan":"carry","cIdx":"carry"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.MergeBaseGenerator:199","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.MergeBaseGenerator.carryOntoOne(org.eclipse.jgit.revwalk.RevCommit, int))\n    break;\n"},"status":-2},{"failures":[99],"tindex":"2f40f8f6-4c2b-11e5-b38e-f96664eb3778","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.FanoutBucket:247","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.notes.InMemoryNoteBucket.org.eclipse.jgit.notes.NonNoteEntry = org.eclipse.jgit.notes.NonNoteEntry"},"status":-1},{"failures":[100,101,102,103],"tindex":"2f412007-4c2b-11e5-b38e-5d1d8aec93f8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.MergeResult:175","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"containsConflicts":"rewriteParents"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevWalk:572","type":"CtAssignmentImpl","sourcecode":"boolean = boolean"},"status":-1},{"failures":[2,104,10,11,65],"tindex":"2f412008-4c2b-11e5-b38e-5b6e329244f0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:297","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.enterSubtree()"},"status":-1},{"failures":[],"tindex":"2f412009-4c2b-11e5-b38e-7bb94ac3db92","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Config:1157","type":"CtIfImpl","sourcecode":"if ('=' == int)\n    break;\n"},"variableMap":{"c":"beginB"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.MyersDiff:166","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.MyersDiff<S>.calculateEdits(org.eclipse.jgit.diff.MyersDiff<S>.MiddleEdit.int, org.eclipse.jgit.diff.MyersDiff<S>.MiddleEdit.int, org.eclipse.jgit.diff.MyersDiff<S>.MiddleEdit.int, org.eclipse.jgit.diff.MyersDiff<S>.MiddleEdit.int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
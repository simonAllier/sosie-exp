{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":92,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":40,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":151,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":30,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":73,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":163,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":51,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":100,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":23,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":36,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":102,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":52,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentConflict":76,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":164,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":65,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":109,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":8,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":97,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFoldersWithoutFastForward":104,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":31,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyWorktree":54,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":78,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":146,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":68,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":157,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":162,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":74,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUntrackedFile":144,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":83,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":0,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":13,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":7,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":53,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":75,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":112,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":159,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":141,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":148,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":10,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":81,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":142,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":20,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":41,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":114,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":145,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":105,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":48,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":111,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":140,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":139,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":85,"org.eclipse.jgit.merge.ResolveMergerTest.mergeWithCrlfInWT":39,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":160,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":116,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":138,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":94,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexEdit":87,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":71,"org.eclipse.jgit.merge.ResolveMergerTest.checkLockedFilesToBeDeleted":29,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":70,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":77,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":128,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":3,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":5,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":93,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":134,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":98,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":137,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":33,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":158,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":133,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":21,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyIndex":101,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":136,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":56,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":119,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":16,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyWorktree":25,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":95,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":67,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":153,"org.eclipse.jgit.api.MergeCommandTest.testMergeFailingWithDirtyWorkingTree":126,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":161,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":156,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":11,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":108,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":155,"org.eclipse.jgit.api.StashApplyCommandTest.indexContentConflict":82,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":113,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":117,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":120,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":80,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":55,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":18,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":88,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":107,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":15,"org.eclipse.jgit.api.BlameCommandTest.testWhitespaceMerge":42,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":124,"org.eclipse.jgit.api.StashApplyCommandTest.indexDelete":91,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":43,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":44,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyIndex":19,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyIndex":46,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":38,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":84,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":121,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":129,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":110,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":45,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":9,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":12,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":99,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyIndex":118,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":130,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":86,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":79,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":123,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":89,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":96,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":132,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":2,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":22,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":64,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":106,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":150,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":63,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":131,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":6,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":47,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":66,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":4,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":103,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":154,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommitsOnDifferentBranches":147,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":37,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":127,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyWorktree":122,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":58,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":90,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":60,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":61,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":72,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":14,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":57,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":24,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":135,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":32,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":115,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":143,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":28,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":27,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":34,"org.eclipse.jgit.diff.RawTextTest.testLineDelimiter":165,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":62,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":49,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":69,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":152,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":149,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":35,"org.eclipse.jgit.api.InitCommandTest.testInitWithOnlyExplicitGitDir":166,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyWorktree":125,"org.eclipse.jgit.api.RevertCommandTest.testRevert":26,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":59},"transformations":[{"failures":[],"tindex":"cfc79745-4c65-11e5-a9b0-7fdc79431d63","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.NB:233","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 8"},"variableMap":{"v":"expectedCRC"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:423","type":"CtAssignmentImpl","sourcecode":"long = org.eclipse.jgit.internal.storage.file.PackFile.idx().findCRC32(org.eclipse.jgit.internal.storage.file.LocalObjectToPack)"},"status":-2},{"failures":[],"tindex":"cfc79746-4c65-11e5-a9b0-c3729630c744","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:178","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\" \"))\n    java.lang.String = java.lang.String.substring(1);\n"},"variableMap":{"opt":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:263","type":"CtSwitchImpl","sourcecode":"switch (org.eclipse.jgit.util.StringUtils.toLowerCase(java.lang.String.charAt(((java.lang.String.length()) - 1)))) {\n    case 'g' :\n        long = org.eclipse.jgit.lib.Config.long;\n        break;\n    case 'm' :\n        long = org.eclipse.jgit.lib.Config.long;\n        break;\n    case 'k' :\n        long = org.eclipse.jgit.lib.Config.long;\n        break;\n}"},"status":0},{"failures":[],"tindex":"cfc79747-4c65-11e5-a9b0-038aed873d9b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:953","type":"CtReturnImpl","sourcecode":"return true"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.FastIgnoreRule:213","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.ignore.internal.IMatcher.equals(org.eclipse.jgit.ignore.FastIgnoreRule.org.eclipse.jgit.ignore.internal.IMatcher)"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],"tindex":"cfc79748-4c65-11e5-a9b0-752b15b6a9f2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:220","type":"CtIfImpl","sourcecode":"if ((boolean) && (!boolean))\n    return false;\n"},"variableMap":{"dirOnly":"ignoreConflicts","assumeDirectory":"ignoreConflicts"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:1016","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.merge.ResolveMerger.(mergeTreeWalk(org.eclipse.jgit.treewalk.NameConflictTreeWalk, boolean))) {\n    return false;\n} "},"status":-1},{"failures":[],"tindex":"cfc7be59-4c65-11e5-a9b0-3149b7236f05","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.NameMatcher:104","type":"CtReturnImpl","sourcecode":"return int == int ? int + 1 : int"},"variableMap":{"slashIdx":"maxDepth","start":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:347","type":"CtReturnImpl","sourcecode":"return (int * ((int) - (org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.depth()))) / ((int) - int)"},"status":-2},{"failures":[],"tindex":"cfc7be5a-4c65-11e5-a9b0-23794c78afa1","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:890","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.FileSnapshot org.eclipse.jgit.internal.storage.file.FileSnapshot = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.storage.file.FileBasedConfig:141","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.internal.storage.file.FileSnapshot org.eclipse.jgit.internal.storage.file.FileSnapshot = org.eclipse.jgit.internal.storage.file.FileSnapshot"},"status":-2},{"failures":[],"tindex":"cfc7be5b-4c65-11e5-a9b0-23c7bb04e529","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1591","type":"CtAssignmentImpl","sourcecode":"int = 0"},"variableMap":{"timeStart":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.TreeFilterMarker:111","type":"CtOperatorAssignmentImpl","sourcecode":"int |= 1L << int"},"status":-2},{"failures":[],"tindex":"cfc7be5c-4c65-11e5-a9b0-810436e66cd9","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:305","type":"CtLocalVariableImpl","sourcecode":"final int int = int + int"},"variableMap":{"pathLen":"org.eclipse.jgit.lib.Constants.OBJ_OFS_DELTA","len":"org.eclipse.jgit.lib.Constants.OBJ_OFS_DELTA"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackOutputStream:187","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.pack.PackOutputStream.org.eclipse.jgit.internal.storage.pack.PackOutputStream.objectHeader(long, org.eclipse.jgit.lib.Constants.int, byte[])"},"status":-2},{"failures":[165],"tindex":"cfc7be5d-4c65-11e5-a9b0-7f2f2ce733a7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.NotIgnoredFilter:89","type":"CtReturnImpl","sourcecode":"return (\"NotIgnored(\" + (int)) + \")\""},"variableMap":{"index":"e"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RawText:292","type":"CtIfImpl","sourcecode":"if (((byte[].int) > 1) && ((byte[][(int - 2)]) == '\\r'))\n    return \"\\r\\n\";\nelse\n    return \"\\n\";\n"},"status":-1},{"failures":[],"tindex":"cfc7e56e-4c65-11e5-a9b0-3bec3c4b7cd4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalkUtils:164","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit))\n    continue;\n"},"variableMap":{"maybehead":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RemoveNoteCommand:95","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.notes.NoteMap.set(org.eclipse.jgit.revwalk.RevObject, null, org.eclipse.jgit.lib.ObjectInserter)"},"status":-2},{"failures":[166],"tindex":"cfc7e56f-4c65-11e5-a9b0-5d0648d06ee6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FileUtils:170","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(100);\n} catch (java.lang.InterruptedException e) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:105","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getInstance().getProperty(\"user.dir\");\n    if (java.lang.String == null)\n        java.lang.String = \".\";\n    \n    org.eclipse.jgit.lib.RepositoryBuilder.setWorkTree(new java.io.File(java.lang.String));\n} "},"status":-1},{"failures":[],"tindex":"cfc7e570-4c65-11e5-a9b0-a92f4e3e5e25","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:2402","type":"CtIfImpl","sourcecode":"if (int <= 0)\n    int = java.lang.Runtime.getRuntime().availableProcessors();\n"},"variableMap":{"threads":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:430","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else {\n    break;\n}"},"status":-2},{"failures":[],"tindex":"cfc7e571-4c65-11e5-a9b0-dfa21661d7ee","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectInserter:265","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.io.EOFException(\"Unexpected end of input\");\n"},"variableMap":{"n":"oldSize"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:199","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    final byte[] byte[] = byte[][][int];\n    if (byte[] != null) {\n        org.eclipse.jgit.treewalk.filter.ByteArraySet.Hasher.init(byte[], byte[].int);\n        org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[], org.eclipse.jgit.treewalk.filter.ByteArraySet.Hasher.hash());\n    } \n}"},"status":-2},{"failures":[],"tindex":"cfc80c82-4c65-11e5-a9b0-3f6eaf8dbe51","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.storage.file.WindowCacheConfig:225","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.WindowCache.reconfigure(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:279","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.RefDatabase.create()"},"status":-2},{"failures":[],"tindex":"cfc80c83-4c65-11e5-a9b0-090fddddf351","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:105","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getInstance().getProperty(\"user.dir\");\n    if (java.lang.String == null)\n        java.lang.String = \".\";\n    \n    org.eclipse.jgit.lib.RepositoryBuilder.setWorkTree(new java.io.File(java.lang.String));\n} "},"status":-1}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
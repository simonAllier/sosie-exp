{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_7":99,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6":98,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_9":101,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_8":100,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":91,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_3":95,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_2":94,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5":97,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_4":96,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":246,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":129,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":147,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":149,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":186,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":260,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":226,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndDotWindows1":38,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndDotWindows2":39,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndDotWindows3":40,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":194,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":196,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitTwoTreeTwoBlob":232,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":264,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules4thru13_IndexEntryNotInHead":102,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":193,"org.eclipse.jgit.internal.storage.file.GcTagTest.lightweightTag_objectNotPruned":239,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":266,"org.eclipse.jgit.transport.PushProcessTest.testUpdateDeleteNonExisting":19,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5b":115,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules1thru3_NoIndexEntry":78,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":73,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":191,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChanges":84,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgLpr":32,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndSpaceUnixOk":56,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathIsOkSecondCheckout":64,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgCon":31,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":161,"org.eclipse.jgit.api.CleanCommandTest.testClean":139,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":198,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousPathDot":36,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":214,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":201,"org.eclipse.jgit.transport.PushProcessTest.testUpdateMixedCases":6,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":160,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":286,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":285,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirs":141,"org.eclipse.jgit.internal.storage.file.GcTagTest.annotatedTag_objectNotPruned":238,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":127,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testRenamedBoundLineDelete":137,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":252,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteCurDrivePathWindows":68,"org.eclipse.jgit.api.CommitCommandTest.commitUpdatesSmudgedEntries":203,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathIsOk":30,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousPathEmptyUnix":42,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathTwoLevelsFirstBad":48,"org.eclipse.jgit.transport.PushProcessTest.testUpdateExpectedRemote":15,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":88,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRunAndNoIgnore":144,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPath1":60,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPath2":61,"org.eclipse.jgit.lib.IndexModificationTimesTest.testModify":26,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteWindowsPath2":63,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.branch_historyNotPruned":235,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteWindowsPath1":62,"org.eclipse.jgit.api.MergeCommandTest.testMultipleHeads":170,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":169,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":222,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":274,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePath":65,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndDotUnixOk":37,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteCurDrivePathWindowsOnUnix":46,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_15b":82,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_1":93,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":280,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":217,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflictsX0":90,"org.eclipse.jgit.api.ReflogCommandTest.testHeadReflog":132,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":223,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":227,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":199,"org.eclipse.jgit.api.MergeCommandTest.testMergeFailingWithDirtyWorkingTree":178,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":195,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":268,"org.eclipse.jgit.revwalk.ObjectWalkTest.testCull":229,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":171,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardWithFiles":163,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndSpaceWindows":69,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgDotCon":33,"org.eclipse.jgit.api.ReflogCommandTest.testBranchReflog":131,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":185,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":176,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUpToDate":13,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":75,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":275,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":146,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":276,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":197,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeNoConflict":80,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyIndex":168,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree1":230,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree2":231,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":174,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFtrueBinary":120,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":184,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6b":116,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileSimple":81,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO_REVERSE":283,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":179,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFInput":103,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":225,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":236,"org.eclipse.jgit.util.io.EolCanonicalizingInputStreamTest.testLFCR":24,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousPathDotDot":47,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenWindowsNamesOnUnixEgLpt1":66,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":4,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":165,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathIsOkTwoLevels":53,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":29,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":262,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":240,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualIndexMerge":117,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":188,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":211,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHardFromIndexEntryWithoutFileToTreeWithoutFile":89,"org.eclipse.jgit.lib.ReflogResolveTest.resolveUnnamedCurrentBranchCommits":27,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgLpt1DotSuffix":35,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":282,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":71,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousPathEmptyWindows":57,"org.eclipse.jgit.api.CommitCommandTest.commitIgnoresSmudgedEntryWithDifferentId":204,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPath3Case":45,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":272,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":269,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateDisabled":22,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteUNCPathWindows2":50,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteUNCPathWindows1":49,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitsEmptyTree":234,"org.eclipse.jgit.transport.PushProcessTest.testUpdateFastForward":10,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDontOverwriteDirtyFile":92,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForwardUnknownObject":17,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":215,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousWindowsADSOnUnix":54,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":158,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":124,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFoldersWithoutFastForward":151,"org.eclipse.jgit.api.CommitCommandTest.commitAfterSquashMerge":200,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUnexpectedRemoteVsForce":11,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgLpt1":52,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":279,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":121,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":190,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":218,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForwardForced":14,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO":284,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteUNCPathWindows2OnUnix":41,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":277,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithPaths":140,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":23,"org.eclipse.jgit.util.io.EolCanonicalizingInputStreamTest.testCR":25,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":192,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":134,"org.eclipse.jgit.api.CommitAndLogCommandTest.testLogWithFilter":135,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":237,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":263,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":205,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":164,"org.eclipse.jgit.api.PushCommandTest.testPush":2,"org.eclipse.jgit.api.MergeCommandTest.testMultipleDeletions":157,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":153,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":258,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":74,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":259,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testLinesAllDeletedShortenedWalk":136,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":257,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":1,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":166,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutUncachedChanges":79,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testOverwriteUntrackedIgnoredFile":118,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":256,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":125,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgConDotSuffix":67,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":123,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":251,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":221,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":220,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":249,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":180,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":248,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":267,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":189,"org.eclipse.jgit.api.ReflogCommandTest.testAmendReflog":130,"org.eclipse.jgit.api.CommitAndLogCommandTest.testAddUnstagedChanges":133,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRunAndNoIgnore":145,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyIndex":148,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousWindowsADS":58,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteWindowsPath1OnUnix":70,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":183,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathTwoLevelsSecondBad":55,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteUNCPathWindows1OnUnix":34,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":271,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":206,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":241,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_17":112,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_18":113,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":128,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_19":114,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_13":108,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":156,"org.eclipse.jgit.revwalk.ObjectWalkTest.testEmptyTreeCorruption":233,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_14":109,"org.eclipse.jgit.transport.PushProcessTest.testUpdateDelete":9,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_15":110,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":72,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_16":111,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":281,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_10":105,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":162,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":167,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":76,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_11":106,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":224,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_12":107,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":155,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":182,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFfalse":104,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":245,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":250,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testUntrackedConflicts":86,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testBoundLineDelete":138,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPath2Case":44,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutHierarchy":87,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":175,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":122,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRun":142,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenWindowsNamesOnUnixEgCon":59,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":172,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":159,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":247,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":181,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFtrue":119,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":273,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":3,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testInitialCheckout":85,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":265,"org.eclipse.jgit.transport.PushProcessTest.testPushResult":16,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflicts1":83,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":154,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":213,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":212,"org.eclipse.jgit.transport.PushProcessTest.testUpdateUnexpectedRemote":7,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":0,"org.eclipse.jgit.lib.ReflogResolveTest.resolvePreviousBranch":28,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":5,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":278,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":216,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgCon1":51,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":77,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":150,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateEnabled":20,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFolders":152,"org.eclipse.jgit.api.CommitCommandTest.testExecutableRetention":202,"org.eclipse.jgit.revwalk.ObjectWalkTest.testOneCommitOneTreeTwoBlob":228,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyWorktree":173,"org.eclipse.jgit.transport.PushProcessTest.testUpdateRejectedByConnection":12,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":255,"org.eclipse.jgit.transport.PushProcessTest.testUpdateNonFastForward":18,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":207,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":254,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":253,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":209,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":187,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":210,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":261,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":243,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":244,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":270,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPath1Case":43,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateOnReject":8,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":126,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":219,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRun":143,"org.eclipse.jgit.transport.PushProcessTest.testUpdateCreateRef":21,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyWorktree":177,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":242,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":208},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"c2fd2bad-4c7e-11e5-a715-319c76835bb3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Transport:1200","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.transport.PushProcess.execute(org.eclipse.jgit.lib.ProgressMonitor)"},"variableMap":{"pushProcess":"this","monitor":"monitor"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PushProcess:149","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.ProgressMonitor.beginTask(org.eclipse.jgit.transport.PushProcess.java.lang.String, org.eclipse.jgit.lib.ProgressMonitor.int);\n    final org.eclipse.jgit.transport.PushResult org.eclipse.jgit.transport.PushResult = new org.eclipse.jgit.transport.PushResult();\n    org.eclipse.jgit.transport.PushConnection = org.eclipse.jgit.transport.Transport.openPush();\n    try {\n        org.eclipse.jgit.transport.PushResult.setAdvertisedRefs(org.eclipse.jgit.transport.Transport.getURI(), org.eclipse.jgit.transport.PushConnection.getRefsMap());\n        org.eclipse.jgit.transport.PushResult.setRemoteUpdates(java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>);\n        org.eclipse.jgit.lib.ProgressMonitor.endTask();\n        final java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate> java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate> = org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates();\n        if (org.eclipse.jgit.transport.Transport.isDryRun())\n            org.eclipse.jgit.transport.PushProcess.modifyUpdatesForDryRun();\n        else if (!(java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.isEmpty()))\n            org.eclipse.jgit.transport.PushConnection.push(org.eclipse.jgit.lib.ProgressMonitor, java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>, java.io.OutputStream);\n        \n    } finally {\n        org.eclipse.jgit.transport.PushConnection.close();\n        org.eclipse.jgit.transport.PushResult.addMessages(org.eclipse.jgit.transport.PushConnection.getMessages());\n    }\n    if (!(org.eclipse.jgit.transport.Transport.isDryRun()))\n        org.eclipse.jgit.transport.PushProcess.updateTrackingRefs();\n    \n    for (final org.eclipse.jgit.transport.RemoteRefUpdate org.eclipse.jgit.transport.RemoteRefUpdate : java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.values()) {\n        final org.eclipse.jgit.transport.TrackingRefUpdate org.eclipse.jgit.transport.TrackingRefUpdate = org.eclipse.jgit.transport.RemoteRefUpdate.getTrackingRefUpdate();\n        if (org.eclipse.jgit.transport.TrackingRefUpdate != null)\n            org.eclipse.jgit.transport.PushResult.add(org.eclipse.jgit.transport.TrackingRefUpdate);\n        \n    }\n    return org.eclipse.jgit.transport.PushResult;\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-1},{"failures":[24,25],"tindex":"c3047eae-4c7e-11e5-a715-37fe3bddb7f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.EolCanonicalizingInputStream:159","type":"CtAssignmentImpl","sourcecode":"byte[][int++] = '\\r'"},"status":-1},{"failures":[],"tindex":"c304a5bf-4c7e-11e5-a715-2daa69796923","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.InterruptTimer:209","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.interrupted()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.DiffCommand:173","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"status":0},{"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221],"tindex":"c304a5c0-4c7e-11e5-a715-5b6412a0a986","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:366","type":"CtAssignmentImpl","sourcecode":"int = int + (org.eclipse.jgit.lib.Constants.int)"},"status":-2},{"failures":[],"tindex":"c304a5c1-4c7e-11e5-a715-a51676bd30db","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.Git:168","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.api.LsRemoteCommand(null)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LsRemoteCommand:128","type":"CtReturnImpl","sourcecode":"return this"},"status":0},{"failures":[29,73,74,75,71,72,121,122,123,124,125,126,127,181,182,183,184,185,222,201,205,186,187,188,189,191,192,193,194,196,197,198,199,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,225,226,227,228,229,230,231,232,233,234,0,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,23,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282],"tindex":"c304a5c2-4c7e-11e5-a715-9f77b4d19ae2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.BlockObjQueue:63","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block"},"status":-1},{"failures":[],"tindex":"c304ccd3-4c7e-11e5-a715-47018cad89db","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PackParser:831","type":"CtIfImpl","sourcecode":"if (!(java.io.InputStream.markSupported()))\n    throw new java.io.IOException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"variableMap":{"in":"in","inputStreamMustSupportMark":"shortReadOfBlock"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:178","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    final int int = java.io.InputStream.read();\n    if (int < 0)\n        throw new java.io.EOFException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    if (int == 0)\n        break;\n    \n    java.io.ByteArrayOutputStream.write(int);\n}"},"status":-2},{"failures":[5,20],"tindex":"c304ccd4-4c7e-11e5-a715-d7f18e8a6d8d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PushProcess:171","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()"},"status":-1},{"failures":[],"tindex":"c304ccd5-4c7e-11e5-a715-6198e0425005","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.nls.NLS:137","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.nls.TranslationBundle = org.eclipse.jgit.nls.TranslationBundle"},"variableMap":{"old":"bundle","bundle":"bundle"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.nls.GlobalBundleCache:95","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.nls.TranslationBundle = java.lang.Class<T>.newInstance()"},"status":0},{"failures":[],"tindex":"c304ccd6-4c7e-11e5-a715-d34cd30ad06f","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:198","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.revplot.PlotCommit<L>.getParentCount()) == 0)\n    org.eclipse.jgit.revplot.PlotCommitList<L>.closeLane(org.eclipse.jgit.revplot.PlotCommit<L>.org.eclipse.jgit.revplot.PlotLane);\n"},"status":0},{"failures":[],"tindex":"c304ccd7-4c7e-11e5-a715-c5e882cca91d","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.RepositoryCache:308","type":"CtTryImpl","sourcecode":"try {\n    return java.io.File.getCanonicalFile();\n} catch (java.io.IOException e) {\n    return java.io.File.getAbsoluteFile();\n}"},"variableMap":{"path":"logsDir"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ReflogWriter:164","type":"CtReturnImpl","sourcecode":"return new java.io.File(java.io.File , java.lang.String)"},"status":-2},{"failures":[],"tindex":"c304f3e8-4c7e-11e5-a715-8daf2690f9c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.GitDateParser:287","type":"CtTryImpl","sourcecode":"try {\n    int = java.lang.Integer.parseInt(java.lang.String[][int]);\n} catch (java.lang.NumberFormatException e) {\n    return null;\n}"},"status":-2},{"failures":[283,284,285,286],"tindex":"c304f3e9-4c7e-11e5-a715-efaeb3810a78","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.BlockRevQueue:103","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"variableMap":{"next":"head","b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:95","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"status":-1},{"failures":[],"tindex":"c304f3ea-4c7e-11e5-a715-8338daf28ca8","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:380","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.FileRepository.loadSystemConfig()"},"variableMap":{"this":"repo"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:407","type":"CtTryImpl","sourcecode":"try {\n    if ((org.eclipse.jgit.lib.ObjectId) != null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.preScanTwoTrees();\n    else\n        org.eclipse.jgit.dircache.DirCacheCheckout.prescanOneTree();\n    \n    if (!(java.util.ArrayList<java.lang.String>.isEmpty())) {\n        if (boolean)\n            throw new org.eclipse.jgit.errors.CheckoutConflictException(java.util.ArrayList<java.lang.String>.toArray(new java.lang.String[java.util.ArrayList<java.lang.String>.size()]));\n        else\n            org.eclipse.jgit.dircache.DirCacheCheckout.cleanUpConflicts();\n        \n    } \n    org.eclipse.jgit.dircache.DirCacheBuilder.finish();\n    java.io.File java.io.File = null;\n    java.lang.String java.lang.String = null;\n    for (int int = (java.util.ArrayList<java.lang.String>.size()) - 1 ; int >= 0 ; int--) {\n        java.lang.String java.lang.String = java.util.ArrayList<java.lang.String>.get(int);\n        java.io.File = new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String);\n        if ((!(java.io.File.delete())) && (org.eclipse.jgit.lib.Repository.getFS().exists(java.io.File))) {\n            if (!(org.eclipse.jgit.lib.Repository.getFS().isDirectory(java.io.File)))\n                java.util.ArrayList<java.lang.String>.add(java.lang.String);\n            \n        } else {\n            if ((java.lang.String != null) && (!org.eclipse.jgit.dircache.DirCacheCheckout.(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String, java.lang.String))))\n                org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(new java.io.File(org.eclipse.jgit.lib.Repository.getWorkTree() , java.lang.String));\n            \n            java.lang.String = java.lang.String;\n        }\n    }\n    if (java.io.File != null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File);\n    \n    for (java.lang.String java.lang.String : java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.ObjectId>.keySet()) {\n        org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = org.eclipse.jgit.dircache.DirCache.getEntry(java.lang.String);\n        if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getRawMode())))\n            org.eclipse.jgit.dircache.DirCacheCheckout.org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.lib.ObjectReader);\n        \n    }\n    if (!(org.eclipse.jgit.dircache.DirCacheBuilder.commit()))\n        throw new org.eclipse.jgit.errors.IndexWriteException();\n    \n} finally {\n    org.eclipse.jgit.lib.ObjectReader.release();\n}"},"status":-2},{"failures":[],"tindex":"c304f3eb-4c7e-11e5-a715-a5793b646cbb","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:690","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (!(org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored()))) {\n    if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode))) {\n        if ((org.eclipse.jgit.lib.ObjectId == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId(), org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode())))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            return ;\n        } \n    } \n} "},"variableMap":{"org.eclipse.jgit.lib.FileMode.GITLINK":"org.eclipse.jgit.lib.FileMode.GITLINK","mMode":"mMode","f":"f","name":"name","h":"m","this":"this","mId":"iId","m":"m"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:749","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        \n    } else\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    \n} else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    } else {\n        if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                    return ;\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n        if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        }\n    } else {\n        org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n    }\n}"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
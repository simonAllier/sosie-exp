{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":77,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":74,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":57,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":15,"org.eclipse.jgit.api.FetchCommandTest.testFetch":44,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":29,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":65,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":67,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":73,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":91,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":64,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":102,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":3,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":84,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":88,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":32,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":61,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":62,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":82,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":55,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":106,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":63,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":72,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":51,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":69,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":28,"org.eclipse.jgit.api.PushCommandTest.testPush":40,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":50,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":4,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":94,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":39,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":92,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":90,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":35,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":34,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":103,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":47,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":60,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":109,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":46,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":79,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate":105,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":11,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":85,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":31,"org.eclipse.jgit.api.GitConstructionTest.testWrap":19,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":76,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":20,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":16,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":36,"org.eclipse.jgit.api.GitConstructionTest.testOpen":18,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":70,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":66,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":107,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":7,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_CH_DATA":96,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":86,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_SmallBlocks3":98,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_SmallBlocks2":97,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_Large":100,"org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testNotBare_CreateRepositoryFromGitDirOnlyWithWorktreeConfig":2,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":37,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_CH_ERROR":95,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":13,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":10,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_relative_workdirconfig":1,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldNotFetchTagsFromOtherBranches":45,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":48,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":89,"org.eclipse.jgit.transport.SideBandOutputStreamTest.testWrite_CH_PROGRESS":99,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_default_absolute_workdirconfig":0,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":5,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":9,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":80,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":81,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":68,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":78,"org.eclipse.jgit.api.GitConstructionTest.testClose":17,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":108,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":41,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":101,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":12,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":27,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":26,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails":104,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":38,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":43,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":83,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":30,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":14,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":54,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":21,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":23,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":24,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":58,"org.eclipse.jgit.api.BranchCommandTest.testListAllBranchesShouldNotDie":53,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":42,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":49,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":8,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":71,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":75,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":59,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":93,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":25,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":33,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":56,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":52,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":87,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":6,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":22},"transformations":[{"failures":[],"tindex":"e1fe87ed-4c74-11e5-9fb6-6d590e93650b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashCreateCommand:338","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry : java.util.List<org.eclipse.jgit.dircache.DirCacheEntry>)\n    org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);"},"status":-1},{"failures":[],"tindex":"e1feaefe-4c74-11e5-9fb6-2d9b261ebc4f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.NB:62","type":"CtLocalVariableImpl","sourcecode":"final int int = (int >>> 1) - (int >>> 1)"},"variableMap":{"a":"as","b":"as"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:254","type":"CtLocalVariableImpl","sourcecode":"int int = int + 1"},"status":-2},{"failures":[],"tindex":"e1feaeff-4c74-11e5-9fb6-d3fb9776f9df","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:465","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(100)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:551","type":"CtIfImpl","sourcecode":"if ((((((((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) == (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) && (org.eclipse.jgit.lib.IndexDiff.getAdded().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getChanged().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getConflicting().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getMissing().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getModified().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getRemoved().isEmpty())) {\n    continue;\n} "},"status":-2},{"failures":[],"tindex":"e1feaf00-4c74-11e5-9fb6-b541e1d823e3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:232","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getGlobalListenerList().dispatch(new org.eclipse.jgit.internal.storage.dfs.BeforeDfsPackIndexLoadedEvent(this))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:169","type":"CtInvocationImpl","sourcecode":"java.io.OutputStreamWriter.write(\"type \")"},"status":-2},{"failures":[0,1,2],"tindex":"e1feaf01-4c74-11e5-9fb6-93a7dadf37df","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS_Win32:140","type":"CtIfImpl","sourcecode":"if (java.lang.String != null) {\n    java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getInstance().getenv(\"HOMEPATH\");\n    if (java.lang.String != null)\n        return new java.io.File(java.lang.String , java.lang.String);\n    \n} "},"variableMap":{"homeDrive":"path"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:701","type":"CtIfImpl","sourcecode":"if (java.lang.String != null)\n    return org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.safeFS().resolve(org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.getGitDir(), java.lang.String).getCanonicalFile();\n"},"status":-1},{"failures":[],"tindex":"e1fed612-4c74-11e5-9fb6-4b06663fc766","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:482","type":"CtIfImpl","sourcecode":"if (java.io.File != null) {\n    if (boolean) {\n        if ((java.io.File != null) && (!(java.io.File.equals(java.io.File))))\n            throw new java.lang.IllegalStateException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File, java.io.File));\n        \n    } else {\n        if ((java.io.File != null) && (java.io.File.equals(java.io.File)))\n            throw new java.lang.IllegalStateException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File, java.io.File));\n        \n    }\n} "},"status":0},{"failures":[],"tindex":"e1fed613-4c74-11e5-9fb6-db58296fd769","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.PacketLineIn:120","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(\"ERR \"))\n    throw new org.eclipse.jgit.errors.PackProtocolException(java.lang.String.substring(4));\n"},"variableMap":{"line":"sourceRefNotSpecifiedForRefspec"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchProcess:137","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.transport.FetchResult.setAdvertisedRefs(org.eclipse.jgit.transport.Transport.getURI(), org.eclipse.jgit.transport.FetchConnection.getRefsMap());\n    final java.util.Set<org.eclipse.jgit.lib.Ref> java.util.Set<org.eclipse.jgit.lib.Ref> = new java.util.HashSet<org.eclipse.jgit.lib.Ref>();\n    for (final org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec : java.util.Collection<org.eclipse.jgit.transport.RefSpec>) {\n        if ((org.eclipse.jgit.transport.RefSpec.getSource()) == null)\n            throw new org.eclipse.jgit.errors.TransportException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.transport.RefSpec));\n        \n        if (org.eclipse.jgit.transport.RefSpec.isWildcard())\n            org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec, java.util.Set<org.eclipse.jgit.lib.Ref>);\n        else\n            org.eclipse.jgit.transport.FetchProcess.expandSingle(org.eclipse.jgit.transport.RefSpec, java.util.Set<org.eclipse.jgit.lib.Ref>);\n        \n    }\n    java.util.Collection<org.eclipse.jgit.lib.Ref> java.util.Collection<org.eclipse.jgit.lib.Ref> = java.util.Collections.<org.eclipse.jgit.lib.Ref>emptyList();\n    final org.eclipse.jgit.transport.TagOpt org.eclipse.jgit.transport.TagOpt = org.eclipse.jgit.transport.Transport.getTagOpt();\n    if (org.eclipse.jgit.transport.TagOpt == (org.eclipse.jgit.transport.TagOpt.org.eclipse.jgit.transport.TagOpt))\n        java.util.Collection<org.eclipse.jgit.lib.Ref> = org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags();\n    else if (org.eclipse.jgit.transport.TagOpt == (org.eclipse.jgit.transport.TagOpt.org.eclipse.jgit.transport.TagOpt))\n        org.eclipse.jgit.transport.FetchProcess.expandFetchTags();\n    \n    final boolean boolean;\n    if ((!(java.util.HashMap<org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Ref>.isEmpty())) && (!org.eclipse.jgit.transport.FetchProcess.(askForIsComplete()))) {\n        org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor);\n        boolean = org.eclipse.jgit.transport.FetchConnection.didFetchIncludeTags();\n        org.eclipse.jgit.transport.FetchProcess.closeConnection(org.eclipse.jgit.transport.FetchResult);\n    } else {\n        boolean = false;\n    }\n    if ((org.eclipse.jgit.transport.TagOpt == (org.eclipse.jgit.transport.TagOpt.org.eclipse.jgit.transport.TagOpt)) && (!(java.util.Collection<org.eclipse.jgit.lib.Ref>.isEmpty()))) {\n        java.util.HashSet<org.eclipse.jgit.lib.ObjectId>.addAll(java.util.HashMap<org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Ref>.keySet());\n        java.util.HashMap<org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Ref>.clear();\n        for (final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.Collection<org.eclipse.jgit.lib.Ref>) {\n            org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getPeeledObjectId();\n            if (org.eclipse.jgit.lib.ObjectId == null)\n                org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n            \n            if (org.eclipse.jgit.transport.Transport.org.eclipse.jgit.lib.Repository.hasObject(org.eclipse.jgit.lib.ObjectId))\n                org.eclipse.jgit.transport.FetchProcess.wantTag(org.eclipse.jgit.lib.Ref);\n            \n        }\n        if ((!(java.util.HashMap<org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Ref>.isEmpty())) && ((!boolean) || (!org.eclipse.jgit.transport.FetchProcess.(askForIsComplete())))) {\n            org.eclipse.jgit.transport.FetchProcess.reopenConnection();\n            if (!(java.util.HashMap<org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.Ref>.isEmpty()))\n                org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor);\n            \n        } \n    } \n} finally {\n    org.eclipse.jgit.transport.FetchProcess.closeConnection(org.eclipse.jgit.transport.FetchResult);\n}"},"status":-2},{"failures":[],"tindex":"e1fefd24-4c74-11e5-9fb6-f7f48c48a619","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.IgnoreRule:172","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.startsWith(\"/\")))\n    java.lang.String = \"/\" + java.lang.String;\n"},"variableMap":{"target":"pkt"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandInputStream:188","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    final int int = java.lang.String.indexOf('\\n');\n    final int int = java.lang.String.indexOf('\\r');\n    final int int;\n    if ((0 <= int) && (0 <= int))\n        int = java.lang.Math.min(int, int);\n    else if (0 <= int)\n        int = int;\n    else if (0 <= int)\n        int = int;\n    else\n        break;\n    \n    org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String.substring(0, (int + 1)));\n    java.lang.String = java.lang.String.substring((int + 1));\n}"},"status":0},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,18,19,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"tindex":"e1fefd25-4c74-11e5-9fb6-a556870302b1","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:153","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.dircache.DirCacheEntry.int"},"variableMap":{"len":"n","org.eclipse.jgit.dircache.DirCacheEntry.INFO_LEN_EXTENDED":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandOutputStream:157","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"status":-1},{"failures":[],"tindex":"e1fefd26-4c74-11e5-9fb6-bb67d2152d0d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:608","type":"CtIfImpl","sourcecode":"if ((java.util.List<java.lang.String>.size()) == 0)\n    return ;\n"},"status":0},{"failures":[],"tindex":"e1fefd27-4c74-11e5-9fb6-47d0da935090","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.TextProgressMonitor:122","type":"CtWhileImpl","sourcecode":"while ((java.lang.String.length()) < (java.lang.String.length()))\n    java.lang.String = \" \" + java.lang.String;"},"variableMap":{"endStr":"org.eclipse.jgit.lib.RefDatabase.ALL","curStr":"org.eclipse.jgit.lib.RefDatabase.ALL"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:247","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.RefDirectory.LooseScanner.scan(org.eclipse.jgit.lib.RefDatabase.java.lang.String)"},"status":-2},{"failures":[],"tindex":"e1fefd28-4c74-11e5-9fb6-c35b15d0d8af","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.PacketLineOut:163","type":"CtLocalVariableImpl","sourcecode":"int int = 3"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:346","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"e1fefd29-4c74-11e5-9fb6-ff6008862d5b","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.TemporaryBuffer:588","type":"CtReturnImpl","sourcecode":"return 0 < int ? int : -1"},"variableMap":{"copied":"timeout"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RemoteConfig:536","type":"CtReturnImpl","sourcecode":"return int"},"status":-2},{"failures":[22,23,24,33,34,35,108,109],"tindex":"e1ff243a-4c74-11e5-9fb6-3508aefea326","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:415","type":"CtWhileImpl","sourcecode":"while ((org.eclipse.jgit.revwalk.RevWalk.next()) != null) {\n}"},"variableMap":{"revPool":"walk"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LogCommand:333","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevWalk.markUninteresting(org.eclipse.jgit.revwalk.RevWalk.lookupCommit(org.eclipse.jgit.lib.AnyObjectId))"},"status":-1},{"failures":[],"tindex":"e1ff243b-4c74-11e5-9fb6-8d99a56024d9","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:284","type":"CtIfImpl","sourcecode":"if (int == int)\n    continue;\n"},"variableMap":{"lastIdx":"tab","i":"ptr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:527","type":"CtWhileImpl","sourcecode":"while ((int < int) && ((byte[][(int - 1)]) != '\\t'))\n    int--;"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
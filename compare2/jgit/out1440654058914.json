{"failureDictionary":{"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":41,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":68,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":57,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":72,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":51,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":46,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":45,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":53,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":7,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":58,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":11,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":8,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":21,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":19,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":54,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":65,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyWorktree":10,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyIndex":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":37,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":22,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":73,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":47,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":52,"org.eclipse.jgit.api.GitConstructionTest.testClose":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":23,"org.eclipse.jgit.internal.storage.file.InflatingBitSetTest.testMaybeContains":64,"org.eclipse.jgit.internal.storage.file.InflatingBitSetTest.testContainsMany":62,"org.eclipse.jgit.internal.storage.file.InflatingBitSetTest.testContainsOne":63,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":49,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":67,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":24,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":33,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":40,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":38,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":34,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":59,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":36,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldTryToParseValidLineMarkedAsComment":0,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":32,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":31,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":3,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":44,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":30,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":66,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":14,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":18,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":17,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":27,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":70,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":74,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":35,"org.eclipse.jgit.treewalk.filter.NotTreeFilterTest.testCloneIsDeepClone":1,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":71,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":26,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":29,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":60,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":6,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":48,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":25,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":28,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":12,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":5,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":16,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":42,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":39,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":20,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":61,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":69,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":43,"org.eclipse.jgit.api.CommitCommandTest.commitIgnoresSmudgedEntryWithDifferentId":56,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":13},"transformations":[{"failures":[],"tindex":"31c5b99d-4c7e-11e5-9650-8f27a66cba63","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.HttpAuthMethod:174","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.transport.HttpAuthMethod.java.lang.String"},"variableMap":{"org.eclipse.jgit.transport.HttpAuthMethod.EMPTY_STRING":"email","param":"email"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:780","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.decode(byte[], int, (int - 1))"},"status":-2},{"failures":[],"tindex":"31c5e0ae-4c7e-11e5-9650-db650120f6cb","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV2:281","type":"CtReturnImpl","sourcecode":"return (int << 2) + int"},"variableMap":{"p":"positionsAllocated"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:389","type":"CtReturnImpl","sourcecode":"return (int)++"},"status":-2},{"failures":[],"tindex":"31c5e0af-4c7e-11e5-9650-63110aa8a79e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.FetchHeadRecord:85","type":"CtIfImpl","sourcecode":"if (boolean)\n    java.io.Writer.write(\"not-for-merge\");\n"},"status":0},{"failures":[],"tindex":"31c5e0b0-4c7e-11e5-9650-0107b1f24634","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdSubclassMap:165","type":"CtAssignmentImpl","sourcecode":"int = (int + 1) & int"},"variableMap":{"msk":"idx","i":"idx"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RawTextComparator:322","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-2},{"failures":[0],"tindex":"31c5e0b1-4c7e-11e5-9650-771bba70831e","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RebaseTodoLine:185","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.AbbreviatedObjectId) == null)\n    throw new org.eclipse.jgit.errors.IllegalTodoFileModification(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.RebaseTodoLine.Action, org.eclipse.jgit.lib.RebaseTodoLine.Action));\n"},"status":-1},{"failures":[1],"tindex":"31c5e0b2-4c7e-11e5-9650-69b4fd410cf6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.DiffFormatter:522","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.treewalk.filter.TreeFilter org.eclipse.jgit.treewalk.filter.TreeFilter = org.eclipse.jgit.treewalk.filter.TreeFilter.org.eclipse.jgit.treewalk.filter.TreeFilter"},"variableMap":{"org.eclipse.jgit.treewalk.filter.TreeFilter.ANY_DIFF":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.NotTreeFilter:91","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.treewalk.filter.TreeFilter org.eclipse.jgit.treewalk.filter.TreeFilter = org.eclipse.jgit.treewalk.filter.TreeFilter.clone()"},"status":-1},{"failures":[],"tindex":"31c607c3-4c7e-11e5-9650-fd53020f7cc4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:269","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.WindowCache.purge(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1:151","type":"CtInvocationImpl","sourcecode":"java.security.DigestOutputStream.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.StoredEntry.getXorOffset())"},"status":-2},{"failures":[],"tindex":"31c607c4-4c7e-11e5-9650-f18050ad1d35","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:416","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(25)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RefSpec:504","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.transport.RefSpec.(getSource()) != null)\n    java.lang.StringBuilder.append(org.eclipse.jgit.transport.RefSpec.getSource());\n"},"status":-2},{"failures":[],"tindex":"31c607c5-4c7e-11e5-9650-9bb86053a9a1","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectInserter:194","type":"CtIfImpl","sourcecode":"if (byte[] == null)\n    byte[] = byte[] = new byte[8192];\n"},"variableMap":{"b":"delta","tempBuffer":"delta"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:252","type":"CtDoImpl","sourcecode":"do {\n    int = (byte[][int++]) & 255;\n    long |= ((long)((int & 127))) << int;\n    int += 7;\n} while ((int & 128) != 0 )"},"status":0},{"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"31c607c6-4c7e-11e5-9650-c17245be1cb3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.InterruptTimer:209","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.interrupted()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CherryPickCommand:235","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref)"},"status":-1},{"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"tindex":"31c607c7-4c7e-11e5-9650-3da9e5be5a52","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.InflatingBitSet:88","type":"CtIfImpl","sourcecode":"if ((com.googlecode.javaewah.IntIterator) == null) {\n    com.googlecode.javaewah.IntIterator = com.googlecode.javaewah.EWAHCompressedBitmap.intIterator();\n    if (com.googlecode.javaewah.IntIterator.hasNext())\n        int = com.googlecode.javaewah.IntIterator.next();\n    else\n        return false;\n    \n} else if (!(com.googlecode.javaewah.IntIterator.hasNext()))\n    return false;\n"},"status":-1},{"failures":[],"tindex":"31c607c8-4c7e-11e5-9650-071bbe2c3a26","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.FastIgnoreRule:194","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:721","type":"CtLocalVariableImpl","sourcecode":"final int int = (int) + int"},"status":-2},{"failures":[],"tindex":"31c62ed9-4c7e-11e5-9650-6d9f7f045f65","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleUpdateCommand:151","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    if ((org.eclipse.jgit.submodule.SubmoduleWalk.getModulesPath()) == null)\n        continue;\n    \n    java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUrl();\n    if (java.lang.String == null)\n        continue;\n    \n    org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n    if (org.eclipse.jgit.lib.Repository == null) {\n        org.eclipse.jgit.api.CloneCommand org.eclipse.jgit.api.CloneCommand = org.eclipse.jgit.api.Git.cloneRepository();\n        org.eclipse.jgit.api.TransportCommand<org.eclipse.jgit.api.SubmoduleUpdateCommand, java.util.Collection<java.lang.String>>.configure(org.eclipse.jgit.api.CloneCommand);\n        org.eclipse.jgit.api.CloneCommand.setURI(java.lang.String);\n        org.eclipse.jgit.api.CloneCommand.setDirectory(org.eclipse.jgit.submodule.SubmoduleWalk.getDirectory());\n        org.eclipse.jgit.api.CloneCommand.setGitDir(new java.io.File(new java.io.File(org.eclipse.jgit.lib.Repository.getDirectory() , org.eclipse.jgit.lib.Constants.java.lang.String) , org.eclipse.jgit.submodule.SubmoduleWalk.getPath()));\n        if ((org.eclipse.jgit.lib.ProgressMonitor) != null)\n            org.eclipse.jgit.api.CloneCommand.setProgressMonitor(org.eclipse.jgit.lib.ProgressMonitor);\n        \n        org.eclipse.jgit.lib.Repository = org.eclipse.jgit.api.CloneCommand.call().getRepository();\n    } \n    try {\n        org.eclipse.jgit.revwalk.RevWalk org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.lib.Repository);\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId());\n        java.lang.String java.lang.String = org.eclipse.jgit.submodule.SubmoduleWalk.getConfigUpdate();\n        if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.MergeCommand org.eclipse.jgit.api.MergeCommand = new org.eclipse.jgit.api.MergeCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.MergeCommand.include(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.MergeCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.MergeCommand.call();\n        } else if (org.eclipse.jgit.lib.ConfigConstants.java.lang.String.equals(java.lang.String)) {\n            org.eclipse.jgit.api.RebaseCommand org.eclipse.jgit.api.RebaseCommand = new org.eclipse.jgit.api.RebaseCommand(org.eclipse.jgit.lib.Repository);\n            org.eclipse.jgit.api.RebaseCommand.setUpstream(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.api.RebaseCommand.setStrategy(org.eclipse.jgit.merge.MergeStrategy);\n            org.eclipse.jgit.api.RebaseCommand.call();\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.revwalk.RevCommit.getTree());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.lib.RefUpdate org.eclipse.jgit.lib.RefUpdate = org.eclipse.jgit.lib.Repository.updateRef(org.eclipse.jgit.lib.Constants.java.lang.String, true);\n            org.eclipse.jgit.lib.RefUpdate.setNewObjectId(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.lib.RefUpdate.forceUpdate();\n        }\n    } finally {\n        org.eclipse.jgit.lib.Repository.close();\n    }\n    java.util.List<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n}"},"status":-2},{"failures":[],"tindex":"31c62eda-4c7e-11e5-9650-e9eaa1bd9ddc","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revplot.PlotCommitList:256","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revplot.PlotCommit == org.eclipse.jgit.revplot.PlotCommit) {\n    int = int;\n    break;\n} "},"variableMap":{"rObj":"p","r":"flags","childIndex":"flags","child":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.MergeBaseGenerator:145","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.revwalk.RevCommit.int) & (org.eclipse.jgit.revwalk.MergeBaseGenerator.int)) != 0)\n    continue;\n"},"status":-2},{"failures":[],"tindex":"31c62edb-4c7e-11e5-9650-6dcf07536a25","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.Candidate:362","type":"CtReturnImpl","sourcecode":"return ((org.eclipse.jgit.blame.ReverseWalk.ReverseCommit)(org.eclipse.jgit.revwalk.RevCommit)).getChild(int)"},"variableMap":{"sourceCommit":"sourceCommit","idx":"idx"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.Candidate:126","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.revwalk.RevCommit.getParent(int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
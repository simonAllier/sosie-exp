{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":51,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":88,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":64,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":96,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":57,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":99,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":26,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":68,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":100,"org.eclipse.jgit.util.FileUtilTest.testDeleteRecursiveEmpty":19,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":58,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":35,"org.eclipse.jgit.merge.MergeAlgorithmTest.testNoAgainstOneModification":36,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":97,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":77,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":10,"org.eclipse.jgit.util.FileUtilTest.testDeleteEmptyTreeOk":18,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":38,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":47,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":74,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":92,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":95,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":24,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":65,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":42,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":43,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":37,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":59,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":66,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooters":6,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":85,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":84,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":52,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":67,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":102,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":31,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":101,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":7,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":11,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":83,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSameModification":33,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":44,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":82,"org.eclipse.jgit.util.FileUtilTest.testRenameOverExistingEmptyDirectory":20,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":28,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":93,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":81,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":103,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":75,"org.eclipse.jgit.api.ReflogCommandTest.testAmendReflog":15,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":80,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":49,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":56,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":78,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":9,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":8,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":105,"org.eclipse.jgit.api.NotesCommandTest.testListNotes":13,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":61,"org.eclipse.jgit.api.ReflogCommandTest.testHeadReflog":17,"org.eclipse.jgit.merge.MergeAlgorithmTest.testEmptyTexts":23,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":94,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":91,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":40,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":90,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsWithFooterlikeLineInBody":3,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":12,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":104,"org.eclipse.jgit.api.ReflogCommandTest.testBranchReflog":16,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":30,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":60,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":108,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":71,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":72,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":34,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":106,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":53,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooter":5,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFtrue":2,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":39,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":41,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":98,"org.eclipse.jgit.merge.MergeMessageFormatterTest.testFormatWithConflictsNoFooterNoLineBreak":4,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":107,"org.eclipse.jgit.util.io.AutoCRLFOutputStreamTest.test":1,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoSimilarModsAndOneInsert":29,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":62,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":45,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":87,"org.eclipse.jgit.api.NotesCommandTest.testAddAndRemoveNote":14,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":32,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":54,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":46,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":22,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoNonConflictingModifications":25,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":63,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":0,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":73,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":79,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":48,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSeperateModifications":27,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":70,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":50,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":69,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":76,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":55,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":89,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":86,"org.eclipse.jgit.util.FileUtilTest.testDeleteNotEmptyTreeNotOkButIgnoreFail":21},"transformations":[{"failures":[0],"tindex":"e23402e2-4c42-11e5-83e5-d35938063b3e","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.QuotedString:301","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    final byte byte = byte[][int++];\n    if (byte != '\\\\') {\n        byte[][int++] = byte;\n        continue;\n    } \n    if (int == int) {\n        byte[][int++] = '\\\\';\n        break;\n    } \n    switch (byte[][int++]) {\n        case 'a' :\n            byte[][int++] = 7;\n            continue;\n        case 'b' :\n            byte[][int++] = '\\b';\n            continue;\n        case 'f' :\n            byte[][int++] = '\\f';\n            continue;\n        case 'n' :\n            byte[][int++] = '\\n';\n            continue;\n        case 'r' :\n            byte[][int++] = '\\r';\n            continue;\n        case 't' :\n            byte[][int++] = '\\t';\n            continue;\n        case 'v' :\n            byte[][int++] = 11;\n            continue;\n        case '\\\\' :\n        case '\\\"' :\n            byte[][int++] = byte[][(int - 1)];\n            continue;\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n            {\n                int int = (byte[][(int - 1)]) - '0';\n                for (int int = 1 ; (int < 3) && (int < int) ; int++) {\n                    final byte byte = byte[][int];\n                    if (('0' <= byte) && (byte <= '7')) {\n                        int <<= 3;\n                        int |= byte - '0';\n                        int++;\n                    } else {\n                        break;\n                    }\n                }\n                byte[][int++] = ((byte)(int));\n                continue;\n            }\n        default :\n            byte[][int++] = '\\\\';\n            byte[][int++] = byte[][(int - 1)];\n            continue;\n    }\n}"},"variableMap":{"r":"buf","inPtr":"cnt","in":"buf","rPtr":"cnt","inEnd":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.EolCanonicalizingInputStream:182","type":"CtIfImpl","sourcecode":"if (boolean) {\n    boolean = org.eclipse.jgit.diff.RawText.isBinary(byte[], int);\n    boolean = false;\n    if ((boolean) && (boolean))\n        throw new org.eclipse.jgit.util.io.EolCanonicalizingInputStream.IsBinaryException();\n    \n} "},"status":-1},{"failures":[],"tindex":"e23429f3-4c42-11e5-83e5-579739868f17","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:464","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(100);\n} catch (java.lang.InterruptedException e) {\n    return false;\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.PathSuffixFilter:101","type":"CtReturnImpl","sourcecode":"return true"},"status":-2},{"failures":[],"tindex":"e2345104-4c42-11e5-83e5-f3db6a79878e","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:413","type":"CtOperatorAssignmentImpl","sourcecode":"int >>>= 7"},"variableMap":{"sz":"currPtr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:170","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.treewalk.CanonicalTreeParser.int = org.eclipse.jgit.treewalk.CanonicalTreeParser.int"},"status":-2},{"failures":[1,2],"tindex":"e2345105-4c42-11e5-83e5-b14a7ba04225","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.AutoCRLFOutputStream:107","type":"CtForImpl","sourcecode":"for (int int = int ; int < (int + int) ; ++int) {\n    final byte byte = byte[][int];\n    if (byte == '\\r') {\n        int = '\\r';\n    } else if (byte == '\\n') {\n        if ((int) != '\\r') {\n            if (int < int) {\n                java.io.OutputStream.write(byte[], int, (int - int));\n            } \n            java.io.OutputStream.write('\\r');\n            int = int;\n        } \n        int = -1;\n    } else {\n        int = -1;\n    }\n}"},"status":-1},{"failures":[],"tindex":"e2345106-4c42-11e5-83e5-875587044b3a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameGenerator:424","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate.ReverseCandidate)"},"variableMap":{"c":"c","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:340","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)"},"status":0},{"failures":[3,4,5,6,7,8,9,10,11,12],"tindex":"e2345107-4c42-11e5-83e5-55b26b230999","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.blame.Region:127","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('-')"},"variableMap":{"buf":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeMessageFormatter:141","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(java.lang.String[][int]).append('\\n')"},"status":-1},{"failures":[13,14,15,16,17],"tindex":"e2345108-4c42-11e5-83e5-3117a5b8b623","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:664","type":"CtInvocationImpl","sourcecode":"java.lang.System.runFinalization()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.AddNoteCommand:140","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.notes.NoteMap.writeTree(org.eclipse.jgit.lib.ObjectInserter))"},"status":-1},{"failures":[18,19,20,21,22],"tindex":"e2345109-4c42-11e5-83e5-31e3ee0818ab","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CommitCommand:399","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"variableMap":{"emptyCommit":"delete"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FileUtils:156","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-1},{"failures":[],"tindex":"e234781a-4c42-11e5-83e5-159b5b2e8323","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.attributes.AttributesRule:146","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.ignore.internal.IMatcher = org.eclipse.jgit.ignore.internal.IMatcher.org.eclipse.jgit.ignore.internal.IMatcher"},"variableMap":{"org.eclipse.jgit.ignore.internal.IMatcher.NO_MATCH":"matcher","matcher":"matcher"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.FastIgnoreRule:99","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.ignore.internal.IMatcher = org.eclipse.jgit.ignore.internal.IMatcher.org.eclipse.jgit.ignore.internal.IMatcher"},"status":0},{"failures":[],"tindex":"e234781b-4c42-11e5-83e5-d15f0a340134","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Transport:628","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    java.lang.String = java.lang.String;\n} "},"variableMap":{"srcSpec":"characterClass","destSpec":"characterClass"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.fnmatch.GroupHead:82","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(\"[:alpha:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n} else if (java.lang.String.equals(\"[:blank:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern(' '));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern('\\t'));\n} else if (java.lang.String.equals(\"[:cntrl:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('\u0000' , '\u001f'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern(''));\n} else if (java.lang.String.equals(\"[:digit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:graph:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('!' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:lower:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LowerPattern.org.eclipse.jgit.fnmatch.GroupHead.LowerPattern);\n} else if (java.lang.String.equals(\"[:print:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange(' ' , '~'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else if (java.lang.String.equals(\"[:punct:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.PunctPattern.org.eclipse.jgit.fnmatch.GroupHead.PunctPattern);\n} else if (java.lang.String.equals(\"[:space:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern.org.eclipse.jgit.fnmatch.GroupHead.WhitespacePattern);\n} else if (java.lang.String.equals(\"[:upper:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.UpperPattern.org.eclipse.jgit.fnmatch.GroupHead.UpperPattern);\n} else if (java.lang.String.equals(\"[:xdigit:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('0' , '9'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('a' , 'f'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.CharacterRange('A' , 'F'));\n} else if (java.lang.String.equals(\"[:word:]\")) {\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(new org.eclipse.jgit.fnmatch.GroupHead.OneCharacterPattern('_'));\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.LetterPattern.org.eclipse.jgit.fnmatch.GroupHead.LetterPattern);\n    java.util.List<org.eclipse.jgit.fnmatch.GroupHead.CharacterPattern>.add(org.eclipse.jgit.fnmatch.GroupHead.DigitPattern.org.eclipse.jgit.fnmatch.GroupHead.DigitPattern);\n} else {\n    final java.lang.String java.lang.String = java.lang.String.format(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String));\n    throw new org.eclipse.jgit.errors.InvalidPatternException(java.lang.String , java.lang.String);\n}"},"status":-2},{"failures":[],"tindex":"e2349f2c-4c42-11e5-83e5-29b486be2c3b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:696","type":"CtLocalVariableImpl","sourcecode":"final int int = 3 << 12"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlock:93","type":"CtLocalVariableImpl","sourcecode":"int int = ((int)(long - (long)))"},"status":-2},{"failures":[],"tindex":"e2349f2d-4c42-11e5-83e5-2dd1b816cf31","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.EolCanonicalizingInputStream:162","type":"CtReturnImpl","sourcecode":"return int == int ? -1 : int - int"},"variableMap":{"i":"maxDepth","off":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:347","type":"CtReturnImpl","sourcecode":"return (int * ((int) - (org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.depth()))) / ((int) - int)"},"status":0},{"failures":[],"tindex":"e2349f2e-4c42-11e5-83e5-8361408a8df4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:471","type":"CtIfImpl","sourcecode":"if (int == 0)\n    throw new java.util.zip.DataFormatException();\n"},"variableMap":{"n":"org.eclipse.jgit.transport.SideBandOutputStream.HDR_SIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandOutputStream:126","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.transport.SideBandOutputStream.int) < (int))\n    org.eclipse.jgit.transport.SideBandOutputStream.writeBuffer();\n"},"status":-2},{"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,0,43,44,45,46,47,48,49,50,51,52,53,54,7,55,56,57,58,59,8,60,61,62,63,64,65,66,67,9,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,10,102,103,104,105,106,107,108],"tindex":"e2349f2f-4c42-11e5-83e5-f1cf959e4432","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeResult:114","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IntList.add(int)"},"status":-1},{"failures":[],"tindex":"e2349f30-4c42-11e5-83e5-3329d5cf7279","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:414","type":"CtLocalVariableImpl","sourcecode":"final byte[] byte[] = new byte[64]"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BaseSearch:196","type":"CtLocalVariableImpl","sourcecode":"byte[] byte[] = org.eclipse.jgit.lib.ObjectLoader.getCachedBytes(java.lang.Integer.int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
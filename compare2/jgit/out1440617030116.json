{"failureDictionary":{"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":24,"org.eclipse.jgit.util.ChangeIdUtilTest.testChangeIdAfterBugOrIssue":4,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithSubjectBodyBugEmptyLineAndSob":10,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveTwoLevelHigherRelativeUrl":13,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":22,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":12,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":25,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithSubject_NoBodySobAndBug":9,"org.eclipse.jgit.util.ChangeIdUtilTest.testRegularCommitWithSob_ButNoBody":2,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsTheirs":16,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithSubject_NonFooterAndBugAndSob":8,"org.eclipse.jgit.patch.GetTextTest.testGetText_Convert":15,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyIndex":21,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":26,"org.eclipse.jgit.util.ChangeIdUtilTest.testKernelStyleFooter":3,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithSubjectBodyBugLineWithASpaceAndSob":5,"org.eclipse.jgit.patch.PatchCcTest.testParse_OneFileCc":0,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithBug_SubButNoBody":11,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":30,"org.eclipse.jgit.notes.NoteMapMergerTest.testOursEqualsTheirs":19,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":23,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":29,"org.eclipse.jgit.util.ChangeIdUtilTest.testSingleLineMessagesWithSignedOffBy":6,"org.eclipse.jgit.util.ChangeIdUtilTest.testACommitWithSubjectBodyBugBrackersAndSob":1,"org.eclipse.jgit.submodule.SubmoduleInitTest.resolveOneLevelHigherRelativeUrl":14,"org.eclipse.jgit.notes.NoteMapMergerTest.testCollapseFanoutAfterMerge":17,"org.eclipse.jgit.notes.NoteMapMergerTest.testDeleteDifferentNotes":18,"org.eclipse.jgit.api.RevertCommandTest.testRevertDirtyWorktree":27,"org.eclipse.jgit.notes.NoteMapMergerTest.testBaseEqualsOurs":20,"org.eclipse.jgit.api.RevertCommandTest.testRevert":28,"org.eclipse.jgit.util.ChangeIdUtilTest.testMultiLineMessagesWithSignedOffBy":7},"transformations":[{"failures":[],"tindex":"fae27a4e-4c27-11e5-b283-0944d7d64e0c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:239","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.setDeltaBase(org.eclipse.jgit.internal.storage.pack.ObjectToPack)"},"variableMap":{"srcObj":"noteOn","resObj":"noteOn"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.FanoutBucket:245","type":"CtForImpl","sourcecode":"for (java.util.Iterator<org.eclipse.jgit.notes.Note> java.util.Iterator<org.eclipse.jgit.notes.Note> = org.eclipse.jgit.notes.FanoutBucket.iterator(org.eclipse.jgit.lib.AnyObjectId, org.eclipse.jgit.lib.ObjectReader) ; java.util.Iterator<org.eclipse.jgit.notes.Note>.hasNext() ; )\n    org.eclipse.jgit.notes.InMemoryNoteBucket = org.eclipse.jgit.notes.InMemoryNoteBucket.append(java.util.Iterator<org.eclipse.jgit.notes.Note>.next());"},"status":-2},{"failures":[0],"tindex":"fae2a15f-4c27-11e5-b283-e747adb77eb7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.CanonicalTreeParser:331","type":"CtOperatorAssignmentImpl","sourcecode":"int += (org.eclipse.jgit.lib.Constants.int) + 1"},"variableMap":{"org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH":"n","ptr":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:223","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"fae2a160-4c27-11e5-b283-4da0d0433672","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:97","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.RawParseUtils.byte[][char] = ((byte)((char - 'a') + 10))"},"variableMap":{"org.eclipse.jgit.util.RawParseUtils.digits16":"org.eclipse.jgit.util.RawParseUtils.digits10","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:90","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.RawParseUtils.byte[][char] = ((byte)(char - '0'))"},"status":-2},{"failures":[],"tindex":"fae2a161-4c27-11e5-b283-971f659e4a2b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileSnapshot:78","type":"CtUnaryOperatorImpl","sourcecode":"-1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:249","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.addTree(new org.eclipse.jgit.dircache.DirCacheBuildIterator(org.eclipse.jgit.dircache.DirCacheBuilder))"},"status":-2},{"failures":[],"tindex":"fae2a162-4c27-11e5-b283-6f5686094299","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:373","type":"CtLocalVariableImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref>"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LsRemoteCommand:201","type":"CtLocalVariableImpl","sourcecode":"java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>()"},"status":-2},{"failures":[],"tindex":"fae2c873-4c27-11e5-b283-7fc5880ce03c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:304","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    int = org.eclipse.jgit.internal.storage.pack.DeltaIndex.org.eclipse.jgit.internal.storage.pack.DeltaIndex.step(int, byte[][int++], byte[][int++]);\n    continue;\n} "},"variableMap":{"res":"resBuf","blkPtr":"msz","blkEnd":"msz","this":"srcIndex","hash":"msz","entryIdx":"msz"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:299","type":"CtTryImpl","sourcecode":"try {\n    java.io.OutputStream java.io.OutputStream = int <= (8 << 10) ? new org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream(int) : new org.eclipse.jgit.util.TemporaryBuffer.Heap(int);\n    if (org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream, byte[], int))\n        org.eclipse.jgit.internal.storage.pack.DeltaWindow.selectDeltaBase(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry, java.io.OutputStream);\n    \n} catch (java.io.IOException deltaTooBig) {\n}"},"status":-2},{"failures":[],"tindex":"fae2c874-4c27-11e5-b283-45ee73bb6ba0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:396","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.getDeltaBase()"},"variableMap":{"this":"object"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry:58","type":"CtAssignmentImpl","sourcecode":"this.org.eclipse.jgit.internal.storage.pack.ObjectToPack = org.eclipse.jgit.internal.storage.pack.ObjectToPack"},"status":-2},{"failures":[1,2,3,4,5,6,7,8,9,10,11],"tindex":"fae2c875-4c27-11e5-b283-db854662ec54","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ReflogReaderImpl:92","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException();\n"},"variableMap":{"number":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.ChangeIdUtil:209","type":"CtForImpl","sourcecode":"for ( ; int < (java.lang.String[].int) ; ++int) {\n    java.lang.StringBuilder.append(java.lang.String[][int]);\n    java.lang.StringBuilder.append(\"\\n\");\n}"},"status":-1},{"failures":[12,13,14],"tindex":"fae2c876-4c27-11e5-b283-3b17c6252c5a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:312","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(0, int)"},"status":-1},{"failures":[],"tindex":"fae2c877-4c27-11e5-b283-c710bd140afa","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.AmazonS3:330","type":"CtIfImpl","sourcecode":"if (((java.lang.String.length()) > 0) && (!(java.lang.String.endsWith(\"/\"))))\n    java.lang.String += \"/\";\n"},"variableMap":{"prefix":"distnum"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:563","type":"CtTryImpl","sourcecode":"try {\n    int = java.lang.Integer.parseInt(java.lang.String);\n} catch (java.lang.NumberFormatException e) {\n    throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n}"},"status":0},{"failures":[],"tindex":"fae2ef88-4c27-11e5-b283-75a0c4ab4857","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:221","type":"CtIfImpl","sourcecode":"if (byte[] == null)\n    continue;\n"},"variableMap":{"b":"org.eclipse.jgit.lib.CommitBuilder.hparent"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.CommitBuilder:271","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId : org.eclipse.jgit.lib.CommitBuilder.getParentIds()) {\n    java.io.ByteArrayOutputStream.write(org.eclipse.jgit.lib.CommitBuilder.byte[]);\n    java.io.ByteArrayOutputStream.write(' ');\n    org.eclipse.jgit.lib.ObjectId.copyTo(java.io.ByteArrayOutputStream);\n    java.io.ByteArrayOutputStream.write('\\n');\n}"},"status":-2},{"failures":[15],"tindex":"fae2ef89-4c27-11e5-b283-19f526b669f0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:200","type":"CtForImpl","sourcecode":"for (int int = org.eclipse.jgit.patch.HunkHeader.getStartOffset() ; int < (org.eclipse.jgit.patch.HunkHeader.getEndOffset()) ; int++)\n    java.lang.StringBuilder.append(((char)(org.eclipse.jgit.patch.HunkHeader.getBuffer()[int])));"},"variableMap":{"hh":"this","hunk":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.HunkHeader:372","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.patch.HunkHeader.copyLine(java.lang.StringBuilder, java.lang.String[], int[], 0)"},"status":-1},{"failures":[16,17,18,19,20],"tindex":"fae2ef8a-4c27-11e5-b283-c7af07d5d9ac","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.NoteMapMerger:310","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.notes.InMemoryNoteBucket.append(org.eclipse.jgit.notes.Note)"},"variableMap":{"result":"result","note":"note"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteMapMerger:309","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.notes.Note != null)\n    return org.eclipse.jgit.notes.InMemoryNoteBucket.append(org.eclipse.jgit.notes.Note);\nelse\n    return org.eclipse.jgit.notes.InMemoryNoteBucket;\n"},"status":-1},{"failures":[21,22,23,24,25,26,27,28,29,30],"tindex":"fae2ef8b-4c27-11e5-b283-e5418aa9f328","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RevertCommand:130","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.Ref == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.Ref.getObjectId());\n    org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n    for (org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref : java.util.List<org.eclipse.jgit.lib.Ref>) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getPeeledObjectId();\n        if (org.eclipse.jgit.lib.ObjectId == null)\n            org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Ref.getObjectId();\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) != 1)\n            throw new org.eclipse.jgit.api.errors.MultipleParentsNotAllowedException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.revwalk.RevCommit.name(), java.lang.Integer.valueOf(org.eclipse.jgit.revwalk.RevCommit.getParentCount())));\n        \n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n        java.lang.String java.lang.String = org.eclipse.jgit.api.RevertCommand.calculateOurName(org.eclipse.jgit.lib.Ref);\n        java.lang.String java.lang.String = ((org.eclipse.jgit.revwalk.RevCommit.getId().abbreviate(7).name()) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage());\n        org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository)));\n        org.eclipse.jgit.merge.ResolveMerger.setWorkingTreeIterator(new org.eclipse.jgit.treewalk.FileTreeIterator(org.eclipse.jgit.lib.Repository));\n        org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.revwalk.RevCommit.getTree());\n        org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"BASE\" , java.lang.String , java.lang.String });\n        java.lang.String java.lang.String = (\"Revert \\\"\" + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage())) + \"\\\"\";\n        java.lang.String java.lang.String = (((java.lang.String + \"\\n\\n\") + \"This reverts commit \") + (org.eclipse.jgit.revwalk.RevCommit.getId().getName())) + \".\\n\";\n        if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n            if (org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n                continue;\n            \n            org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n            org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n            org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n            org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.revwalk.RevCommit>.getRepository()).commit().setMessage(java.lang.String).setReflogComment((\"revert: \" + java.lang.String)).call();\n            java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit;\n        } else {\n            java.util.List<java.lang.String> = org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths();\n            java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> = org.eclipse.jgit.merge.ResolveMerger.getFailingPaths();\n            if (java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> != null)\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            else\n                org.eclipse.jgit.api.MergeResult = new org.eclipse.jgit.api.MergeResult(null , org.eclipse.jgit.merge.ResolveMerger.getBaseCommitId() , new org.eclipse.jgit.lib.ObjectId[]{ org.eclipse.jgit.revwalk.RevCommit.getId() , org.eclipse.jgit.revwalk.RevCommit.getId() } , org.eclipse.jgit.api.MergeResult.MergeStatus.org.eclipse.jgit.api.MergeResult.MergeStatus , org.eclipse.jgit.merge.MergeStrategy , org.eclipse.jgit.merge.ResolveMerger.getMergeResults() , java.util.Map<java.lang.String, org.eclipse.jgit.merge.ResolveMerger.MergeFailureReason> , null);\n            \n            if ((!(org.eclipse.jgit.merge.ResolveMerger.failed())) && (!(java.util.List<java.lang.String>.isEmpty()))) {\n                java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(java.lang.String, org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n                org.eclipse.jgit.lib.Repository.writeRevertHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n                org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n            } \n            return null;\n        }\n    }\n} catch (java.io.IOException e) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.IOException) , java.io.IOException);\n} finally {\n    org.eclipse.jgit.revwalk.RevWalk.release();\n}"},"status":-1},{"failures":[],"tindex":"fae3169c-4c27-11e5-b283-1140fed965d4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:169","type":"CtIfImpl","sourcecode":"if ((int + 8) <= int) {\n    return int;\n} "},"variableMap":{"b":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.DELTA_SHIFT","nibbles":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.DELTA_SHIFT","v":"flags"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:190","type":"CtReturnImpl","sourcecode":"return (int) >>> (org.eclipse.jgit.internal.storage.pack.ObjectToPack.int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
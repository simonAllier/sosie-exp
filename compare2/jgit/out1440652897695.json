{"failureDictionary":{"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":23,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockHEAD":48,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":2,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":13,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPruneNone":16,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockFrom":42,"org.eclipse.jgit.api.RenameBranchCommandTest.renameBranchExistingSection":54,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":31,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":11,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":40,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":1,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":5,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":37,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":38,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitTwoTreeTwoBlob":21,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockFrom":47,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":29,"org.eclipse.jgit.api.RenameBranchCommandTest.renameBranchMultipleConfigValues":55,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":36,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":25,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":26,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":27,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":24,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree1":19,"org.eclipse.jgit.revwalk.ObjectWalkTest.testTwoCommitDeepTree2":20,"org.eclipse.jgit.api.RenameBranchCommandTest.renameBranchNoConfigValues":53,"org.eclipse.jgit.api.RenameBranchCommandTest.renameBranchSingleConfigValue":56,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":18,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":41,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":39,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":50,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":34,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockFrom":45,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":28,"org.eclipse.jgit.api.BranchCommandTest.testRenameLocalBranch":57,"org.eclipse.jgit.internal.storage.file.GcTagTest.annotatedTag_objectNotPruned":22,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":10,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockTo":43,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":0,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":58,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":9,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":17,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":49,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":8,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":6,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":12,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":4,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":14,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":15,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":52,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":35,"org.eclipse.jgit.internal.storage.file.GcBranchPrunedTest.branch_historyNotPruned":3,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockTo":46,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":59,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":33,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":51,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":32,"org.eclipse.jgit.util.GitDateParserTest.yesterday":60,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":30},"transformations":[{"failures":[0,1,2],"tindex":"7da1c49c-4c7b-11e5-bffa-61e1b94cae72","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.LsRemoteCommand:191","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.Transport = org.eclipse.jgit.transport.Transport.open(new org.eclipse.jgit.transport.URIish(java.lang.String))"},"variableMap":{"transport":"transport","remote":"remote"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LsRemoteCommand:189","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.Transport = org.eclipse.jgit.transport.Transport.open(org.eclipse.jgit.lib.Repository, java.lang.String)"},"status":-1},{"failures":[],"tindex":"7da1ebad-4c7b-11e5-bffa-41e4b9f4c786","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FS_POSIX:104","type":"CtReturnImpl","sourcecode":"return !(org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.NameConflictTreeWalk:227","type":"CtReturnImpl","sourcecode":"return true"},"status":0},{"failures":[],"tindex":"7da1ebae-4c7b-11e5-bffa-3d1ef9991b3f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.WindowCursor:359","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.file.WindowCache.getStreamFileThreshold()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RebaseTodoFile:166","type":"CtReturnImpl","sourcecode":"return -1"},"status":-2},{"failures":[],"tindex":"7da212bf-4c7b-11e5-bffa-4b80ae0ab6c4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.attributes.AttributesRule:135","type":"CtAssignmentImpl","sourcecode":"boolean = true"},"status":-2},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"tindex":"7da212c0-4c7b-11e5-bffa-77c14e54fd4b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.BlockObjQueue:96","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block.org.eclipse.jgit.revwalk.BlockObjQueue.Block"},"variableMap":{"next":"b","b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.BlockObjQueue:64","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockObjQueue.Block = org.eclipse.jgit.revwalk.BlockObjQueue.Block"},"status":-1},{"failures":[],"tindex":"7da2fd21-4c7b-11e5-bffa-f7f819655a7e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:243","type":"CtIfImpl","sourcecode":"if ((++(int)) >= (1 << (int)))\n    throw new java.util.NoSuchElementException();\n"},"variableMap":{"dirIdx":"cmp","bits":"cmp"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BaseSearch:135","type":"CtIfImpl","sourcecode":"if (int > 0)\n    continue CHECK_BASE;\n"},"status":0},{"failures":[],"tindex":"7da2fd22-4c7b-11e5-bffa-3d7fe46c9139","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexWriter:212","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeImpl()"},"status":-1},{"failures":[],"tindex":"7da34b43-4c7b-11e5-bffa-794ba3c29314","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteMapMerger:161","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.notes.InMemoryNoteBucket = org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int, org.eclipse.jgit.notes.NoteMapMerger.asFanout(org.eclipse.jgit.notes.InMemoryNoteBucket), org.eclipse.jgit.notes.NoteMapMerger.asFanout(org.eclipse.jgit.notes.InMemoryNoteBucket), org.eclipse.jgit.notes.NoteMapMerger.asFanout(org.eclipse.jgit.notes.InMemoryNoteBucket))"},"status":-2},{"failures":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"tindex":"7da34b44-4c7b-11e5-bffa-c5b51e3b3593","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.RefUpdate:570","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result"},"variableMap":{"org.eclipse.jgit.lib.RefUpdate.Result.LOCK_FAILURE":"result"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefRename:150","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefRename.doRename();\n    return org.eclipse.jgit.lib.RefUpdate.Result;\n} catch (java.io.IOException err) {\n    org.eclipse.jgit.lib.RefUpdate.Result = org.eclipse.jgit.lib.RefUpdate.Result.org.eclipse.jgit.lib.RefUpdate.Result;\n    throw java.io.IOException;\n}"},"status":-1},{"failures":[],"tindex":"7da37255-4c7b-11e5-bffa-7d5818b5219a","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.InterruptTimer:224","type":"CtReturnImpl","sourcecode":"return java.lang.System.currentTimeMillis()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:191","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.internal.storage.pack.DeltaWindow.org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry.org.eclipse.jgit.internal.storage.pack.ObjectToPack)"},"status":-2},{"failures":[],"tindex":"7da37256-4c7b-11e5-bffa-27f19c51a301","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.FetchCommand:122","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)"},"status":0},{"failures":[],"tindex":"7da37257-4c7b-11e5-bffa-2fbcff47d3d7","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:288","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revplot.PlotLane = org.eclipse.jgit.revplot.PlotCommitList<L>.nextFreeLane(java.util.BitSet)"},"status":0},{"failures":[],"tindex":"7da39968-4c7b-11e5-bffa-775eb5c58c07","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:542","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriter.ObjectIdSet>.add(org.eclipse.jgit.internal.storage.file.GC.org.eclipse.jgit.internal.storage.file.GC.objectIdSet(org.eclipse.jgit.internal.storage.file.PackFile.getIndex()))"},"status":-2},{"failures":[],"tindex":"7da39969-4c7b-11e5-bffa-5b5bcb90d748","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:739","type":"CtIfImpl","sourcecode":"if (byte[] != null)\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\nelse\n    return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n"},"variableMap":{"p":"org.eclipse.jgit.lib.Constants.OBJ_TREE","data":"tempId","pos":"deltaPos","sz":"deltaPos","curs":"curs","db":"db","typeCode":"org.eclipse.jgit.lib.Constants.OBJ_COMMIT"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:706","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = org.eclipse.jgit.internal.storage.file.WindowCursor.byte[];\n    org.eclipse.jgit.internal.storage.file.PackFile.Delta org.eclipse.jgit.internal.storage.file.PackFile.Delta = null;\n    byte[] byte[] = null;\n    int int = org.eclipse.jgit.lib.Constants.int;\n    boolean boolean = false;\n    SEARCH : for ( ;  ; ) {\n        org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        int int = (byte[][0]) & 255;\n        final int int = (int >> 4) & 7;\n        long long = int & 15;\n        int int = 4;\n        int int = 1;\n        while ((int & 128) != 0) {\n            int = (byte[][int++]) & 255;\n            long += ((long)((int & 127))) << int;\n            int += 7;\n        }\n        switch (int) {\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) || (long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())))\n                        byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.file.WindowCursor);\n                    \n                    if (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) {\n                        int = int;\n                        break SEARCH;\n                    } \n                    if (byte[] != null)\n                        return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                    else\n                        return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n                    \n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    int = (byte[][int++]) & 255;\n                    long long = int & 127;\n                    while ((int & 128) != 0) {\n                        long += 1;\n                        int = (byte[][int++]) & 255;\n                        long <<= 7;\n                        long += int & 127;\n                    }\n                    long = long - long;\n                    org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , int , long);\n                    if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                    if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    org.eclipse.jgit.internal.storage.file.PackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                    long long = org.eclipse.jgit.internal.storage.file.PackFile.findDeltaBase(org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                    org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                    if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                    if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            default :\n                throw new java.io.IOException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.valueOf(int)));\n        }\n    }\n    if (byte[] == null)\n        throw new java.io.IOException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    do {\n        if (boolean)\n            boolean = false;\n        else if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta.org.eclipse.jgit.internal.storage.file.PackFile.Delta) == null)\n            org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().store(this, org.eclipse.jgit.internal.storage.file.PackFile.Delta.long, byte[], int);\n        \n        long = org.eclipse.jgit.internal.storage.file.PackFile.Delta.long;\n        final byte[] byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int)), org.eclipse.jgit.internal.storage.file.PackFile.Delta.int, org.eclipse.jgit.internal.storage.file.WindowCursor);\n        if (byte[] == null) {\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException.OutOfMemory(new java.lang.OutOfMemoryError());\n        } \n        final long long = org.eclipse.jgit.internal.storage.pack.BinaryDelta.getResultSize(byte[]);\n        if ((java.lang.Integer.int) <= long)\n            throw new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n        \n        final byte[] byte[];\n        try {\n            byte[] = new byte[((int)(long))];\n        } catch (java.lang.OutOfMemoryError tooBig) {\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException.OutOfMemory(java.lang.OutOfMemoryError);\n        }\n        org.eclipse.jgit.internal.storage.pack.BinaryDelta.apply(byte[], byte[], byte[]);\n        byte[] = byte[];\n        org.eclipse.jgit.internal.storage.file.PackFile.Delta = org.eclipse.jgit.internal.storage.file.PackFile.Delta.org.eclipse.jgit.internal.storage.file.PackFile.Delta;\n    } while (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null );\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n} catch (java.util.zip.DataFormatException dfe) {\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.valueOf(long), org.eclipse.jgit.internal.storage.file.PackFile.getPackFile()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    throw org.eclipse.jgit.errors.CorruptObjectException;\n}"},"status":-2},{"failures":[60],"tindex":"7da435aa-4c7b-11e5-bffa-13b1d2dd3876","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.GitDateParser:269","type":"CtInvocationImpl","sourcecode":"java.util.Calendar.set(java.util.Calendar.int, 0)"},"status":-1}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
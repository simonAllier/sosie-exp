{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":93,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":58,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithoutLocalRepository":97,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":98,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":70,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":67,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":28,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":37,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":75,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":15,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":38,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":10,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":29,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":79,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":68,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":36,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":40,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":81,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":88,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":21,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":102,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":63,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":66,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":71,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_nonBare":2,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":72,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":85,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":30,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":87,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefLockedRefNotPackedNoError":4,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":54,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":13,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":42,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":94,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":11,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":39,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":25,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":41,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":53,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":52,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_bare":3,"org.eclipse.jgit.merge.ResolveMergerTest.mergeWithCrlfInWT":92,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":64,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":43,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":51,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":22,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":74,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":50,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":27,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":90,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":48,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":14,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":31,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":101,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":33,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":60,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":100,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":8,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":65,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":62,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":61,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":83,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":45,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":76,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":32,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":47,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":7,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":19,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":20,"org.eclipse.jgit.patch.PatchTest.testParse_GitBinaryDelta":96,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":46,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":78,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":23,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":82,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":84,"org.eclipse.jgit.api.GitConstructionTest.testClose":0,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":34,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":73,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":57,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":1,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":77,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":24,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":80,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":69,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":18,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":86,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":49,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack":6,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":9,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":89,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.looseRefPacked":5,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":99,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":17,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":16,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":91,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":95,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":35,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":26,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":59,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":12,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":56},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"2cf554ee-4c78-11e5-9418-5b90f2ac00b2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.RefWriter:176","type":"CtInvocationImpl","sourcecode":"java.io.StringWriter.write('^')"},"variableMap":{"w":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefWriter:172","type":"CtInvocationImpl","sourcecode":"java.io.StringWriter.write(org.eclipse.jgit.lib.Ref.getName())"},"status":-1},{"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"tindex":"2cf57bff-4c78-11e5-9418-a36bd59f53b8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.ResolveMerger:799","type":"CtInvocationImpl","sourcecode":"java.io.FileOutputStream.close()"},"variableMap":{"fos":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeFormatter:86","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && ((org.eclipse.jgit.merge.MergeChunk.getConflictState()) != (org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState))) {\n    java.io.OutputStream.write(((\">>>>>>> \" + java.lang.String) + \"\\n\").getBytes(java.lang.String));\n    java.lang.String = null;\n} "},"status":-1},{"failures":[95],"tindex":"2cf57c00-4c78-11e5-9418-51bf39d631fe","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:827","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getRefDatabase().close()"},"variableMap":{"this":"subRepo"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:265","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.api.CloneCommand.cloneSubmodules(org.eclipse.jgit.lib.Repository);\n} finally {\n    org.eclipse.jgit.lib.Repository.close();\n}"},"status":-1},{"failures":[],"tindex":"2cf57c01-4c78-11e5-9418-b5c882482d9e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:110","type":"CtLocalVariableImpl","sourcecode":"int int = 8"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotCommitList:357","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.revplot.PlotCommit<L>.getParentCount()"},"status":-2},{"failures":[],"tindex":"2cf57c02-4c78-11e5-9418-bb5ee3fe2a7d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:309","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\" | \")"},"variableMap":{"sb":"sb"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.Strings:307","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append('\\\\')"},"status":0},{"failures":[],"tindex":"2cf5a313-4c78-11e5-9418-3121efe9a385","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CloneCommand:203","type":"CtReturnImpl","sourcecode":"return java.util.List<org.eclipse.jgit.transport.RefSpec>"},"variableMap":{"specs":"push"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RemoteConfig:440","type":"CtReturnImpl","sourcecode":"return java.util.Collections.unmodifiableList(java.util.List<org.eclipse.jgit.transport.RefSpec>)"},"status":0},{"failures":[],"tindex":"2cf5a314-4c78-11e5-9418-eb5ae86a2a8d","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.Repository:1164","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:206","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.file.UnpackedObject.org.eclipse.jgit.internal.storage.file.UnpackedObject.readSome(java.io.InputStream, byte[], 0, 64)"},"status":-2},{"failures":[],"tindex":"2cf5a315-4c78-11e5-9418-5f0e9c186776","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:269","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.WindowCache.purge(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:465","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Ref.getStorage().isLoose()) {\n    org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> = java.util.concurrent.atomic.AtomicReference<org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>>.get();\n    int int = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.find(org.eclipse.jgit.lib.Ref.getName());\n    if ((0 <= int) && ((org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.get(int)) == org.eclipse.jgit.lib.Ref)) {\n        org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef = ((org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef)(org.eclipse.jgit.lib.Ref)).peel(org.eclipse.jgit.lib.ObjectIdRef);\n        org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef> = org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>.set(int, org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef);\n        java.util.concurrent.atomic.AtomicReference<org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>>.compareAndSet(org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>, org.eclipse.jgit.util.RefList<org.eclipse.jgit.internal.storage.file.RefDirectory.LooseRef>);\n    } \n} "},"status":-2},{"failures":[],"tindex":"2cf5a316-4c78-11e5-9418-4d44d0a627a9","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.PendingGenerator:163","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.revwalk.PendingGenerator.int"},"variableMap":{"org.eclipse.jgit.revwalk.PendingGenerator.OVER_SCAN":"len","overScan":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:333","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":0},{"failures":[],"tindex":"2cf5a317-4c78-11e5-9418-e1e8aaae9e38","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectLoader:255","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.io.EOFException();\n"},"variableMap":{"n":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.Strings:115","type":"CtIfImpl","sourcecode":"if (int == (-1)) {\n    if (int < (java.lang.String.length()))\n        java.util.List<java.lang.String>.add(java.lang.String.substring(int));\n    \n    break;\n} "},"status":-2},{"failures":[96],"tindex":"2cf5ca28-4c78-11e5-9418-3baffc366763","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1232","type":"CtOperatorAssignmentImpl","sourcecode":"int |= (org.eclipse.jgit.revwalk.RevWalk.int) | (int)"},"variableMap":{"retainOnReset":"ptr","org.eclipse.jgit.revwalk.RevWalk.PARSED":"ptr","retainFlags":"ptr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.BinaryHunk:125","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.BinaryHunk.byte[].int)), null)"},"status":-1},{"failures":[],"tindex":"2cf5ca29-4c78-11e5-9418-1964de39c6a4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.DefaultNoteMerger:88","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.notes.Note(org.eclipse.jgit.notes.Note , org.eclipse.jgit.lib.ObjectId)"},"variableMap":{"ours":"id","noteData":"id"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteMap:236","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.notes.InMemoryNoteBucket.getNote(org.eclipse.jgit.lib.AnyObjectId, org.eclipse.jgit.lib.ObjectReader)"},"status":-2},{"failures":[],"tindex":"2cf5ca2a-4c78-11e5-9418-d5421733df56","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.UploadPack:967","type":"CtIfImpl","sourcecode":"if (((int) == 0) || ((org.eclipse.jgit.revwalk.RevCommit.getCommitTime()) < (int)))\n    int = org.eclipse.jgit.revwalk.RevCommit.getCommitTime();\n"},"variableMap":{"c":"rev","oldestTime":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:445","type":"CtIfImpl","sourcecode":"if ((int + 1) < (char[].int)) {\n    switch (char[][(int + 1)]) {\n        case '0' :\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n            int int;\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n            for (int = int + 1 ; int < (char[].int) ; ++int) {\n                if (!(java.lang.Character.isDigit(char[][int])))\n                    break;\n                \n            }\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n            int int;\n            try {\n                int = java.lang.Integer.parseInt(java.lang.String);\n            } catch (java.lang.NumberFormatException e) {\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n            }\n            if (int != 0) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                \n            } \n            int = int - 1;\n            int = int;\n            break;\n        case '{' :\n            int int;\n            java.lang.String java.lang.String = null;\n            for (int = int + 2 ; int < (char[].int) ; ++int) {\n                if ((char[][int]) == '}') {\n                    java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                    break;\n                } \n            }\n            int = int;\n            if (java.lang.String != null)\n                if (java.lang.String.equals(\"tree\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"commit\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                } else if (java.lang.String.equals(\"blob\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                    if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                    \n                } else if (java.lang.String.equals(\"\")) {\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                } else\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n            else\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n            \n            int = int;\n            break;\n        default :\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                \n            } else\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n    }\n} else {\n    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n    if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n            org.eclipse.jgit.revwalk.RevObject = null;\n        else\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n        \n    } else\n        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n    \n}"},"status":-2},{"failures":[97,98,99,100,101,102],"tindex":"2cf5f13b-4c78-11e5-9418-039a132f6381","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.ChangeIdUtil:69","type":"CtInvocationImpl","sourcecode":"java.lang.String.replaceAll(\"(?i)(?m)^Signed-off-by:.*$\\n?\", \"\").replaceAll(\"(?m)^#.*$\\n?\", \"\").replaceAll(\"(?m)\\n\\n\\n+\", \"\\\\\\n\")"},"variableMap":{"msg":"remote"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LsRemoteCommand:105","type":"CtAssignmentImpl","sourcecode":"this.java.lang.String = java.lang.String"},"status":-1}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
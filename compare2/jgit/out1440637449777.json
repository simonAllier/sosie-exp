{"failureDictionary":{"org.eclipse.jgit.diff.HistogramDiffTest.testFallbackToMyersDiff":18,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":36,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":42,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_DuplicateAButCommonUniqueInB":25,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":1,"org.eclipse.jgit.api.PushCommandTest.testPush":3,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_MoveBlock":24,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_UniqueCommonLargerThanMatchPoint":26,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":6,"org.eclipse.jgit.treewalk.filter.InterIndexDiffFilterTest.testTwoSame":45,"org.eclipse.jgit.transport.RefSpecTest.testSetDestination_SourceNull":8,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":32,"org.eclipse.jgit.merge.MergeAlgorithmTest.testNoAgainstOneModification":33,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipBlocks":19,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":30,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":44,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_ReplaceCommonDelete":22,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":2,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":40,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":41,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":37,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":13,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LinuxBug":23,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonGrowsPrefixAndSuffix":28,"org.eclipse.jgit.diff.HistogramDiffTest.testExceedsChainLength_DuringScanOfB":17,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":5,"org.eclipse.jgit.transport.RefSpecTest.invalidSetDestination":9,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":14,"org.eclipse.jgit.diff.HistogramDiffTest.testExceedsChainLength_DuringScanOfA":16,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_NoUniqueMiddleSide_FlipAndExpand":20,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":12,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":15,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_InvertBlocks":27,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":34,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":10,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":0,"org.eclipse.jgit.api.BlameCommandTest.testEditAllLines":39,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_LcsContainsUnique":21,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":4,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":11,"org.eclipse.jgit.diff.HistogramDiffTest.testEdit_CommonReplaceCommonDeleteCommon":29,"org.eclipse.jgit.transport.RefSpecTest.testSetDestination":7,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":35,"org.eclipse.jgit.api.BlameCommandTest.testDeleteMiddleLines":38,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":43,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoSimilarModsAndOneInsert":31},"transformations":[{"failures":[0,1,2,3,4,5,6],"tindex":"85f46491-4c57-11e5-aa88-c739f9e5fb2a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:178","type":"CtReturnImpl","sourcecode":"return 0"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandInputStream:131","type":"CtReturnImpl","sourcecode":"return -1"},"status":-1},{"failures":[],"tindex":"85f48ba2-4c57-11e5-aa88-b196d06ad4b9","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:461","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.FileRepository.notifyIndexChanged()"},"variableMap":{"this":"repo"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:496","type":"CtInvocationImpl","sourcecode":"((org.eclipse.jgit.internal.storage.file.RefDirectory)(org.eclipse.jgit.internal.storage.file.FileRepository.getRefDatabase())).pack(java.util.List<java.lang.String>)"},"status":-2},{"failures":[],"tindex":"85f4b2b3-4c57-11e5-aa88-a350044cb868","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.attributes.AttributesNode:105","type":"CtIfImpl","sourcecode":"if (int == (-1))\n    int = int;\nelse\n    int = java.lang.Math.min(int, int);\n"},"variableMap":{"patternEndTab":"w1","patternEnd":"o","patternEndSpace":"o"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:309","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.NB.encodeInt32(byte[], int, int)"},"status":-2},{"failures":[],"tindex":"85f4b2b4-4c57-11e5-aa88-d9bb6aa0fb0a","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:416","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(25)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:213","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.endTask()"},"status":-2},{"failures":[],"tindex":"85f4b2b5-4c57-11e5-aa88-d5bb375039f8","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RemoteConfig:174","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.transport.URIish>.add(new org.eclipse.jgit.transport.URIish(org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)))"},"status":-2},{"failures":[],"tindex":"85f4b2b6-4c57-11e5-aa88-ebe91b656269","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.AutoCRLFOutputStream:98","type":"CtLocalVariableImpl","sourcecode":"final int int = (int + int) - int"},"variableMap":{"startOff":"w5","overflow":"len","startLen":"len"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:524","type":"CtLocalVariableImpl","sourcecode":"final int int = org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int, 5, int)"},"status":-2},{"failures":[],"tindex":"85f4d9c7-4c57-11e5-aa88-1b2827276f24","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:465","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(100)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.NameConflictTreeWalk:317","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.AbstractTreeIterator == (org.eclipse.jgit.treewalk.AbstractTreeIterator))\n    org.eclipse.jgit.treewalk.AbstractTreeIterator = null;\n"},"status":-2},{"failures":[7,8,9,10,11,12,13,14,15],"tindex":"85f4d9c8-4c57-11e5-aa88-595e40ae6ef7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RenameBranchCommand:129","type":"CtAssignmentImpl","sourcecode":"java.lang.String = (org.eclipse.jgit.lib.Constants.java.lang.String) + (java.lang.String)"},"variableMap":{"fullNewName":"dstName","newName":"dstName","org.eclipse.jgit.lib.Constants.R_REMOTES":"destination"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RefSpec:264","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.RefSpec.java.lang.String = org.eclipse.jgit.transport.RefSpec.org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)"},"status":-1},{"failures":[],"tindex":"85f4d9c9-4c57-11e5-aa88-074f8c8a0a85","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:153","type":"CtAssignmentImpl","sourcecode":"int = org.eclipse.jgit.dircache.DirCacheEntry.int"},"variableMap":{"len":"dstoff","org.eclipse.jgit.dircache.DirCacheEntry.INFO_LEN_EXTENDED":"dstoff"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:542","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"status":0},{"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"85f4d9ca-4c57-11e5-aa88-8154212ba5ad","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner:110","type":"CtAssignmentImpl","sourcecode":"long[][int] = (((long)(int)) << 32) | int"},"variableMap":{"head":"rIdx","entries":"recs","key":"ptr","ptr":"tIdx"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:226","type":"CtAssignmentImpl","sourcecode":"long[][int] = org.eclipse.jgit.diff.HistogramDiffIndex<S>.org.eclipse.jgit.diff.HistogramDiffIndex.recCreate(int[][int], int, 1)"},"status":-1},{"failures":[45],"tindex":"85f500db-4c57-11e5-aa88-e14a244cd3bb","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter:79","type":"CtReturnImpl","sourcecode":"return (org.eclipse.jgit.dircache.DirCacheEntry == null) || (!(org.eclipse.jgit.dircache.DirCacheEntry.isSkipWorkTree()))"},"variableMap":{"e":"baseDci"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter:81","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid())\n    return false;\n"},"status":-1},{"failures":[],"tindex":"85f500dc-4c57-11e5-aa88-c1fde5fd1d28","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:169","type":"CtWhileImpl","sourcecode":"while (int < (byte[].int)) {\n    final int int = (byte[][int++]) & 255;\n    if ((int & 128) != 0) {\n        int int = 0;\n        if ((int & 1) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 2) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 4) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if ((int & 8) != 0)\n            int |= ((byte[][int++]) & 255) << 24;\n        \n        int int = 0;\n        if ((int & 16) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 32) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 64) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if (int == 0)\n            int = 65536;\n        \n        java.lang.System.arraycopy(byte[], int, byte[], int, int);\n        int += int;\n    } else if (int != 0) {\n        java.lang.System.arraycopy(byte[], int, byte[], int, int);\n        int += int;\n        int += int;\n    } else {\n        throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    }\n}"},"status":0},{"failures":[],"tindex":"85f500dd-4c57-11e5-aa88-5f56f6a8fccc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:707","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.Repository.(getRef(java.lang.String)) != null)\n    return java.lang.String;\n"},"variableMap":{"name":"invalidAncestryLength","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:430","type":"CtSwitchImpl","sourcecode":"switch (char[][int]) {\n    case '^' :\n        if (org.eclipse.jgit.revwalk.RevObject == null) {\n            if (java.lang.String == null)\n                if (int == 0)\n                    java.lang.String = new java.lang.String(char[] , int , int);\n                else {\n                    int = int + 1;\n                    break;\n                }\n            \n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n            java.lang.String = null;\n            if (org.eclipse.jgit.revwalk.RevObject == null)\n                return null;\n            \n        } \n        if ((int + 1) < (char[].int)) {\n            switch (char[][(int + 1)]) {\n                case '0' :\n                case '1' :\n                case '2' :\n                case '3' :\n                case '4' :\n                case '5' :\n                case '6' :\n                case '7' :\n                case '8' :\n                case '9' :\n                    int int;\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                    for (int = int + 1 ; int < (char[].int) ; ++int) {\n                        if (!(java.lang.Character.isDigit(char[][int])))\n                            break;\n                        \n                    }\n                    java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n                    int int;\n                    try {\n                        int = java.lang.Integer.parseInt(java.lang.String);\n                    } catch (java.lang.NumberFormatException e) {\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n                    }\n                    if (int != 0) {\n                        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                        if (int > (org.eclipse.jgit.revwalk.RevCommit.getParentCount()))\n                            org.eclipse.jgit.revwalk.RevObject = null;\n                        else\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent((int - 1));\n                        \n                    } \n                    int = int - 1;\n                    int = int;\n                    break;\n                case '{' :\n                    int int;\n                    java.lang.String java.lang.String = null;\n                    for (int = int + 2 ; int < (char[].int) ; ++int) {\n                        if ((char[][int]) == '}') {\n                            java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                            break;\n                        } \n                    }\n                    int = int;\n                    if (java.lang.String != null)\n                        if (java.lang.String.equals(\"tree\")) {\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n                        } else if (java.lang.String.equals(\"commit\")) {\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevObject);\n                        } else if (java.lang.String.equals(\"blob\")) {\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                            if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevBlob))\n                                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                            \n                        } else if (java.lang.String.equals(\"\")) {\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                        } else\n                            throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                        \n                    else\n                        throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                    \n                    int = int;\n                    break;\n                default :\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n                    if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                        org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                        if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                            org.eclipse.jgit.revwalk.RevObject = null;\n                        else\n                            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                        \n                    } else\n                        throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n                    \n            }\n        } else {\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n            if (org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit) {\n                org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n                if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0)\n                    org.eclipse.jgit.revwalk.RevObject = null;\n                else\n                    org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n                \n            } else\n                throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n            \n        }\n        int = int + 1;\n        break;\n    case '~' :\n        if (org.eclipse.jgit.revwalk.RevObject == null) {\n            if (java.lang.String == null)\n                if (int == 0)\n                    java.lang.String = new java.lang.String(char[] , int , int);\n                else {\n                    int = int + 1;\n                    break;\n                }\n            \n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n            java.lang.String = null;\n            if (org.eclipse.jgit.revwalk.RevObject == null)\n                return null;\n            \n        } \n        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevWalk.peel(org.eclipse.jgit.revwalk.RevObject);\n        if (!(org.eclipse.jgit.revwalk.RevObject instanceof org.eclipse.jgit.revwalk.RevCommit))\n            throw new org.eclipse.jgit.errors.IncorrectObjectTypeException(org.eclipse.jgit.revwalk.RevObject , org.eclipse.jgit.lib.Constants.java.lang.String);\n        \n        int int;\n        for (int = int + 1 ; int < (char[].int) ; ++int) {\n            if (!(java.lang.Character.isDigit(char[][int])))\n                break;\n            \n        }\n        int int;\n        if ((int - int) > 1) {\n            java.lang.String java.lang.String = new java.lang.String(char[] , (int + 1) , ((int - int) - 1));\n            try {\n                int = java.lang.Integer.parseInt(java.lang.String);\n            } catch (java.lang.NumberFormatException e) {\n                throw new org.eclipse.jgit.errors.RevisionSyntaxException(org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.lang.String);\n            }\n        } else\n            int = 1;\n        \n        while (int > 0) {\n            org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject));\n            if ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 0) {\n                org.eclipse.jgit.revwalk.RevObject = null;\n                break;\n            } \n            org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n            org.eclipse.jgit.revwalk.RevWalk.parseHeaders(org.eclipse.jgit.revwalk.RevCommit);\n            org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.revwalk.RevCommit;\n            --int;\n        }\n        int = int - 1;\n        int = int;\n        break;\n    case '@' :\n        if (org.eclipse.jgit.revwalk.RevObject != null)\n            throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n        \n        if (((int + 1) < (char[].int)) && ((char[][(int + 1)]) != '{'))\n            continue;\n        \n        int int;\n        java.lang.String java.lang.String = null;\n        for (int = int + 2 ; int < (char[].int) ; ++int) {\n            if ((char[][int]) == '}') {\n                java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n                break;\n            } \n        }\n        if (java.lang.String != null) {\n            if (java.lang.String.equals(\"upstream\")) {\n                if (java.lang.String == null)\n                    java.lang.String = new java.lang.String(char[] , int , int);\n                \n                if (java.lang.String.equals(\"\"))\n                    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                \n                if (!(org.eclipse.jgit.lib.Repository.isValidRefName((\"x/\" + java.lang.String))))\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n                org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String);\n                java.lang.String = null;\n                if (org.eclipse.jgit.lib.Ref == null)\n                    return null;\n                \n                if (org.eclipse.jgit.lib.Ref.isSymbolic())\n                    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getLeaf();\n                \n                java.lang.String = org.eclipse.jgit.lib.Ref.getName();\n                org.eclipse.jgit.transport.RemoteConfig org.eclipse.jgit.transport.RemoteConfig;\n                try {\n                    org.eclipse.jgit.transport.RemoteConfig = new org.eclipse.jgit.transport.RemoteConfig(org.eclipse.jgit.lib.Repository.getConfig() , \"origin\");\n                } catch (java.net.URISyntaxException e) {\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                }\n                java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.getConfig().getString(org.eclipse.jgit.lib.ConfigConstants.java.lang.String, org.eclipse.jgit.lib.Repository.shortenRefName(org.eclipse.jgit.lib.Ref.getName()), org.eclipse.jgit.lib.ConfigConstants.java.lang.String);\n                java.util.List<org.eclipse.jgit.transport.RefSpec> java.util.List<org.eclipse.jgit.transport.RefSpec> = org.eclipse.jgit.transport.RemoteConfig.getFetchRefSpecs();\n                for (org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec : java.util.List<org.eclipse.jgit.transport.RefSpec>) {\n                    if (org.eclipse.jgit.transport.RefSpec.matchSource(java.lang.String)) {\n                        org.eclipse.jgit.transport.RefSpec org.eclipse.jgit.transport.RefSpec = org.eclipse.jgit.transport.RefSpec.expandFromSource(java.lang.String);\n                        java.lang.String = org.eclipse.jgit.transport.RefSpec.getDestination();\n                        break;\n                    } \n                }\n                if (java.lang.String == null)\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n            } else if (java.lang.String.matches(\"^-\\\\d+$\")) {\n                if (java.lang.String != null)\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                else {\n                    java.lang.String java.lang.String = org.eclipse.jgit.lib.Repository.resolveReflogCheckout(-(java.lang.Integer.parseInt(java.lang.String)));\n                    if (org.eclipse.jgit.lib.ObjectId.isId(java.lang.String))\n                        org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                    else\n                        java.lang.String = java.lang.String;\n                    \n                }\n            } else {\n                if (java.lang.String == null)\n                    java.lang.String = new java.lang.String(char[] , int , int);\n                \n                if (java.lang.String.equals(\"\"))\n                    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                \n                if (!(org.eclipse.jgit.lib.Repository.isValidRefName((\"x/\" + java.lang.String))))\n                    throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n                \n                org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String);\n                java.lang.String = null;\n                if (org.eclipse.jgit.lib.Ref == null)\n                    return null;\n                \n                if (org.eclipse.jgit.lib.Ref.isSymbolic())\n                    org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Ref.getLeaf();\n                \n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.resolveReflog(org.eclipse.jgit.revwalk.RevWalk, org.eclipse.jgit.lib.Ref, java.lang.String);\n            }\n            int = int;\n        } else\n            throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n        \n        break;\n    case ':' :\n        {\n            org.eclipse.jgit.revwalk.RevTree org.eclipse.jgit.revwalk.RevTree;\n            if (org.eclipse.jgit.revwalk.RevObject == null) {\n                if (java.lang.String == null)\n                    java.lang.String = new java.lang.String(char[] , int , int);\n                \n                if (java.lang.String.equals(\"\"))\n                    java.lang.String = org.eclipse.jgit.lib.Constants.java.lang.String;\n                \n                org.eclipse.jgit.revwalk.RevObject = org.eclipse.jgit.lib.Repository.parseSimple(org.eclipse.jgit.revwalk.RevWalk, java.lang.String);\n                java.lang.String = null;\n            } \n            if (org.eclipse.jgit.revwalk.RevObject == null)\n                return null;\n            \n            org.eclipse.jgit.revwalk.RevTree = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject);\n            if (int == ((char[].int) - 1))\n                return org.eclipse.jgit.revwalk.RevTree.copy();\n            \n            org.eclipse.jgit.treewalk.TreeWalk org.eclipse.jgit.treewalk.TreeWalk = org.eclipse.jgit.treewalk.TreeWalk.forPath(org.eclipse.jgit.revwalk.RevWalk.getObjectReader(), new java.lang.String(char[] , (int + 1) , (((char[].int) - int) - 1)), org.eclipse.jgit.revwalk.RevTree);\n            return org.eclipse.jgit.treewalk.TreeWalk != null ? org.eclipse.jgit.treewalk.TreeWalk.getObjectId(0) : null;\n        }\n    default :\n        if (org.eclipse.jgit.revwalk.RevObject != null)\n            throw new org.eclipse.jgit.errors.RevisionSyntaxException(java.lang.String);\n        \n}"},"status":-2},{"failures":[],"tindex":"85f59d1e-4c57-11e5-aa88-6f96afc9f55f","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.InterruptTimer:209","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.interrupted()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.DescribeCommand:231","type":"CtInvocationImpl","sourcecode":"java.util.List<Candidate>.add(Candidate)"},"status":0},{"failures":[],"tindex":"85f59d1f-4c57-11e5-aa88-9ba31d7b3fd5","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.MergeAlgorithm:258","type":"CtIfImpl","sourcecode":"if (int > 0)\n    int -= int;\n"},"variableMap":{"minBSize":"textx","BSizeDelta":"h"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:172","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; ++int) {\n    int += org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.drawLabel((int + int), (int / 2), org.eclipse.jgit.revplot.PlotCommit<TLane>.org.eclipse.jgit.lib.Ref[][int]);\n}"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
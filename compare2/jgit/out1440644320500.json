{"failureDictionary":{"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":42,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":52,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":47,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":46,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":54,"org.eclipse.jgit.api.ResetCommandTest.testHardResetOnUnbornBranch":58,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":12,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":10,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":28,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":6,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkWithMerges":4,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":8,"org.eclipse.jgit.revwalk.RevWalkCullTest.testProperlyCullAllAncestors2":2,"org.eclipse.jgit.api.ResetCommandTest.testPathsResetWithRef":63,"org.eclipse.jgit.api.ResetCommandTest.testMixedReset":60,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":36,"org.eclipse.jgit.lib.BranchTrackingStatusTest.shouldWorkInNormalCase":0,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupWithBlankLines":26,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":19,"org.eclipse.jgit.api.CommitAndLogCommandTest.testCommitRange":9,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":48,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":53,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":20,"org.eclipse.jgit.api.ResetCommandTest.testPathsReset":64,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":21,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":32,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":41,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":38,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkWithoutCommonAncestor":5,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":33,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":35,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":31,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":30,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":45,"org.eclipse.jgit.util.RefMapTest.testToString_NoPrefix":57,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":51,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":29,"org.eclipse.jgit.api.ResetCommandTest.testResetDefaultMode":62,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSquashFirstCommitShouldFail":37,"org.eclipse.jgit.revwalk.RevWalkCullTest.testProperlyCullAllAncestors_LongHistory":1,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":14,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":15,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":18,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":17,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":24,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":34,"org.eclipse.jgit.api.ResetCommandTest.testHardReset":61,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupFirstCommitShouldFail":40,"org.eclipse.jgit.util.RefMapTest.testToString_WithPrefix":56,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":23,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":27,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":49,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":22,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":25,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":16,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":43,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":39,"org.eclipse.jgit.revwalk.RevWalkUtilsCountTest.shouldWorkForNormalCase":3,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":11,"org.eclipse.jgit.api.ResetCommandTest.testPathsResetOnUnbornBranch":59,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":44,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":13},"transformations":[{"failures":[],"tindex":"85398607-4c67-11e5-9971-cfb08b424fde","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:113","type":"CtIfImpl","sourcecode":"if (int > 0) {\n    org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.drawLine(TColor, int, int, int, ((int + int) / 2), org.eclipse.jgit.revplot.AbstractPlotRenderer.int);\n    for (int int = 0 ; int < (org.eclipse.jgit.revplot.PlotCommit<TLane>.org.eclipse.jgit.revplot.PlotLane[].int) ; int++) {\n        final TLane TLane = ((TLane)(org.eclipse.jgit.revplot.PlotCommit<TLane>.org.eclipse.jgit.revplot.PlotLane[][int]));\n        final TColor TColor = org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.laneColor(TLane);\n        final int int = org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(TLane);\n        if ((java.lang.Math.abs((int - int))) > (org.eclipse.jgit.revplot.AbstractPlotRenderer.int)) {\n            final int int;\n            if (int < int)\n                int = int - ((org.eclipse.jgit.revplot.AbstractPlotRenderer.int) / 2);\n            else\n                int = int + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.int) / 2);\n            \n            org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.drawLine(TColor, int, (int / 2), int, (int / 2), org.eclipse.jgit.revplot.AbstractPlotRenderer.int);\n            org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.drawLine(TColor, int, (int / 2), int, int, org.eclipse.jgit.revplot.AbstractPlotRenderer.int);\n        } else\n            org.eclipse.jgit.revplot.AbstractPlotRenderer<TLane, TColor>.drawLine(TColor, int, (int / 2), int, int, org.eclipse.jgit.revplot.AbstractPlotRenderer.int);\n        \n        int = java.lang.Math.max(int, int);\n    }\n} "},"status":0},{"failures":[],"tindex":"8539d428-4c67-11e5-9971-572c27bf863e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:235","type":"CtIfImpl","sourcecode":"if ((int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.lib.ObjectChecker.byte[])) < 0)\n    throw new org.eclipse.jgit.errors.CorruptObjectException(\"no tree header\");\n"},"variableMap":{"this":"this","raw":"b","org.eclipse.jgit.lib.ObjectChecker.tree":"b","ptr":"ptr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:594","type":"CtIfImpl","sourcecode":"if ((int < int) && ((byte[][int]) == 'a'))\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.nextLF(byte[], int);\n"},"status":-2},{"failures":[],"tindex":"8539d429-4c67-11e5-9971-6b7df503907b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:416","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(25)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:733","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.LockFile.unlock()"},"status":-2},{"failures":[],"tindex":"8539fb3a-4c67-11e5-9971-070b67d26392","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1571","type":"CtIfImpl","sourcecode":"if (int == int)\n    break;\n"},"variableMap":{"p":"ptr","end":"treeStart"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:184","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.dircache.DirCacheIterator.(first())) {\n    int = int;\n    int = 0;\n    org.eclipse.jgit.dircache.DirCacheEntry = null;\n    org.eclipse.jgit.dircache.DirCacheTree = null;\n    if (!org.eclipse.jgit.dircache.DirCacheIterator.(eof()))\n        org.eclipse.jgit.dircache.DirCacheIterator.parseEntry();\n    \n} "},"status":-2},{"failures":[],"tindex":"8539fb3b-4c67-11e5-9971-c7877ceb8668","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:284","type":"CtIfImpl","sourcecode":"if (int == int)\n    continue;\n"},"variableMap":{"lastIdx":"extensions","i":"extensions"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectory:255","type":"CtIfImpl","sourcecode":"if ((int & (org.eclipse.jgit.internal.storage.pack.PackExt.getBit())) == 0) {\n    final java.lang.String java.lang.String = java.lang.String + (org.eclipse.jgit.internal.storage.pack.PackExt.getExtension());\n    if (new java.io.File(java.io.File.getParentFile() , java.lang.String).exists())\n        int |= org.eclipse.jgit.internal.storage.pack.PackExt.getBit();\n    \n} "},"status":0},{"failures":[],"tindex":"8539fb3c-4c67-11e5-9971-9fdfca87f844","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackParser:349","type":"CtIfImpl","sourcecode":"if (int == 0)\n    throw new java.io.EOFException();\n"},"variableMap":{"n":"current"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeAlgorithm:162","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.diff.Edit.getEndA()) < (org.eclipse.jgit.diff.Edit.getBeginA())) {\n    if (int != (org.eclipse.jgit.diff.Edit.getBeginA())) {\n        org.eclipse.jgit.merge.MergeResult<S>.add(0, int, org.eclipse.jgit.diff.Edit.getBeginA(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    } \n    org.eclipse.jgit.merge.MergeResult<S>.add(2, org.eclipse.jgit.diff.Edit.getBeginB(), org.eclipse.jgit.diff.Edit.getEndB(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    int = org.eclipse.jgit.diff.Edit.getEndA();\n    org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n} else {\n    if (((org.eclipse.jgit.diff.Edit.getBeginA()) != int) && ((org.eclipse.jgit.diff.Edit.getBeginA()) != int)) {\n        org.eclipse.jgit.merge.MergeResult<S>.add(0, int, java.lang.Math.min(org.eclipse.jgit.diff.Edit.getBeginA(), org.eclipse.jgit.diff.Edit.getBeginA()), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    } \n    int int = org.eclipse.jgit.diff.Edit.getBeginB();\n    int int = org.eclipse.jgit.diff.Edit.getBeginB();\n    if ((org.eclipse.jgit.diff.Edit.getBeginA()) < (org.eclipse.jgit.diff.Edit.getBeginA())) {\n        int -= (org.eclipse.jgit.diff.Edit.getBeginA()) - (org.eclipse.jgit.diff.Edit.getBeginA());\n    } else {\n        int -= (org.eclipse.jgit.diff.Edit.getBeginA()) - (org.eclipse.jgit.diff.Edit.getBeginA());\n    }\n    org.eclipse.jgit.diff.Edit org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n    org.eclipse.jgit.diff.Edit org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n    for ( ;  ; ) {\n        if ((org.eclipse.jgit.diff.Edit.getEndA()) >= (org.eclipse.jgit.diff.Edit.getBeginA())) {\n            org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n            org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n        } else if ((org.eclipse.jgit.diff.Edit.getEndA()) >= (org.eclipse.jgit.diff.Edit.getBeginA())) {\n            org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n            org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n        } else {\n            break;\n        }\n    }\n    int int = org.eclipse.jgit.diff.Edit.getEndB();\n    int int = org.eclipse.jgit.diff.Edit.getEndB();\n    if ((org.eclipse.jgit.diff.Edit.getEndA()) < (org.eclipse.jgit.diff.Edit.getEndA())) {\n        int += (org.eclipse.jgit.diff.Edit.getEndA()) - (org.eclipse.jgit.diff.Edit.getEndA());\n    } else {\n        int += (org.eclipse.jgit.diff.Edit.getEndA()) - (org.eclipse.jgit.diff.Edit.getEndA());\n    }\n    int int = int - int;\n    int int = int - (int - int);\n    if (int > 0)\n        int -= int;\n    \n    int int = 0;\n    while ((int < int) && (org.eclipse.jgit.diff.SequenceComparator<S>.equals(S, (int + int), S, (int + int))))\n        int++;\n    int -= int;\n    int int = 0;\n    while ((int < int) && (org.eclipse.jgit.diff.SequenceComparator<S>.equals(S, ((int - int) - 1), S, ((int - int) - 1))))\n        int++;\n    int -= int;\n    if (int > 0)\n        org.eclipse.jgit.merge.MergeResult<S>.add(1, int, (int + int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    \n    if ((int > 0) || (int != 0)) {\n        org.eclipse.jgit.merge.MergeResult<S>.add(1, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        org.eclipse.jgit.merge.MergeResult<S>.add(2, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    } \n    if (int > 0)\n        org.eclipse.jgit.merge.MergeResult<S>.add(1, (int - int), int, org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n    \n    int = java.lang.Math.max(org.eclipse.jgit.diff.Edit.getEndA(), org.eclipse.jgit.diff.Edit.getEndA());\n    org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n    org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n}"},"status":-2},{"failures":[],"tindex":"853a224d-4c67-11e5-9971-9110dcb7edf7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:167","type":"CtLocalVariableImpl","sourcecode":"int int = 46"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:271","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"853a495e-4c67-11e5-9971-7bd4caf7c7fd","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revplot.PlotCommitList:323","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revplot.PlotCommit == org.eclipse.jgit.revplot.PlotCommit)\n    break;\n"},"variableMap":{"rObj":"c","child":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.DelayRevQueue:87","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null)\n    break;\n"},"status":-1},{"failures":[56,57],"tindex":"853a495f-4c67-11e5-9971-27f4ef7822e7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportHttp:456","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"service=\")"},"variableMap":{"b":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RefMap:270","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\", \")"},"status":-1},{"failures":[],"tindex":"853a4960-4c67-11e5-9971-cb78bf592cb2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.BlameResult:138","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.diff.RawText = null"},"variableMap":{"resultContents":"sourceText"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:324","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.blame.Candidate.BlobCandidate.org.eclipse.jgit.diff.RawText = new org.eclipse.jgit.diff.RawText(org.eclipse.jgit.lib.ObjectLoader.getCachedBytes(java.lang.Integer.int))"},"status":-2},{"failures":[],"tindex":"853a7071-4c67-11e5-9971-f34295b2b05e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.HunkHeader:213","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.diff.EditList.add(org.eclipse.jgit.diff.Edit)"},"status":-2},{"failures":[],"tindex":"853a7072-4c67-11e5-9971-5991f9e123ce","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.fnmatch.FileNameMatcher:225","type":"CtAssignmentImpl","sourcecode":"int = int + 2"},"variableMap":{"firstValidCharClassIndex":"beginB","classEndIndex":"bPtr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.RawTextComparator:303","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.diff.Edit.int = org.eclipse.jgit.diff.RawTextComparator.org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.diff.RawText.org.eclipse.jgit.util.IntList, org.eclipse.jgit.diff.Edit.int, int)"},"status":-2},{"failures":[58,59,60,61,62,63,64],"tindex":"853a7073-4c67-11e5-9971-55078849b292","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCache:848","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.dircache.DirCacheEntry[][int]"},"variableMap":{"sortedEntries":"sortedEntries","i":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:860","type":"CtReturnImpl","sourcecode":"return int < 0 ? null : org.eclipse.jgit.dircache.DirCacheEntry[][int]"},"status":-1},{"failures":[],"tindex":"853a7074-4c67-11e5-9971-931707f16114","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.patch.FileHeader:529","type":"CtIfImpl","sourcecode":"if (int == int)\n    int = int;\n"},"variableMap":{"tab":"len","end":"deltaLen","ptr":"deltaLen"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:362","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.pack.ObjectToPack.setCachedDelta(org.eclipse.jgit.internal.storage.pack.DeltaCache.cache(byte[], int, int))"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":17,"org.eclipse.jgit.internal.storage.pack.DeltaIndexTest.testInsertHeadMiddle":42,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":34,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":30,"org.eclipse.jgit.lib.ObjectIdSubclassMapTest.testAddIfAbsentGrowsWithObjects":1,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":48,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":64,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":6,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":45,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":40,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":55,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":13,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":49,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":66,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":70,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":51,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":57,"org.eclipse.jgit.api.StashApplyCommandTest.indexDelete":16,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":62,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":54,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":27,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":21,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":2,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":35,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":4,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":41,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":9,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":69,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":61,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":28,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":31,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":63,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":11,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":8,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":32,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":71,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":5,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":14,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":20,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":23,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":7,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":29,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":26,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":60,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":44,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":67,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":68,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":10,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":65,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":56,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":47,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexEdit":12,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":15,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":33,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":59,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":3,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":36,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":18,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":25,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":22,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":24,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":37,"org.eclipse.jgit.revwalk.FIFORevQueueTest.testHasFlags":43,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":58,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":38,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":46,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesInCore":39,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":50,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":53,"org.eclipse.jgit.lib.ObjectIdSubclassMapTest.testAddGrowsWithObjects":0,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":52,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":19},"transformations":[{"failures":[0,1],"tindex":"0270779d-4c39-11e5-b43f-89d577837d86","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.NetRCCredentialsProvider:65","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.CredentialsProvider.setDefault(new org.eclipse.jgit.transport.NetRCCredentialsProvider())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectIdSubclassMap:233","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ObjectIdSubclassMap<V>.insert(V)"},"status":-1},{"failures":[2],"tindex":"02709eae-4c39-11e5-b43f-7f33abdc790c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BaseReceivePack:717","type":"CtIfImpl","sourcecode":"if ((java.util.Set<java.lang.String>) == null)\n    throw new org.eclipse.jgit.transport.RequestNotYetReadException();\n"},"variableMap":{"enabledCapabilities":"branchesToClone"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:199","type":"CtForEachImpl","sourcecode":"for (final java.lang.String java.lang.String : java.util.Collection<java.lang.String>)\n    if (org.eclipse.jgit.transport.RefSpec.matchSource(java.lang.String))\n        java.util.List<org.eclipse.jgit.transport.RefSpec>.add(org.eclipse.jgit.transport.RefSpec.expandFromSource(java.lang.String));\n    "},"status":-1},{"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"tindex":"02709eaf-4c39-11e5-b43f-cfde6e1a743c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.ResolveMerger:395","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode())"},"variableMap":{"newEntry":"ourDce","e":"ourDce"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:472","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectId(org.eclipse.jgit.merge.ResolveMerger.int))"},"status":-1},{"failures":[],"tindex":"02709eb0-4c39-11e5-b43f-d3cfaab18313","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.DateRevQueue:117","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.DateRevQueue.Entry = org.eclipse.jgit.revwalk.DateRevQueue.Entry"},"variableMap":{"head":"n","n":"next"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.DateRevQueue:124","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.DateRevQueue.Entry.org.eclipse.jgit.revwalk.DateRevQueue.Entry = org.eclipse.jgit.revwalk.DateRevQueue.Entry.org.eclipse.jgit.revwalk.DateRevQueue.Entry"},"status":-2},{"failures":[],"tindex":"02709eb1-4c39-11e5-b43f-7df8f75ba548","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.SimilarityRenameDetector:359","type":"CtForImpl","sourcecode":"for ( ; int < int ; int++) {\n    if ((java.lang.String.charAt((((java.lang.String.length()) - 1) - int))) != (java.lang.String.charAt((((java.lang.String.length()) - 1) - int))))\n        break;\n    \n}"},"variableMap":{"a":"oldPath","fileSim":"score","b":"oldPath","fileMin":"score"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:404","type":"CtWhileImpl","sourcecode":"while (int < int) {\n    final int int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.nextLF(byte[], int);\n    if (org.eclipse.jgit.patch.FileHeader.(org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[], int, int)) >= 1) {\n        break;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.patch.FileHeader.parseOldName(int, int);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.patch.FileHeader.parseNewName(int, int);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int, int);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n        org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n    } else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n        org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    } else {\n        break;\n    }\n    int = int;\n}"},"status":0},{"failures":[42],"tindex":"0270ecd2-4c39-11e5-b43f-d9284fd38d91","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.AbstractTreeIterator:204","type":"CtIfImpl","sourcecode":"if ((byte[][((int) - 1)]) != '/')\n    byte[][(int)++] = '/';\n"},"variableMap":{"path":"src","pathLen":"resPtr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaIndex:416","type":"CtIfImpl","sourcecode":"if ((byte[][int]) != (byte[][int]))\n    break;\n"},"status":-1},{"failures":[43],"tindex":"0270ecd3-4c39-11e5-b43f-8947f780a3f5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:141","type":"CtForImpl","sourcecode":"for (org.eclipse.jgit.revwalk.BlockRevQueue.Block org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block ; org.eclipse.jgit.revwalk.BlockRevQueue.Block != null ; org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.BlockRevQueue.Block) {\n    for (int int = org.eclipse.jgit.revwalk.BlockRevQueue.Block.int ; int < (org.eclipse.jgit.revwalk.BlockRevQueue.Block.int) ; int++)\n        if (((org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.RevCommit[][int].int) & int) != 0)\n            return true;\n        \n}"},"status":-1},{"failures":[44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,27],"tindex":"0270ecd4-4c39-11e5-b43f-fffe0f06e507","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.HistogramDiffIndex:335","type":"CtIfImpl","sourcecode":"if ((1 << int) < int)\n    int++;\n"},"variableMap":{"sz":"commonSuffix","bits":"commonPrefix"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeAlgorithm:284","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.merge.MergeResult<S>.add(2, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState)"},"status":-1},{"failures":[],"tindex":"0270ecd5-4c39-11e5-b43f-0317c7af750c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:96","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"status":0},{"failures":[],"tindex":"0270ecd6-4c39-11e5-b43f-572153e5abc9","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.RefAdvertiser:194","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.Repository) == null)\n    continue;\n"},"variableMap":{"repository":"repository"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.InitCommand:114","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.lib.Repository.getObjectDatabase().exists()))\n    org.eclipse.jgit.lib.Repository.create(boolean);\n"},"status":-2},{"failures":[],"tindex":"027113e7-4c39-11e5-b43f-69473337b5a2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportGitSsh:202","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"fatal: \")"},"variableMap":{"pfx":"allFormats"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.GitDateParser:235","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\\"\")"},"status":0},{"failures":[],"tindex":"027113e8-4c39-11e5-b43f-8d32780e628c","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsRefRename:71","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.RefUpdate.getResult()"},"variableMap":{"destination":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefUpdate:444","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.RefUpdate.update()"},"status":-2},{"failures":[],"tindex":"027113e9-4c39-11e5-b43f-21c47119b397","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.CommitBuilder:281","type":"CtInvocationImpl","sourcecode":"java.io.OutputStreamWriter.flush()"},"variableMap":{"w":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:186","type":"CtInvocationImpl","sourcecode":"java.io.OutputStreamWriter.close()"},"status":0},{"failures":[],"tindex":"027113ea-4c39-11e5-b43f-fbab10711dff","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.TransportGitSsh:218","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getInstance().getenv(\"GIT_SSH\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashApplyCommand:134","type":"CtLocalVariableImpl","sourcecode":"final java.lang.String java.lang.String = (java.lang.String) != null ? java.lang.String : org.eclipse.jgit.api.StashApplyCommand.java.lang.String"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
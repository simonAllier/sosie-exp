{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetachedUnbornHead":16,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":98,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithoutLocalRepository":137,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedWithPeeled":55,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":95,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testReadNotExistingBranchConfig":69,"org.eclipse.jgit.api.NameRevCommandTest.annotatedTags":121,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":25,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":30,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":108,"org.eclipse.jgit.api.LogCommandTest.logAllCommitsWithTag":127,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":26,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_EmptyDatabase":83,"org.eclipse.jgit.api.TagCommandTest.testDeleteFullName":122,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":136,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testUTF8withoutBOM":5,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":37,"org.eclipse.jgit.api.FetchCommandTest.testFetch":128,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testUTF8withBOM":6,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":115,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":117,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversModifiedLoose":68,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":114,"org.eclipse.jgit.api.DescribeCommandTest.testDescribe":24,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":8,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_SymrefToPacked":42,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":105,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef4":49,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":111,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef3":48,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef2":47,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":36,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CorruptSymbolicReference":40,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef1":46,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":112,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":103,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testIsNameConflicting":93,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":113,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testLeadingWhitespaces":4,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":142,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testPeelCommit":58,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutAnnotatedTag":139,"org.eclipse.jgit.lib.ConfigTest.testEmptyString":1,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testRefsChangedStackOverflow":75,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":119,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":17,"org.eclipse.jgit.api.TagCommandTest.testListAllTagsInRepositoryInOrder":125,"org.eclipse.jgit.api.PushCommandTest.testPush":141,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test006_ReadUglyConfig":11,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflict":62,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testCreate":76,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_InvalidName":79,"org.eclipse.jgit.internal.storage.file.GcTagTest.annotatedTag_objectNotPruned":39,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":31,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_CorruptObjectIdReference":74,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_AnyHeadWithGarbage":71,"org.eclipse.jgit.storage.file.FileBasedConfigTest.testSystemEncoding":7,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_DiscoversModifiedLoose":43,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_EmptyDatabase":89,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllPacked1":70,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":131,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":110,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CorruptObjectIdReference":59,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedNotPeeled_Sorted":73,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseSorting_Bug_348834":61,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":27,"org.eclipse.jgit.lib.ConfigTest.testUnsetBranchSection":0,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_SkipsLockFiles":94,"org.eclipse.jgit.api.DescribeCommandTest.t1sameDepthT2":21,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":32,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":100,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":130,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":29,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":12,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_Mixed":90,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":97,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":138,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":120,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":116,"org.eclipse.jgit.api.TagCommandTest.testTagging":123,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_DiscoversDeletedLoose":80,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":10,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":106,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testPeelLooseTag":51,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllPacked":52,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":28,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":34,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CycleInSymbolicRef":78,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllLoose":53,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldNotFetchTagsFromOtherBranches":129,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":132,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_PackedNotPeeled_WrongSort":77,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseOverridesPacked":67,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose4":87,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflictThanksToDelete":57,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose3":86,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateNonFastForwardDoesNotDoExpensiveMergeCheck":63,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose2":85,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":33,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose1":84,"org.eclipse.jgit.revwalk.RevObjectTest.testRevObjectTypes":38,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllLoose":44,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":101,"org.eclipse.jgit.lib.ConfigTest.test007_readUserConfig":14,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":102,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":99,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":118,"org.eclipse.jgit.lib.ConfigTest.testBooleanWithNoValue":3,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseSortedCorrectly":72,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeatchedHead1":65,"org.eclipse.jgit.api.DescribeCommandTest.testDescribeBranch":20,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleForce":41,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeatchedHead2":66,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadOnOneBranch":45,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":104,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":135,"org.eclipse.jgit.api.DescribeCommandTest.t1nearerT2":23,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversNewLoose2":92,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadBranchNotBorn":82,"org.eclipse.jgit.api.DescribeCommandTest.t1DominatesT2":22,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose5":88,"org.eclipse.jgit.api.TagCommandTest.testTaggingOnHead":124,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversNewLoose1":91,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleNoForce":60,"org.eclipse.jgit.api.ResetCommandTest.testHardResetOnTag":140,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":109,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":35,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack":56,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":133,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_FetchHead":54,"org.eclipse.jgit.lib.ConfigTest.testUnsetSingleSection":2,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testReadBranchConfig":64,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":96,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeeplyNestedBranch":81,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":18,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_CorruptSymbolicReference":50,"org.eclipse.jgit.api.BranchCommandTest.testCreateFromAnnotatetdTag":134,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":13,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetached":15,"org.eclipse.jgit.api.TagCommandTest.testDelete":126,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":107,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":9,"org.eclipse.jgit.api.CommitCommandTest.commitIgnoresSmudgedEntryWithDifferentId":19},"transformations":[{"failures":[],"tindex":"d5bee84e-4c24-11e5-b04f-3f56bd131d27","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:166","type":"CtIfImpl","sourcecode":"if (boolean)\n    throw new org.eclipse.jgit.errors.PackInvalidException(java.io.File);\n"},"variableMap":{"packFile":"lck","invalid":"needSnapshot"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:493","type":"CtIfImpl","sourcecode":"if (boolean)\n    org.eclipse.jgit.internal.storage.file.FileSnapshot = org.eclipse.jgit.internal.storage.file.FileSnapshot.save(java.io.File);\n"},"status":-2},{"failures":[],"tindex":"d5bf0f5f-4c24-11e5-b04f-0fedf113cdaa","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.ApplyCommand:258","type":"CtReturnImpl","sourcecode":"return false"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.NotRevFilter:86","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.revwalk.filter.RevFilter.requiresCommitBody()"},"status":-2},{"failures":[],"tindex":"d5bf0f60-4c24-11e5-b04f-9769d33cc725","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:1165","type":"CtIfImpl","sourcecode":"if ((int) != 0) {\n    int |= int;\n    int &= ~(int);\n    int = 0;\n} "},"variableMap":{"delayFreeFlags":"org.eclipse.jgit.internal.storage.file.PackBitmapIndex.FLAG_REUSE","carryFlags":"minCommits","freeFlags":"maxCommits"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer:134","type":"CtForEachImpl","sourcecode":"for (org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.util.List<org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder>) {\n    int int = org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.cardinality();\n    java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> = new java.util.ArrayList<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>();\n    int int = -1;\n    int int = org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(0, int);\n    int int = int == (int) ? org.eclipse.jgit.internal.storage.file.PackBitmapIndex.int : 0;\n    boolean boolean = int == 0;\n    for (org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult) {\n        if (!(org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.contains(org.eclipse.jgit.revwalk.RevCommit)))\n            continue;\n        \n        int++;\n        int--;\n        org.eclipse.jgit.lib.ProgressMonitor.update(1);\n        if (org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.util.Set<? extends org.eclipse.jgit.lib.ObjectId>.remove(org.eclipse.jgit.revwalk.RevCommit)) {\n            if (int > 0)\n                int = 0;\n            \n        } else if ((!boolean) && ((int > 0) || (((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) <= 1) && (int > (-(int)))))) {\n            continue;\n        } \n        int int = int;\n        int = org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int, int);\n        int = int == (int) ? org.eclipse.jgit.internal.storage.file.PackBitmapIndex.int : 0;\n        boolean = int == 0;\n        org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder = org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.newBitmapBuilder();\n        org.eclipse.jgit.revwalk.RevWalk.reset();\n        org.eclipse.jgit.revwalk.RevWalk.markStart(org.eclipse.jgit.revwalk.RevCommit);\n        for (org.eclipse.jgit.lib.AnyObjectId org.eclipse.jgit.lib.AnyObjectId : org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.WalkResult.java.lang.Iterable<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>)\n            org.eclipse.jgit.revwalk.RevWalk.markUninteresting(org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.AnyObjectId));\n        org.eclipse.jgit.revwalk.RevWalk.setRevFilter(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker.newRevFilter(null, org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder));\n        while ((org.eclipse.jgit.revwalk.RevWalk.next()) != null) {\n        }\n        java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>> = new java.util.ArrayList<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>();\n        for (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> : java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>) {\n            org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit = java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.get(((java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()) - 1));\n            if (org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder.contains(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit))\n                java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.add(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>);\n            \n        }\n        java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>;\n        if (java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.isEmpty()) {\n            java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = new java.util.ArrayList<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>();\n            java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.add(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>);\n        } else {\n            java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>.get(0);\n            for (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> : java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>) {\n                if ((java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()) > (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.size()))\n                    java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> = java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>;\n                \n            }\n        }\n        java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.add(new org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit(org.eclipse.jgit.revwalk.RevCommit , !(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.isEmpty()) , int));\n        org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder.addBitmap(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.lib.BitmapIndex.BitmapBuilder, 0);\n    }\n    for (java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit> : java.util.List<java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>>)\n        org.eclipse.jgit.util.BlockList<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>.addAll(java.util.List<org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.BitmapCommit>);\n}"},"status":-2},{"failures":[],"tindex":"d5bf3671-4c24-11e5-b04f-550d40f99f14","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.Status:192","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String>()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CleanCommand:94","type":"CtLocalVariableImpl","sourcecode":"java.util.Set<java.lang.String> java.util.Set<java.lang.String> = new java.util.TreeSet<java.lang.String>()"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"d5bf3672-4c24-11e5-b04f-01169d3bba59","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1059","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ConfigLine.java.lang.String = \"\""},"status":-1},{"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"d5bf3673-4c24-11e5-b04f-d7755feeb741","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:472","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)"},"variableMap":{"str":"envKey"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.UserConfig:204","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.eclipse.jgit.lib.UserConfig.org.eclipse.jgit.lib.UserConfig.system().getenv(java.lang.String)"},"status":-1},{"failures":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,108,109,13,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,20,21,22,23,24,134,135,136,137,138,139,140,141,142],"tindex":"d5bf3674-4c24-11e5-b04f-7bb5008d8f7d","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:105","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.TagBuilder.setObjectId(org.eclipse.jgit.revwalk.RevObject, org.eclipse.jgit.revwalk.RevObject.getType())"},"status":-1},{"failures":[],"tindex":"d5bf5d85-4c24-11e5-b04f-412b4c436e89","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:478","type":"CtIfImpl","sourcecode":"if ((byte[][int++]) == '\\n')\n    return true;\n"},"variableMap":{"r":"path","b":"pathLen"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:209","type":"CtTryImpl","sourcecode":"try {\n    for (int int = int ; int < (int) ; int++)\n        org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseHexInt4(byte[][int]);\n    return true;\n} catch (java.lang.ArrayIndexOutOfBoundsException fail) {\n    return false;\n}"},"status":-2},{"failures":[],"tindex":"d5bf5d86-4c24-11e5-b04f-335a0470e9f6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.SideBandOutputStream:132","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.SideBandOutputStream.flushBuffer()"},"variableMap":{"this":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.SideBandProgressMonitor:119","type":"CtTryImpl","sourcecode":"try {\n    java.io.OutputStream.write(org.eclipse.jgit.lib.Constants.encode(java.lang.StringBuilder.toString()));\n    java.io.OutputStream.flush();\n} catch (java.io.IOException err) {\n    boolean = false;\n}"},"status":-2},{"failures":[],"tindex":"d5bf5d87-4c24-11e5-b04f-193bb0999f82","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:543","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revwalk.RevCommit == null)\n    break SEND_HAVES;\n"},"variableMap":{"c":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleWriter:222","type":"CtInvocationImpl","sourcecode":"java.io.Writer.write(org.eclipse.jgit.revwalk.RevCommit.getShortMessage())"},"status":-2},{"failures":[],"tindex":"d5bf5d88-4c24-11e5-b04f-8172fae66662","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:1008","type":"CtInvocationImpl","sourcecode":"java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction.java.nio.charset.CodingErrorAction)"},"status":0},{"failures":[],"tindex":"d5bf5d89-4c24-11e5-b04f-d9d48bf2eada","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashCreateCommand:384","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ObjectInserter.release()"},"status":0},{"failures":[],"tindex":"d5bf5d8a-4c24-11e5-b04f-b177b2e27b80","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.NoteMap:223","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.notes.Note == null ? null : org.eclipse.jgit.notes.Note.getData()"},"variableMap":{"n":"oldValue"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefUpdate:403","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.ObjectId"},"status":-2},{"failures":[],"tindex":"d5bf849b-4c24-11e5-b04f-5f858718221f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.JschConfigSessionFactory:139","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(1000)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.AddNoteCommand:143","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.CommitBuilder.setMessage(java.lang.String)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":24,"org.eclipse.jgit.transport.LongMapTest.testSmallMap":31,"org.eclipse.jgit.transport.LongMapTest.testLargeMap":30,"org.eclipse.jgit.lib.IndexDiffTest.testRemoved":4,"org.eclipse.jgit.lib.IndexDiffTest.testAdded":1,"org.eclipse.jgit.lib.IndexDiffTest.testModified":3,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_PreferredAuthentications":47,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStates":19,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_InheritPreferredAuthentications":48,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":15,"org.eclipse.jgit.lib.IndexDiffTest.testAssumeUnchanged":12,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":14,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRun":8,"org.eclipse.jgit.lib.IndexDiffTest.testUntrackedNotIgnoredFolders":5,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":13,"org.eclipse.jgit.api.StatusCommandTest.testDifferentStatesWithPaths":20,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_ConnectionAttempts":43,"org.eclipse.jgit.util.Base64Test.testEncodeMatchesDecode":40,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":35,"org.eclipse.jgit.transport.PackParserTest.test2":26,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_OptionsKeywordCaseInsensitive":46,"org.eclipse.jgit.transport.LongMapTest.testRemoveCollision2":28,"org.eclipse.jgit.api.CleanCommandTest.testClean":6,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":23,"org.eclipse.jgit.transport.LongMapTest.testRemoveCollision1":27,"org.eclipse.jgit.transport.LongMapTest.testReplaceMaxValue":32,"org.eclipse.jgit.util.Base64Test.testDecode":39,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":22,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_OptionsInherit":44,"org.eclipse.jgit.util.Base64Test.testDecodeFail_NonBase64Character":38,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirs":7,"org.eclipse.jgit.transport.LongMapTest.testInsertMinValue":29,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":37,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":18,"org.eclipse.jgit.lib.IndexDiffTest.testUntrackedFolders":2,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":16,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_OptionsSet":41,"org.eclipse.jgit.lib.IndexDiffTest.testUnchangedComplex":0,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":36,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_InheritBatchMode":42,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":21,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_BatchModeYes":45,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRunAndNoIgnore":10,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRunAndNoIgnore":11,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":17,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":34,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRun":9,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":25,"org.eclipse.jgit.transport.LongMapTest.testRemoveOne":33},"transformations":[{"failures":[],"tindex":"bb35e3ef-4c6f-11e5-9bc9-79d8a5ef810b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.InitCommand:95","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getInstance().getProperty(\"user.dir\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:591","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = null"},"status":-2},{"failures":[],"tindex":"bb360b00-4c6f-11e5-9bc9-83e69fb7ffcc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.ArchiveCommand:445","type":"CtIfImpl","sourcecode":"if (int == (-1))\n    this.java.lang.String = \"\";\nelse\n    this.java.lang.String = java.lang.String.substring(int);\n"},"variableMap":{"filename":"msg","dot":"ptr","suffix":"msg"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:364","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.patch.Patch.addError(new org.eclipse.jgit.patch.FormatError(byte[] , int , org.eclipse.jgit.patch.FormatError.Severity.org.eclipse.jgit.patch.FormatError.Severity , java.lang.String))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"bb360b01-4c6f-11e5-9bc9-a976fc221697","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1128","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.NameConflictTreeWalk.release()"},"variableMap":{"tw":"tw"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:170","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < int ; int++) {\n    int int = org.eclipse.jgit.treewalk.TreeWalk.getRawMode(int);\n    if (((int != (int)) && (int != (org.eclipse.jgit.lib.FileMode.int))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(int))) {\n        java.util.LinkedList<java.lang.String>.clear();\n        break;\n    } \n}"},"status":-1},{"failures":[],"tindex":"bb360b02-4c6f-11e5-9bc9-dd0c807da62f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:240","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.FileMode[][int++] = org.eclipse.jgit.patch.FileHeader.parseFileMode(int, int)"},"variableMap":{"oldModes":"oldModes","comma":"eol","this":"this","n":"eol","ptr":"ptr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedFileHeader:243","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.FileMode[][int] = org.eclipse.jgit.patch.FileHeader.parseFileMode(int, int)"},"status":-2},{"failures":[12,3,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"bb360b03-4c6f-11e5-9bc9-fb30e53823fc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CleanCommand:163","type":"CtForEachImpl","sourcecode":"for (java.lang.String java.lang.String : java.util.Set<java.lang.String>)\n    for (java.lang.String java.lang.String : java.util.Set<java.lang.String>)\n        if (java.lang.String.startsWith(java.lang.String)) {\n            java.util.Set<java.lang.String>.remove(java.lang.String);\n            break;\n        } "},"variableMap":{"filtered":"modified","untrackedFolders":"modified","untracked":"modified"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:520","type":"CtWhileImpl","sourcecode":"while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n    try {\n        if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode == null)\n            org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode = org.eclipse.jgit.submodule.SubmoduleWalk.getModulesIgnore();\n        \n        if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.equals(org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode))\n            continue;\n        \n    } catch (org.eclipse.jgit.errors.ConfigInvalidException e) {\n        java.io.IOException java.io.IOException = new java.io.IOException((\"Found invalid ignore param for submodule \" + (org.eclipse.jgit.submodule.SubmoduleWalk.getPath())));\n        java.io.IOException.initCause(org.eclipse.jgit.errors.ConfigInvalidException);\n        throw java.io.IOException;\n    }\n    org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n    if (org.eclipse.jgit.lib.Repository != null) {\n        try {\n            org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(\"HEAD\");\n            if ((org.eclipse.jgit.lib.ObjectId != null) && (!(org.eclipse.jgit.lib.ObjectId.equals(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId()))))\n                java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n            else if ((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) {\n                org.eclipse.jgit.lib.IndexDiff org.eclipse.jgit.lib.IndexDiff = java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.get(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n                if (org.eclipse.jgit.lib.IndexDiff == null) {\n                    org.eclipse.jgit.lib.IndexDiff = new org.eclipse.jgit.lib.IndexDiff(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId() , org.eclipse.jgit.lib.IndexDiff.WorkingTreeIteratorFactory.getWorkingTreeIterator(org.eclipse.jgit.lib.Repository));\n                    java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.put(org.eclipse.jgit.submodule.SubmoduleWalk.getPath(), org.eclipse.jgit.lib.IndexDiff);\n                } \n                if (org.eclipse.jgit.lib.IndexDiff.diff()) {\n                    if ((((((((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) == (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) && (org.eclipse.jgit.lib.IndexDiff.getAdded().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getChanged().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getConflicting().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getMissing().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getModified().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getRemoved().isEmpty())) {\n                        continue;\n                    } \n                    java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n                } \n            } \n        } finally {\n            org.eclipse.jgit.lib.Repository.close();\n        }\n    } \n}"},"status":-1},{"failures":[],"tindex":"bb363214-4c6f-11e5-9bc9-df85316fb99c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.GC:170","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Collections.<org.eclipse.jgit.lib.ObjectId>emptySet())"},"variableMap":{"this":"gc"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.GarbageCollectCommand:172","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.GC.setExpire(java.util.Date)"},"status":-2},{"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"bb363215-4c6f-11e5-9bc9-2fabfb65b6c4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.LongMap:116","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.transport.LongMap.Node<V>[][int] = org.eclipse.jgit.transport.LongMap.Node<V>"},"status":-1},{"failures":[38,39,40],"tindex":"bb363216-4c6f-11e5-9bc9-8ff1363b640a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AnyObjectId:409","type":"CtWhileImpl","sourcecode":"while ((int >= int) && (int != 0)) {\n    byte[][int--] = org.eclipse.jgit.lib.AnyObjectId.byte[][(int & 15)];\n    int >>>= 4;\n}"},"variableMap":{"p":"b4Posn","dst":"source","w":"b4Posn","org.eclipse.jgit.lib.AnyObjectId.hexbyte":"source","o":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.Base64:274","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.util.Base64.byte) <= byte) {\n    byte[][int++] = byte;\n    if (int > 3) {\n        int += org.eclipse.jgit.util.Base64.org.eclipse.jgit.util.Base64.decode4to3(byte[], 0, byte[], int);\n        int = 0;\n        if (byte == (org.eclipse.jgit.util.Base64.byte))\n            break;\n        \n    } \n} else if (byte != (org.eclipse.jgit.util.Base64.byte))\n    throw new java.lang.IllegalArgumentException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.valueOf(int), java.lang.Integer.valueOf(((byte[][int]) & 255))));\n"},"status":-1},{"failures":[],"tindex":"bb363217-4c6f-11e5-9bc9-b95686640ab2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.AbstractTreeIterator:415","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.FileMode.fromBits(int)"},"variableMap":{"mode":"bits"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.FileMode:149","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n"},"status":-2},{"failures":[],"tindex":"bb365928-4c6f-11e5-9bc9-8b65a314c5f2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:232","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getGlobalListenerList().dispatch(new org.eclipse.jgit.internal.storage.dfs.BeforeDfsPackIndexLoadedEvent(this))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.FetchCommand:265","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.transport.FetchResult>.checkCallable()"},"status":-2},{"failures":[],"tindex":"bb365929-4c6f-11e5-9bc9-4d5c1fb50033","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:826","type":"CtReturnImpl","sourcecode":"return (org.eclipse.jgit.internal.storage.pack.ObjectToPack != null) && (!(org.eclipse.jgit.internal.storage.pack.ObjectToPack.isEdge())) ? org.eclipse.jgit.internal.storage.pack.ObjectToPack : null"},"variableMap":{"obj":"deltaBase"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.ObjectToPack:127","type":"CtReturnImpl","sourcecode":"return ((org.eclipse.jgit.internal.storage.pack.ObjectToPack)(org.eclipse.jgit.lib.ObjectId))"},"status":-2},{"failures":[],"tindex":"bb36592a-4c6f-11e5-9bc9-bf423856c26a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter:107","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter.this(int, int, true)"},"variableMap":{"this":"indexDiffFilter","dirCacheIndex":"org.eclipse.jgit.lib.IndexDiff.INDEX","workingTreeIndex":"org.eclipse.jgit.lib.IndexDiff.INDEX"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:428","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.treewalk.filter.IndexDiffFilter = new org.eclipse.jgit.treewalk.filter.IndexDiffFilter(org.eclipse.jgit.lib.IndexDiff.int , org.eclipse.jgit.lib.IndexDiff.int)"},"status":-2},{"failures":[41,42,43,44,45,46,47,48],"tindex":"bb36592b-4c6f-11e5-9bc9-77e20fa16aff","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CloneCommand:288","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String)))\n    continue;\n"},"variableMap":{"org.eclipse.jgit.lib.Constants.R_HEADS":"keyword","n":"argValue"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.OpenSshConfig:230","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"IdentityFile\", java.lang.String)) {\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.io.File) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.io.File = org.eclipse.jgit.transport.OpenSshConfig.toFile(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"PreferredAuthentications\", java.lang.String)) {\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.nows(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"BatchMode\", java.lang.String)) {\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.yesno(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"StrictHostKeyChecking\", java.lang.String)) {\n    java.lang.String java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = java.lang.String;\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"ConnectionAttempts\", java.lang.String)) {\n    try {\n        final int int = java.lang.Integer.parseInt(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        if (int > 0) {\n            for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n                if ((org.eclipse.jgit.transport.OpenSshConfig.Host.int) == 0)\n                    org.eclipse.jgit.transport.OpenSshConfig.Host.int = int;\n                \n        } \n    } catch (java.lang.NumberFormatException nfe) {\n    }\n} "},"status":-1},{"failures":[],"tindex":"bb36803c-4c6f-11e5-9bc9-d9125d50c9e6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.CachedObjectDirectory:108","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.fromString((java.lang.String + java.lang.String))"},"variableMap":{"d":"org.eclipse.jgit.lib.Constants.HEAD","e":"org.eclipse.jgit.lib.Constants.HEAD"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LogCommand:146","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String)"},"status":-2},{"failures":[],"tindex":"bb36803d-4c6f-11e5-9bc9-9fb1a3792ada","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.PullCommand:193","type":"CtIfImpl","sourcecode":"if (!(java.lang.String.startsWith(org.eclipse.jgit.lib.Constants.java.lang.String))) {\n    throw new org.eclipse.jgit.api.errors.DetachedHeadException();\n} "},"variableMap":{"org.eclipse.jgit.lib.Constants.R_HEADS":"badSectionEntry","fullBranch":"badSectionEntry"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1123","type":"CtIfImpl","sourcecode":"if ((' ' == int) || ('\\t' == int)) {\n    for ( ;  ; ) {\n        int = org.eclipse.jgit.lib.Config.StringReader.read();\n        if (int < 0)\n            throw new org.eclipse.jgit.errors.ConfigInvalidException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n        \n        if ('\\\"' == int) {\n            org.eclipse.jgit.lib.Config.StringReader.reset();\n            break;\n        } \n        if ((' ' == int) || ('\\t' == int))\n            continue;\n        \n        throw new org.eclipse.jgit.errors.ConfigInvalidException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.StringBuilder));\n    }\n    break;\n} "},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_7":106,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_9":107,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":283,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":273,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":127,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":70,"org.eclipse.jgit.patch.PatchTest.testParse_ConfigCaseInsensitive":4,"org.eclipse.jgit.patch.GetTextTest.testGetText_BothISO88591":17,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":154,"org.eclipse.jgit.patch.PatchTest.testParse_FixNoNewline":3,"org.eclipse.jgit.patch.EditListTest.testTypes":6,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":179,"org.eclipse.jgit.util.GitDateFormatterTest.DEFAULT":23,"org.eclipse.jgit.api.ApplyCommandTest.testModifyNL1":33,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousGitPathEndDotWindows3":117,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":271,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules4thru13_IndexEntryNotInHead":108,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":274,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":28,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":245,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testNoCacheObjectIdSubclass":46,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":262,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChanges":101,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedNew":12,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgLpr":114,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":128,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeBaseCommit":239,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRename_NewlinesOnly":64,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRenames_OnePair2":63,"org.eclipse.jgit.notes.NoteMapMergerTest.testCollapseFanoutAfterMerge":87,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":211,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":90,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":124,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":129,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":188,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":264,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":238,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":249,"org.eclipse.jgit.patch.EditListTest.testFileHeader":8,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":284,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":236,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":92,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":235,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutWithStartPoint":171,"org.eclipse.jgit.util.ChangeIdUtilTest.testId":21,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedTopicChange":255,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext0":49,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext1":50,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsolutePathIsOk":113,"org.eclipse.jgit.merge.ResolveMergerTest.checkLockedFilesToBeDeleted":272,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutWithConflict":170,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":206,"org.eclipse.jgit.patch.PatchTest.testParse_AddNoNewline":2,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_simulated_bug":91,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":94,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":103,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":233,"org.eclipse.jgit.patch.PatchCcTest.testParse_OneFileCc":9,"org.eclipse.jgit.api.LogCommandTest.logAllCommits":167,"org.eclipse.jgit.lib.IndexModificationTimesTest.testModify":88,"org.eclipse.jgit.api.MergeCommandTest.testMultipleHeads":196,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":195,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutAutoCrlfTrue":169,"org.eclipse.jgit.dircache.DirCacheCGitCompatabilityTest.testReadWriteV3":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_1":105,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteCurDrivePathWindowsOnUnix":118,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":146,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":218,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":258,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChange":257,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflictsX0":104,"org.eclipse.jgit.patch.PatchCcErrorTest.testError_CcTruncatedOld":5,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":76,"org.eclipse.jgit.api.MergeCommandTest.testMergeFailingWithDirtyWorkingTree":203,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":31,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":260,"org.eclipse.jgit.patch.PatchCcTest.testParse_CcNewFile":10,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardWithFiles":190,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":139,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgDotCon":115,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":134,"org.eclipse.jgit.api.BlameCommandTest.testWhitespaceMerge":150,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":201,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":151,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":152,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutCommit":172,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":212,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":221,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":142,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":143,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":177,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithModificationShouldNotDeleteData":251,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeNoConflict":98,"org.eclipse.jgit.api.GitConstructionTest.testClose":72,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyIndex":194,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNegativeContextFails":47,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":199,"org.eclipse.jgit.internal.storage.file.GcConcurrentTest.concurrentRepack":73,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":215,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":133,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":93,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":153,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":223,"org.eclipse.jgit.api.ApplyCommandTest.testModifyX":39,"org.eclipse.jgit.api.ApplyCommandTest.testModifyY":40,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileSimple":99,"org.eclipse.jgit.api.ApplyCommandTest.testModifyZ":41,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":136,"org.eclipse.jgit.api.ApplyCommandTest.testModifyE":38,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":259,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartCommit":173,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":204,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":74,"org.eclipse.jgit.patch.EditListTest.testHunkHeader":7,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenWindowsNamesOnUnixEgLpt1":122,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":126,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext10":53,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":228,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":192,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":275,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":241,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":79,"org.eclipse.jgit.util.GitDateFormatterTest.LOCALE":22,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualIndexMerge":111,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesInCore":279,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":137,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":250,"org.eclipse.jgit.lib.ReflogResolveTest.resolveUnnamedCurrentBranchCommits":89,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":278,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":148,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":84,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testSpecificEntryNumber":43,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":216,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":140,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChangeOtherCommit":237,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommitNormalTime":19,"org.eclipse.jgit.revwalk.RevCommitParseTest.testParse_NoParents":32,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":270,"org.eclipse.jgit.api.CheckoutCommandTest.testUpdateSmudgedEntries":175,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":280,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRename_OneRenameTwoUnrelatedFiles":68,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1Sub":36,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseEndsIfLastStepIsEdit":234,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousWindowsADSOnUnix":120,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":186,"org.eclipse.jgit.patch.PatchTest.testParse_GitBinaryLiteral":1,"org.eclipse.jgit.patch.GetTextTest.testGetText_Convert":18,"org.eclipse.jgit.api.CommitCommandTest.commitAfterSquashMerge":149,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoTree4":62,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoTree3":61,"org.eclipse.jgit.util.GitDateFormatterTest.RAW":25,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":207,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoTree2":60,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoTree1":59,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupWithBlankLines":231,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":163,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":269,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":144,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":30,"org.eclipse.jgit.patch.PatchErrorTest.testError_BodyTooLong":15,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUntrackedFile":242,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":75,"org.eclipse.jgit.patch.PatchErrorTest.testError_DisconnectedHunk":11,"org.eclipse.jgit.api.ResetCommandTest.testHardResetAfterSquashMerge":125,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":210,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithModification":253,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":240,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartPoint":176,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":191,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":243,"org.eclipse.jgit.api.MergeCommandTest.testMultipleDeletions":185,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeOtherCommit":268,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":182,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithNewFile":265,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":213,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":266,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":193,"org.eclipse.jgit.internal.storage.file.ReflogReaderTest.testReadTwoLine":44,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutUncachedChanges":97,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testOverwriteUntrackedIgnoredFile":112,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":166,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":165,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":205,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":78,"org.eclipse.jgit.api.ApplyCommandTest.testDeleteD":42,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveFixupFirstCommitShouldFail":252,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":29,"org.eclipse.jgit.notes.NoteMapTest.testWriteUnchangedFanout2_38":58,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":217,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":227,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testEmpty1":54,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":220,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":138,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":263,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":276,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":226,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyIndex":178,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":229,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRename_OnePair":65,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteWindowsPath1OnUnix":123,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":132,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testMaliciousAbsoluteUNCPathWindows1OnUnix":116,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":157,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":80,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":69,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":267,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":261,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":184,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_16":110,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":147,"org.eclipse.jgit.util.GitDateFormatterTest.ISO":24,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":189,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":95,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_11":109,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":209,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":131,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":85,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testUntrackedConflicts":102,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":200,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext3":51,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenWindowsNamesOnUnixEgCon":121,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":282,"org.eclipse.jgit.patch.PatchTest.testParse_NoBinary":0,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext5":52,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":197,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChange":244,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":77,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":187,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":135,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":130,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":141,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1":34,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChangeBaseCommit":247,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedOld":13,"org.eclipse.jgit.api.ApplyCommandTest.testAddA2":35,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":222,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":214,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckout":168,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":27,"org.eclipse.jgit.util.GitDateFormatterTest.RFC":26,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":208,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext100":48,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":219,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRename_LastByteDifferent":67,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":224,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflicts1":100,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":183,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":254,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":161,"org.eclipse.jgit.diff.RenameDetectorTest.testInexactRename_SameContentMultipleTimes":66,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":71,"org.eclipse.jgit.api.ApplyCommandTest.testFailureF2":37,"org.eclipse.jgit.api.CheckoutCommandTest.testAlreadyExists":174,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":145,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":162,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":96,"org.eclipse.jgit.lib.DirCacheCheckoutMaliciousPathTest.testForbiddenNamesOnWindowsEgCon1":119,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreationsSameContent":180,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommitsOnDifferentBranches":248,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFolders":181,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedTopicChange":232,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":281,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyWorktree":198,"org.eclipse.jgit.merge.SquashMessageFormatterTest.testCommit":45,"org.eclipse.jgit.patch.GetTextTest.testGetText_DiffCc":16,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSquashFirstCommitShouldFail":246,"org.eclipse.jgit.notes.NoteMapTest.testEditFanout2_38":86,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":159,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":160,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedDelete":225,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":155,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":82,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_FailsOver2GiB":57,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":83,"org.eclipse.jgit.patch.PatchErrorTest.testError_GarbageBetweenFiles":14,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":277,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":164,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":256,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine1":55,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testNoNewLine2":56,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommits":230,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":81,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyWorktree":202,"org.eclipse.jgit.api.RevertCommandTest.testRevert":156,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":158},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"0b279834-4c5a-11e5-9f75-9b9041ff31ba","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.AbbreviatedObjectId:160","type":"CtOperatorAssignmentImpl","sourcecode":"int <<= 4"},"variableMap":{"r":"ptr"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:217","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"0b27bf45-4c5a-11e5-9f75-69485fe1aacc","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1777","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.revwalk.RevCommit.has(org.eclipse.jgit.revwalk.RevFlag))) {\n    org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag);\n    org.eclipse.jgit.internal.storage.pack.PackWriter.addObject(org.eclipse.jgit.revwalk.RevCommit, 0);\n    int++;\n} "},"variableMap":{"added":"deltaBuf","this":"deltaBuf","cmit":"deltaBuf","commitCnt":"cnt"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaWindow:314","type":"CtIfImpl","sourcecode":"if (java.io.OutputStream instanceof org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream) {\n    org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream = ((org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream)(java.io.OutputStream));\n    java.lang.Object = org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream.byte[];\n    int = org.eclipse.jgit.internal.storage.pack.DeltaWindow.ArrayStream.int;\n} else {\n    org.eclipse.jgit.util.TemporaryBuffer.Heap org.eclipse.jgit.util.TemporaryBuffer.Heap = ((org.eclipse.jgit.util.TemporaryBuffer.Heap)(java.io.OutputStream));\n    java.lang.Object = org.eclipse.jgit.util.TemporaryBuffer.Heap;\n    int = ((int)(org.eclipse.jgit.util.TemporaryBuffer.Heap.length()));\n}"},"status":-2},{"failures":[57],"tindex":"0b27bf46-4c5a-11e5-9f75-412438187356","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV2:338","type":"CtThrowImpl","sourcecode":"throw new java.util.NoSuchElementException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:820","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit()"},"status":-1},{"failures":[58],"tindex":"0b27bf47-4c5a-11e5-9f75-b14b3014a015","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.FanoutBucket:286","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.notes.NonNoteEntry.format(org.eclipse.jgit.lib.TreeFormatter)"},"status":-1},{"failures":[],"tindex":"0b27bf48-4c5a-11e5-9f75-47ef1dc8955f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:269","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.WindowCache.purge(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.ReceivePack:191","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.transport.BaseReceivePack.receivePackAndCheckConnectivity();\n} catch (java.io.IOException err) {\n    java.lang.Throwable = java.io.IOException;\n} catch (java.lang.RuntimeException err) {\n    java.lang.Throwable = java.lang.RuntimeException;\n} catch (java.lang.Error err) {\n    java.lang.Throwable = java.lang.Error;\n}"},"status":-2},{"failures":[59,60,61,62],"tindex":"0b27bf49-4c5a-11e5-9f75-af653c7f3b6d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.MergeResult:153","type":"CtThrowImpl","sourcecode":"throw new java.lang.UnsupportedOperationException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:236","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"no tree header\")"},"status":-1},{"failures":[63,64,65,66,67,68],"tindex":"0b27e65a-4c5a-11e5-9f75-6d0ffc3e9ac8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.DiffEntry:203","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.diff.DiffEntry>.add(org.eclipse.jgit.diff.DiffEntry)"},"variableMap":{"entry":"d","r":"out"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityRenameDetector:168","type":"CtInvocationImpl","sourcecode":"java.util.List<org.eclipse.jgit.diff.DiffEntry>.add(org.eclipse.jgit.diff.DiffEntry.pair(org.eclipse.jgit.diff.DiffEntry.ChangeType, org.eclipse.jgit.diff.DiffEntry, org.eclipse.jgit.diff.DiffEntry, org.eclipse.jgit.diff.SimilarityRenameDetector.org.eclipse.jgit.diff.SimilarityRenameDetector.score(long)))"},"status":-1},{"failures":[],"tindex":"0b27e65b-4c5a-11e5-9f75-013be8bbb8c4","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:664","type":"CtInvocationImpl","sourcecode":"java.lang.System.runFinalization()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:466","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.addToClock(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.Ref<T>, 0)"},"status":0},{"failures":[69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"0b2a7e6c-4c5a-11e5-9f75-8bfe753f1cb1","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:292","type":"CtAssignmentImpl","sourcecode":"java.io.FileOutputStream = null"},"variableMap":{"os":"fos"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:752","type":"CtAssignmentImpl","sourcecode":"java.io.FileOutputStream = new java.io.FileOutputStream(java.io.File)"},"status":-1},{"failures":[86,87],"tindex":"0b2a7e6d-4c5a-11e5-9f75-ad3f3c13d6f3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.notes.NoteMapMerger:283","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.notes.Note == null) || ((org.eclipse.jgit.notes.Note != null) && ((org.eclipse.jgit.notes.Note.compareTo(org.eclipse.jgit.notes.Note)) < 0)))\n    org.eclipse.jgit.notes.Note = org.eclipse.jgit.notes.Note;\n"},"variableMap":{"min":"noteOn","o":"noteOn"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.FanoutBucket:245","type":"CtForImpl","sourcecode":"for (java.util.Iterator<org.eclipse.jgit.notes.Note> java.util.Iterator<org.eclipse.jgit.notes.Note> = org.eclipse.jgit.notes.FanoutBucket.iterator(org.eclipse.jgit.lib.AnyObjectId, org.eclipse.jgit.lib.ObjectReader) ; java.util.Iterator<org.eclipse.jgit.notes.Note>.hasNext() ; )\n    org.eclipse.jgit.notes.InMemoryNoteBucket = org.eclipse.jgit.notes.InMemoryNoteBucket.append(java.util.Iterator<org.eclipse.jgit.notes.Note>.next());"},"status":-1},{"failures":[],"tindex":"0b2a7e6e-4c5a-11e5-9f75-7dd23d54601a","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:262","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = null"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:150","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = java.util.LinkedHashMap<java.lang.String, org.eclipse.jgit.lib.Ref>.put(java.lang.String, new org.eclipse.jgit.lib.ObjectIdRef.Unpeeled(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , java.lang.String , org.eclipse.jgit.lib.ObjectId))"},"status":-2},{"failures":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,72,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284],"tindex":"0b2a7e6f-4c5a-11e5-9f75-35aecd318e42","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:830","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n} else {\n    if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n        if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n            if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                return ;\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n        \n    } else\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    \n}"},"variableMap":{"iMode":"org.eclipse.jgit.lib.FileMode.TREE","headCommitTree":"iId","hId":"hId","iId":"mergeCommitTree","f":"f","dce":"dce","h":"m","this":"this","m":"h","org.eclipse.jgit.lib.FileMode.GITLINK":"hMode","hMode":"mMode","org.eclipse.jgit.lib.FileMode.TREE":"iMode","name":"name","walk":"walk"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:749","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        \n    } else\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    \n} else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n    if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    } else {\n        if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                    return ;\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n    else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n        if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n        }\n    } else {\n        org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n    }\n}"},"status":-1},{"failures":[],"tindex":"0b2aa580-4c5a-11e5-9f75-0154d5ffc412","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RenameDetector:683","type":"CtLocalVariableImpl","sourcecode":"java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry> java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry> = new java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry>(2)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityRenameDetector:195","type":"CtLocalVariableImpl","sourcecode":"java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry> java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry> = new java.util.ArrayList<org.eclipse.jgit.diff.DiffEntry>(java.util.List<org.eclipse.jgit.diff.DiffEntry>.size())"},"status":-2},{"failures":[],"tindex":"0b2aa581-4c5a-11e5-9f75-29ecd1acfcf0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:318","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.ArrayIndexOutOfBoundsException();\n"},"variableMap":{"r":"smudge_s"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:644","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.internal.storage.file.LockFile) != null) {\n    org.eclipse.jgit.internal.storage.file.LockFile.createCommitSnapshot();\n    org.eclipse.jgit.internal.storage.file.FileSnapshot = org.eclipse.jgit.internal.storage.file.LockFile.getCommitSnapshot();\n    int = ((int)((org.eclipse.jgit.internal.storage.file.FileSnapshot.lastModified()) / 1000));\n    int = ((int)(((org.eclipse.jgit.internal.storage.file.FileSnapshot.lastModified()) % 1000))) * 1000000;\n} else {\n    int = 0;\n    int = 0;\n}"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModify":29,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":37,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge":2,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":7,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":19,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithoutNonNoteConflict":36,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":3,"org.eclipse.jgit.api.StashApplyCommandTest.multipleEdits":18,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":13,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":22,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithWorkingDirectory":25,"org.eclipse.jgit.api.StashApplyCommandTest.indexDelete":28,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":0,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":33,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexEdit":24,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDelete":27,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":8,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":6,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":16,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":14,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryEditPreCommit":15,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":9,"org.eclipse.jgit.api.StashApplyCommandTest.indexAdd":21,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":30,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":35,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":39,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":1,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileConflictsWithCommit":34,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":4,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":10,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":38,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":11,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesInCore":12,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryDeleteIndexAdd":23,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":20,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":5,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLooseAndItsDirectory":40,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileNotIncluded":31,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryCleanIndexModify":17,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyIndexChanged":26,"org.eclipse.jgit.api.StashApplyCommandTest.untrackedFileIncluded":32},"transformations":[{"failures":[],"tindex":"22e84ee6-4c51-11e5-b285-1da1726ee0fd","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:97","type":"CtLocalVariableImpl","sourcecode":"final TLane TLane = org.eclipse.jgit.revplot.PlotCommit<TLane>.getLane()"},"variableMap":{"commit":"commit"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.AbstractPlotRenderer:118","type":"CtLocalVariableImpl","sourcecode":"final TLane TLane = ((TLane)(org.eclipse.jgit.revplot.PlotCommit<TLane>.org.eclipse.jgit.revplot.PlotLane[][int]))"},"status":0},{"failures":[],"tindex":"22e84ee7-4c51-11e5-b285-8975de241cef","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.RefSpec:483","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.transport.RefSpec.(isWildcard()) != (org.eclipse.jgit.transport.RefSpec.isWildcard()))\n    return false;\n"},"variableMap":{"b":"s","this":"s"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.RemoteConfig:453","type":"CtReturnImpl","sourcecode":"return java.util.List<org.eclipse.jgit.transport.RefSpec>.add(org.eclipse.jgit.transport.RefSpec)"},"status":-2},{"failures":[],"tindex":"22e875f8-4c51-11e5-b285-d9b9e65f897e","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:384","type":"CtIfImpl","sourcecode":"if ((int & (org.eclipse.jgit.revwalk.RevWalk.int)) != 0)\n    continue;\n"},"variableMap":{"flags":"p","org.eclipse.jgit.revwalk.RevWalk.SEEN":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.DeltaEncoder:250","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.write(byte[], 0, int)"},"status":-2},{"failures":[],"tindex":"22e875f9-4c51-11e5-b285-7d0b51be473f","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.RevFlagSet:86","type":"CtInvocationImpl","sourcecode":"java.util.AbstractCollection<org.eclipse.jgit.revwalk.RevFlag>.addAll(java.util.Collection<org.eclipse.jgit.revwalk.RevFlag>)"},"status":-2},{"failures":[],"tindex":"22e875fa-4c51-11e5-b285-f55412772466","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:677","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry, false)"},"variableMap":{"src":"newEntry","this":"newEntry"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:398","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.setLength(org.eclipse.jgit.dircache.DirCacheEntry.getLength())"},"status":-2},{"failures":[],"tindex":"22e875fb-4c51-11e5-b285-9dfdc46ac0c7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:544","type":"CtAssignmentImpl","sourcecode":"this.boolean = true"},"variableMap":{"shallowPack":"haveLck"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:441","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":0},{"failures":[],"tindex":"22e875fc-4c51-11e5-b285-5f6097edd065","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BaseRepositoryBuilder:395","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.(getWorkTree()) == null) {\n    java.lang.String java.lang.String = org.eclipse.jgit.util.SystemReader.getenv(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (java.lang.String != null)\n        org.eclipse.jgit.lib.BaseRepositoryBuilder<B, R>.setWorkTree(new java.io.File(java.lang.String));\n    \n} "},"status":0},{"failures":[],"tindex":"22e875fd-4c51-11e5-b285-6b7b140bf32e","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.http.JDKHttpConnection:134","type":"CtReturnImpl","sourcecode":"return java.net.HttpURLConnection.getContentType()"},"variableMap":{"wrappedUrlConnection":"resolved"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:414","type":"CtReturnImpl","sourcecode":"return ((java.lang.String)(java.lang.Object))"},"status":-2},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"tindex":"22e875fe-4c51-11e5-b285-c34b1ff14e18","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheIterator:187","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry = null"},"variableMap":{"currentEntry":"ourDce"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:471","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawPath())"},"status":-1},{"failures":[],"tindex":"22e89d0f-4c51-11e5-b285-458579e4afcf","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ReflogEntryImpl:133","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ReflogEntryImpl:132","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.getComment().startsWith(org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl.java.lang.String))\n    return new org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(this);\nelse\n    return null;\n"},"status":0},{"failures":[39,40],"tindex":"22e89d10-4c51-11e5-b285-a1e36518c8ac","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:1018","type":"CtIfImpl","sourcecode":"if (!(java.io.File.delete()))\n    break;\n"},"status":-1},{"failures":[],"tindex":"22e96061-4c51-11e5-b285-d9359ea01ecf","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.ignore.internal.Strings:395","type":"CtAssignmentImpl","sourcecode":"boolean = false"},"status":0},{"failures":[],"tindex":"22e96062-4c51-11e5-b285-71e76bcbb9da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.NameConflictTreeWalk:123","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.AbstractTreeIterator.next(1)"},"status":-2},{"failures":[],"tindex":"22e96063-4c51-11e5-b285-e7dbc04ea21a","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsInserter:576","type":"CtIfImpl","sourcecode":"if (byte[] != null)\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n"},"variableMap":{"data":"tempId","type":"org.eclipse.jgit.lib.Constants.OBJ_COMMIT"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:749","type":"CtTryImpl","sourcecode":"try {\n    final byte[] byte[] = org.eclipse.jgit.internal.storage.dfs.DfsReader.byte[];\n    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = null;\n    byte[] byte[] = null;\n    int int = org.eclipse.jgit.lib.Constants.int;\n    boolean boolean = false;\n    SEARCH : for ( ;  ; ) {\n        org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n        int int = (byte[][0]) & 255;\n        final int int = (int >> 4) & 7;\n        long long = int & 15;\n        int int = 4;\n        int int = 1;\n        while ((int & 128) != 0) {\n            int = (byte[][int++]) & 255;\n            long += ((long)((int & 127))) << int;\n            int += 7;\n        }\n        switch (int) {\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    if (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta != null) {\n                        byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                        int = int;\n                        break SEARCH;\n                    } \n                    if (long < (org.eclipse.jgit.internal.storage.dfs.DfsReader.getStreamFileThreshold())) {\n                        byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                        if (byte[] != null)\n                            return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                        \n                    } \n                    return new org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.dfs.DfsReader.org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase);\n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    int = (byte[][int++]) & 255;\n                    long long = int & 127;\n                    while ((int & 128) != 0) {\n                        long += 1;\n                        int = (byte[][int++]) & 255;\n                        long <<= 7;\n                        long += int & 127;\n                    }\n                    long = long - long;\n                    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , int , long);\n                    if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n                    if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            case org.eclipse.jgit.lib.Constants.int :\n                {\n                    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n                    long long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.findDeltaBase(org.eclipse.jgit.internal.storage.dfs.DfsReader, org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                    org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = new org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta(org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                    if (long != (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int))\n                        break SEARCH;\n                    \n                    org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, long);\n                    if (org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry != null) {\n                        int = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.int;\n                        byte[] = org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.Entry.byte[];\n                        boolean = true;\n                        break SEARCH;\n                    } \n                    long = long;\n                    continue SEARCH;\n                }\n            default :\n                throw new java.io.IOException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.valueOf(int)));\n        }\n    }\n    if (byte[] == null)\n        throw new org.eclipse.jgit.errors.LargeObjectException();\n    \n    do {\n        if (boolean)\n            boolean = false;\n        else if ((org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta) == null)\n            org.eclipse.jgit.internal.storage.dfs.DfsReader.getDeltaBaseCache().put(org.eclipse.jgit.internal.storage.dfs.DfsPackKey, org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.long, int, byte[]);\n        \n        long = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.long;\n        byte[] byte[] = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.decompress((long + (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int)), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.int, org.eclipse.jgit.internal.storage.dfs.DfsReader);\n        if (byte[] == null) {\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException();\n        } \n        final long long = org.eclipse.jgit.internal.storage.pack.BinaryDelta.getResultSize(byte[]);\n        if ((java.lang.Integer.int) <= long)\n            throw new org.eclipse.jgit.errors.LargeObjectException.ExceedsByteArrayLimit();\n        \n        final byte[] byte[];\n        try {\n            byte[] = new byte[((int)(long))];\n        } catch (java.lang.OutOfMemoryError tooBig) {\n            byte[] = null;\n            byte[] = null;\n            throw new org.eclipse.jgit.errors.LargeObjectException.OutOfMemory(java.lang.OutOfMemoryError);\n        }\n        org.eclipse.jgit.internal.storage.pack.BinaryDelta.apply(byte[], byte[], byte[]);\n        byte[] = byte[];\n        org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta = org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta.org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta;\n    } while (org.eclipse.jgit.internal.storage.dfs.DfsPackFile.Delta != null );\n    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n} catch (java.util.zip.DataFormatException dfe) {\n    org.eclipse.jgit.errors.CorruptObjectException org.eclipse.jgit.errors.CorruptObjectException = new org.eclipse.jgit.errors.CorruptObjectException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Long.valueOf(long), org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getPackName()));\n    org.eclipse.jgit.errors.CorruptObjectException.initCause(java.util.zip.DataFormatException);\n    throw org.eclipse.jgit.errors.CorruptObjectException;\n}"},"status":-2},{"failures":[],"tindex":"22e96064-4c51-11e5-b285-43ed6aefb021","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.api.RebaseCommand:1001","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"=\\'\")"},"variableMap":{"sb":"r"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.TagBuilder:223","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"\\n\")"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
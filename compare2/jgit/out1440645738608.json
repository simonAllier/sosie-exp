{"failureDictionary":{"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_7":248,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6":247,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":138,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_9":250,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_8":249,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_3":124,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":241,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualNewTrees":128,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_2":244,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5":246,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":221,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_4":245,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":66,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":225,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":81,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":141,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":288,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":96,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":209,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":89,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":91,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":51,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules4thru13_IndexEntryNotInHead":251,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":88,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":129,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":20,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_5b":263,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testRules1thru3_NoIndexEntry":231,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":186,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":86,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":200,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChanges":236,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":222,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeBaseCommit":180,"org.eclipse.jgit.api.MergeCommandTest.testMergeTag":148,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":202,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":223,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":179,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":188,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":93,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":139,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":115,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":98,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":178,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":177,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutWithStartPoint":213,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":106,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":11,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteEmptyPack1":7,"org.eclipse.jgit.merge.ResolveMergerTest.checkLockedFilesToBeDeleted":127,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutWithConflict":212,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteEmptyPack2":8,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_simulated_bug":275,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":276,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":175,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":239,"org.eclipse.jgit.lib.IndexModificationTimesTest.testModify":274,"org.eclipse.jgit.api.MergeCommandTest.testMultipleHeads":156,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":40,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":75,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":155,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutAutoCrlfTrue":211,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_15b":234,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_1":243,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":46,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":118,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":196,"org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviateIsActuallyUnique":30,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUnstagedMasterChange":195,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflictsX0":240,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack1":31,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":63,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":97,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":94,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":25,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":90,"org.eclipse.jgit.api.MergeCommandTest.testMergeFailingWithDirtyWorkingTree":163,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":23,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":198,"org.eclipse.jgit.api.MergeCommandTest.testFastForwardWithFiles":150,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":273,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":62,"org.eclipse.jgit.api.BlameCommandTest.testWhitespaceMerge":227,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":161,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjects":286,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":228,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromInserterSmallObjects":3,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain":24,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutCommit":214,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":166,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":57,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":41,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":42,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":92,"org.eclipse.jgit.transport.PackParserTest.test1":1,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithModificationShouldNotDeleteData":190,"org.eclipse.jgit.api.GitConstructionTest.testClose":78,"org.eclipse.jgit.transport.PackParserTest.test2":2,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyIndex":154,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromInserterLargerObjects":6,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":159,"org.eclipse.jgit.internal.storage.file.GcConcurrentTest.concurrentRepack":12,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack2":32,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":61,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFtrueBinary":268,"org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem":224,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithAutoStash":168,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_6b":264,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileSimple":233,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":270,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":197,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartCommit":215,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategiesNoCommit":164,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":95,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFInput":252,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":71,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":28,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":218,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":172,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":130,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":151,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":182,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":52,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":49,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":14,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":83,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualIndexMerge":265,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":112,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesInCore":134,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":73,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":271,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":189,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":133,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":48,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":9,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":53,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":38,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":193,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":35,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":208,"org.eclipse.jgit.api.CheckoutCommandTest.testUpdateSmudgedEntries":216,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingFilesWithTreeInIndex":135,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDontOverwriteDirtyFile":242,"org.eclipse.jgit.api.FetchCommandTest.testFetch":74,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":116,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":146,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":103,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectInNewPack":33,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":45,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":100,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":85,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":119,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":207,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":43,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":22,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":72,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":87,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUntrackedFile":183,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":29,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":50,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":99,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardRebaseWithModification":191,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":181,"org.eclipse.jgit.api.CheckoutCommandTest.testCreateOrphanBranchWithStartPoint":217,"org.eclipse.jgit.api.PushCommandTest.testPush":69,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":184,"org.eclipse.jgit.api.MergeCommandTest.testMultipleDeletions":145,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChangeOtherCommit":206,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":142,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithNewFile":203,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranchWithStagedChange":219,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":285,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":56,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":287,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":284,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":204,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":68,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":152,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":176,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutUncachedChanges":232,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testOverwriteUntrackedIgnoredFile":266,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":283,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":104,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":102,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":278,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":122,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":121,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":277,"org.eclipse.jgit.api.MergeCommandTest.testMergeSuccessAllStrategies":165,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":27,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":21,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":76,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":84,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":171,"org.eclipse.jgit.api.StashApplyCommandTest.stashedApplyOnOtherBranch":220,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":131,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":201,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":272,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":170,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyIndex":140,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":173,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":60,"org.eclipse.jgit.api.GitConstructionTest.testWrap":80,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReadFromFallback":5,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":37,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":107,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":15,"org.eclipse.jgit.api.GitConstructionTest.testOpen":79,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_17":260,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":65,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_18":261,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":205,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_19":262,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":199,"org.eclipse.jgit.api.MergeCommandTest.testMergeWithMessageOption":144,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_13":256,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_14":257,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedWithinPack":34,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_15":258,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":54,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_16":259,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":47,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictFileFolder":149,"org.eclipse.jgit.api.MergeCommandTest.testModifiedAndRenamed":153,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":64,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":229,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_11":254,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_12":255,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":59,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFfalse":253,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":13,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude":10,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testUntrackedConflicts":238,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":77,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":160,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":101,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeEqualTreesWithoutIndex":137,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":157,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedMasterChange":185,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":26,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":147,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem":269,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":58,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCheckoutOutChangesAutoCRLFtrue":267,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":39,"org.eclipse.jgit.transport.BundleWriterTest.testWriteHEAD":125,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":167,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckout":210,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testInitialCheckout":237,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":19,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":169,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":114,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":143,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":192,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testCloseNameConflicts1":235,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":113,"org.eclipse.jgit.internal.storage.dfs.DfsInserterTest.testReaderResolve":4,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":67,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":44,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":117,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":230,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommitsOnDifferentBranches":187,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":136,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":126,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulMergeFailsDueToDirtyWorktree":158,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":282,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":281,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":108,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":280,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":279,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":110,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":82,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":111,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":289,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithUncommittedDelete":123,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultiple":226,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":17,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":18,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":36,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableFilesWithTreeInIndex":132,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":105,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":120,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":70,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":194,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":0,"org.eclipse.jgit.api.RebaseCommandTest.testFastForwardWithMultipleCommits":174,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":16,"org.eclipse.jgit.api.MergeCommandTest.testConflictingMergeFailsDueToDirtyWorktree":162,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":109},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,78,79,79,80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"tindex":"d2989f28-4c6a-11e5-becb-ad12a7061981","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexWriter:256","type":"CtInvocationImpl","sourcecode":"java.security.DigestOutputStream.write(byte[], 0, 4)"},"status":-1},{"failures":[],"tindex":"d298ed49-4c6a-11e5-becb-19196f3a02a4","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.LogCommand:268","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId)"},"status":-2},{"failures":[],"tindex":"d298ed4a-4c6a-11e5-becb-bd41e3b10fcd","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:287","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.RefDirectory.LooseScanner.scan(java.lang.String)"},"variableMap":{"prefix":"org.eclipse.jgit.lib.RefDatabase.ALL","scan":"scan"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:247","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.RefDirectory.LooseScanner.scan(org.eclipse.jgit.lib.RefDatabase.java.lang.String)"},"status":0},{"failures":[],"tindex":"d299145b-4c6a-11e5-becb-07d76b5a9460","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.LockFile:465","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.sleep(100)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.notes.NoteParser:170","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.notes.NoteParser.storeNonNote()"},"status":-2},{"failures":[],"tindex":"d299145c-4c6a-11e5-becb-6f4500cfa4b2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:210","type":"CtAssignmentImpl","sourcecode":"int = 2"},"variableMap":{"sz":"c"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.Patch:355","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":-2},{"failures":[],"tindex":"d299145d-4c6a-11e5-becb-c1dec4fdde44","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.PullCommand:190","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"variableMap":{"pullOnRepoWithoutHEADCurrentlyNotSupported":"unsupportedCommand0","fullBranch":"unsupportedCommand0"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:169","type":"CtWhileImpl","sourcecode":"while (int < (byte[].int)) {\n    final int int = (byte[][int++]) & 255;\n    if ((int & 128) != 0) {\n        int int = 0;\n        if ((int & 1) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 2) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 4) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if ((int & 8) != 0)\n            int |= ((byte[][int++]) & 255) << 24;\n        \n        int int = 0;\n        if ((int & 16) != 0)\n            int = (byte[][int++]) & 255;\n        \n        if ((int & 32) != 0)\n            int |= ((byte[][int++]) & 255) << 8;\n        \n        if ((int & 64) != 0)\n            int |= ((byte[][int++]) & 255) << 16;\n        \n        if (int == 0)\n            int = 65536;\n        \n        java.lang.System.arraycopy(byte[], int, byte[], int, int);\n        int += int;\n    } else if (int != 0) {\n        java.lang.System.arraycopy(byte[], int, byte[], int, int);\n        int += int;\n        int += int;\n    } else {\n        throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    }\n}"},"status":-2},{"failures":[],"tindex":"d2993b6e-4c6a-11e5-becb-d5b193926fcf","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.LimitedInputStream:130","type":"CtThrowImpl","sourcecode":"throw new java.io.IOException(\"Mark not set\")"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectChecker:369","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(\"invalid mode character\")"},"status":-2},{"failures":[],"tindex":"d2993b6f-4c6a-11e5-becb-136cf848baf7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevWalk:784","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevTree = ((org.eclipse.jgit.revwalk.RevCommit)(org.eclipse.jgit.revwalk.RevObject)).getTree()"},"variableMap":{"c":"rev","t":"rev"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:684","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.RevTree = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.revwalk.RevObject)"},"status":-2},{"failures":[123,124],"tindex":"d2993b70-4c6a-11e5-becb-c7a2d73b6fa7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:974","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry, true)"},"variableMap":{"entry":"dce","e":"dce"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:743","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)"},"status":-1},{"failures":[125,126,0],"tindex":"d2993b71-4c6a-11e5-becb-31f94b78c6bd","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:134","type":"CtForImpl","sourcecode":"for ( ;  ; ) {\n    java.lang.String java.lang.String = org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[]);\n    if ((java.lang.String.length()) == 0)\n        break;\n    \n    if ((java.lang.String.charAt(0)) == '-') {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(1, 41));\n        java.lang.String java.lang.String = null;\n        if ((java.lang.String.length()) > 42)\n            java.lang.String = java.lang.String.substring(42);\n        \n        java.util.Map<org.eclipse.jgit.lib.ObjectId, java.lang.String>.put(org.eclipse.jgit.lib.ObjectId, java.lang.String);\n        continue;\n    } \n    final java.lang.String java.lang.String = java.lang.String.substring(41, java.lang.String.length());\n    final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.ObjectId.fromString(java.lang.String.substring(0, 40));\n    final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = java.util.LinkedHashMap<java.lang.String, org.eclipse.jgit.lib.Ref>.put(java.lang.String, new org.eclipse.jgit.lib.ObjectIdRef.Unpeeled(org.eclipse.jgit.lib.Ref.Storage.org.eclipse.jgit.lib.Ref.Storage , java.lang.String , org.eclipse.jgit.lib.ObjectId));\n    if (org.eclipse.jgit.lib.Ref != null)\n        throw org.eclipse.jgit.transport.BundleFetchConnection.duplicateAdvertisement(java.lang.String);\n    \n}"},"status":-1},{"failures":[],"tindex":"d2996282-4c6a-11e5-becb-dbaf0250f775","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.diff.RawText:183","type":"CtIfImpl","sourcecode":"if (int == int)\n    return \"\";\n"},"variableMap":{"end":"length","begin":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.URIish:339","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.util.RawParseUtils.decode(byte[], 0, byte[].int)"},"status":-2},{"failures":[38,41,44,127,128,129,130,131,132,133,134,135,136,137,138,139,58,59,60,62,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,123,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,107,109,110,111,113,117,119,120,121,122],"tindex":"d2996283-4c6a-11e5-becb-b5d79883e024","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:686","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.dircache.DirCacheBuildIterator == null) {\n    if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (!(org.eclipse.jgit.treewalk.WorkingTreeIterator.isEntryIgnored()))) {\n        if (!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode))) {\n            if ((org.eclipse.jgit.lib.ObjectId == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId(), org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, null, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                return ;\n            } \n        } \n    } \n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n    else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null)\n        org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n    else {\n        if (org.eclipse.jgit.dircache.DirCacheCheckout.equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode)) {\n            if (boolean)\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    }\n} else {\n    if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) || (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))) {\n            if ((org.eclipse.jgit.treewalk.CanonicalTreeParser == null) && (org.eclipse.jgit.treewalk.NameConflictTreeWalk.isDirectoryFileConflict())) {\n                if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator == null) || (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))))\n                    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n            \n        } else\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        \n    } else if (org.eclipse.jgit.treewalk.CanonicalTreeParser == null) {\n        if (org.eclipse.jgit.lib.FileMode == (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode)) {\n            org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n        } else {\n            if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n                if ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader()))) {\n                    if ((!(org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryFileMode()))) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.lib.FileMode)))\n                        return ;\n                    else\n                        org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n                    \n                } else\n                    org.eclipse.jgit.dircache.DirCacheCheckout.remove(java.lang.String);\n                \n            } else\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            \n        }\n    } else {\n        if (((!org.eclipse.jgit.dircache.DirCacheCheckout.(equalIdAndMode(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId)))\n            org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n        else if ((!org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) && org.eclipse.jgit.dircache.DirCacheCheckout.(isModified_IndexTree(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode, org.eclipse.jgit.lib.ObjectId))) {\n            if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && (org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode.equals(org.eclipse.jgit.dircache.DirCacheEntry.getFileMode()))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            } else if ((org.eclipse.jgit.dircache.DirCacheEntry != null) && ((org.eclipse.jgit.treewalk.WorkingTreeIterator != null) && (org.eclipse.jgit.treewalk.WorkingTreeIterator.isModified(org.eclipse.jgit.dircache.DirCacheEntry, true, this.org.eclipse.jgit.treewalk.NameConflictTreeWalk.getObjectReader())))) {\n                org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n            } else {\n                org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\n            }\n        } else {\n            org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry);\n        }\n    }\n}"},"status":-1},{"failures":[0,19,20,21,22,23,1,2,35,36,37,38,39,40,41,42,43,44,45,46,47,48,277,7,8,9,278,11,279,280,281,282,283,284,285,286,287,288,289,24,49,50,51,52,53,54,55,56,57,58,59,60,61,62,81,82,83,84,85,86,87,88,89,90,91,92,93,94,63,64,74,75,76,77,67,68,69,78,78,79,79,80,80,70,71,72,73,95,96,97,98,99,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,100,101,102,103,104,105,106],"tindex":"d299d7b4-4c6a-11e5-becb-116b199b6382","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:319","type":"CtIfImpl","sourcecode":"if ((((java.io.File) != null) && (!(java.io.File.delete()))) && (java.io.File.exists()))\n    java.io.File.deleteOnExit();\n"},"variableMap":{"tmpIdx":"finalIdx"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:496","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.internal.storage.file.PackFile = org.eclipse.jgit.internal.storage.file.FileObjectDatabase.openPack(java.io.File);\n} catch (java.io.IOException err) {\n    org.eclipse.jgit.internal.storage.file.PackLock.unlock();\n    if (java.io.File.exists())\n        org.eclipse.jgit.util.FileUtils.delete(java.io.File);\n    \n    if (java.io.File.exists())\n        org.eclipse.jgit.util.FileUtils.delete(java.io.File);\n    \n    throw java.io.IOException;\n}"},"status":-1},{"failures":[],"tindex":"d299d7b5-4c6a-11e5-becb-417300568a08","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:669","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsBlock = null"},"status":0},{"failures":[],"tindex":"d299d7b6-4c6a-11e5-becb-97c480ddcd25","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:519","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.CorruptObjectException(((\"invalid name ends with \\'\" + ((char)(byte[][(int - 1)]))) + \"\\'\"))"},"variableMap":{"raw":"bs","end":"org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.MutableObjectId:245","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.InvalidObjectIdException(byte[] , int , org.eclipse.jgit.lib.Constants.int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
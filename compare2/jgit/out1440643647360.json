{"failureDictionary":{"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetachedUnbornHead":229,"org.eclipse.jgit.transport.RemoteConfigTest.singlePushInsteadOf":32,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test028_LockPackedRef":178,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":43,"org.eclipse.jgit.transport.RemoteConfigTest.testMirror":36,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDir":117,"org.eclipse.jgit.transport.URIishTest.testGitSshProto":21,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy":205,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithHeads":65,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_objectid_self":168,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch":125,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithTagName":127,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleDirectoryIterator":143,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch":124,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":137,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseLookupPath":164,"org.eclipse.jgit.transport.RemoteConfigTest.testSaveAddURI":31,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithExistingSubmoduleDefined":114,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureWrongOldValue":219,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_ConnectionAttempts":39,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithSubmodules":122,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_objectid_implicit_firstparent":167,"org.eclipse.jgit.transport.URIishTest.testGitProtoUnixPort":19,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_objectid_explicit_firstparent":173,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLooseAndItsDirectory":215,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefCommit":162,"org.eclipse.jgit.transport.RemoteConfigTest.multiplePushInsteadOf":29,"org.eclipse.jgit.merge.SimpleMergeTest.testTheirs":111,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithMultipleHeadBranches":129,"org.eclipse.jgit.api.PullCommandTest.testPullEmptyRepository":98,"org.eclipse.jgit.api.CommitCommandTest.commitSubmoduleUpdate":72,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingDeletedAndModified":232,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForward":226,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndexAndWorktree":88,"org.eclipse.jgit.transport.URIishTest.testURIEncodeDecode":18,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex":196,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck2":217,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":222,"org.eclipse.jgit.util.ChangeIdUtilTest.testHasChangeidWithReplacement":61,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_InheritBatchMode":38,"org.eclipse.jgit.transport.PushProcessTest.testUpdateExpectedRemote":181,"org.eclipse.jgit.api.FetchCommandTest.fetchWithExplicitTagsShouldUpdateLocal":2,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare":149,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestGroups":155,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfiguration":101,"org.eclipse.jgit.transport.RemoteConfigTest.testSimple":37,"org.eclipse.jgit.transport.URIishTest.testFileProtoWindows":28,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack1":190,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithoutLocalBranch":12,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemote":66,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWhenDestinationDirectoryExistsAndIsNotEmpty":130,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":53,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare":126,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_disjointhistories":110,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":140,"org.eclipse.jgit.util.ChangeIdUtilTest.testHasChangeidWithReplacementInLastLine":59,"org.eclipse.jgit.lib.RepositoryResolveTest.testHEAD":159,"org.eclipse.jgit.transport.URIishTest.testSshProtoWithADUserPassAndPort":17,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":71,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooFewFiles":188,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain":184,"org.eclipse.jgit.internal.storage.file.PackFileTest.testWhole_SmallObject":186,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmoduleWithRelativeUri":116,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":213,"org.eclipse.jgit.transport.URIishTest.testSshGitProto":16,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionTag":150,"org.eclipse.jgit.gitrepo.RepoCommandTest.testIncludeTag":151,"org.eclipse.jgit.lib.RepositoryResolveTest.testTree":160,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnSideConflict":230,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepository":128,"org.eclipse.jgit.api.GitConstructionTest.testClose":41,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_TooSmallLimit":187,"org.eclipse.jgit.api.MergeCommandTest.testDeletionOnMasterConflict":231,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack2":191,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithBranchInSource":70,"org.eclipse.jgit.transport.URIishTest.testSshProtoWithUserPassAndPort":14,"org.eclipse.jgit.transport.URIishTest.testGetSet":23,"org.eclipse.jgit.internal.storage.file.T0004_PackReaderTest.test004_lookupDeltifiedObject":135,"org.eclipse.jgit.transport.RemoteConfigTest.testBackup":35,"org.eclipse.jgit.lib.RepositoryResolveTest.resolveExprSimple":165,"org.eclipse.jgit.transport.URIishTest.testSshProto":22,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test000_openrepo_alternate_index_file_and_objdirs":177,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockTo":212,"org.eclipse.jgit.api.LsRemoteCommandTest.testLsRemoteWithTags":64,"org.eclipse.jgit.api.BranchCommandTest.testRenameRemoteTrackingBranch":77,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":44,"org.eclipse.jgit.util.io.EolCanonicalizingInputStreamTest.testLFCR":234,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefLockFailureLocked":214,"org.eclipse.jgit.internal.storage.file.T0004_PackReaderTest.test003_lookupCompressedObject":134,"org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec":10,"org.eclipse.jgit.submodule.SubmoduleUpdateTest.repositoryWithSubmodule":89,"org.eclipse.jgit.internal.storage.file.PackFileTest.testWhole_LargeObject":185,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleNestedWithHeadMatchingIndex":141,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":46,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithNestedSubmodules":119,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":95,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefDetached":221,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRenameLocalBranch":79,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":227,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePacked":208,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoteAlias":157,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":52,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithSubmodule":112,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBranch":147,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare":144,"org.eclipse.jgit.lib.T0002_TreeTest.test009_SymlinkAndGitlink":80,"org.eclipse.jgit.internal.storage.file.WindowCacheGetTest.testCache_Defaults":189,"org.eclipse.jgit.util.ChangeIdUtilTest.testHasChangeidWithReplacementWithChangeIdInCommitMessage":56,"org.eclipse.jgit.transport.PushProcessTest.testUpdateFastForward":179,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":210,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTag":174,"org.eclipse.jgit.api.FetchCommandTest.testFetch":0,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteFastForward":224,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":99,"org.eclipse.jgit.lib.RepositoryResolveTest.testDistance":169,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktree":85,"org.eclipse.jgit.util.FileUtilTest.testCreateSymlink":233,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectInNewPack":192,"org.eclipse.jgit.transport.RemoteConfigTest.testSaveRemoveLastURI":33,"org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare":154,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtyRootWorktree":82,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig":102,"org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository":121,"org.eclipse.jgit.lib.RepositoryResolveTest.testParseGitDescribeOutput":170,"org.eclipse.jgit.transport.URIishTest.testSshProtoWithUserAndPort":15,"org.eclipse.jgit.gitrepo.RepoCommandTest.testNonDefaultRemotes":152,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigLocalBranch":78,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_ok":106,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":139,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteForce":207,"org.eclipse.jgit.util.io.EolCanonicalizingInputStreamTest.testCR":235,"org.eclipse.jgit.api.CloneCommandTest.testCloneWithAutoSetupRebase":123,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":45,"org.eclipse.jgit.treewalk.FileTreeIteratorTest.submoduleHeadMatchesIndex":142,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":211,"org.eclipse.jgit.api.CommitCommandTest.commitNewSubmodule":73,"org.eclipse.jgit.api.PushCommandTest.testPush":8,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":223,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay":107,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_objectid_explicit_otherparents":176,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin":203,"org.eclipse.jgit.submodule.SubmoduleAddTest.addSubmodule":115,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs":204,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack":202,"org.eclipse.jgit.transport.RemoteConfigTest.singleInsteadOf":34,"org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate":7,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse":201,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleHEAD":86,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testInitiallyClean":84,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs":195,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":105,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":104,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets":194,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":55,"org.eclipse.jgit.transport.OpenSshConfigTest.testAlias_BatchModeYes":40,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":138,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefBlob":171,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTagForFetchedObjects":3,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranchShortName":120,"org.eclipse.jgit.transport.URIishTest.testGitProtoWindows":25,"org.eclipse.jgit.lib.RepositoryResolveTest.testDerefTree":172,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteHEADreferencedRef":220,"org.eclipse.jgit.transport.RemoteConfigTest.multipleInsteadOf":30,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":69,"org.eclipse.jgit.util.ChangeIdUtilTest.testHasChangeidWithReplacementInLastLineNoLineBreak":60,"org.eclipse.jgit.api.GitConstructionTest.testWrap":63,"org.eclipse.jgit.lib.RepositoryResolveTest.testObjectId_objectid_invalid_explicit_parent":158,"org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo":146,"org.eclipse.jgit.api.PullCommandTest.testPullFastForward":90,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":47,"org.eclipse.jgit.api.GitConstructionTest.testOpen":62,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":42,"org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedWithinPack":193,"org.eclipse.jgit.submodule.SubmoduleSyncTest.repositoryWithRelativeUriSubmodule":113,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRepoManifestCopyFile":156,"org.eclipse.jgit.api.CheckoutCommandTest.testCheckoutRemoteTrackingWithUpstream":13,"org.eclipse.jgit.lib.RefTest.testReadSimplePackedRefSameRepo":74,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":68,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":51,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldNotFetchTagsFromOtherBranches":1,"org.eclipse.jgit.merge.SimpleMergeTest.testOurs":108,"org.eclipse.jgit.lib.RepositoryResolveTest.resolveUpstream":163,"org.eclipse.jgit.api.FetchCommandTest.fetchWithUpdatedTagShouldNotTryToUpdateLocal":4,"org.eclipse.jgit.merge.SimpleMergeTest.testTrivialTwoWay_conflict":109,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleWorktreeUntracked":83,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testUpdateRefForwardWithCheck1":216,"org.eclipse.jgit.transport.URIishTest.testSshProtoWithEscapedADUserPassAndPort":24,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":54,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForward":67,"org.eclipse.jgit.lib.RepositoryResolveTest.testDistance_past_root":161,"org.eclipse.jgit.util.ChangeIdUtilTest.testChangeIdAlreadySetWithReplacement":57,"org.eclipse.jgit.transport.BundleWriterTest.testWriteHEAD":131,"org.eclipse.jgit.gitrepo.RepoCommandTest.testAddRepoManifest":148,"org.eclipse.jgit.util.ChangeIdUtilTest.testHasChangeidWithSpacesBeforeId":58,"org.eclipse.jgit.lib.RepositoryResolveTest.testRef_refname":175,"org.eclipse.jgit.transport.URIishTest.testGitProtoWindowsPort":20,"org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig":9,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":136,"org.eclipse.jgit.lib.RepositoryResolveTest.invalidNames":166,"org.eclipse.jgit.api.PullCommandTest.testPullMergeProgrammaticConfigurationImpliedTargetBranch":97,"org.eclipse.jgit.api.PullCommandTest.testPullWithMergeConfig2":96,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":6,"org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate":11,"org.eclipse.jgit.gitrepo.RepoCommandTest.testRevision":153,"org.eclipse.jgit.api.PullCommandTest.testPullWithoutConfig":100,"org.eclipse.jgit.transport.URIishTest.testGitProtoUnix":27,"org.eclipse.jgit.transport.PushProcessTest.testTrackingRefUpdateEnabled":182,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":132,"org.eclipse.jgit.transport.PushProcessTest.testUpdateRejectedByConnection":180,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4":200,"org.eclipse.jgit.merge.SquashMessageFormatterTest.testCommit":81,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3":199,"org.eclipse.jgit.api.PullCommandTest.testPullMerge":91,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2":198,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1":197,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":93,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":94,"org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirNonStd":118,"org.eclipse.jgit.lib.RefTest.testReadSymRefToLoosePacked":75,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas":206,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":49,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePackedRejected":209,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRefsCacheAfterUpdate":225,"org.eclipse.jgit.api.FetchCommandTest.fetchShouldAutoFollowTag":5,"org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_FailsOver2GiB":183,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":50,"org.eclipse.jgit.transport.URIishTest.testGitWithUserHome":26,"org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare":145,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":228,"org.eclipse.jgit.lib.IndexDiffSubmoduleTest.testDirtySubmoduleIndex":87,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockTo":218,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":103,"org.eclipse.jgit.api.BranchCommandTest.testPullConfigRemoteBranch":76,"org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle":133,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":48,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":92},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"f3ffbf2e-4c65-11e5-aa06-b5472b9e1dcb","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.URIish:642","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.transport.URIish.(getHost()) != null)\n    java.lang.StringBuilder.append(':');\n"},"variableMap":{"r":"r","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.URIish:640","type":"CtIfImpl","sourcecode":"if (!(org.eclipse.jgit.transport.URIish.getPath().startsWith(\"/\")))\n    java.lang.StringBuilder.append('/');\n"},"status":-1},{"failures":[],"tindex":"f3ffe63f-4c65-11e5-aa06-61652c1f50e4","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:311","type":"CtLocalVariableImpl","sourcecode":"int int = 8192"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:377","type":"CtLocalVariableImpl","sourcecode":"int int = 1"},"status":-2},{"failures":[38,39,40],"tindex":"f3ffe640-4c65-11e5-aa06-99563acd80c5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.OpenSshConfig:239","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"BatchMode\", java.lang.String)) {\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.Boolean = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.yesno(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"StrictHostKeyChecking\", java.lang.String)) {\n    java.lang.String java.lang.String = org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String);\n    for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n        if ((org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String) == null)\n            org.eclipse.jgit.transport.OpenSshConfig.Host.java.lang.String = java.lang.String;\n        \n} else if (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(\"ConnectionAttempts\", java.lang.String)) {\n    try {\n        final int int = java.lang.Integer.parseInt(org.eclipse.jgit.transport.OpenSshConfig.org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String));\n        if (int > 0) {\n            for (final org.eclipse.jgit.transport.OpenSshConfig.Host org.eclipse.jgit.transport.OpenSshConfig.Host : java.util.List<org.eclipse.jgit.transport.OpenSshConfig.Host>)\n                if ((org.eclipse.jgit.transport.OpenSshConfig.Host.int) == 0)\n                    org.eclipse.jgit.transport.OpenSshConfig.Host.int = int;\n                \n        } \n    } catch (java.lang.NumberFormatException nfe) {\n    }\n} "},"status":-1},{"failures":[41,6,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"f3ffe641-4c65-11e5-aa06-c9102811f190","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.blame.Region:103","type":"CtOperatorAssignmentImpl","sourcecode":"int += int"},"variableMap":{"d":"bitmapCount","resultStart":"bitmapCount"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1:137","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f3ffe642-4c65-11e5-aa06-2fd7ee9f8274","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.submodule.SubmoduleWalk:693","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String)"},"variableMap":{"org.eclipse.jgit.lib.Constants.HEAD":"stashApplyConflict","subRepo":"repo"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashApplyCommand:170","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.revwalk.RevWalk org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.lib.ObjectReader);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.ObjectId == null)\n        throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    final org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.api.StashApplyCommand.getStashId();\n    org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.lib.ObjectId);\n    if (((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) < 2) || ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) > 3))\n        throw new org.eclipse.jgit.api.errors.JGitInternalException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, org.eclipse.jgit.lib.ObjectId.name(), java.lang.Integer.valueOf(org.eclipse.jgit.revwalk.RevCommit.getParentCount())));\n    \n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(((org.eclipse.jgit.lib.Constants.java.lang.String) + \"^{tree}\"));\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevCommit.getParent(1));\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.revwalk.RevCommit.getParent(0);\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = null;\n    if ((boolean) && ((org.eclipse.jgit.revwalk.RevCommit.getParentCount()) == 3))\n        org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.revwalk.RevCommit.getParent(2));\n    \n    org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository)));\n    org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"stashed HEAD\" , \"HEAD\" , \"stash\" });\n    org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.lib.ObjectId);\n    org.eclipse.jgit.merge.ResolveMerger.setWorkingTreeIterator(new org.eclipse.jgit.treewalk.FileTreeIterator(org.eclipse.jgit.lib.Repository));\n    if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.revwalk.RevCommit)) {\n        org.eclipse.jgit.dircache.DirCache org.eclipse.jgit.dircache.DirCache = org.eclipse.jgit.lib.Repository.lockDirCache();\n        org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.lib.ObjectId , org.eclipse.jgit.dircache.DirCache , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n        org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n        org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n        if (boolean) {\n            org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository, true)));\n            org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"stashed HEAD\" , \"HEAD\" , \"stashed index\" });\n            org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.lib.ObjectId);\n            boolean boolean = org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.ObjectId);\n            if (boolean) {\n                org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()));\n            } else {\n                throw new org.eclipse.jgit.api.errors.StashApplyFailureException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n            }\n        } \n        if (org.eclipse.jgit.lib.ObjectId != null) {\n            org.eclipse.jgit.merge.ResolveMerger org.eclipse.jgit.merge.ResolveMerger = ((org.eclipse.jgit.merge.ResolveMerger)(org.eclipse.jgit.merge.MergeStrategy.newMerger(org.eclipse.jgit.lib.Repository, true)));\n            org.eclipse.jgit.merge.ResolveMerger.setCommitNames(new java.lang.String[]{ \"stashed HEAD\" , \"HEAD\" , \"untracked files\" });\n            org.eclipse.jgit.merge.ResolveMerger.setBase(org.eclipse.jgit.lib.ObjectId);\n            boolean boolean = org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.ObjectId);\n            if (boolean)\n                try {\n                    org.eclipse.jgit.revwalk.RevTree org.eclipse.jgit.revwalk.RevTree = org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n                    org.eclipse.jgit.api.StashApplyCommand.resetUntracked(org.eclipse.jgit.revwalk.RevTree);\n                } catch (org.eclipse.jgit.errors.CheckoutConflictException e) {\n                    throw new org.eclipse.jgit.api.errors.StashApplyFailureException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n                }\n            else\n                throw new org.eclipse.jgit.api.errors.StashApplyFailureException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n            \n        } \n    } else {\n        throw new org.eclipse.jgit.api.errors.StashApplyFailureException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    }\n    return org.eclipse.jgit.lib.ObjectId;\n} catch (org.eclipse.jgit.api.errors.JGitInternalException e) {\n    throw org.eclipse.jgit.api.errors.JGitInternalException;\n} catch (java.io.IOException e) {\n    throw new org.eclipse.jgit.api.errors.JGitInternalException(org.eclipse.jgit.internal.JGitText.get().java.lang.String , java.io.IOException);\n} finally {\n    org.eclipse.jgit.lib.ObjectReader.release();\n}"},"status":-2},{"failures":[],"tindex":"f4000d53-4c65-11e5-aa06-f3123f135d15","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:311","type":"CtLocalVariableImpl","sourcecode":"int int = 8192"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawSubStringPattern:91","type":"CtLocalVariableImpl","sourcecode":"final int int = byte[].int"},"status":-2},{"failures":[56,57,58,59,60,61],"tindex":"f4003464-4c65-11e5-aa06-b9d7aaf412f7","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.merge.SquashMessageFormatter:79","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"Squashed commit of the following:\\n\")"},"variableMap":{"sb":"ret"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.ChangeIdUtil:176","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.eclipse.jgit.util.ChangeIdUtil.java.lang.String)"},"status":-1},{"failures":[],"tindex":"f4003465-4c65-11e5-aa06-a1abd9c9346b","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1305","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(org.eclipse.jgit.treewalk.CanonicalTreeParser.getEntryPathBuffer(), int, int)"},"status":-2},{"failures":[41,41,62,62,63,63,64,65,66,12,13,67,68,69,70,71,72,73,6,7,8,0,2,4,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,44,48,46,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,54,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,52,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229],"tindex":"f4003466-4c65-11e5-aa06-7174551786f3","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:713","type":"CtForImpl","sourcecode":"SEARCH : for ( ;  ; ) {\n    org.eclipse.jgit.internal.storage.file.PackFile.readFully(long, byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n    int int = (byte[][0]) & 255;\n    final int int = (int >> 4) & 7;\n    long long = int & 15;\n    int int = 4;\n    int int = 1;\n    while ((int & 128) != 0) {\n        int = (byte[][int++]) & 255;\n        long += ((long)((int & 127))) << int;\n        int += 7;\n    }\n    switch (int) {\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                if ((org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) || (long < (org.eclipse.jgit.internal.storage.file.WindowCursor.getStreamFileThreshold())))\n                    byte[] = org.eclipse.jgit.internal.storage.file.PackFile.decompress((long + int), ((int)(long)), org.eclipse.jgit.internal.storage.file.WindowCursor);\n                \n                if (org.eclipse.jgit.internal.storage.file.PackFile.Delta != null) {\n                    int = int;\n                    break SEARCH;\n                } \n                if (byte[] != null)\n                    return new org.eclipse.jgit.lib.ObjectLoader.SmallObject(int , byte[]);\n                else\n                    return new org.eclipse.jgit.internal.storage.file.LargePackedWholeObject(int , long , long , int , this , org.eclipse.jgit.internal.storage.file.WindowCursor.org.eclipse.jgit.internal.storage.file.FileObjectDatabase);\n                \n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                int = (byte[][int++]) & 255;\n                long long = int & 127;\n                while ((int & 128) != 0) {\n                    long += 1;\n                    int = (byte[][int++]) & 255;\n                    long <<= 7;\n                    long += int & 127;\n                }\n                long = long - long;\n                org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , int , long);\n                if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        case org.eclipse.jgit.lib.Constants.int :\n            {\n                org.eclipse.jgit.internal.storage.file.PackFile.readFully((long + int), byte[], 0, 20, org.eclipse.jgit.internal.storage.file.WindowCursor);\n                long long = org.eclipse.jgit.internal.storage.file.PackFile.findDeltaBase(org.eclipse.jgit.lib.ObjectId.fromRaw(byte[]));\n                org.eclipse.jgit.internal.storage.file.PackFile.Delta = new org.eclipse.jgit.internal.storage.file.PackFile.Delta(org.eclipse.jgit.internal.storage.file.PackFile.Delta , long , ((int)(long)) , (int + 20) , long);\n                if (long != (org.eclipse.jgit.internal.storage.file.PackFile.Delta.int))\n                    break SEARCH;\n                \n                org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry = org.eclipse.jgit.internal.storage.file.WindowCursor.getDeltaBaseCache().get(this, long);\n                if (org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry != null) {\n                    int = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.int;\n                    byte[] = org.eclipse.jgit.internal.storage.file.DeltaBaseCache.Entry.byte[];\n                    boolean = true;\n                    break SEARCH;\n                } \n                long = long;\n                continue SEARCH;\n            }\n        default :\n            throw new java.io.IOException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.Integer.valueOf(int)));\n    }\n}"},"status":-1},{"failures":[230,231,232],"tindex":"f4005b77-4c65-11e5-aa06-a3285c4ca1e8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher:71","type":"CtIfImpl","sourcecode":"if (int > (int - int))\n    return false;\n"},"variableMap":{"startIncl":"modeO","subLength":"modeT","endExcl":"modeT"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:626","type":"CtIfImpl","sourcecode":"if (int == 0) {\n    if (org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator, org.eclipse.jgit.dircache.DirCacheEntry))\n        return false;\n    \n    if (org.eclipse.jgit.merge.ResolveMerger.org.eclipse.jgit.merge.ResolveMerger.nonTree(int)) {\n        if (org.eclipse.jgit.dircache.DirCacheEntry != null)\n            java.util.Map<java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry>.put(org.eclipse.jgit.treewalk.NameConflictTreeWalk.getPathString(), org.eclipse.jgit.dircache.DirCacheEntry);\n        \n    } \n} "},"status":-1},{"failures":[233],"tindex":"f4005b78-4c65-11e5-aa06-3d37e4d04d33","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FS:612","type":"CtThrowImpl","sourcecode":"throw new org.eclipse.jgit.errors.SymlinksNotSupportedException(org.eclipse.jgit.internal.JGitText.get().java.lang.String)"},"status":-1},{"failures":[],"tindex":"f4005b79-4c65-11e5-aa06-5b2db32f3461","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.ignore.internal.PathMatcher:121","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.trim()"},"variableMap":{"pattern":"prefix"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1059","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.lib.ConfigLine.java.lang.String = \"\""},"status":-2},{"failures":[234,235],"tindex":"f4005b7a-4c65-11e5-aa06-2b2045ae7391","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.treewalk.WorkingTreeIterator:509","type":"CtAssignmentImpl","sourcecode":"int = (int) + int"},"variableMap":{"pathLen":"i","pathOffset":"i","nameLen":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.EolCanonicalizingInputStream:159","type":"CtUnaryOperatorImpl","sourcecode":"int++"},"status":-1},{"failures":[],"tindex":"f4005b7b-4c65-11e5-aa06-692db2f7d764","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.SymbolicRef:110","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = this"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CloneCommand:285","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = null"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":39,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":49,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":44,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":43,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":51,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":5,"org.eclipse.jgit.api.CherryPickCommandTest.testSequentialCherryPick":9,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":6,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet":19,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":17,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":52,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":54,"org.eclipse.jgit.api.StashApplyCommandTest.testApplyStashWithDeletedFile":59,"org.eclipse.jgit.api.MergeCommandTest.testSquashFastForward":56,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyWorktree":8,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickDirtyIndex":0,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveEdit":35,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleFixup":20,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":45,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":50,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldIgnoreMergeCommits":21,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":7,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMixedSquashAndFixup":47,"org.eclipse.jgit.util.io.AutoCRLFOutputStreamTest.test":58,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveMultipleSquash":22,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveSingleSquashAndModifyMessage":31,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":38,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":36,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":32,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldNotFailIfUserAddCommentLinesInPrepareSteps":34,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":2,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":30,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":29,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":1,"org.eclipse.jgit.api.RebaseCommandTest.testFilesAddedFromTwoBranches":42,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":48,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":28,"org.eclipse.jgit.merge.SquashMessageFormatterTest.testCommit":53,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig2":12,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig3":13,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig3":16,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserveConfig2":15,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":25,"org.eclipse.jgit.api.MergeCommandTest.testSquashMerge":55,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseInteractiveReword":33,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges2":24,"org.eclipse.jgit.util.io.AutoCRLFOutputStreamTest.testBoundary":57,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":27,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStash":46,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":23,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":26,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":10,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":3,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebasePreserve1Config":14,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":40,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":37,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":18,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":41,"org.eclipse.jgit.api.PullCommandTest.testPullWithRebaseConfig1":11},"transformations":[{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"tindex":"c67799ed-4c5b-11e5-b9e3-f7f40cdf1376","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CherryPickCommand:199","type":"CtReturnImpl","sourcecode":"return new org.eclipse.jgit.api.CherryPickResult(org.eclipse.jgit.revwalk.RevCommit , java.util.List<org.eclipse.jgit.lib.Ref>)"},"variableMap":{"newHead":"newHead","cherryPickedRefs":"cherryPickedRefs"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CherryPickCommand:158","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.merge.ResolveMerger.merge(org.eclipse.jgit.revwalk.RevCommit, org.eclipse.jgit.revwalk.RevCommit)) {\n    if (org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.revwalk.RevCommit.getTree().getId(), org.eclipse.jgit.merge.ResolveMerger.getResultTreeId()))\n        continue;\n    \n    org.eclipse.jgit.dircache.DirCacheCheckout org.eclipse.jgit.dircache.DirCacheCheckout = new org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.revwalk.RevCommit.getTree() , org.eclipse.jgit.lib.Repository.lockDirCache() , org.eclipse.jgit.merge.ResolveMerger.getResultTreeId());\n    org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true);\n    org.eclipse.jgit.dircache.DirCacheCheckout.checkout();\n    if (!(boolean))\n        org.eclipse.jgit.revwalk.RevCommit = new org.eclipse.jgit.api.Git(org.eclipse.jgit.api.GitCommand<org.eclipse.jgit.api.CherryPickResult>.getRepository()).commit().setMessage(org.eclipse.jgit.revwalk.RevCommit.getFullMessage()).setReflogComment((((java.lang.String) + \" \") + (org.eclipse.jgit.revwalk.RevCommit.getShortMessage()))).setAuthor(org.eclipse.jgit.revwalk.RevCommit.getAuthorIdent()).call();\n    \n    java.util.List<org.eclipse.jgit.lib.Ref>.add(org.eclipse.jgit.lib.Ref);\n} else {\n    if (org.eclipse.jgit.merge.ResolveMerger.failed())\n        return new org.eclipse.jgit.api.CherryPickResult(org.eclipse.jgit.merge.ResolveMerger.getFailingPaths());\n    \n    java.lang.String java.lang.String = new org.eclipse.jgit.merge.MergeMessageFormatter().formatWithConflicts(org.eclipse.jgit.revwalk.RevCommit.getFullMessage(), org.eclipse.jgit.merge.ResolveMerger.getUnmergedPaths());\n    if (!(boolean))\n        org.eclipse.jgit.lib.Repository.writeCherryPickHead(org.eclipse.jgit.revwalk.RevCommit.getId());\n    \n    org.eclipse.jgit.lib.Repository.writeMergeCommitMsg(java.lang.String);\n    return org.eclipse.jgit.api.CherryPickResult.org.eclipse.jgit.api.CherryPickResult;\n}"},"status":-1},{"failures":[53,54,55,56],"tindex":"c677c0fe-4c5b-11e5-b9e3-9500615ec846","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.DiffEntry:525","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(\"]\")"},"variableMap":{"buf":"a"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.SquashMessageFormatter:101","type":"CtInvocationImpl","sourcecode":"java.lang.StringBuilder.append(org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent))"},"status":-1},{"failures":[],"tindex":"c677c0ff-4c5b-11e5-b9e3-71f7ab491e11","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.FileUtils:379","type":"CtLocalVariableImpl","sourcecode":"final int int = 1"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.CombinedHunkHeader:241","type":"CtLocalVariableImpl","sourcecode":"int int = 0"},"status":-2},{"failures":[],"tindex":"c677c100-4c5b-11e5-b9e3-bdfd5116505d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.storage.file.WindowCacheConfig:225","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.file.WindowCache.reconfigure(this)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:1277","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker, org.eclipse.jgit.treewalk.CanonicalTreeParser)"},"status":-2},{"failures":[],"tindex":"c677e811-4c5b-11e5-b9e3-438590bfd6fa","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:384","type":"CtIfImpl","sourcecode":"if ((int & (org.eclipse.jgit.revwalk.RevWalk.int)) != 0)\n    continue;\n"},"variableMap":{"flags":"infoOffset","org.eclipse.jgit.revwalk.RevWalk.SEEN":"org.eclipse.jgit.dircache.DirCacheEntry.P_FLAGS"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheEntry:404","type":"CtIfImpl","sourcecode":"if (boolean)\n    byte[][((int) + (org.eclipse.jgit.dircache.DirCacheEntry.int))] |= org.eclipse.jgit.dircache.DirCacheEntry.int;\nelse\n    byte[][((int) + (org.eclipse.jgit.dircache.DirCacheEntry.int))] &= ~(org.eclipse.jgit.dircache.DirCacheEntry.int);\n"},"status":-2},{"failures":[],"tindex":"c677e812-4c5b-11e5-b9e3-77fd98943ab0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.NetRCCredentialsProvider:65","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.transport.CredentialsProvider.setDefault(new org.eclipse.jgit.transport.NetRCCredentialsProvider())"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.BundleFetchConnection:266","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit.add(org.eclipse.jgit.revwalk.RevFlag)"},"status":0},{"failures":[],"tindex":"c677e813-4c5b-11e5-b9e3-777e5ee41936","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.ObjectWalk:587","type":"CtForImpl","sourcecode":"for ( ; int < int ; int++) {\n    byte byte = byte[][int];\n    if (byte != ' ')\n        int = (int >>> 2) + (byte << 24);\n    \n}"},"variableMap":{"nameEnd":"length","buf":"raw","hash":"length","ptr":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:509","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IO.readFully(java.io.BufferedInputStream, byte[], 0, byte[].int)"},"status":-2},{"failures":[57,58],"tindex":"c677e814-4c5b-11e5-b9e3-e7ba00bd0e1b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.QuotedString:250","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.util.QuotedString.GitPathStyle.byte[]['\u000b'] = 'v'"},"variableMap":{"org.eclipse.jgit.util.QuotedString.GitPathStyle.quote":"onebytebuf"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.io.AutoCRLFOutputStream:81","type":"CtAssignmentImpl","sourcecode":"byte[][0] = ((byte)(int))"},"status":-1},{"failures":[],"tindex":"c677e815-4c5b-11e5-b9e3-9b81ccd942a5","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.SideBandInputStream:196","type":"CtIfImpl","sourcecode":"if (0 <= int)\n    int = int;\nelse\n    break;\n"},"variableMap":{"s":"org.eclipse.jgit.lib.Constants.OBJ_BLOB","cr":"org.eclipse.jgit.lib.Constants.OBJ_BLOB"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.AddCommand:170","type":"CtIfImpl","sourcecode":"if (!((boolean) && ((org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)) == null))) {\n    org.eclipse.jgit.dircache.DirCacheIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator);\n    if (org.eclipse.jgit.treewalk.WorkingTreeIterator != null) {\n        long long = org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryLength();\n        org.eclipse.jgit.dircache.DirCacheEntry org.eclipse.jgit.dircache.DirCacheEntry = new org.eclipse.jgit.dircache.DirCacheEntry(java.lang.String);\n        if (((org.eclipse.jgit.dircache.DirCacheIterator == null) || ((org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry()) == null)) || (!(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry().isAssumeValid()))) {\n            org.eclipse.jgit.lib.FileMode org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator);\n            org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode);\n            if ((org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode) != org.eclipse.jgit.lib.FileMode) {\n                org.eclipse.jgit.dircache.DirCacheEntry.setLength(long);\n                org.eclipse.jgit.dircache.DirCacheEntry.setLastModified(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryLastModified());\n                long long = org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryContentLength();\n                java.io.InputStream java.io.InputStream = org.eclipse.jgit.treewalk.WorkingTreeIterator.openEntryStream();\n                try {\n                    org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.lib.ObjectInserter.insert(org.eclipse.jgit.lib.Constants.int, long, java.io.InputStream));\n                } finally {\n                    java.io.InputStream.close();\n                }\n            } else\n                org.eclipse.jgit.dircache.DirCacheEntry.setObjectId(org.eclipse.jgit.treewalk.WorkingTreeIterator.getEntryObjectId());\n            \n            org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheEntry);\n            java.lang.String = java.lang.String;\n        } else {\n            org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry());\n        }\n    } else if ((org.eclipse.jgit.dircache.DirCacheIterator != null) && ((!(boolean)) || ((org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode) == (org.eclipse.jgit.dircache.DirCacheIterator.getEntryFileMode()))))\n        org.eclipse.jgit.dircache.DirCacheBuilder.add(org.eclipse.jgit.dircache.DirCacheIterator.getDirCacheEntry());\n    \n} "},"status":-2},{"failures":[59],"tindex":"c6780f26-4c5b-11e5-b9e3-03a03afb199c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.Repository:1151","type":"CtIfImpl","sourcecode":"if (int == 0)\n    return false;\n"},"variableMap":{"len":"org.eclipse.jgit.merge.ResolveMerger.T_FILE"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.ResolveMerger:554","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.treewalk.NameConflictTreeWalk.getTreeCount()) > (org.eclipse.jgit.merge.ResolveMerger.int)) && ((org.eclipse.jgit.treewalk.NameConflictTreeWalk.getRawMode(org.eclipse.jgit.merge.ResolveMerger.int)) == 0))\n    return true;\n"},"status":-1},{"failures":[],"tindex":"c6780f27-4c5b-11e5-b9e3-af630c589234","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:408","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ObjectId == null)\n    continue;\n"},"variableMap":{"id":"tree"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.RecursiveMerger:238","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.CommitBuilder.setTreeId(org.eclipse.jgit.lib.ObjectId)"},"status":-2},{"failures":[],"tindex":"c6780f28-4c5b-11e5-b9e3-63ac4df9abfc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PushCommand:157","type":"CtInvocationImpl","sourcecode":"java.util.ArrayList<org.eclipse.jgit.transport.PushResult>.add(org.eclipse.jgit.transport.PushResult)"},"status":-2},{"failures":[],"tindex":"c6780f29-4c5b-11e5-b9e3-05289ad6b6df","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:490","type":"CtIfImpl","sourcecode":"if (!(java.io.File.delete()))\n    java.io.File.deleteOnExit();\n"},"variableMap":{"finalPack":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.RmCommand:182","type":"CtWhileImpl","sourcecode":"while (((java.io.File != null) && (!(java.io.File.equals(org.eclipse.jgit.lib.Repository.getWorkTree())))) && (java.io.File.delete()))\n    java.io.File = java.io.File.getParentFile();"},"status":0},{"failures":[],"tindex":"c6780f2a-4c5b-11e5-b9e3-f7d89e05ca4b","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackIndexV1:232","type":"CtReturnImpl","sourcecode":"return ((4 + (org.eclipse.jgit.lib.Constants.int)) * int) + 4"},"variableMap":{"mid":"eol","org.eclipse.jgit.lib.Constants.OBJECT_ID_LENGTH":"eol"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:391","type":"CtReturnImpl","sourcecode":"return int"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
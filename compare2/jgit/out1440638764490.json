{"failureDictionary":{"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeCrissCross":84,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForEditInCaseOfConflict":66,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeAndContentChangeConflict":90,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":78,"org.eclipse.jgit.api.RebaseCommandTest.testConflictFreeWithSingleFile":75,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictMarkers":37,"org.eclipse.jgit.api.MergeCommandTest.testRecursiveMergeWithConflict":45,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGCmoreCommits":105,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtStart":2,"org.eclipse.jgit.api.RevertCommandTest.testRevertMultipleWithFail":20,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":46,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOurCommitName":38,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchHasPreviousLog":126,"org.eclipse.jgit.merge.MergeAlgorithmTest.testDeleteVsModify":11,"org.eclipse.jgit.merge.MergeAlgorithmTest.testNoAgainstOneModification":12,"org.eclipse.jgit.api.ApplyCommandTest.testModifyNL1":94,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipWithConflict":76,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1Sub":97,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteFastForward":133,"org.eclipse.jgit.api.PullCommandTest.testPullConflict":44,"org.eclipse.jgit.api.MergeCommandTest.testSquashMergeConflict":48,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_nonmergeable":25,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":81,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryContentMerge":31,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndAbortWithDetachedHEAD":71,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldSquashInCaseOfConflict":74,"org.eclipse.jgit.merge.MergeAlgorithmTest.testConflictAtEnd":0,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":79,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteForce":124,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_nonBare":114,"org.eclipse.jgit.lib.IndexDiffTest.testStageState_mergeAndReset_bug":13,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ParentsNotMergeable":29,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictReset":39,"org.eclipse.jgit.treewalk.filter.IndexDiffFilterTest.testConflicts":86,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":80,"org.eclipse.jgit.api.CommitAndLogCommandTest.testModeChange":91,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjects":120,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefLockedRefNotPackedNoError":116,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameCurrentBranch":127,"org.eclipse.jgit.api.RebaseCommandTest.testMergeFirstStopOnLastConflictAndSkip":63,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseWithAutoStashConflictOnApply":62,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictMarkers":18,"org.eclipse.jgit.api.MergeCommandTest.testMultipleCreations":50,"org.eclipse.jgit.merge.ResolveMergerTest.checkForCorrectIndex":85,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisOtherLockTo":132,"org.eclipse.jgit.merge.MergeAlgorithmTest.testInsertVsModify":7,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":47,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolution":34,"org.eclipse.jgit.api.MergeCommandTest.testMergeConflictWithMessageOption":49,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":61,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSameModification":9,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":60,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.dontPackHEAD_bare":115,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoComplicatedModifications":4,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndSkipNoConflict":72,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":51,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldStopForRewordInCaseOfConflict":59,"org.eclipse.jgit.api.StashApplyCommandTest.stashedContentMerge":32,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchAlsoInPack":131,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneNoReflog":123,"org.eclipse.jgit.api.ApplyCommandTest.testDeleteD":102,"org.eclipse.jgit.lib.IndexDiffTest.testConflicting":15,"org.eclipse.jgit.notes.NoteMapMergerTest.testNonNotesWithNonNoteConflict":87,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndContinue":58,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testFileModeChangeWithNoContentChangeUpdate":89,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickMerge":36,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":83,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMerges1":56,"org.eclipse.jgit.api.RevertCommandTest.testRevertConflictResolution":19,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickConflictResolutionNoCOmmit":40,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":52,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullConflict":42,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinueWithNoDeltaToMaster":68,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testNotPackTwice":108,"org.eclipse.jgit.api.GarbageCollectCommandTest.testGConeCommit":104,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackRepoWithCorruptReflog":121,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnLastConflictAndSkip":73,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictCommitAndContinue":70,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable":27,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndFailContinueIfFileIsDirty":69,"org.eclipse.jgit.api.MergeCommandTest.testMergeMessage":53,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirtyFileModeEqualHeadMerge":88,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMergeWithDirtyWorkTree":93,"org.eclipse.jgit.merge.MergeAlgorithmTest.testOneAgainstTwoConflictingModifications":6,"org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullLocalConflict":41,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":55,"org.eclipse.jgit.internal.storage.file.GcPruneNonReferencedTest.testPackCommitsAndLooseOneWithPruneNow":112,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge1":23,"org.eclipse.jgit.api.BlameCommandTest.testConflictingMerge2":24,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.whileRefUpdatedRefUpdateSucceeds":113,"org.eclipse.jgit.merge.MergeAlgorithmTest.testAdjacentModifications":10,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":54,"org.eclipse.jgit.internal.storage.file.GcReflogTest.testPackCommitsAndLooseOneWithPruneNowNoReflog":122,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission2avoided":129,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_mergeable2":26,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_ThreeCommonPredecessors":28,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1":95,"org.eclipse.jgit.api.ApplyCommandTest.testAddA2":96,"org.eclipse.jgit.api.GitConstructionTest.testClose":103,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoSimilarModsAndOneInsert":5,"org.eclipse.jgit.lib.IndexDiffTest.testConflictingFromMultipleCreations":14,"org.eclipse.jgit.api.RebaseCommandTest.testDetachedHead":65,"org.eclipse.jgit.api.MergeCommandTest.testFileModeMerge":92,"org.eclipse.jgit.api.ApplyCommandTest.testModifyX":99,"org.eclipse.jgit.api.ApplyCommandTest.testModifyY":100,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":106,"org.eclipse.jgit.api.ApplyCommandTest.testModifyZ":101,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoConflictingModifications":8,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickNoCommit":33,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":16,"org.eclipse.jgit.api.ApplyCommandTest.testModifyE":98,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisToLockTo":128,"org.eclipse.jgit.merge.MergeAlgorithmTest.testTwoNonConflictingModifications":1,"org.eclipse.jgit.internal.storage.file.GcDirCacheSavesObjectsTest.testDirCacheSavesObjectsWithPruneNow":119,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":77,"org.eclipse.jgit.api.StashCreateCommandTest.unmergedPathsShouldCauseException":17,"org.eclipse.jgit.merge.RecursiveMergerTest.crissCrossMerge_checkOtherFiles":30,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflict":57,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackCommitsAndLooseOne":110,"org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack":118,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":82,"org.eclipse.jgit.internal.storage.file.GcPackRefsTest.looseRefPacked":117,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPack2Commits":111,"org.eclipse.jgit.merge.MergeAlgorithmTest.testSeperateModifications":3,"org.eclipse.jgit.internal.storage.file.GcKeepFilesTest.testKeepFiles":107,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameRefNameColission1avoided":135,"org.eclipse.jgit.api.RevertCommandTest.testRevertkConflictReset":22,"org.eclipse.jgit.api.RevertCommandTest.testRevertOurCommitName":21,"org.eclipse.jgit.api.PullCommandTest.testPullLocalConflict":43,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchCannotLockAFileHEADisFromLockTo":130,"org.eclipse.jgit.api.CherryPickCommandTest.testCherryPick":35,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictAndContinue":67,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testRenameBranchNoPreviousLog":134,"org.eclipse.jgit.api.RebaseCommandTest.testRebaseShouldFixupInCaseOfConflict":64,"org.eclipse.jgit.internal.storage.file.RefUpdateTest.testDeleteLoosePacked":125,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":109},"transformations":[{"failures":[],"tindex":"9595d3c8-4c5a-11e5-a075-1964345c21da","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser:335","type":"CtWhileImpl","sourcecode":"while (int > 0) {\n    byte[][(int - 1)] |= 128;\n    byte[][int++] = ((byte)(int & 127));\n    int >>>= 7;\n}"},"status":0},{"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"9595d3c9-4c5a-11e5-a075-1f6b3137a246","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeAlgorithm:149","type":"CtWhileImpl","sourcecode":"while ((org.eclipse.jgit.diff.Edit != (org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.diff.Edit)) || (org.eclipse.jgit.diff.Edit != (org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.diff.Edit))) {\n    if ((org.eclipse.jgit.diff.Edit.getEndA()) < (org.eclipse.jgit.diff.Edit.getBeginA())) {\n        if (int != (org.eclipse.jgit.diff.Edit.getBeginA())) {\n            org.eclipse.jgit.merge.MergeResult<S>.add(0, int, org.eclipse.jgit.diff.Edit.getBeginA(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        } \n        org.eclipse.jgit.merge.MergeResult<S>.add(1, org.eclipse.jgit.diff.Edit.getBeginB(), org.eclipse.jgit.diff.Edit.getEndB(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        int = org.eclipse.jgit.diff.Edit.getEndA();\n        org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n    } else if ((org.eclipse.jgit.diff.Edit.getEndA()) < (org.eclipse.jgit.diff.Edit.getBeginA())) {\n        if (int != (org.eclipse.jgit.diff.Edit.getBeginA())) {\n            org.eclipse.jgit.merge.MergeResult<S>.add(0, int, org.eclipse.jgit.diff.Edit.getBeginA(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        } \n        org.eclipse.jgit.merge.MergeResult<S>.add(2, org.eclipse.jgit.diff.Edit.getBeginB(), org.eclipse.jgit.diff.Edit.getEndB(), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        int = org.eclipse.jgit.diff.Edit.getEndA();\n        org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n    } else {\n        if (((org.eclipse.jgit.diff.Edit.getBeginA()) != int) && ((org.eclipse.jgit.diff.Edit.getBeginA()) != int)) {\n            org.eclipse.jgit.merge.MergeResult<S>.add(0, int, java.lang.Math.min(org.eclipse.jgit.diff.Edit.getBeginA(), org.eclipse.jgit.diff.Edit.getBeginA()), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        } \n        int int = org.eclipse.jgit.diff.Edit.getBeginB();\n        int int = org.eclipse.jgit.diff.Edit.getBeginB();\n        if ((org.eclipse.jgit.diff.Edit.getBeginA()) < (org.eclipse.jgit.diff.Edit.getBeginA())) {\n            int -= (org.eclipse.jgit.diff.Edit.getBeginA()) - (org.eclipse.jgit.diff.Edit.getBeginA());\n        } else {\n            int -= (org.eclipse.jgit.diff.Edit.getBeginA()) - (org.eclipse.jgit.diff.Edit.getBeginA());\n        }\n        org.eclipse.jgit.diff.Edit org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n        org.eclipse.jgit.diff.Edit org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n        for ( ;  ; ) {\n            if ((org.eclipse.jgit.diff.Edit.getEndA()) >= (org.eclipse.jgit.diff.Edit.getBeginA())) {\n                org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n                org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n            } else if ((org.eclipse.jgit.diff.Edit.getEndA()) >= (org.eclipse.jgit.diff.Edit.getBeginA())) {\n                org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n                org.eclipse.jgit.diff.Edit = org.eclipse.jgit.merge.MergeAlgorithm.org.eclipse.jgit.merge.MergeAlgorithm.nextEdit(java.util.Iterator<org.eclipse.jgit.diff.Edit>);\n            } else {\n                break;\n            }\n        }\n        int int = org.eclipse.jgit.diff.Edit.getEndB();\n        int int = org.eclipse.jgit.diff.Edit.getEndB();\n        if ((org.eclipse.jgit.diff.Edit.getEndA()) < (org.eclipse.jgit.diff.Edit.getEndA())) {\n            int += (org.eclipse.jgit.diff.Edit.getEndA()) - (org.eclipse.jgit.diff.Edit.getEndA());\n        } else {\n            int += (org.eclipse.jgit.diff.Edit.getEndA()) - (org.eclipse.jgit.diff.Edit.getEndA());\n        }\n        int int = int - int;\n        int int = int - (int - int);\n        if (int > 0)\n            int -= int;\n        \n        int int = 0;\n        while ((int < int) && (org.eclipse.jgit.diff.SequenceComparator<S>.equals(S, (int + int), S, (int + int))))\n            int++;\n        int -= int;\n        int int = 0;\n        while ((int < int) && (org.eclipse.jgit.diff.SequenceComparator<S>.equals(S, ((int - int) - 1), S, ((int - int) - 1))))\n            int++;\n        int -= int;\n        if (int > 0)\n            org.eclipse.jgit.merge.MergeResult<S>.add(1, int, (int + int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        \n        if ((int > 0) || (int != 0)) {\n            org.eclipse.jgit.merge.MergeResult<S>.add(1, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n            org.eclipse.jgit.merge.MergeResult<S>.add(2, (int + int), (int - int), org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        } \n        if (int > 0)\n            org.eclipse.jgit.merge.MergeResult<S>.add(1, (int - int), int, org.eclipse.jgit.merge.MergeChunk.ConflictState.org.eclipse.jgit.merge.MergeChunk.ConflictState);\n        \n        int = java.lang.Math.max(org.eclipse.jgit.diff.Edit.getEndA(), org.eclipse.jgit.diff.Edit.getEndA());\n        org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n        org.eclipse.jgit.diff.Edit = org.eclipse.jgit.diff.Edit;\n    }\n}"},"status":-1},{"failures":[88,89,90,91,92,93],"tindex":"9595fada-4c5a-11e5-a075-87c7bc66d35d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.InterruptTimer:209","type":"CtInvocationImpl","sourcecode":"java.lang.Thread.interrupted()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.FileRepository:293","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getFS().setExecute(java.io.File, true)"},"status":-1},{"failures":[],"tindex":"959621eb-4c5a-11e5-a075-bfb0f77b1975","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.FileUtils:170","type":"CtTryImpl","sourcecode":"try {\n    java.lang.Thread.sleep(100);\n} catch (java.lang.InterruptedException e) {\n}"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:681","type":"CtInvocationImpl","sourcecode":"java.security.DigestOutputStream.write(byte[], 0, 8)"},"status":0},{"failures":[],"tindex":"959621ec-4c5a-11e5-a075-575cdbb9c9d5","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.ObjectIdOwnerMap:243","type":"CtIfImpl","sourcecode":"if ((++(int)) >= (1 << (int)))\n    throw new java.util.NoSuchElementException();\n"},"variableMap":{"dirIdx":"length","bits":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.StringUtils:57","type":"CtForImpl","sourcecode":"for (char char = 0 ; char < (org.eclipse.jgit.util.StringUtils.char[].int) ; char++)\n    org.eclipse.jgit.util.StringUtils.char[][char] = char;"},"status":-2},{"failures":[],"tindex":"959621ed-4c5a-11e5-a075-b1e4279009f4","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectLoader:100","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.ObjectLoader.org.eclipse.jgit.lib.ObjectLoader.cloneArray(org.eclipse.jgit.lib.ObjectLoader.getCachedBytes())"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectLoader:185","type":"CtReturnImpl","sourcecode":"return org.eclipse.jgit.lib.ObjectLoader.getCachedBytes()"},"status":-2},{"failures":[],"tindex":"959621ee-4c5a-11e5-a075-db6f66c68704","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.GSSManagerFactory:64","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.GSSManagerFactory.SunGSSManagerFactory.isSupported()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.CherryPickCommand:166","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.checkout()"},"status":-2},{"failures":[],"tindex":"959621ef-4c5a-11e5-a075-abd9872df700","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:180","type":"CtAssignmentImpl","sourcecode":"int = 2"},"variableMap":{"nParents":"size"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.storage.pack.PackConfig:522","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"959621f0-4c5a-11e5-a075-c109021605be","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.BasePackFetchConnection:472","type":"CtLocalVariableImpl","sourcecode":"final java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(46)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.merge.MergeMessageFormatter:70","type":"CtLocalVariableImpl","sourcecode":"java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder()"},"status":-2},{"failures":[94,95,96,97,98,99,100,101,102],"tindex":"95964901-4c5a-11e5-a075-fdf0be61c465","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.ReflogReaderImpl:121","type":"CtReturnImpl","sourcecode":"return java.util.Collections.emptyList()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.ApplyResult:73","type":"CtReturnImpl","sourcecode":"return java.util.List<java.io.File>"},"status":-1},{"failures":[],"tindex":"95964902-4c5a-11e5-a075-3df69e7f2669","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:629","type":"CtTryImpl","sourcecode":"try {\n    org.eclipse.jgit.treewalk.TreeWalk.addTree(new org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.internal.storage.file.FileRepository.readDirCache()));\n    org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.internal.storage.file.FileRepository.resolve(org.eclipse.jgit.lib.Constants.java.lang.String);\n    if (org.eclipse.jgit.lib.ObjectId != null) {\n        org.eclipse.jgit.revwalk.RevWalk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.internal.storage.file.FileRepository);\n        org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.revwalk.RevWalk.parseTree(org.eclipse.jgit.lib.ObjectId));\n        org.eclipse.jgit.revwalk.RevWalk.dispose();\n        org.eclipse.jgit.revwalk.RevWalk = null;\n    } \n    org.eclipse.jgit.treewalk.TreeWalk.setFilter(org.eclipse.jgit.treewalk.filter.TreeFilter.org.eclipse.jgit.treewalk.filter.TreeFilter);\n    org.eclipse.jgit.treewalk.TreeWalk.setRecursive(true);\n    java.util.Set<org.eclipse.jgit.lib.ObjectId> java.util.Set<org.eclipse.jgit.lib.ObjectId> = new java.util.HashSet<org.eclipse.jgit.lib.ObjectId>();\n    while (org.eclipse.jgit.treewalk.TreeWalk.next()) {\n        org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.treewalk.TreeWalk.getObjectId(0);\n        switch ((org.eclipse.jgit.treewalk.TreeWalk.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.int)) {\n            case org.eclipse.jgit.lib.FileMode.int :\n            case org.eclipse.jgit.lib.FileMode.int :\n                continue;\n            case org.eclipse.jgit.lib.FileMode.int :\n            case org.eclipse.jgit.lib.FileMode.int :\n            case org.eclipse.jgit.lib.FileMode.int :\n                java.util.Set<org.eclipse.jgit.lib.ObjectId>.add(org.eclipse.jgit.lib.ObjectId);\n                continue;\n            default :\n                throw new java.io.IOException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String.format(\"%o\", java.lang.Integer.valueOf(org.eclipse.jgit.treewalk.TreeWalk.getRawMode(0))), (org.eclipse.jgit.lib.ObjectId == null ? \"null\" : org.eclipse.jgit.lib.ObjectId.name()), org.eclipse.jgit.treewalk.TreeWalk.getPathString(), org.eclipse.jgit.internal.storage.file.FileRepository.getIndexFile()));\n        }\n    }\n    return java.util.Set<org.eclipse.jgit.lib.ObjectId>;\n} finally {\n    if (org.eclipse.jgit.revwalk.RevWalk != null)\n        org.eclipse.jgit.revwalk.RevWalk.dispose();\n    \n    org.eclipse.jgit.treewalk.TreeWalk.release();\n}"},"status":-2},{"failures":[103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"95964903-4c5a-11e5-a075-db698a05038a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.RefWriter:159","type":"CtInvocationImpl","sourcecode":"java.io.StringWriter.write(org.eclipse.jgit.internal.storage.file.RefDirectory.java.lang.String)"},"status":-1},{"failures":[],"tindex":"95964904-4c5a-11e5-a075-df151598ff89","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revplot.PlotWalk:133","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.revplot.PlotCommit<?> != null)\n    org.eclipse.jgit.revplot.PlotCommit<?>.org.eclipse.jgit.lib.Ref[] = org.eclipse.jgit.revplot.PlotWalk.getRefs(org.eclipse.jgit.revplot.PlotCommit<?>);\n"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":13,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
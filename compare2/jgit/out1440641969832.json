{"failureDictionary":{"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommitNormalTime":9,"org.eclipse.jgit.patch.PatchCcErrorTest.testError_CcTruncatedOld":25,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitInvalidCommitter":13,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails":43,"org.eclipse.jgit.revwalk.ObjectWalkTest.testEmptyTreeCorruption":57,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommitBlankAuthor":10,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testDirectoryFileConflicts_16":5,"org.eclipse.jgit.patch.PatchCcTest.testParse_CcNewFile":24,"org.eclipse.jgit.patch.PatchTest.testParse_ConfigCaseInsensitive":30,"org.eclipse.jgit.patch.GetTextTest.testGetText_BothISO88591":26,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommit2Parent":8,"org.eclipse.jgit.patch.EditListTest.testTypes":31,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidTag":7,"org.eclipse.jgit.api.ApplyCommandTest.testModifyNL1":44,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1Sub":47,"org.eclipse.jgit.lib.IndexDiffTest.testUnchangedSimple":56,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommit128Parent":15,"org.eclipse.jgit.patch.PatchTest.testParse_GitBinaryLiteral":29,"org.eclipse.jgit.patch.GetTextTest.testGetText_Convert":27,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails":40,"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindNextOffset":61,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext3":19,"org.eclipse.jgit.lib.BranchTrackingStatusTest.shouldWorkInNormalCase":3,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext5":20,"org.eclipse.jgit.patch.PatchTest.testParse_NoBinary":28,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedNew":33,"org.eclipse.jgit.lib.BranchTrackingStatusTest.shouldWorkWithoutMergeBase":4,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess":42,"org.eclipse.jgit.api.ApplyCommandTest.testAddA1":45,"org.eclipse.jgit.patch.PatchErrorTest.testError_TruncatedOld":34,"org.eclipse.jgit.api.ApplyCommandTest.testAddA2":46,"org.eclipse.jgit.patch.PatchErrorTest.testError_BodyTooLong":36,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommit1Parent":6,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails":39,"org.eclipse.jgit.lib.BranchConfigTest.getTrackingBranchShouldReturnMergeBranchForLocalBranch":0,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext100":16,"org.eclipse.jgit.patch.PatchErrorTest.testError_DisconnectedHunk":32,"org.eclipse.jgit.lib.ObjectCheckerTest.testValidCommitNoParent":14,"org.eclipse.jgit.api.ApplyCommandTest.testModifyX":50,"org.eclipse.jgit.dircache.DirCacheCGitCompatabilityTest.testReadIndex_DirCacheTree":37,"org.eclipse.jgit.api.ApplyCommandTest.testFailureF2":48,"org.eclipse.jgit.lib.BranchConfigTest.getTrackingBranchShouldHandleNormalCaseForRemoteTrackingBranch":2,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoCommitter2":12,"org.eclipse.jgit.lib.ObjectCheckerTest.testInvalidCommitNoCommitter1":11,"org.eclipse.jgit.api.ApplyCommandTest.testModifyE":49,"org.eclipse.jgit.treewalk.TreeWalkBasicDiffTest.testMissingSubtree_DetectFileAdded_FileModified":54,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext0":17,"org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef":59,"org.eclipse.jgit.lib.BranchConfigTest.getTrackingBranchShouldReturnNullWithoutMergeBranchForLocalBranch":1,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext1":18,"org.eclipse.jgit.lib.T0002_TreeTest.test007_manyFileLookup":52,"org.eclipse.jgit.lib.IndexDiffTest.testUnchangedComplex":55,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testContext10":21,"org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test012_SubtreeExternalSorting":58,"org.eclipse.jgit.api.ApplyCommandTest.testDeleteD":51,"org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails":41,"org.eclipse.jgit.internal.storage.file.PackFileTest.testWhole_LargeObject":62,"org.eclipse.jgit.patch.PatchErrorTest.testError_GarbageBetweenFiles":35,"org.eclipse.jgit.internal.storage.file.PackReverseIndexTest.testFindObject":60,"org.eclipse.jgit.diff.DiffFormatterReflowTest.testEmpty1":22,"org.eclipse.jgit.patch.PatchCcTest.testParse_OneFileCc":23,"org.eclipse.jgit.dircache.DirCacheCGitCompatabilityTest.testReadWriteV3":38,"org.eclipse.jgit.lib.T0002_TreeTest.test008_SubtreeInternalSorting":53},"transformations":[{"failures":[0,1,2,3,4],"tindex":"0c1d4992-4c62-11e5-8ae9-2b2f1f6432d8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.lib.BranchConfig:177","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.lib.BranchConfig.getRemote()"},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.BranchConfig:88","type":"CtLocalVariableImpl","sourcecode":"java.lang.String java.lang.String = org.eclipse.jgit.lib.BranchConfig.getMerge()"},"status":-1},{"failures":[],"tindex":"0c1e33f3-4c62-11e5-8ae9-c310db27794d","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.PackWriter:1755","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.SubmoduleUpdateCommand:176","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.RevWalk.parseCommit(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId())"},"status":-2},{"failures":[5],"tindex":"0c1e33f4-4c62-11e5-8ae9-bbf8e9ed48cc","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CheckoutCommand:257","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheCheckout.setFailOnConflict(true)"},"variableMap":{"dco":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheCheckout:664","type":"CtIfImpl","sourcecode":"if (!org.eclipse.jgit.dircache.DirCacheCheckout.(isModifiedSubtree_IndexWorkingtree(java.lang.String)))\n    org.eclipse.jgit.dircache.DirCacheCheckout.update(java.lang.String, org.eclipse.jgit.lib.ObjectId, org.eclipse.jgit.lib.FileMode);\nelse\n    org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String, org.eclipse.jgit.dircache.DirCacheEntry, org.eclipse.jgit.treewalk.CanonicalTreeParser, org.eclipse.jgit.treewalk.CanonicalTreeParser);\n"},"status":-1},{"failures":[],"tindex":"0c1e33f5-4c62-11e5-8ae9-0b5debfa205b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.BitmapIndexImpl:103","type":"CtIfImpl","sourcecode":"if (int >= 0)\n    int += int;\n"},"variableMap":{"position":"length","indexObjectCount":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.GC:330","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.beginTask(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.lang.String[].int)"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"tindex":"0c1e5b06-4c62-11e5-8ae9-df9570e18de5","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:234","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.MutableInteger != null)\n    org.eclipse.jgit.util.MutableInteger.int = int;\n"},"status":-1},{"failures":[],"tindex":"0c1e5b07-4c62-11e5-8ae9-fd8b3d95cbe1","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsRepository:116","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.internal.storage.dfs.DfsRepository.getObjectDatabase().clearCache()"},"variableMap":{"this":"repository"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.IndexDiff:517","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) {\n    org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode = org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode;\n    org.eclipse.jgit.submodule.SubmoduleWalk org.eclipse.jgit.submodule.SubmoduleWalk = org.eclipse.jgit.submodule.SubmoduleWalk.forIndex(org.eclipse.jgit.lib.Repository);\n    while (org.eclipse.jgit.submodule.SubmoduleWalk.next()) {\n        try {\n            if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode == null)\n                org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode = org.eclipse.jgit.submodule.SubmoduleWalk.getModulesIgnore();\n            \n            if (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.equals(org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode))\n                continue;\n            \n        } catch (org.eclipse.jgit.errors.ConfigInvalidException e) {\n            java.io.IOException java.io.IOException = new java.io.IOException((\"Found invalid ignore param for submodule \" + (org.eclipse.jgit.submodule.SubmoduleWalk.getPath())));\n            java.io.IOException.initCause(org.eclipse.jgit.errors.ConfigInvalidException);\n            throw java.io.IOException;\n        }\n        org.eclipse.jgit.lib.Repository org.eclipse.jgit.lib.Repository = org.eclipse.jgit.submodule.SubmoduleWalk.getRepository();\n        if (org.eclipse.jgit.lib.Repository != null) {\n            try {\n                org.eclipse.jgit.lib.ObjectId org.eclipse.jgit.lib.ObjectId = org.eclipse.jgit.lib.Repository.resolve(\"HEAD\");\n                if ((org.eclipse.jgit.lib.ObjectId != null) && (!(org.eclipse.jgit.lib.ObjectId.equals(org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId()))))\n                    java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n                else if ((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) != (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) {\n                    org.eclipse.jgit.lib.IndexDiff org.eclipse.jgit.lib.IndexDiff = java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.get(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n                    if (org.eclipse.jgit.lib.IndexDiff == null) {\n                        org.eclipse.jgit.lib.IndexDiff = new org.eclipse.jgit.lib.IndexDiff(org.eclipse.jgit.lib.Repository , org.eclipse.jgit.submodule.SubmoduleWalk.getObjectId() , org.eclipse.jgit.lib.IndexDiff.WorkingTreeIteratorFactory.getWorkingTreeIterator(org.eclipse.jgit.lib.Repository));\n                        java.util.Map<java.lang.String, org.eclipse.jgit.lib.IndexDiff>.put(org.eclipse.jgit.submodule.SubmoduleWalk.getPath(), org.eclipse.jgit.lib.IndexDiff);\n                    } \n                    if (org.eclipse.jgit.lib.IndexDiff.diff()) {\n                        if ((((((((org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode) == (org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode.org.eclipse.jgit.submodule.SubmoduleWalk.IgnoreSubmoduleMode)) && (org.eclipse.jgit.lib.IndexDiff.getAdded().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getChanged().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getConflicting().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getMissing().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getModified().isEmpty())) && (org.eclipse.jgit.lib.IndexDiff.getRemoved().isEmpty())) {\n                            continue;\n                        } \n                        java.util.Set<java.lang.String>.add(org.eclipse.jgit.submodule.SubmoduleWalk.getPath());\n                    } \n                } \n            } finally {\n                org.eclipse.jgit.lib.Repository.close();\n            }\n        } \n    }\n} "},"status":-2},{"failures":[],"tindex":"0c1e5b08-4c62-11e5-8ae9-3bec66bbc1c8","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.util.io.SafeBufferedOutputStream:83","type":"CtInvocationImpl","sourcecode":"java.io.BufferedOutputStream.flush()"},"variableMap":{"this":"w"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.AnyObjectId:350","type":"CtInvocationImpl","sourcecode":"java.io.OutputStream.write((int >>> 24))"},"status":0},{"failures":[],"tindex":"0c1e8219-4c62-11e5-8ae9-75149c0096c3","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.PackFile:663","type":"CtInvocationImpl","sourcecode":"java.lang.System.gc()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.storage.pack.PackConfig:705","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.storage.pack.PackConfig.setCompressionLevel(org.eclipse.jgit.lib.Config.getInt(\"pack\", \"compression\", org.eclipse.jgit.lib.Config.getInt(\"core\", \"compression\", org.eclipse.jgit.storage.pack.PackConfig.getCompressionLevel())))"},"status":0},{"failures":[],"tindex":"0c1e821a-4c62-11e5-8ae9-618f680d67b8","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.RevCommit:167","type":"CtLocalVariableImpl","sourcecode":"int int = 46"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.blame.BlameGenerator:580","type":"CtLocalVariableImpl","sourcecode":"int int = org.eclipse.jgit.blame.Candidate.getTime()"},"status":-2},{"failures":[],"tindex":"0c1e821b-4c62-11e5-8ae9-a58d26af0e2b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.file.RefDirectory:1007","type":"CtForImpl","sourcecode":"for (int int = java.lang.String.indexOf('/') ; int >= 0 ; int = java.lang.String.indexOf('/', (int + 1)))\n    int++;"},"variableMap":{"name":"subsection","count":"input"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Config:1056","type":"CtIfImpl","sourcecode":"if (((org.eclipse.jgit.lib.ConfigLine.java.lang.String) == null) && (java.lang.Character.isWhitespace(char))) {\n    if ((org.eclipse.jgit.lib.ConfigLine.java.lang.String) == null)\n        org.eclipse.jgit.lib.ConfigLine.java.lang.String = \"\";\n    \n    org.eclipse.jgit.lib.ConfigLine.java.lang.String += char;\n} else if ('[' == char) {\n    org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.Config.org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config.StringReader);\n    int = org.eclipse.jgit.lib.Config.StringReader.read();\n    if ('\\\"' == int) {\n        org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.Config.org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config.StringReader, true, '\\\"');\n        int = org.eclipse.jgit.lib.Config.StringReader.read();\n    } \n    if (']' != int)\n        throw new org.eclipse.jgit.errors.ConfigInvalidException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n    \n    org.eclipse.jgit.lib.ConfigLine.java.lang.String = \"\";\n} else if (org.eclipse.jgit.lib.ConfigLine != null) {\n    org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.ConfigLine.java.lang.String;\n    org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.ConfigLine.java.lang.String;\n    org.eclipse.jgit.lib.Config.StringReader.reset();\n    org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.Config.org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config.StringReader);\n    if (org.eclipse.jgit.lib.ConfigLine.java.lang.String.endsWith(\"\\n\")) {\n        org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.ConfigLine.java.lang.String.substring(0, ((org.eclipse.jgit.lib.ConfigLine.java.lang.String.length()) - 1));\n        org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.Config.java.lang.String;\n    } else\n        org.eclipse.jgit.lib.ConfigLine.java.lang.String = org.eclipse.jgit.lib.Config.org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config.StringReader, false, -1);\n    \n} else\n    throw new org.eclipse.jgit.errors.ConfigInvalidException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"status":-2},{"failures":[52,53,54,55,56,57,58],"tindex":"0c1e821c-4c62-11e5-8ae9-79e9ff39f969","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.RawParseUtils:1049","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int += 48;\n"},"variableMap":{"ptr":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Tree:376","type":"CtForImpl","sourcecode":"for (int int = int - 1 ; int >= 0 ; int--)\n    org.eclipse.jgit.lib.TreeEntry[][int] = org.eclipse.jgit.lib.TreeEntry[][int];"},"status":-1},{"failures":[],"tindex":"0c1ea92d-4c62-11e5-8ae9-494b9b2d1586","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsBlockCache:241","type":"CtReturnImpl","sourcecode":"return (long * 100) / long"},"variableMap":{"hits":"common","total":"common"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.diff.SimilarityIndex:270","type":"CtReturnImpl","sourcecode":"return long"},"status":-2},{"failures":[59,60,61,62],"tindex":"0c1ea92e-4c62-11e5-8ae9-9b65b850b1ef","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.PackReverseIndex:140","type":"CtIfImpl","sourcecode":"if (long > (long[][int[][(int - 1)]]))\n    break;\n"},"status":-2},{"failures":[],"tindex":"0c1ea92f-4c62-11e5-8ae9-115e53f930aa","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector:188","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.lib.ProgressMonitor == null)\n    org.eclipse.jgit.lib.ProgressMonitor = org.eclipse.jgit.lib.NullProgressMonitor.org.eclipse.jgit.lib.NullProgressMonitor;\n"},"variableMap":{"org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE":"monitor","pm":"monitor"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.PullCommand:268","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ProgressMonitor.update(1)"},"status":0}],"header":{"groupId":"org.eclipse.jgit","transformationCount":14,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
{"failureDictionary":{"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOurs":13,"org.eclipse.jgit.api.MergeCommandTest.testMergeNonVersionedPaths":17,"org.eclipse.jgit.api.MergeCommandTest.testContentMerge":24,"org.eclipse.jgit.api.CommitOnlyTest.testOnlyOptionWithDirectory":32,"org.eclipse.jgit.api.MergeCommandTest.testMergeRemovingFoldersWithoutFastForward":18,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingNewTrees":6,"org.eclipse.jgit.api.ResetCommandTest.testPathsResetWithRef":27,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRun":38,"org.eclipse.jgit.api.ResetCommandTest.testPathsResetOnDirs":29,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMerge":23,"org.eclipse.jgit.api.MergeCommandTest.testSingleDeletion":20,"org.eclipse.jgit.merge.ResolveMergerTest.failingDeleteOfDirectoryWithUntrackedContent":9,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO":2,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutTheirs":14,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithPaths":36,"org.eclipse.jgit.api.ResetCommandTest.testPathsReset":28,"org.eclipse.jgit.api.BlameCommandTest.testRenameInSubDir":25,"org.eclipse.jgit.api.StashApplyCommandTest.stashChangeInANewSubdirectory":34,"org.eclipse.jgit.revplot.AbstractPlotRendererTest.testDrawTextAlignment":0,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOfConflictingFileShouldThrow":15,"org.eclipse.jgit.api.ResetCommandTest.testPathsResetWithUnmerged":30,"org.eclipse.jgit.api.CleanCommandTest.testClean":35,"org.eclipse.jgit.api.StashApplyCommandTest.workingDirectoryModifyInSubfolder":33,"org.eclipse.jgit.api.PushCommandTest.testPushAfterGC":48,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeNoCommit":19,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide2":4,"org.eclipse.jgit.api.RebaseCommandTest.testRebasePreservingMergesWithUnrelatedSide1":3,"org.eclipse.jgit.revwalk.RevWalkSortTest.testSort_TOPO_REVERSE":1,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirs":37,"org.eclipse.jgit.lib.DirCacheCheckoutTest.testResetHard":43,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedEmpytFolderIsNotAConflictWithFile":11,"org.eclipse.jgit.api.blame.BlameGeneratorTest.testRenamedBoundLineDelete":42,"org.eclipse.jgit.api.MergeCommandTest.testDeletionAndConflict":21,"org.eclipse.jgit.api.ResetCommandTest.testHardResetOnTag":31,"org.eclipse.jgit.api.PathCheckoutCommandTest.testCheckoutOursWhenNoBase":12,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeMergeableTreesWithoutIndex":7,"org.eclipse.jgit.api.PathCheckoutCommandTest.testUpdateWorkingDirectoryFromIndex2":16,"org.eclipse.jgit.merge.ResolveMergerTest.checkMergeConflictingTreesWithoutIndex":8,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRunAndNoIgnore":40,"org.eclipse.jgit.api.CleanCommandTest.testCleanWithDryRunAndNoIgnore":41,"org.eclipse.jgit.util.NBTest.testEncodeInt64":47,"org.eclipse.jgit.api.RebaseCommandTest.testStopOnConflictFileCreationAndDeletion":44,"org.eclipse.jgit.api.BlameCommandTest.testMoveToOtherDir":26,"org.eclipse.jgit.api.CleanCommandTest.testCleanDirsWithDryRun":39,"org.eclipse.jgit.api.MergeCommandTest.testSuccessfulContentMergeAndDirtyworkingTree":22,"org.eclipse.jgit.merge.ResolveMergerTest.checkUntrackedFolderIsNotAConflict":10,"org.eclipse.jgit.dircache.DirCacheCGitCompatabilityTest.testReadWriteV3":5,"org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps":45,"org.eclipse.jgit.internal.storage.file.GcBasicPackingTest.testPackAllObjectsInOnePack":46},"transformations":[{"failures":[0,1,2,3,4],"tindex":"4f469eaa-4c54-11e5-9939-8bcffde70cb0","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.revwalk.BlockRevQueue:103","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block.org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.Block"},"variableMap":{"next":"b","b":"b"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FIFORevQueue:92","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.revwalk.BlockRevQueue.Block = org.eclipse.jgit.revwalk.BlockRevQueue.BlockFreeList.newBlock()"},"status":-1},{"failures":[],"tindex":"4f46c5bb-4c54-11e5-9939-251bf4f299f6","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsPackFile:232","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.Repository.getGlobalListenerList().dispatch(new org.eclipse.jgit.internal.storage.dfs.BeforeDfsPackIndexLoadedEvent(this))"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.ObjectIdSubclassMap:170","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.lib.ObjectIdSubclassMap<V>.insert(Q)"},"status":-2},{"failures":[5],"tindex":"4f46c5bc-4c54-11e5-9939-6b4347ccfc3c","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.dircache.DirCacheTree:498","type":"CtInvocationImpl","sourcecode":"java.lang.System.arraycopy(org.eclipse.jgit.dircache.DirCacheTree[], int, org.eclipse.jgit.dircache.DirCacheTree[], (int + 1), ((int) - int))"},"variableMap":{"c":"children","childCnt":"i","stIdx":"i"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCacheTree:201","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheTree[][int].write(byte[], java.io.OutputStream)"},"status":-1},{"failures":[],"tindex":"4f46c5bd-4c54-11e5-9939-e325cf508823","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.SideBandInputStream:166","type":"CtIfImpl","sourcecode":"if ((int) == 0)\n    continue;\n"},"variableMap":{"available":"org.eclipse.jgit.util.FileUtils.IGNORE_ERRORS"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.FileUtils:154","type":"CtIfImpl","sourcecode":"if ((int & (org.eclipse.jgit.util.FileUtils.int)) != 0) {\n    if (java.io.File.isDirectory()) {\n        boolean = true;\n    } else {\n        if ((int & (org.eclipse.jgit.util.FileUtils.int)) == 0)\n            throw new java.io.IOException(java.text.MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().java.lang.String, java.io.File.getAbsolutePath()));\n        \n    }\n} else {\n    boolean = true;\n}"},"status":-2},{"failures":[],"tindex":"4f46c5be-4c54-11e5-9939-2d6074798591","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.DaemonClient:104","type":"CtIfImpl","sourcecode":"if (int >= 0) {\n    java.lang.String = java.lang.String.substring(0, int);\n} "},"variableMap":{"nul":"i","cmd":"item"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.lib.Repository:486","type":"CtForImpl","sourcecode":"for (int = int + 2 ; int < (char[].int) ; ++int) {\n    if ((char[][int]) == '}') {\n        java.lang.String = new java.lang.String(char[] , (int + 2) , ((int - int) - 2));\n        break;\n    } \n}"},"status":-2},{"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"tindex":"4f46c5bf-4c54-11e5-9939-e393e1120ac8","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.dircache.DirCache:980","type":"CtAssignmentImpl","sourcecode":"org.eclipse.jgit.dircache.DirCacheIterator = org.eclipse.jgit.treewalk.TreeWalk.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.org.eclipse.jgit.dircache.DirCacheIterator)"},"status":-1},{"failures":[],"tindex":"4f46ecd0-4c54-11e5-9939-5fd942f65361","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.internal.storage.pack.BinaryDelta:193","type":"CtIfImpl","sourcecode":"if (int == 0)\n    int = 65536;\n"},"variableMap":{"copySize":"p"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.internal.storage.file.UnpackedObject:178","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IO.skipFully(java.io.InputStream, int)"},"status":0},{"failures":[],"tindex":"4f46ecd1-4c54-11e5-9939-2f873254c405","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.diff.MyersDiff:548","type":"CtInvocationImpl","sourcecode":"java.lang.System.exit(1)"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.transport.PushProcess:164","type":"CtIfImpl","sourcecode":"if (!(java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>.isEmpty()))\n    org.eclipse.jgit.transport.PushConnection.push(org.eclipse.jgit.lib.ProgressMonitor, java.util.Map<java.lang.String, org.eclipse.jgit.transport.RemoteRefUpdate>, java.io.OutputStream);\n"},"status":-1},{"failures":[],"tindex":"4f46ecd2-4c54-11e5-9939-831d4731686b","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.patch.FileHeader:529","type":"CtIfImpl","sourcecode":"if (int == int)\n    int = int;\n"},"variableMap":{"tab":"eol","end":"length","ptr":"length"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.patch.FileHeader:410","type":"CtIfImpl","sourcecode":"if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseOldName(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewName(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.patch.FileHeader.parseFileMode((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.lib.FileMode = org.eclipse.jgit.lib.FileMode.org.eclipse.jgit.lib.FileMode;\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int, int);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    java.lang.String = org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String, (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n    org.eclipse.jgit.diff.DiffEntry.ChangeType = org.eclipse.jgit.diff.DiffEntry.ChangeType.org.eclipse.jgit.diff.DiffEntry.ChangeType;\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    int = org.eclipse.jgit.util.RawParseUtils.org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[], (int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), null);\n} else if (org.eclipse.jgit.util.RawParseUtils.(org.eclipse.jgit.util.RawParseUtils.match(byte[], int, org.eclipse.jgit.patch.FileHeader.byte[])) >= 0) {\n    org.eclipse.jgit.patch.FileHeader.parseIndexLine((int + (org.eclipse.jgit.patch.FileHeader.byte[].int)), int);\n} else {\n    break;\n}"},"status":-2},{"failures":[],"tindex":"4f4713e3-4c54-11e5-9939-3ddc1cd06dd9","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.CherryPickCommand:205","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.FixUninterestingGenerator:77","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.revwalk.RevCommit org.eclipse.jgit.revwalk.RevCommit = org.eclipse.jgit.revwalk.Generator.next()"},"status":-2},{"failures":[],"tindex":"4f4713e4-4c54-11e5-9939-5d80c19d88d5","series":0,"name":"add","transplant":{"position":"org.eclipse.jgit.lib.ObjectChecker:376","type":"CtIfImpl","sourcecode":"if ((org.eclipse.jgit.lib.FileMode.fromBits(int).getObjectType()) == (org.eclipse.jgit.lib.Constants.int))\n    throw new org.eclipse.jgit.errors.CorruptObjectException((\"invalid mode \" + int));\n"},"variableMap":{"org.eclipse.jgit.lib.Constants.OBJ_BAD":"hash","thisMode":"hash"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.treewalk.filter.ByteArraySet:157","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[], int)"},"status":-2},{"failures":[],"tindex":"4f4713e5-4c54-11e5-9939-2103537ba402","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.transport.Transport:623","type":"CtLocalVariableImpl","sourcecode":"final org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(java.lang.String)"},"variableMap":{"srcSpec":"org.eclipse.jgit.lib.Constants.HEAD","db":"repo"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.api.StashCreateCommand:223","type":"CtLocalVariableImpl","sourcecode":"org.eclipse.jgit.lib.Ref org.eclipse.jgit.lib.Ref = org.eclipse.jgit.lib.Repository.getRef(org.eclipse.jgit.lib.Constants.java.lang.String)"},"status":-2},{"failures":[],"tindex":"4f4713e6-4c54-11e5-9939-3f40a27621a2","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.api.PullCommand:190","type":"CtIfImpl","sourcecode":"if (java.lang.String == null)\n    throw new org.eclipse.jgit.api.errors.NoHeadException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"variableMap":{"pullOnRepoWithoutHEADCurrentlyNotSupported":"skipMustBeNonNegative","fullBranch":"skipMustBeNonNegative"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.revwalk.filter.SkipRevFilter:71","type":"CtIfImpl","sourcecode":"if (int < 0)\n    throw new java.lang.IllegalArgumentException(org.eclipse.jgit.internal.JGitText.get().java.lang.String);\n"},"status":-2},{"failures":[45,46,47,48],"tindex":"4f4713e7-4c54-11e5-9939-4d704c8af6cb","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.util.io.UnionInputStream:186","type":"CtOperatorAssignmentImpl","sourcecode":"long -= 1"},"variableMap":{"cnt":"v"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.NB:239","type":"CtOperatorAssignmentImpl","sourcecode":"long >>>= 8"},"status":-1},{"failures":[],"tindex":"4f4713e8-4c54-11e5-9939-9fad8eb02d6f","series":0,"name":"replace","transplant":{"position":"org.eclipse.jgit.internal.storage.dfs.DfsReader:284","type":"CtIfImpl","sourcecode":"if (int == int)\n    continue;\n"},"variableMap":{"lastIdx":"java.lang.Integer.MIN_VALUE","i":"java.lang.Integer.MIN_VALUE"},"type":"adrStmt","transplantationPoint":{"position":"org.eclipse.jgit.util.RawParseUtils:546","type":"CtInvocationImpl","sourcecode":"org.eclipse.jgit.util.IntList.fillTo(1, java.lang.Integer.int)"},"status":-2}],"header":{"groupId":"org.eclipse.jgit","transformationCount":15,"projectType":"maven","artifactId":"org.eclipse.jgit-parent","generatorVersion":"1.0","version":"3.7.0-SNAPSHOT"}}
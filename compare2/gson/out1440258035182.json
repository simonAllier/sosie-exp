{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"2497c61a-42ad-11e5-ba1a-7d6c6829a1f2","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtIfImpl","sourcecode":"if (java.lang.reflect.Type == (java.util.Properties.java.util.Properties)) {\n    return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String , java.lang.String.java.lang.String };\n} "},"status":0},{"failures":[],"tindex":"7f54bb5c-42d3-11e5-bdeb-a5026c011f19","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtIfImpl","sourcecode":"if (!(boolean)) {\n    throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n} "},"variableMap":{"lenient":"insert"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtIfImpl","sourcecode":"if (boolean) {\n    break;\n} "},"status":0},{"failures":[],"tindex":"f1b0c84b-42d5-11e5-91f1-691261086ebd","series":0,"name":"replace","transplant":{"position":"com.google.gson.reflect.TypeToken:168","type":"CtWhileImpl","sourcecode":"while (java.lang.Class<?>.isArray()) {\n    java.lang.Class<?> = java.lang.Class<?>.getComponentType();\n}"},"variableMap":{"classType":"supertype"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.$Gson$Types:268","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.$Gson$Preconditions.com.google.gson.internal.$Gson$Preconditions.checkArgument(java.lang.Class<?>.isAssignableFrom(java.lang.Class<?>))"},"status":0},{"failures":[],"tindex":"2c24c9ca-4349-11e5-b793-fb88663d6106","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1382","type":"CtAssignmentImpl","sourcecode":"int = (int) + 2"},"variableMap":{"p":"l","pos":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1117","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"eb918f70-4339-11e5-a011-139790fe029d","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonWriter:556","type":"CtAssignmentImpl","sourcecode":"int = int + 1"},"variableMap":{"last":"lineStart","i":"lineStart"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1557","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"06a9fd9a-447e-11e5-a5aa-eb4da0809f61","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:554","type":"CtSwitchImpl","sourcecode":"switch (int) {\n    case ']' :\n        if (int == (com.google.gson.stream.JsonScope.int)) {\n            return int = com.google.gson.stream.JsonReader.int;\n        } \n    case ';' :\n    case ',' :\n        if ((int == (com.google.gson.stream.JsonScope.int)) || (int == (com.google.gson.stream.JsonScope.int))) {\n            com.google.gson.stream.JsonReader.checkLenient();\n            (int)--;\n            return int = com.google.gson.stream.JsonReader.int;\n        } else {\n            throw com.google.gson.stream.JsonReader.syntaxError(\"Unexpected value\");\n        }\n    case '\\'' :\n        com.google.gson.stream.JsonReader.checkLenient();\n        return int = com.google.gson.stream.JsonReader.int;\n    case '\\\"' :\n        if ((int) == 1) {\n            com.google.gson.stream.JsonReader.checkLenient();\n        } \n        return int = com.google.gson.stream.JsonReader.int;\n    case '[' :\n        return int = com.google.gson.stream.JsonReader.int;\n    case '{' :\n        return int = com.google.gson.stream.JsonReader.int;\n    default :\n        (int)--;\n}"},"variableMap":{"com.google.gson.stream.JsonReader.PEEKED_NULL":"pos","c":"l","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"l","peeked":"limit","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"c","this":"this","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"pos","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"pos","stackSize":"c","pos":"c","peekStack":"p","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"pos","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"pos","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtIfImpl","sourcecode":"if (int == '#') {\n    int = int;\n    com.google.gson.stream.JsonReader.checkLenient();\n    com.google.gson.stream.JsonReader.skipToEndOfLine();\n    int = int;\n    int = int;\n} else {\n    int = int;\n    return int;\n}"},"status":0},{"failures":[],"tindex":"7c6eccd1-43d1-11e5-b036-13e13ed3a76f","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:235","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= (int >>> 20) ^ (int >>> 12)"},"variableMap":{"h":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1407","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"b2b1afa8-42ae-11e5-9ee3-474e4962a115","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1001","type":"CtLocalVariableImpl","sourcecode":"char[] char[] = this.char[]"},"status":0},{"failures":[],"tindex":"c5511236-42d5-11e5-988c-0999c779f566","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedTreeMap:506","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"variableMap":{"node":"parent","child":"parent"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:293","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>"},"status":1},{"failures":[],"tindex":"288ea269-42b8-11e5-8663-eba7aff32525","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:117","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"variableMap":{"next":"child","prev":"child","header":"child"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:162","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"status":0},{"failures":[],"tindex":"643bccf6-42c1-11e5-a2de-e5dc5edbe317","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:326","type":"CtAssignmentImpl","sourcecode":"this.boolean = boolean"},"variableMap":{"lenient":"serializeInnerClasses"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.Excluder:86","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.Excluder.boolean = false"},"status":1},{"failures":[],"tindex":"fd3bb668-42de-11e5-ae43-ed81d3dda4c6","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:680","type":"CtAssignmentImpl","sourcecode":"int = int - int"},"variableMap":{"targetSize":"size","treeCapacity":"size","leavesToSkip":"size"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:106","type":"CtAssignmentImpl","sourcecode":"int = 0"},"status":0},{"failures":[],"tindex":"4312c885-4305-11e5-bba9-ed43931323f1","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:735","type":"CtIfImpl","sourcecode":"if ((int == (com.google.gson.stream.JsonReader.int)) || (int == (com.google.gson.stream.JsonReader.int))) {\n    int = com.google.gson.stream.JsonReader.int;\n} "},"variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN":"leftDelta","last":"leftDelta","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"leftDelta","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"leftDelta"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedTreeMap:343","type":"CtIfImpl","sourcecode":"if ((int == 1) || ((int == 0) && (!boolean))) {\n    com.google.gson.internal.LinkedTreeMap<K, V>.rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n} else {\n    assert int == (-1);\n    com.google.gson.internal.LinkedTreeMap<K, V>.rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n    com.google.gson.internal.LinkedTreeMap<K, V>.rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n}"},"status":1},{"failures":[],"tindex":"a8914e5a-42ca-11e5-81a4-adc9a38a7de9","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtIfImpl","sourcecode":"if ((java.lang.String) == null) {\n    return ;\n} "},"variableMap":{"indent":"datePattern"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.GsonBuilder:554","type":"CtIfImpl","sourcecode":"if ((java.lang.String != null) && (!(\"\".equals(java.lang.String.trim())))) {\n    com.google.gson.DefaultDateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(java.lang.String);\n} else if ((int != (java.text.DateFormat.int)) && (int != (java.text.DateFormat.int))) {\n    com.google.gson.DefaultDateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(int , int);\n} else {\n    return ;\n}"},"status":0},{"failures":[],"tindex":"79f542a1-42f7-11e5-ad04-b1ded43b55d1","series":0,"name":"add","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtIfImpl","sourcecode":"if (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> != null) {\n    com.google.gson.internal.LinkedHashTreeMap<K, V>.replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>, com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n} else if (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> != null) {\n    com.google.gson.internal.LinkedHashTreeMap<K, V>.replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>, com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n} else {\n    com.google.gson.internal.LinkedHashTreeMap<K, V>.replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>, null);\n}"},"variableMap":{"node":"left","left":"left","this":"this","right":"left"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:375","type":"CtInvocationImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap<K, V>.rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V>)"},"status":0},{"failures":[],"tindex":"61933871-42da-11e5-a8cc-affe48dfe1df","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtIfImpl","sourcecode":"if ((int != int) && (int != int)) {\n    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n} "},"variableMap":{"context":"com.google.gson.stream.JsonReader.PEEKED_NONE","nonempty":"p","empty":"com.google.gson.stream.JsonReader.PEEKED_NONE"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:789","type":"CtIfImpl","sourcecode":"if (int == (com.google.gson.stream.JsonReader.int)) {\n    int = com.google.gson.stream.JsonReader.doPeek();\n} "},"status":0},{"failures":[],"tindex":"f153f900-4476-11e5-8ac2-75d7229b47aa","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:235","type":"CtOperatorAssignmentImpl","sourcecode":"int ^= (int >>> 20) ^ (int >>> 12)"},"variableMap":{"h":"limit"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:1020","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"4623e98a-42e9-11e5-af99-3da99ed53d80","series":0,"name":"replace","transplant":{"position":"com.google.gson.internal.LinkedHashTreeMap:641","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"variableMap":{"result":"root","parent":"pivotLeft","stackTop":"pivotLeft"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.internal.LinkedHashTreeMap:410","type":"CtAssignmentImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>"},"status":1},{"failures":[],"tindex":"c8c958b5-4363-11e5-8b48-cb2d1c64a572","series":0,"name":"replace","transplant":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtIfImpl","sourcecode":"if (!com.google.gson.stream.JsonReader.(fillBuffer(1))) {\n    break;\n} "},"variableMap":{"this":"this"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonReader:476","type":"CtInvocationImpl","sourcecode":"com.google.gson.stream.JsonReader.checkLenient()"},"status":0},{"failures":[],"tindex":"50da345c-4320-11e5-afde-bf8fced77aa9","series":0,"name":"add","transplant":{"position":"com.google.gson.stream.JsonReader:1453","type":"CtAssignmentImpl","sourcecode":"int = (int) + 1"},"variableMap":{"pos":"stackSize","lineStart":"stackSize"},"type":"adrStmt","transplantationPoint":{"position":"com.google.gson.stream.JsonWriter:359","type":"CtUnaryOperatorImpl","sourcecode":"(int)++"},"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"},"diffs":[{"transformation":"79f542a1-42f7-11e5-ad04-b1ded43b55d1","diffs":[{"nodes":{},"edges":{"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":["com.google.gson.internal.LinkedHashTreeMap.void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean) -> com.google.gson.internal.LinkedHashTreeMap.void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)"]},"type":"graph"}]},{"transformation":"2497c61a-42ad-11e5-ba1a-7d6c6829a1f2","diffs":[{"branches":{"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":["com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl_com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).t3","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).t2","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).t7","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).t6","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).t5","com.google.gson.internal.bind.TypeAdapters$1_java.lang.String_read(com.google.gson.stream.JsonReader).e2","com.google.gson.internal.$Gson$Preconditions_void_checkArgument(boolean).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable).e1","com.google.gson.internal.bind.TypeAdapters$1_java.lang.String_read(com.google.gson.stream.JsonReader).e1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).l13","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e7","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).l14","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e8","com.google.gson.internal.bind.ObjectTypeAdapter_java.lang.Object_read(com.google.gson.stream.JsonReader).b","com.google.gson.internal.$Gson$Types_java.lang.Class_declaringClassOf(java.lang.reflect.TypeVariable).b","com.google.gson.internal.bind.ObjectTypeAdapter_java.lang.Object_read(com.google.gson.stream.JsonReader).s3","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).l8","com.google.gson.internal.bind.ObjectTypeAdapter$1_<T>_com.google.gson.TypeAdapter_create(com.google.gson.Gson,com.google.gson.reflect.TypeToken).t1","com.google.gson.internal.$Gson$Types_java.lang.reflect.ParameterizedType_newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).l9","com.google.gson.internal.$Gson$Types_void_checkNotPrimitive(java.lang.reflect.Type).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).b","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl_com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]).l2","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable).t2","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl_java.lang.reflect.Type[]_getActualTypeArguments().b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).b","com.google.gson.internal.$Gson$Types_int_indexOf(java.lang.Object[],java.lang.Object).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable).b","com.google.gson.internal.$Gson$Preconditions_void_checkArgument(boolean).e1","com.google.gson.internal.$Gson$Types_int_indexOf(java.lang.Object[],java.lang.Object).e1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).e1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).b","com.google.gson.internal.bind.ObjectTypeAdapter_com.google.gson.internal.bind.ObjectTypeAdapter(com.google.gson.Gson).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).e2","com.google.gson.internal.bind.TypeAdapters$1_java.lang.String_read(com.google.gson.stream.JsonReader).b","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e1","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl_com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]).t1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class).e6","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e2","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e3","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e4","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).e5","com.google.gson.internal.$Gson$Types_int_indexOf(java.lang.Object[],java.lang.Object).t1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).t1","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).t5","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).t6","com.google.gson.internal.$Gson$Types_java.lang.reflect.Type_resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type).t7","com.google.gson.internal.$Gson$Types_int_indexOf(java.lang.Object[],java.lang.Object).l2"]},"type":"branch"},{"variables":{"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":["com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":["com.google.gson.reflect.TypeToken.boolean equals(java.lang.Object)_type","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.T read(com.google.gson.stream.JsonReader)_delegate","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_typeTokenCache","com.google.gson.Gson$FutureTypeAdapter.void setDelegate(com.google.gson.TypeAdapter)_delegate"],"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":["com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":["com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T)_gson","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"]},"type":"variable"},{"nodes":{"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":["com.google.gson.internal.$Gson$Types.int indexOf(java.lang.Object[],java.lang.Object)","com.google.gson.internal.$Gson$Types.java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)","com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)","com.google.gson.internal.bind.TypeAdapters$1.java.lang.String read(com.google.gson.stream.JsonReader)","com.google.gson.internal.bind.ObjectTypeAdapter.com.google.gson.internal.bind.ObjectTypeAdapter(com.google.gson.Gson)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.java.lang.reflect.Type[] getActualTypeArguments()","com.google.gson.internal.$Gson$Types.void checkNotPrimitive(java.lang.reflect.Type)","com.google.gson.internal.bind.ObjectTypeAdapter.java.lang.Object read(com.google.gson.stream.JsonReader)","com.google.gson.internal.$Gson$Types.java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)"]},"edges":{"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> com.google.gson.internal.$Gson$Types.int indexOf(java.lang.Object[],java.lang.Object)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)","com.google.gson.internal.$Gson$Types.void checkNotPrimitive(java.lang.reflect.Type) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> com.google.gson.internal.$Gson$Preconditions.<T> T checkNotNull(T)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.T read(com.google.gson.stream.JsonReader) -> com.google.gson.internal.bind.ObjectTypeAdapter.java.lang.Object read(com.google.gson.stream.JsonReader)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])","com.google.gson.internal.bind.TypeAdapters$1.java.lang.String read(com.google.gson.stream.JsonReader) -> com.google.gson.stream.JsonReader.java.lang.String nextString()","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)","com.google.gson.internal.$Gson$Types.java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])","com.google.gson.internal.bind.ObjectTypeAdapter.java.lang.Object read(com.google.gson.stream.JsonReader) -> com.google.gson.stream.JsonReader.java.lang.String nextString()","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.java.lang.reflect.Type[] getActualTypeArguments()","com.google.gson.internal.bind.ObjectTypeAdapter$1.<T> com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> com.google.gson.internal.bind.ObjectTypeAdapter.com.google.gson.internal.bind.ObjectTypeAdapter(com.google.gson.Gson)","com.google.gson.internal.bind.TypeAdapters$1.java.lang.String read(com.google.gson.stream.JsonReader) -> com.google.gson.stream.JsonReader.com.google.gson.stream.JsonToken peek()","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.T read(com.google.gson.stream.JsonReader) -> com.google.gson.internal.bind.TypeAdapters$1.java.lang.String read(com.google.gson.stream.JsonReader)","com.google.gson.internal.bind.ObjectTypeAdapter.java.lang.Object read(com.google.gson.stream.JsonReader) -> com.google.gson.stream.JsonReader.com.google.gson.stream.JsonToken peek()","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> com.google.gson.internal.$Gson$Types.void checkNotPrimitive(java.lang.reflect.Type)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)","com.google.gson.internal.$Gson$Types.java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> com.google.gson.internal.$Gson$Types.java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)","com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> com.google.gson.internal.$Gson$Types.java.lang.reflect.Type canonicalize(java.lang.reflect.Type)"]},"type":"graph"}]},{"transformation":"50da345c-4320-11e5-afde-bf8fced77aa9","diffs":[{"branches":{"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":["com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1_void_write(com.google.gson.stream.JsonWriter,java.lang.Object).t2","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1_void_write(com.google.gson.stream.JsonWriter,java.lang.Object).l3","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable).l2","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable).e1","com.google.gson.stream.JsonWriter_com.google.gson.stream.JsonWriter_open(int,java.lang.String).e1"]},"type":"branch"},{"variables":{"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":["com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.void write(com.google.gson.stream.JsonWriter,T)_boundFields"]},"type":"variable"}]},{"transformation":"4312c885-4305-11e5-bba9-ed43931323f1","diffs":[{"variables":{"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken)_factories","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":["com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":["com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T)_gson","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.TreeTypeAdapter.T read(com.google.gson.stream.JsonReader)_gson","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":["com.google.gson.TreeTypeAdapter.T read(com.google.gson.stream.JsonReader)_gson","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"]},"type":"variable"}]},{"transformation":"7f54bb5c-42d3-11e5-bdeb-a5026c011f19","diffs":[{"branches":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":["com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t8","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t7","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).e3","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t3"],"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":["com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).e3","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t3"],"com.google.gson.ObjectTypeAdapterTest.testDeserialize":["com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t8","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t7","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).e3","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t3"],"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":["com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t8","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t7","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).e3","com.google.gson.internal.LinkedTreeMap_void_rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean).t3"]},"type":"branch"}]},{"transformation":"c5511236-42d5-11e5-988c-0999c779f566","diffs":[{"variables":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode"],"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":["com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":["com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T)_gson","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.TreeTypeAdapter.T read(com.google.gson.stream.JsonReader)_gson","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"]},"type":"variable"}]},{"transformation":"f1b0c84b-42d5-11e5-91f1-691261086ebd","diffs":[{"branches":{"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":["com.google.gson.stream.JsonWriter_void_beforeValue(boolean).t1","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable).t2","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper_void_write(com.google.gson.stream.JsonWriter,T).t2","com.google.gson.Gson$FutureTypeAdapter_void_write(com.google.gson.stream.JsonWriter,T).e1","com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1_void_write(com.google.gson.stream.JsonWriter,java.lang.Object).l2","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable).l3","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter).e1","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper_void_write(com.google.gson.stream.JsonWriter,T).l3","com.google.gson.Gson_void_toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable).e1","com.google.gson.stream.JsonWriter_com.google.gson.stream.JsonWriter_open(int,java.lang.String).s5"],"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":["com.google.gson.internal.$Gson$Preconditions_void_checkArgument(boolean).e1","com.google.gson.internal.$Gson$Preconditions_void_checkArgument(boolean).b"]},"type":"branch"},{"variables":{"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_delegate"]},"type":"variable"},{"nodes":{"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":["com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"]},"edges":{"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.JavaSerializationTest.testNumberIsSerializable":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.MixedStreamTest.testWriteLenient":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.CommentsTest.testParseComments":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"],"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":["com.google.gson.internal.$Gson$Types.java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> com.google.gson.internal.$Gson$Preconditions.void checkArgument(boolean)"]},"type":"graph"}]},{"transformation":"a8914e5a-42ca-11e5-81a4-adc9a38a7de9","diffs":[{"branches":{"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":["com.google.gson.internal.LinkedTreeMap_V_put(K,V).t5","com.google.gson.internal.LinkedTreeMap_V_put(K,V).e6","com.google.gson.JsonObject_void_addProperty(java.lang.String,java.lang.String).e1","com.google.gson.internal.LinkedTreeMap_V_put(K,V).e4"]},"type":"branch"},{"nodes":{},"edges":{"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":["com.google.gson.Gson$2.com.google.gson.JsonElement serialize(java.lang.Object) -> com.google.gson.stream.JsonWriter.void setSerializeNulls(boolean)","com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T) -> com.google.gson.stream.JsonWriter.void setSerializeNulls(boolean)","com.google.gson.Gson$2.com.google.gson.JsonElement serialize(java.lang.Object) -> com.google.gson.stream.JsonWriter.void setLenient(boolean)","com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T) -> com.google.gson.stream.JsonWriter.void setHtmlSafe(boolean)","com.google.gson.Gson$2.com.google.gson.JsonElement serialize(java.lang.Object) -> com.google.gson.stream.JsonWriter.void setHtmlSafe(boolean)","com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T) -> com.google.gson.stream.JsonWriter.void setLenient(boolean)"]},"type":"graph"},{"variables":{"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":["com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":["com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T)_gson","com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.void write(com.google.gson.stream.JsonWriter,T)_context","com.google.gson.TreeTypeAdapter.T read(com.google.gson.stream.JsonReader)_gson","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"],"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":["com.google.gson.TreeTypeAdapter.void write(com.google.gson.stream.JsonWriter,T)_gson","com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"]},"type":"variable"}]},{"transformation":"643bccf6-42c1-11e5-a2de-e5dc5edbe317","diffs":[{"variables":{"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":["com.google.gson.reflect.TypeToken.int hashCode()_hashCode","com.google.gson.Gson.<T> com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)_factories"]},"type":"variable"}]}]}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"41e99c89-43a2-11e5-9b91-113aebe284ab","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:47","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return org.apache.commons.codec.language.Caverphone1.java.lang.String;\n} "},"variableMap":{"txt":"txt","org.apache.commons.codec.language.Caverphone1.SIX_1":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0},{"failures":[],"tindex":"df0a8d57-43aa-11e5-989c-bd1536818562","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Metaphone:179","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"CIA\")) {\n    java.lang.StringBuilder.append('X');\n    break;\n} "},"variableMap":{"code":"code","this":"this","local":"local","n":"wdsz"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:206","type":"CtIfImpl","sourcecode":"if (((!org.apache.commons.codec.language.Metaphone.(isLastChar(int, (int + 1)))) && org.apache.commons.codec.language.Metaphone.(isNextChar(java.lang.StringBuilder, int, 'G'))) && ((org.apache.commons.codec.language.Metaphone.java.lang.String.indexOf(java.lang.StringBuilder.charAt((int + 2)))) >= 0)) {\n    java.lang.StringBuilder.append('J');\n    int += 2;\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"status":0},{"failures":[],"tindex":"e15be288-4378-11e5-9372-5ff7eccd18bb","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:463","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"e690e8f8-4396-11e5-98e6-65a71b4d9fff","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:80","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"tia\", \"sia\")"},"variableMap":{"txt":"boxContent"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.bm.Rule:554","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.substring(1)"},"status":1},{"failures":[],"tindex":"fd126089-42b2-11e5-8e4a-e34d167774a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":0},{"failures":[],"tindex":"54dede42-4343-11e5-b8d0-b76d0aacce3c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"variableMap":{"txt":"name1"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:225","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.cleanName(java.lang.String)"},"status":1},{"failures":[],"tindex":"33dc3566-43d6-11e5-a8bf-3b32c6d41236","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:763","type":"CtAssignmentImpl","sourcecode":"int = 1"},"variableMap":{"startSrc":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:361","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"5995cbc8-42ae-11e5-a138-9356987a915d","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"right","encodeSize":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:312","type":"CtAssignmentImpl","sourcecode":"int = int[][0]"},"status":1},{"failures":[],"tindex":"5c6fcdc5-42db-11e5-bbb5-2d57c3a23b78","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"index","minRating":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:285","type":"CtOperatorAssignmentImpl","sourcecode":"int += 2"},"status":1},{"failures":[],"tindex":"92e616f3-4377-11e5-a3d4-0946d40d459a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.bm.Languages:284","type":"CtReturnImpl","sourcecode":"return \"ANY_LANGUAGE\""},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:249","type":"CtReturnImpl","sourcecode":"return null"},"status":0},{"failures":[],"tindex":"df8e0f5a-42ae-11e5-aba9-bff170e2f03c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:113","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r$\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:86","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^[aeiou]\", \"A\")"},"status":1},{"failures":[],"tindex":"140390f1-446d-11e5-8537-51d35b19cf31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":1},{"failures":[],"tindex":"e2d76dce-42de-11e5-8294-6f3edf12c894","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:319","type":"CtIfImpl","sourcecode":"if (java.lang.String.equals(java.lang.String)) {\n    char[][int] = ' ';\n    char[][int] = ' ';\n} "},"variableMap":{"name2RtLStart":"name2RtLStart","name1Char":"name1Char","name2Char":"name1Char","i":"name2Size","name1LtRStart":"name1LtREnd"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:307","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (char[].int) ; int++) {\n    if (int > int) {\n        break;\n    } \n    java.lang.String = java.lang.String.substring(int, (int + 1));\n    java.lang.String = java.lang.String.substring((int - int), ((int - int) + 1));\n    java.lang.String = java.lang.String.substring(int, (int + 1));\n    java.lang.String = java.lang.String.substring((int - int), ((int - int) + 1));\n    if (java.lang.String.equals(java.lang.String)) {\n        char[][int] = ' ';\n        char[][int] = ' ';\n    } \n    if (java.lang.String.equals(java.lang.String)) {\n        char[][(int - int)] = ' ';\n        char[][(int - int)] = ' ';\n    } \n}"},"status":0},{"failures":[],"tindex":"a4f4b722-4394-11e5-a05e-05219d44fb39","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:273","type":"CtReturnImpl","sourcecode":"return int + 1"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return int + 2"},"status":1},{"failures":[],"tindex":"39774b21-4342-11e5-af64-2f670d139324","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"char = '5'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":1},{"failures":[],"tindex":"8d8500a6-4340-11e5-bacb-4f7fe552119b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:188","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.MatchRatingApproachEncoder.int"},"variableMap":{"org.apache.commons.codec.language.MatchRatingApproachEncoder.FIVE":"d","minRating":"d"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:349","type":"CtAssignmentImpl","sourcecode":"int = int[][0]"},"status":1},{"failures":[],"tindex":"e516054d-439d-11e5-add9-3750c09b3f31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[],"tindex":"c67d6fd7-4342-11e5-8419-539e987b97f9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.Base64:288","type":"CtAssignmentImpl","sourcecode":"this.int = org.apache.commons.codec.binary.Base64.int"},"variableMap":{"org.apache.commons.codec.binary.Base64.BYTES_PER_ENCODED_BLOCK":"pos","encodeSize":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:361","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"87c60a2d-4347-11e5-985e-31b5e1a671e3","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:88","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(java.lang.String, org.apache.commons.codec.language.MatchRatingApproachEncoder.java.lang.String)"},"variableMap":{"str":"txt","upperName":"txt","org.apache.commons.codec.language.MatchRatingApproachEncoder.EMPTY":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:61","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^cough\", \"cou2f\")"},"status":1},{"failures":[],"tindex":"bdd7d790-42ae-11e5-bb09-3b4ee91b13b6","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:99","type":"CtIfImpl","sourcecode":"if (int == 1) {\n    return java.lang.String.toUpperCase(java.util.Locale.java.util.Locale);\n} "},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"e516054d-439d-11e5-add9-3750c09b3f31","diffs":[{"nodes":{"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"]},"edges":{"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":["org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])"]},"type":"graph"}]},{"transformation":"140390f1-446d-11e5-8537-51d35b19cf31","diffs":[{"nodes":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"]},"edges":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"]},"type":"graph"},{"branches":{"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":["org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s11","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s12","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t5","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t2","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t4","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t3","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).e7","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s10","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s9"]},"type":"branch"}]}]}
{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"b4b91ca2-4316-11e5-a6c4-e3b9ce615486","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:93","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^y3\", \"Y3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:62","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^enough\", \"enou2f\")"},"status":1},{"failures":[],"tindex":"54d304fb-42d9-11e5-bfb0-97a6f45ed647","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base32:481","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"f9ec56cd-42b4-11e5-b96e-89f24e6df5b8","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return java.lang.String;\n} "},"variableMap":{"str":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"e516054d-439d-11e5-add9-3750c09b3f31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.Base64:706","type":"CtReturnImpl","sourcecode":"return new org.apache.commons.codec.binary.Base64().decode(byte[])"},"variableMap":{"base64Data":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:240","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[],"tindex":"26b68033-42b0-11e5-9c3c-f10a920ca04c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:83","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"b\", \"p\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:100","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"wy\", \"Wy\")"},"status":1},{"failures":[],"tindex":"84afd255-43a8-11e5-9a7c-39716195840b","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:77","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"v\", \"f\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:120","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"2\", \"\")"},"status":1},{"failures":[],"tindex":"a26c59d5-42e2-11e5-ad7c-ad6d2408fe85","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Nysiis:253","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.SoundexUtils.clean(java.lang.String)"},"variableMap":{"str":"text"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:429","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.toUpperCase(java.util.Locale.java.util.Locale)"},"status":1},{"failures":[],"tindex":"31251489-42dc-11e5-9266-d34391a6ea2e","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.SoundexUtils:42","type":"CtIfImpl","sourcecode":"if ((java.lang.String == null) || ((java.lang.String.length()) == 0)) {\n    return java.lang.String;\n} "},"variableMap":{"str":"accentedWord"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:352","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"8f3cc6da-4314-11e5-84da-1d0fa02e011b","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.Charsets:74","type":"CtReturnImpl","sourcecode":"return java.nio.charset.Charset == null ? java.nio.charset.Charset.defaultCharset() : java.nio.charset.Charset"},"variableMap":{"charset":"charset"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:240","type":"CtReturnImpl","sourcecode":"return this.java.nio.charset.Charset"},"status":0},{"failures":[],"tindex":"426717bd-4382-11e5-a02d-3b10bb4730ba","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.BCodec:159","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    return null;\n} "},"status":0},{"failures":[],"tindex":"7dd638b5-436f-11e5-b619-0174ab79a143","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"org.apache.commons.codec.binary.BinaryCodec.EMPTY_BYTE_ARRAY"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BinaryCodec:200","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BinaryCodec.byte[]"},"status":0},{"failures":[],"tindex":"10fd0c34-42ae-11e5-8015-33b15cf2a973","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:104","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"^h\", \"A\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone2:82","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"dg\", \"2g\")"},"status":1},{"failures":[],"tindex":"eb0b25d3-42dd-11e5-926d-977c5678e01a","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodecInputStream:132","type":"CtThrowImpl","sourcecode":"throw new java.lang.IndexOutOfBoundsException()"},"variableMap":{},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:414","type":"CtThrowImpl","sourcecode":"throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String\")"},"status":0},{"failures":[],"tindex":"140ac820-43c4-11e5-87ab-756072da0fc2","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.net.URLCodec:136","type":"CtIfImpl","sourcecode":"if (int == ' ') {\n    int = '+';\n} "},"variableMap":{"b":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:453","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'G') {\n    int += 2;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n} else {\n    int++;\n    org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult.append('K');\n}"},"status":0},{"failures":[],"tindex":"54dede44-4343-11e5-b8d0-8da1892f6cc7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Caverphone2:95","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"y\", \"3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:82","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ph\", \"fh\")"},"status":1},{"failures":[],"tindex":"fa9b15ec-4315-11e5-96aa-bf572a592409","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Metaphone:303","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.regionMatch(java.lang.StringBuilder, int, \"TH\")) {\n    java.lang.StringBuilder.append('0');\n} else {\n    java.lang.StringBuilder.append('T');\n}"},"variableMap":{"code":"local","this":"this","local":"local","n":"n"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Metaphone:229","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.Metaphone.isPreviousChar(java.lang.StringBuilder, int, 'G')) {\n    boolean = true;\n} else {\n    boolean = false;\n}"},"status":0},{"failures":[],"tindex":"fd126089-42b2-11e5-8e4a-e34d167774a0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:90","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"gh\", \"22\")"},"status":0},{"failures":[],"tindex":"a0200d97-4447-11e5-853f-634511c23d43","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:74","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"c\", \"k\")"},"status":0},{"failures":[],"tindex":"65137fc8-4405-11e5-a517-d381262c3aa7","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:388","type":"CtIfImpl","sourcecode":"if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"variableMap":{"code":"lastChar","chr":"nextChar"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:360","type":"CtIfImpl","sourcecode":"if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '4';\n} else if ((char == 'X') && (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n    char = '4';\n    org.apache.commons.codec.language.ColognePhonetic.CologneInputBuffer.addLeft('S');\n    int++;\n} else if ((char == 'S') || (char == 'Z')) {\n    char = '8';\n} else if (char == 'C') {\n    if (char == '/') {\n        if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n            char = '4';\n        } else {\n            char = '8';\n        }\n    } else {\n        if (org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) || (!org.apache.commons.codec.language.ColognePhonetic.(org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)))) {\n            char = '8';\n        } else {\n            char = '4';\n        }\n    }\n} else if (org.apache.commons.codec.language.ColognePhonetic.org.apache.commons.codec.language.ColognePhonetic.arrayContains(org.apache.commons.codec.language.ColognePhonetic.char[], char)) {\n    char = '8';\n} else if (char == 'R') {\n    char = '7';\n} else if (char == 'L') {\n    char = '5';\n} else if ((char == 'M') || (char == 'N')) {\n    char = '6';\n} else {\n    char = char;\n}"},"status":1},{"failures":[],"tindex":"e5d4bbd0-4335-11e5-8c8e-79037fb93ddb","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"variableMap":{"index":"org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:241","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.BaseNCodec.int"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"a26c59d5-42e2-11e5-ad7c-ad6d2408fe85","diffs":[{"nodes":{"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":["org.apache.commons.codec.language.SoundexUtils.java.lang.String clean(java.lang.String)"]},"edges":{"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122":["org.apache.commons.codec.language.ColognePhonetic.java.lang.String preprocess(java.lang.String) -> org.apache.commons.codec.language.SoundexUtils.java.lang.String clean(java.lang.String)"]},"type":"graph"}]},{"transformation":"e516054d-439d-11e5-add9-3750c09b3f31","diffs":[{"nodes":{"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"]},"edges":{"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray":["org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.BinaryCodec.byte[] toAsciiBytes(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])"]},"type":"graph"}]},{"transformation":"e5d4bbd0-4335-11e5-8c8e-79037fb93ddb","diffs":[{"branches":{"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":["org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s11","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s12","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t5","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t2","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t4","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t3","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).e7","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s10","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s9"]},"type":"branch"},{"variables":{"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105":["org.apache.commons.codec.binary.BaseNCodecInputStream.int read(byte[],int,int)_context"]},"type":"variable"}]}]}
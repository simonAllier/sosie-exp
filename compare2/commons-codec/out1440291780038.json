{"failureDictionary":{},"transformations":[{"failures":[],"tindex":"8d8527b9-4340-11e5-bacb-0d5e1a7280d9","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.binary.BaseNCodec:496","type":"CtIfImpl","sourcecode":"if (byte[] == null) {\n    return false;\n} "},"variableMap":{"arrayOctet":"arrayOctet"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:538","type":"CtForImpl","sourcecode":"for (int int = 0 ; int < (byte[].int) ; int++) {\n    if ((!org.apache.commons.codec.binary.Base64.(org.apache.commons.codec.binary.Base64.isBase64(byte[][int]))) && (!org.apache.commons.codec.binary.BaseNCodec.(org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte[][int])))) {\n        return false;\n    } \n}"},"status":0},{"failures":[],"tindex":"ad1ef72b-4315-11e5-ab69-c3bdbd6e6b76","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:243","type":"CtOperatorAssignmentImpl","sourcecode":"int >>= 1"},"variableMap":{"ii":"right"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":1},{"failures":[],"tindex":"011cc97b-434b-11e5-945a-37775c6d8301","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:502","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.reset()"},"status":0},{"failures":[],"tindex":"a9c98c7f-4379-11e5-99f0-396a6370050c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:141","type":"CtIfImpl","sourcecode":"if (java.lang.String == null) {\n    throw new java.lang.IllegalArgumentException(\"Salt must not be null\");\n} "},"variableMap":{"salt":"org.apache.commons.codec.language.DaitchMokotoffSoundex.DOUBLE_QUOTE"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DaitchMokotoffSoundex:332","type":"CtIfImpl","sourcecode":"if (java.lang.String.startsWith(org.apache.commons.codec.language.DaitchMokotoffSoundex.java.lang.String)) {\n    java.lang.String = java.lang.String.substring(1);\n} "},"status":0},{"failures":[],"tindex":"14219d7c-43bf-11e5-a039-81992109ecdd","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.Nysiis:163","type":"CtIfImpl","sourcecode":"if ((char == 'W') && org.apache.commons.codec.language.Nysiis.(org.apache.commons.codec.language.Nysiis.isVowel(char))) {\n    return new char[]{ char };\n} "},"variableMap":{"prev":"curr","this":"this","curr":"prev"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:158","type":"CtIfImpl","sourcecode":"if ((char == 'H') && ((!org.apache.commons.codec.language.Nysiis.(org.apache.commons.codec.language.Nysiis.isVowel(char))) || (!org.apache.commons.codec.language.Nysiis.(org.apache.commons.codec.language.Nysiis.isVowel(char))))) {\n    return new char[]{ char };\n} "},"status":0},{"failures":[],"tindex":"faecd051-42ac-11e5-be9b-1906b47be88a","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.MatchRatingApproachEncoder:142","type":"CtAssignmentImpl","sourcecode":"java.lang.String = org.apache.commons.codec.language.MatchRatingApproachEncoder.getFirst3Last3(java.lang.String)"},"status":0},{"failures":[],"tindex":"8d2d4c63-42e8-11e5-995b-2f03a6cb144c","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:388","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"e5399042-4408-11e5-9163-0d4d3c4bc6c5","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.Caverphone1:109","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"l3\", \"L3\")"},"variableMap":{"txt":"txt"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:107","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"ry\", \"Ry\")"},"status":1},{"failures":[],"tindex":"b2476a0e-42b0-11e5-bb97-d1d785007a69","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.UnixCrypt:295","type":"CtAssignmentImpl","sourcecode":"int = int"},"status":0},{"failures":[],"tindex":"063e46c1-42b0-11e5-9d70-afc7d91734e7","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.Md5Crypt:272","type":"CtIfImpl","sourcecode":"if ((int & 1) != 0) {\n    java.security.MessageDigest.update(byte[], 0, org.apache.commons.codec.digest.Md5Crypt.int);\n} else {\n    java.security.MessageDigest.update(byte[]);\n}"},"variableMap":{"ctx1":"ctx","keyBytes":"altResult","finalb":"altResult","org.apache.commons.codec.digest.Md5Crypt.BLOCKSIZE":"blocksize","i":"blocksize"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.Sha2Crypt:396","type":"CtInvocationImpl","sourcecode":"java.security.MessageDigest.update(byte[], 0, int)"},"status":1},{"failures":[],"tindex":"34234510-42ad-11e5-958d-fb7fe9b9f878","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.HmacUtils:445","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.updateHmac(org.apache.commons.codec.digest.HmacUtils.org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byte[]), java.io.InputStream)"},"status":0},{"failures":[],"tindex":"71ea6412-42dd-11e5-8207-d9d7811bf61c","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:771","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.(charAt(java.lang.String, (int + 1))) == 'Z' ? int + 2 : int + 1"},"variableMap":{"this":"this","index":"index","value":"value"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:133","type":"CtAssignmentImpl","sourcecode":"int = org.apache.commons.codec.language.DoubleMetaphone.handleJ(java.lang.String, org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult, int, boolean)"},"status":0},{"failures":[],"tindex":"06113588-434a-11e5-a32c-9d6281d4054c","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.language.DoubleMetaphone:670","type":"CtReturnImpl","sourcecode":"return int + 3"},"variableMap":{"index":"index"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.DoubleMetaphone:362","type":"CtReturnImpl","sourcecode":"return int + 2"},"status":1},{"failures":[],"tindex":"140390f1-446d-11e5-8537-51d35b19cf31","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.net.BCodec:104","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Base64.decodeBase64(byte[])"},"variableMap":{"bytes":"pArray"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.BaseNCodec:427","type":"CtReturnImpl","sourcecode":"return byte[]"},"status":1},{"failures":[],"tindex":"914312a5-43bd-11e5-b721-e359c06fa5b0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Caverphone1:106","type":"CtAssignmentImpl","sourcecode":"java.lang.String = java.lang.String.replaceAll(\"r3\", \"R3\")"},"status":0},{"failures":[],"tindex":"6465e28a-433e-11e5-b447-9b6b89866af0","series":0,"name":"delete","type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.net.QCodec:78","type":"CtInvocationImpl","sourcecode":"org.apache.commons.codec.net.QCodec.java.util.BitSet.set('-')"},"status":0},{"failures":[],"tindex":"39774b21-4342-11e5-af64-2f670d139324","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.language.ColognePhonetic:387","type":"CtAssignmentImpl","sourcecode":"char = '5'"},"variableMap":{"code":"code"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.ColognePhonetic:399","type":"CtAssignmentImpl","sourcecode":"char = char"},"status":1},{"failures":[],"tindex":"e60d26b6-42c5-11e5-8b83-bdc86cae7149","series":0,"name":"add","transplant":{"position":"org.apache.commons.codec.digest.Sha2Crypt:225","type":"CtOperatorAssignmentImpl","sourcecode":"int -= int"},"variableMap":{"blocksize":"pos","cnt":"pos"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.binary.Base64:354","type":"CtUnaryOperatorImpl","sourcecode":"(org.apache.commons.codec.binary.BaseNCodec.Context.int)++"},"status":0},{"failures":[],"tindex":"a022b6fa-4312-11e5-a9ee-f1557b48edbd","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.digest.DigestUtils:412","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.binary.Hex.encodeHexString(org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1(byte[]))"},"variableMap":{"data":"data","this":"this"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.digest.DigestUtils:733","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.digest.DigestUtils.org.apache.commons.codec.digest.DigestUtils.sha1Hex(byte[])"},"status":1},{"failures":[],"tindex":"796ec68e-4430-11e5-9c34-49168b9b897f","series":0,"name":"replace","transplant":{"position":"org.apache.commons.codec.binary.BinaryCodec:287","type":"CtReturnImpl","sourcecode":"return char[]"},"variableMap":{"l_ascii":"org.apache.commons.codec.language.Nysiis.CHARS_N"},"type":"adrStmt","transplantationPoint":{"position":"org.apache.commons.codec.language.Nysiis:135","type":"CtReturnImpl","sourcecode":"return org.apache.commons.codec.language.Nysiis.char[]"},"status":0}],"header":{"groupId":"commons-codec","transformationCount":20,"projectType":"maven","artifactId":"commons-codec","generatorVersion":"1.0","version":"1.10"},"diffs":[{"transformation":"a022b6fa-4312-11e5-a9ee-f1557b48edbd","diffs":[{"nodes":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[])"]},"edges":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.byte[] sha1(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.binary.Hex.java.lang.String encodeHexString(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String shaHex(byte[]) -> org.apache.commons.codec.digest.DigestUtils.byte[] sha1(byte[])","org.apache.commons.codec.digest.DigestUtils.java.lang.String sha1Hex(byte[]) -> org.apache.commons.codec.binary.Hex.java.lang.String encodeHexString(byte[])"]},"type":"graph"},{"branches":{"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex":["org.apache.commons.codec.digest.DigestUtils_java.lang.String_sha1Hex(byte[]).b"]},"type":"branch"}]},{"transformation":"140390f1-446d-11e5-8537-51d35b19cf31","diffs":[{"nodes":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)","org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])"]},"edges":{"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex":["org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"],"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte":["org.apache.commons.codec.binary.BaseNCodec.byte[] encode(byte[]) -> org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[])","org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[]) -> org.apache.commons.codec.binary.Base64.boolean isInAlphabet(byte)","org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean) -> org.apache.commons.codec.binary.BaseNCodec.boolean containsAlphabetOrPad(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64()","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.byte[] decode(byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[],boolean)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int,byte)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.BaseNCodec.org.apache.commons.codec.binary.BaseNCodec(int,int,int,int)","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int,byte[])","org.apache.commons.codec.binary.Base64.byte[] decodeBase64(byte[]) -> org.apache.commons.codec.binary.Base64.org.apache.commons.codec.binary.Base64(int)"]},"type":"graph"},{"branches":{"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom":["org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s11","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s12","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t2","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t5","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t4","org.apache.commons.codec.binary.BaseNCodec_byte[]_resizeBuffer(org.apache.commons.codec.binary.BaseNCodec$Context).e1","org.apache.commons.codec.binary.Base64_void_encode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).t3","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).e7","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s10","org.apache.commons.codec.binary.Base64_void_decode(byte[],int,int,org.apache.commons.codec.binary.BaseNCodec$Context).s9"]},"type":"branch"}]}]}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":422,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":173,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":400,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":501,"com.google.gson.functional.StringTest.testStringValueDeserialization":707,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":4,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":617,"com.google.gson.JsonPrimitiveTest.testDeepCopy":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":649,"com.google.gson.stream.JsonWriterTest.testRepeatedName":498,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":590,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":142,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":250,"com.google.gson.MixedStreamTest.testWriteLenient":11,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":221,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":436,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":469,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":722,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":199,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":134,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":139,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":228,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":622,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":379,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":567,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":121,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":597,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":330,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":432,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":204,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":283,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":424,"com.google.gson.functional.ObjectTest.testSingletonLists":226,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":532,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":401,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":585,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":484,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":96,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":702,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":656,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":238,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":506,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":624,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":255,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":368,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":715,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":451,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":147,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":98,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":618,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":409,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":187,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":509,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":579,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":489,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":350,"com.google.gson.functional.EnumTest.testEnumCaseMapping":566,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":399,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":504,"com.google.gson.functional.JsonTreeTest.testToJsonTree":218,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":578,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":472,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":270,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":327,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":331,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":468,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":158,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":672,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":320,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":647,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":559,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":341,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":366,"com.google.gson.functional.ObjectTest.testNullDeserialization":692,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":208,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":713,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":236,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":458,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":39,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":591,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":552,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":431,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":408,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":488,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":317,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":242,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":0,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":539,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":94,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":629,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":628,"com.google.gson.JsonParserTest.testParseString":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":655,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":159,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":412,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":514,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":642,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":114,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":389,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":531,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":605,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":222,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":615,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":663,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":494,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":646,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":131,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":13,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":213,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":385,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":32,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":688,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":616,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":241,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":543,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":12,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":233,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":294,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":465,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":276,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":324,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":351,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":511,"com.google.gson.metrics.PerformanceTest.testDummy":569,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":185,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":263,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":80,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":576,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":354,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":667,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":679,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":377,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":475,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":527,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":211,"com.google.gson.functional.CollectionTest.testSetDeserialization":271,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":122,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":109,"com.google.gson.functional.EnumTest.testEnumSet":562,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":684,"com.google.gson.JsonStreamParserTest.testIterator":423,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":608,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":480,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":644,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":79,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":167,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":619,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":170,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":625,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":97,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":486,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":35,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":588,"com.google.gson.functional.MapTest.testHashMapDeserialization":661,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":697,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":652,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":561,"com.google.gson.MixedStreamTest.testReadNulls":573,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":638,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":295,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":453,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":129,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":682,"com.google.gson.functional.MapTest.testSortedMap":666,"com.google.gson.functional.MapTest.testMapSerialization":65,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":48,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":728,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":191,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":613,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":742,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":735,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":674,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":59,"com.google.gson.functional.MapTest.testSerializeMaps":64,"com.google.gson.functional.MapTest.testComplexKeysSerialization":190,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":683,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":437,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":473,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":737,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":210,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":307,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":289,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":304,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":548,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":717,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":101,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":321,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":332,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":433,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":143,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":691,"com.google.gson.functional.MapTest.testStringKeyDeserialization":352,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":675,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":87,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":42,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":68,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":594,"com.google.gson.functional.PrettyPrintingTest.testMap":99,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":545,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":589,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":136,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":519,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":680,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":160,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":505,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":676,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":405,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":708,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":376,"com.google.gson.functional.CollectionTest.testQueueSerialization":394,"com.google.gson.functional.MapTest.testMapSerializationEmpty":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":609,"com.google.gson.functional.MapTest.testMapOfMapSerialization":384,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":513,"com.google.gson.JavaSerializationTest.testMapIsSerializable":720,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":648,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":699,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":28,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":91,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":440,"com.google.gson.functional.FieldNamingTest.testIdentity":60,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":402,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":355,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":148,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":244,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":107,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":144,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":217,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":478,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":580,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":18,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":411,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":403,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":495,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":26,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":654,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":645,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":538,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":659,"com.google.gson.functional.MapTest.testMapSubclassSerialization":380,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":515,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":21,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":206,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":685,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":10,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":198,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":558,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":603,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":223,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":640,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":78,"com.google.gson.functional.EnumTest.testEnumSubclass":564,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":29,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":237,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":23,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":313,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":725,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":621,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":215,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":741,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":581,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":146,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":723,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":606,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":732,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":278,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":261,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":161,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":671,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":610,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":689,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":25,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":275,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":535,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":227,"com.google.gson.MixedStreamTest.testWriteNulls":419,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":660,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":71,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":686,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":388,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":203,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":209,"com.google.gson.CommentsTest.testParseComments":568,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":328,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":108,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":286,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":481,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":124,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":620,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":474,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":404,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":541,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":704,"com.google.gson.MixedStreamTest.testReadInvalidState":571,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":118,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":537,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":192,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":726,"com.google.gson.JsonParserTest.testParseMixedArray":426,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":456,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":373,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":319,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":677,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":733,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":251,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":410,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":441,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":512,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":310,"com.google.gson.JsonArrayTest.testRemove":449,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":529,"com.google.gson.functional.MapTest.testMapDeserialization":348,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":670,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":526,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":104,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":63,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":20,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":282,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":727,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":133,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":382,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":285,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":367,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":305,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":357,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":5,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":716,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":178,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":115,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":551,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":546,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":520,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":205,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":434,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":152,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":100,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":359,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":577,"com.google.gson.functional.PrimitiveTest.testShortSerialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":560,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":623,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":438,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":557,"com.google.gson.JsonParserTest.testParseEmptyString":427,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":604,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":180,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":587,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":56,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":493,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":342,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":135,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":171,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":340,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":346,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":600,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":43,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":490,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":224,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":454,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":443,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":653,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":15,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":46,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":632,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":155,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":214,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":245,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":268,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":444,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":517,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":172,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":220,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":88,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":607,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":248,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":232,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":565,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":298,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":393,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":544,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":416,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":678,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":281,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":530,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":743,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":593,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":522,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":651,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":265,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":695,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":627,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":27,"com.google.gson.JsonArrayTest.testSet":447,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":44,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":291,"com.google.gson.JsonPrimitiveTest.testEquals":461,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":284,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":563,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":176,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":193,"com.google.gson.functional.MapTest.testGeneralMapField":66,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":230,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":362,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":729,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":635,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":73,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":314,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":476,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":378,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":360,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":372,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":466,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":34,"com.google.gson.MixedStreamTest.testReadMixedStreamed":165,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":336,"com.google.gson.JsonObjectTest.testDeepCopy":334,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":429,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":643,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":664,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":259,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":371,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":397,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":611,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":439,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":556,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":719,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":54,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":349,"com.google.gson.JsonArrayTest.testDeepCopy":448,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":540,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":345,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":482,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":50,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":127,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":601,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":442,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":528,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":687,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":460,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":639,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":698,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":706,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":736,"com.google.gson.functional.ObjectTest.testNestedDeserialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":485,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":491,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":553,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":174,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":260,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":634,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":123,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":272,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":428,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":665,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":709,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":297,"com.google.gson.JavaSerializationTest.testListIsSerializable":721,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":202,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":225,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":141,"com.google.gson.functional.ObjectTest.testNullSerialization":550,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":151,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":724,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":658,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":347,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":189,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":510,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":16,"com.google.gson.functional.MapTest.testInterfaceTypeMap":188,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":673,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":477,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":583,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":154,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":306,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":414,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":547,"com.google.gson.MixedStreamTest.testReadClosed":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":487,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":595,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":739,"com.google.gson.MixedStreamTest.testWriteClosed":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":175,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":395,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":231,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":657,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":82,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":132,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":254,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":116,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":252,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":418,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":734,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":55,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":269,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":137,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":257,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":731,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":614,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":301,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":396,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":430,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":435,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":533,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":356,"com.google.gson.stream.JsonWriterTest.testNumbers":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":308,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":464,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":636,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":374,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":641,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":212,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":386,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":253,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":322,"com.google.gson.functional.CollectionTest.testQueueDeserialization":703,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":503,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":612,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":417,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":712,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":516,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":536,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":186,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":524,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":95,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":247,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":365,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":9,"com.google.gson.functional.MapTest.testRawMapSerialization":67,"com.google.gson.JsonParserTest.testParseReader":338,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":701,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":650,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":156,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":112,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":150,"com.google.gson.JsonPrimitiveTest.testExponential":463,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":195,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":398,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":370,"com.google.gson.functional.PrimitiveTest.testByteSerialization":37,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":387,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":392,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":446,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":2,"com.google.gson.ObjectTypeAdapterTest.testSerialize":8,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":93,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":592,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":19,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":200,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":730,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":72,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":738,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":83,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":574,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":710,"com.google.gson.functional.MapTest.testMapWithQuotes":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":598,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":711,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":479,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":694,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":92,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":51,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":120,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":492,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":75,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":246,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":318,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":105,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":521,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":690,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":235,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":467,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":126,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":626,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":549,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":700,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":669,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":470,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":299,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":279,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":740,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":323,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":693,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":22,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":326,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":681,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":353,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":584,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":413,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":718,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":90,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":153,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":239,"com.google.gson.functional.ObjectTest.testNestedSerialization":113,"com.google.gson.JsonObjectTest.testAddingStringProperties":335,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":292,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":24,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":390,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":714,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":375,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":361,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":194,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":106,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":425,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":369,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":508,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":705,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":631,"com.google.gson.JsonPrimitiveTest.testBoolean":457,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":266,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":181,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":7,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":570,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":596,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":177,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":240,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":256,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":157,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":406,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":363,"com.google.gson.functional.CollectionTest.testSetSerialization":140,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":315,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":89,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":102,"com.google.gson.functional.StringTest.testStringValueSerialization":407,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":61,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":273,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":309,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":696,"com.google.gson.MixedStreamTest.testWriteInvalidState":163,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":668,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":6,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":599,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":197,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":602,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":293,"com.google.gson.stream.JsonWriterTest.testBooleans":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":53,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":58,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":337,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":207,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":329,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":280,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":421,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":554,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":534,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":3,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":662,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":500,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":70,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":575},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7351eeb8-3f33-11e6-86ff-e1bee4dc5132","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"7352d919-3f33-11e6-86ff-35cb4a250af9","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7352d91a-3f33-11e6-86ff-ff7301edd219","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == '\\n') {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7353002b-3f33-11e6-86ff-956513f208d5","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7353273c-3f33-11e6-86ff-714ee1539cca","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"73534e4d-3f33-11e6-86ff-653325a4f40f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7353755e-3f33-11e6-86ff-dd6af27a3d94","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,5,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"7353755f-3f33-11e6-86ff-e387a5fb2e0b","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73539c70-3f33-11e6-86ff-17e2564864aa","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[161,162,8,9,10,163,164,165,166,12,167,168,169,170,171,21,22,172,47,173,48,174,49,175,176,50,177,178,179,180,181,54,182,55,56,57,58,59,60,61,183,184,62,185,186,187,188,189,66,190,4,191,192,193,194,195,73,196,197,198,199,200,201,202,75,203,77,78,79,80,81,204,82,83,84,205,85,206,86,207,208,209,210,211,212,213,214,215,88,89,216,5,217,218,93,94,95,219,96,97,100,101,105,106,220,221,222,223,224,225,107,226,227,228,108,229,230,231,232,233,234,235,109,236,110,237,238,111,239,112,113,240,241,242,243,114,244,115,245,246,116,247,248,249,250,117,118,120,121,122,251,252,123,124,253,254,125,255,256,126,127,257,258,128,129,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,135,138,271,139,140,142,272,143,273,274,275,144,276,145,277,278,146,147,148,149,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,150,296,297,298,299,151,300,301,302,303,152,304,305,306,307,308,309,310,311,312,313,314,315,316,317],"tindex":"7353c381-3f33-11e6-86ff-59f8b85407b5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[147],"tindex":"7353ea92-3f33-11e6-86ff-598868c0f22c","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"735411a3-3f33-11e6-86ff-0beb6c1a8459","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:342","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735438b4-3f33-11e6-86ff-3dd9c72c3ffa","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (count == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"count","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735438b5-3f33-11e6-86ff-3f3ba423c334","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"735438b6-3f33-11e6-86ff-1f1edee75e66","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73545fc7-3f33-11e6-86ff-2b2a715af332","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73545fc8-3f33-11e6-86ff-7101f345243c","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735486d9-3f33-11e6-86ff-d5ec517f113e","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o","value":"o","java.lang.Object.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"735486da-3f33-11e6-86ff-eb81c5340f72","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"735486db-3f33-11e6-86ff-4b83a2694401","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7354adec-3f33-11e6-86ff-35ceeed5db0e","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7354aded-3f33-11e6-86ff-6948db9d0d52","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7354adee-3f33-11e6-86ff-3d063356cfc7","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7354d4ff-3f33-11e6-86ff-5d62ddedb5f3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7354d500-3f33-11e6-86ff-053a0fed4385","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:857","type":"CtBinaryOperatorImpl"},"failures":[318,319,320,321],"tindex":"7354fc11-3f33-11e6-86ff-2f669450a803","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_TRUE":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7354fc12-3f33-11e6-86ff-e5b70debf639","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"7354fc13-3f33-11e6-86ff-ebb33e07f2f8","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[319,322,323,324,325],"tindex":"73552324-3f33-11e6-86ff-6bedc97696ec","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (key == null) {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[326,327,125,255,256,126,127,257,258,128],"tindex":"73552325-3f33-11e6-86ff-f16775c83e4c","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73552326-3f33-11e6-86ff-e79723dd4e30","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (typeAdapter instanceof com.google.gson.JsonArray) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73554a37-3f33-11e6-86ff-4fae2cafad84","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73554a38-3f33-11e6-86ff-c33cf4f470a1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"o","typeOfT":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"73557149-3f33-11e6-86ff-03256f99a1ae","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,21,22,173,344,345,346,347,348,349,350,351,352,192,193,194,199,200,201,202,353,354,355,117,253,254,131,260,261,262,265,266,270,147,356,357],"tindex":"7355714a-3f33-11e6-86ff-eb14a18390cd","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key != key) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"key","type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7355714b-3f33-11e6-86ff-0903bc47ce3e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7355985c-3f33-11e6-86ff-77c12bf1ca20","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[161,162,8,9,10,163,164,165,166,12,167,168,169,170,171,21,22,172,47,173,48,174,49,175,176,50,177,178,179,180,181,54,182,55,56,57,58,59,60,61,183,184,62,185,186,187,188,189,66,190,4,191,192,193,194,195,73,196,197,198,199,200,201,202,75,203,77,78,79,80,81,204,82,83,84,205,85,206,86,207,208,209,210,211,212,213,214,215,88,89,216,5,217,218,93,94,95,219,96,97,100,101,105,106,220,221,222,223,224,225,107,226,227,228,108,229,230,231,232,233,234,235,109,236,110,237,238,111,239,112,113,240,241,242,243,114,244,115,245,246,116,247,248,249,250,117,118,120,121,122,251,252,123,124,253,254,125,255,256,126,127,257,258,128,129,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,135,138,271,139,140,142,272,143,273,274,275,144,276,145,277,278,146,147,148,149,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,150,296,297,298,299,151,300,301,302,303,152,304,305,306,307,308,309,310,311,312,313,314,315,316,317],"tindex":"7355bf6d-3f33-11e6-86ff-3b380feee033","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            if (!serialize) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7355e67e-3f33-11e6-86ff-a3b4c3805589","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7355e67f-3f33-11e6-86ff-9703c3ab323e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if ((offset == offset) || (p == counter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"offset","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7355e680-3f33-11e6-86ff-d94a3b74e9fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[8,358,182,61,64,186,359,188,360,189,361,4,362,363,197,364,75,78,79,83,84,217,106,114,251,124,253,254,260,261,262,263,264,265,266,269,270,365,366,142,144,279,281,367,284,285,287,288,289,151,309,154,158,159,368],"tindex":"73560d91-3f33-11e6-86ff-5b6653823660","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73560d92-3f33-11e6-86ff-33e56097446e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:735","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73560d93-3f33-11e6-86ff-776540a3dfca","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if ((h == h) || (last == h)) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN":"h","last":"h","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:563","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735634a4-3f33-11e6-86ff-410d72487c71","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if ((empty == nonempty) || (peekStack == nonempty)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"empty","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"nonempty","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735634a5-3f33-11e6-86ff-c103ba6b3555","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((value instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735634a6-3f33-11e6-86ff-69834e329f5b","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index != index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index","com.google.gson.stream.JsonReader.PEEKED_NONE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73565bb7-3f33-11e6-86ff-c7c81642ab34","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[161,162,9,10,369,12,370,167,371,21,22,372,373,374,47,173,48,375,50,180,376,377,378,379,380,64,381,382,186,383,384,188,189,66,67,190,385,4,192,194,386,69,387,388,389,363,72,364,198,76,81,216,5,217,218,93,390,391,94,95,392,96,393,101,106,226,108,231,234,110,111,113,114,116,251,252,253,126,130,131,260,261,262,263,264,265,266,133,269,270,134,365,394,395,366,396,139,397,145,146,147,281,367,284,285,398,289,291,292,293,294,399,400,401,402,403,404,405,406,407,295,296,298,299,302,308,309,310,311,312,156,368],"tindex":"73565bb8-3f33-11e6-86ff-3dd05b833062","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if ((value.length()) == 0) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"735682c9-3f33-11e6-86ff-9db15aea4bc5","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735682ca-3f33-11e6-86ff-93a073982991","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"735682cb-3f33-11e6-86ff-174774fb5c4a","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7356a9dc-3f33-11e6-86ff-a7fea3a7391c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[328,329,330,331,332,333,334,335,336,337,338,339,340,341,408,342,409,343,370,21,22,173,344,345,346,347,348,349,350,351,352,192,193,194,199,200,201,202,353,354,355,217,224,117,253,254,131,260,261,262,265,266,270,147,356,357],"tindex":"7356f7fd-3f33-11e6-86ff-5b07d391d239","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7356f7fe-3f33-11e6-86ff-8bab3450e8bf","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73571f0f-3f33-11e6-86ff-ad167895009f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            if (!serialize) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73571f10-3f33-11e6-86ff-b192083d834b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != value) && (token != value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"value","token":"value","com.google.gson.stream.JsonToken.NUMBER":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,12,21,22,35,39,41,47,173,48,50,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,216,5,217,218,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,254,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,143,144,145,146,148,149,151,152,156],"tindex":"73574621-3f33-11e6-86ff-296ead49452f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73574622-3f33-11e6-86ff-7b78dac0f6f8","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73576d33-3f33-11e6-86ff-2fde3d1cb994","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[161,162,8,9,10,163,164,165,166,12,410,326,327,167,411,412,413,414,415,416,417,168,169,170,171,21,22,172,47,173,48,174,49,175,176,50,177,178,179,180,181,54,182,55,56,57,58,59,60,61,183,184,62,185,186,187,188,189,66,190,4,191,192,193,194,195,73,196,197,198,199,200,201,202,75,203,77,78,79,80,81,204,82,83,84,205,85,206,86,207,208,209,210,211,212,213,214,215,88,89,216,5,217,218,93,94,95,219,96,97,100,101,105,106,220,221,222,223,224,225,107,226,227,228,108,229,230,231,232,233,234,235,109,236,110,237,238,111,239,112,113,240,241,242,243,114,244,115,245,246,116,247,248,249,250,117,118,120,121,122,251,252,123,124,253,254,125,255,256,126,127,257,258,128,129,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,135,138,271,139,140,142,272,143,273,274,275,144,276,145,277,278,146,147,148,149,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,150,296,297,298,299,151,300,301,302,303,152,304,305,306,307,308,309,310,311,312,313,314,315,316,317],"tindex":"73576d34-3f33-11e6-86ff-bd5f28c31db2","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7357bb55-3f33-11e6-86ff-8331c7349ba4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7357bb56-3f33-11e6-86ff-55849ecde177","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if ((value.length()) == 0) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7357bb57-3f33-11e6-86ff-9319e6cb3bb5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7357e268-3f33-11e6-86ff-a96b377d4e78","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[418,328,0,332,333,334,335,1,419,420,421,422,423,424,338,339,12,425,426,427,428,429,430,431,432,433,434,435,436,437,13,14,438,439,440,441,15,442,443,444,370,445,446,447,448,449,450,451,452,453,454,455,456,457,20,458,459,460,461,462,463,464,465,173,176,466,52,467,468,469,470,471,472,2,3,188,66,473,4,474,191,192,193,194,475,195,476,477,199,200,478,201,202,76,353,479,480,355,215,481,482,483,484,485,216,5,217,218,392,96,106,221,222,223,224,225,117,486,487,488,489,253,254,129,130,131,260,261,262,265,266,270,490,147,491,356,492,493,494,495],"tindex":"7357e269-3f33-11e6-86ff-ad03892da4ec","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358097a-3f33-11e6-86ff-699d78bdaf6d","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[12,496,497,498,499,500,501,22,502,503,50,61,62,73,81,5,96,97,101,105,108,110,111,113,114,115,116,126,131,133,134,138,139,148,149],"tindex":"7358097b-3f33-11e6-86ff-97a7951e8357","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if ((!value) && (!value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"value","lenient":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7358097c-3f33-11e6-86ff-dbbb0fd40360","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358308d-3f33-11e6-86ff-81696e23a820","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358308e-3f33-11e6-86ff-29dc1f692214","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7358308f-3f33-11e6-86ff-5dd767ea2b4f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"73583090-3f33-11e6-86ff-a9617bc2b551","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[504,7,0,1,161,162,9,10,419,163,11,369,164,12,505,506,507,370,445,446,508,167,509,18,371,171,21,22,23,510,372,373,511,24,374,512,502,503,513,25,514,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,515,42,43,44,45,46,47,516,173,48,49,375,50,517,466,518,51,519,52,467,468,520,53,180,521,522,523,524,376,525,526,527,528,54,529,530,531,532,533,534,377,469,378,182,470,535,536,537,55,471,538,539,56,57,58,59,60,61,2,3,379,62,540,63,380,64,381,382,186,383,384,65,359,541,188,360,189,66,361,67,190,542,385,68,4,192,194,386,69,362,543,387,388,70,389,363,71,72,73,197,364,74,544,476,545,477,198,546,547,199,200,478,201,202,75,76,77,78,79,80,81,82,83,84,85,86,207,208,209,210,212,479,480,215,87,88,89,481,482,90,91,92,485,216,5,217,218,93,390,391,94,95,392,96,548,549,97,393,98,99,100,101,102,103,104,105,106,107,226,108,231,234,6,109,550,110,551,552,111,112,113,553,241,114,115,245,116,117,118,119,120,121,122,486,554,487,488,555,489,556,557,251,252,123,124,253,254,558,125,126,127,128,129,130,131,260,261,262,263,132,264,265,266,133,269,270,134,365,135,136,394,137,395,366,138,396,139,397,140,141,490,142,143,274,144,276,145,146,147,491,148,149,279,281,367,559,284,285,287,560,288,398,289,291,292,293,294,561,399,400,401,402,403,404,405,406,407,295,150,296,298,299,151,302,152,562,563,493,564,306,565,566,567,308,309,310,311,312,154,313,495,314,316,317],"tindex":"73587eb1-3f33-11e6-86ff-8574cade0c0a","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358a5c2-3f33-11e6-86ff-5f7206f97c90","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358a5c3-3f33-11e6-86ff-e331045c3ce5","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[180,151],"tindex":"7358a5c4-3f33-11e6-86ff-2fdb5d7782e1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7358a5c5-3f33-11e6-86ff-d3b5fb134177","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358ccd6-3f33-11e6-86ff-1f837101a316","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7358ccd7-3f33-11e6-86ff-771a66d10bf8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != value) && (token != value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[568,504,7,569,0,1,161,162,570,9,571,572,10,419,163,11,573,369,164,165,166,12,505,506,507,508,574,167,509,18,371,575,168,169,170,576,171,21,22,577,578,579,23,580,510,581,582,583,584,585,372,586,587,373,588,589,590,591,592,593,594,511,24,595,596,597,598,599,374,600,512,502,601,602,503,603,604,513,605,25,514,606,607,26,27,608,609,610,28,611,612,613,614,615,616,617,618,29,619,30,620,31,32,621,622,33,623,624,34,625,35,626,172,627,36,37,38,39,40,41,515,628,629,630,42,631,43,632,633,634,44,45,635,46,636,637,47,516,173,48,638,174,49,175,176,375,50,639,517,466,518,344,177,178,51,640,519,52,641,467,642,468,520,179,643,53,644,180,645,521,522,523,524,376,181,525,646,526,527,647,528,648,54,529,530,531,649,532,650,651,533,652,534,377,653,469,378,654,182,470,535,536,537,55,655,656,471,538,472,539,657,56,57,58,59,60,61,2,3,379,183,184,62,185,658,540,659,63,660,661,345,380,64,346,347,381,662,382,348,186,663,664,349,665,383,384,65,350,187,359,541,666,188,360,189,66,361,67,351,190,542,352,385,473,667,68,4,474,191,192,193,194,475,195,386,69,668,362,543,387,388,70,669,670,389,363,71,671,672,673,72,674,73,196,197,675,364,676,74,677,544,476,545,477,198,546,547,199,200,478,201,202,75,203,76,77,78,79,80,81,204,82,83,84,205,85,353,206,86,207,208,209,210,211,212,479,213,480,354,355,214,215,87,88,678,89,481,482,483,90,484,91,92,485,216,5,217,218,93,390,391,94,95,679,392,219,96,548,680,681,682,549,97,683,684,393,685,98,99,100,101,102,103,104,105,106,220,221,222,223,224,225,686,687,688,107,226,227,228,108,229,230,231,232,233,234,6,235,689,109,236,550,110,690,237,551,238,552,111,239,112,113,553,240,241,242,243,691,692,114,244,115,245,246,116,247,248,249,250,118,119,120,121,122,486,554,487,488,555,489,556,557,251,252,123,124,253,254,558,125,255,256,126,127,257,258,128,693,129,694,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,365,135,136,695,696,697,394,137,395,366,138,698,699,396,700,271,139,397,701,140,141,702,490,703,142,272,143,273,274,275,144,276,145,277,278,146,147,491,704,705,148,149,356,279,280,281,282,283,367,492,559,284,285,286,287,560,288,398,706,289,290,291,292,293,294,561,707,399,400,401,402,403,708,709,404,710,405,711,712,713,406,714,715,407,295,150,296,297,298,299,151,300,301,302,303,152,304,305,562,563,493,564,716,717,306,307,565,566,567,313,495,314,315,316,317],"tindex":"7358f3e8-3f33-11e6-86ff-29ae01f47ec3","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == longSerializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextLong();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"73594209-3f33-11e6-86ff-ddeee82c8c20","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (key == null) {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl"},"failures":[568,504,7,569,0,1,161,162,570,9,571,572,10,419,163,11,573,369,164,165,166,12,505,506,507,508,574,167,509,18,371,575,168,169,170,576,171,21,22,577,578,579,23,580,510,581,582,583,584,585,372,586,587,373,588,589,590,591,592,593,594,511,24,595,596,597,598,599,374,600,512,502,601,602,503,603,604,513,605,25,514,606,607,26,27,608,609,610,28,611,612,613,614,615,616,617,618,29,619,30,620,31,32,621,622,33,623,624,34,625,35,626,172,627,36,37,38,39,40,41,515,628,629,630,42,631,43,632,633,634,44,45,635,46,636,637,47,516,173,48,638,174,49,175,176,375,50,639,517,466,518,344,177,178,51,640,519,52,641,467,642,468,520,179,643,53,644,180,645,521,522,523,524,376,181,525,646,526,527,647,528,648,54,529,530,531,649,532,650,651,533,652,534,377,653,469,378,654,182,470,535,536,537,55,655,656,471,538,472,539,657,56,57,58,59,60,61,2,3,379,183,184,62,185,658,540,659,63,660,661,345,380,64,346,347,381,662,382,348,186,663,664,349,665,383,384,65,350,187,359,541,666,188,360,189,66,361,67,351,190,542,352,385,473,667,68,4,474,191,192,193,194,475,195,386,69,668,362,543,387,388,70,669,670,389,363,71,671,672,673,72,674,73,196,197,675,364,676,74,677,544,476,545,477,198,546,547,199,200,478,201,202,75,203,76,77,78,79,80,81,204,82,83,84,205,85,353,206,86,207,208,209,210,211,212,479,213,480,354,355,214,215,87,88,678,89,481,482,483,90,484,91,92,485,216,5,217,218,93,390,391,94,95,679,392,219,96,548,680,681,682,549,97,683,684,393,685,98,99,100,101,102,103,104,105,106,220,221,222,223,224,225,686,687,688,107,226,227,228,108,229,230,231,232,233,234,6,235,689,109,236,550,110,690,237,551,238,552,111,239,112,113,553,240,241,242,243,691,692,114,244,115,245,246,116,247,248,249,250,118,119,120,121,122,486,554,487,488,555,489,556,557,251,252,123,124,253,254,558,125,255,256,126,127,257,258,128,693,129,694,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,365,135,136,695,696,697,394,137,395,366,138,698,699,396,700,271,139,397,701,140,141,702,490,703,142,272,143,273,274,275,144,276,145,277,278,146,147,491,704,705,148,149,356,279,280,281,282,283,367,492,559,284,285,286,287,560,288,398,706,289,290,291,292,293,294,561,707,399,400,401,402,403,708,709,404,710,405,711,712,713,406,714,715,407,295,150,296,297,298,299,151,300,301,302,303,152,304,305,562,563,493,564,716,717,306,307,565,566,567,313,495,314,315,316,317],"tindex":"7359691a-3f33-11e6-86ff-3f5374295ae7","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7359b73b-3f33-11e6-86ff-1b25a62f2247","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == longSerializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextLong();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7359de4c-3f33-11e6-86ff-f3dc58d8c40a","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[504,7,24,502,33,41,43,45,375,61,64,66,386,69,362,543,387,388,70,389,363,71,72,73,197,364,74,199,75,77,79,82,83,391,98,101,102,103,104,107,108,110,111,112,265,144,147,367,404,308,309,310,311,312,153,157,316],"tindex":"7359de4d-3f33-11e6-86ff-c513c0a8403e","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7359de4e-3f33-11e6-86ff-6f0bc44091e4","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735a055f-3f33-11e6-86ff-0d2362597b88","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl"},"failures":[319,718],"tindex":"735a2b70-3f33-11e6-86ff-658ebe4c56f6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735a2b71-3f33-11e6-86ff-ff3423279472","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"type","typeOfT":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735a5282-3f33-11e6-86ff-21abb94628b8","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"735a5283-3f33-11e6-86ff-85789056f67a","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"735a5284-3f33-11e6-86ff-df352dafd82a","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    return toJsonTree(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735a7995-3f33-11e6-86ff-4103a6afae86","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[568,504,7,161,162,8,358,9,571,10,163,11,369,164,165,166,12,505,506,507,326,327,370,445,446,508,574,167,509,18,371,719,720,721,412,413,722,414,723,417,575,168,169,170,576,171,21,22,577,578,579,23,580,510,581,582,583,584,585,372,586,587,373,588,589,590,591,592,593,594,511,24,595,596,597,598,599,374,600,512,502,601,602,503,603,604,513,605,25,514,606,607,26,27,608,609,610,28,611,612,613,614,615,616,617,618,29,619,30,620,31,32,621,622,33,623,624,34,625,35,626,172,627,36,37,38,39,40,41,515,628,629,630,42,631,43,632,633,634,44,45,635,46,636,637,47,516,173,48,638,174,49,175,176,375,50,639,517,466,518,177,178,640,519,641,467,468,520,179,643,644,180,645,521,522,523,524,376,181,525,646,526,527,647,528,648,54,529,530,531,532,650,651,533,652,377,653,469,378,654,182,470,535,536,537,55,655,656,471,539,657,56,57,58,59,60,61,379,183,184,62,185,658,540,659,660,661,345,380,64,346,347,381,662,382,348,186,663,664,349,665,383,384,65,350,187,359,541,666,188,360,189,66,361,67,351,190,542,352,385,473,667,68,4,474,191,192,193,194,475,195,386,69,668,362,543,387,388,70,669,670,389,363,71,671,672,673,72,674,73,196,197,675,364,676,74,677,544,476,545,477,198,546,547,199,200,478,201,202,75,203,76,77,78,79,80,81,204,82,83,84,205,85,353,206,86,207,208,209,210,211,212,479,213,480,354,355,214,215,87,88,678,89,481,482,483,90,484,91,92,485,216,5,217,218,93,390,391,94,95,679,392,219,96,680,681,682,97,683,684,393,685,98,99,100,101,102,103,104,105,106,220,221,222,223,224,225,686,687,688,107,226,227,228,108,229,230,231,232,233,234,235,689,109,236,110,237,551,238,552,111,239,112,113,553,240,241,242,243,691,114,244,115,245,246,116,247,248,249,250,117,118,119,120,121,122,486,554,487,488,555,489,556,557,251,252,123,124,253,254,125,255,256,126,127,257,258,128,129,694,259,130,131,260,261,262,263,132,264,265,266,267,268,133,269,270,134,365,135,136,695,696,697,394,137,395,366,138,698,699,396,271,139,397,701,140,141,703,142,272,143,273,274,275,144,276,145,277,278,146,147,491,705,148,149,356,279,280,281,282,283,367,492,559,284,285,286,287,560,288,398,706,289,290,291,292,293,294,707,399,400,401,402,403,708,709,404,710,405,711,712,713,406,714,715,407,295,150,296,297,298,299,151,300,301,302,303,152,304,305,562,563,493,564,716,717,306,307,565,566,567,308,309,310,311,312,313,495,314,315,316,317],"tindex":"735aa0a6-3f33-11e6-86ff-cdcc811e4e9c","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[418,724,328,0,329,332,333,334,335,1,419,420,421,422,423,424,338,339,12,425,426,427,428,429,430,431,725,726,432,433,434,727,728,729,435,436,437,13,14,438,439,440,441,15,442,443,444,370,445,446,447,448,449,450,451,452,453,454,455,456,509,18,730,731,732,19,733,457,734,20,458,735,736,737,738,739,740,741,459,460,461,462,742,463,464,465,627,173,176,466,344,51,52,467,642,468,53,469,470,471,472,2,3,63,188,66,473,4,474,191,192,193,194,475,195,476,477,199,200,478,201,202,76,353,479,480,354,355,214,215,87,88,678,89,481,482,483,90,484,91,92,485,216,5,217,218,392,96,106,220,221,222,223,224,225,117,486,487,488,489,253,254,129,130,131,260,261,262,265,266,270,490,147,491,356,492,493,494,495],"tindex":"735ac7b7-3f33-11e6-86ff-eb6ff9996a7c","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"735aeec8-3f33-11e6-86ff-9b2d15edb7e5","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"735aeec9-3f33-11e6-86ff-5b9d429d607f","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[504,7,0,1,161,162,12,505,506,507,508,167,509,18,371,171,21,22,23,510,372,373,511,24,374,512,502,503,513,25,514,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,515,42,43,44,45,46,47,516,48,49,375,50,517,466,518,51,519,52,467,468,520,53,180,521,522,523,524,376,525,526,527,528,54,529,530,531,532,533,534,377,469,378,182,470,535,536,537,55,471,538,539,56,57,58,59,60,61,2,3,379,62,540,63,380,64,381,382,186,383,384,65,359,541,188,360,189,66,361,67,190,542,385,68,4,192,194,386,69,362,543,387,388,70,389,363,71,72,73,197,364,74,544,476,545,477,198,546,547,75,76,77,78,79,80,81,82,83,84,85,86,207,208,209,210,212,479,480,215,87,88,89,481,482,90,91,92,485,5,93,390,391,94,95,392,96,548,549,97,393,98,99,100,101,102,103,104,105,106,107,226,108,231,234,6,109,550,110,551,552,111,112,113,553,241,114,115,245,116,117,118,119,120,121,122,486,554,487,488,555,489,556,557,251,252,123,124,558,125,126,127,128,129,130,131,263,132,264,133,269,134,365,135,136,394,137,395,366,138,396,139,397,140,141,490,142,143,274,144,276,145,146,147,491,148,149,279,281,367,559,284,285,287,560,288,398,289,291,292,293,294,561,399,400,401,402,403,404,405,406,407,295,150,296,297,298,299,151,302,152,562,563,493,564,306,565,566,567,308,309,310,311,312,154,313,495,314,316,317],"tindex":"735aeeca-3f33-11e6-86ff-99142664e3e2","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[416,723,417,743,561],"tindex":"735b15db-3f33-11e6-86ff-47a5d3a7996a","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338175765/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
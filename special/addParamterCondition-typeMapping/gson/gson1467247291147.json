{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":53,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":362,"com.google.gson.functional.StringTest.testStringValueDeserialization":360,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":141,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":296,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":102,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":203,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":531,"com.google.gson.MixedStreamTest.testWriteLenient":19,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":378,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":305,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":74,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":550,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":495,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":567,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":150,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":339,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":426,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":346,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":111,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":248,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":433,"com.google.gson.functional.ObjectTest.testSingletonLists":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":297,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":429,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":95,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":363,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":197,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":324,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":315,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":510,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":153,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":65,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":376,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":238,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":142,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":575,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":469,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":8,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":588,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":468,"com.google.gson.functional.EnumTest.testEnumCaseMapping":338,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":25,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":361,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":86,"com.google.gson.functional.JsonTreeTest.testToJsonTree":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":318,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":271,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":400,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":289,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":436,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":560,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":533,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":373,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":506,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":163,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":611,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":103,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":511,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":586,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":84,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":519,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":610,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":319,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":168,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":415,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":314,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":126,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":270,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":396,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":522,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":606,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":295,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":139,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":379,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":461,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":286,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":423,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":183,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":483,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":148,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":385,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":140,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":390,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":518,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":61,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":501,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":595,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":107,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":210,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":479,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":430,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":228,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":185,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":321,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":303,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":543,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":288,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":536,"com.google.gson.functional.CollectionTest.testSetDeserialization":566,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":347,"com.google.gson.functional.EnumTest.testEnumSet":329,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":505,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":592,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":131,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":184,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":276,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":456,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":512,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":245,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":144,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":30,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":155,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":583,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":156,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":100,"com.google.gson.functional.MapTest.testHashMapDeserialization":450,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":301,"com.google.gson.MixedStreamTest.testReadNulls":20,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":55,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":211,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":605,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":327,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":419,"com.google.gson.functional.MapTest.testSortedMap":472,"com.google.gson.functional.MapTest.testMapSerialization":467,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":137,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":539,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":403,"com.google.gson.functional.MapTest.testSerializeMaps":453,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":548,"com.google.gson.functional.MapTest.testComplexKeysSerialization":480,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":591,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":484,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":410,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":336,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":535,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":445,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":223,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":615,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":334,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":578,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":609,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":205,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":521,"com.google.gson.functional.MapTest.testStringKeyDeserialization":482,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":14,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":189,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":170,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":101,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":350,"com.google.gson.functional.PrettyPrintingTest.testMap":576,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":553,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":266,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":325,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":409,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":366,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":283,"com.google.gson.functional.MapTest.testMapSerializationEmpty":481,"com.google.gson.functional.CollectionTest.testQueueSerialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":132,"com.google.gson.functional.MapTest.testMapOfMapSerialization":466,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":123,"com.google.gson.JavaSerializationTest.testMapIsSerializable":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":291,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":563,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":42,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":134,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":198,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":364,"com.google.gson.functional.FieldNamingTest.testIdentity":549,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":186,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":33,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":523,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":76,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":209,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":358,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":492,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":89,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":9,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":80,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":365,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":129,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":307,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":278,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":317,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":447,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":166,"com.google.gson.functional.MapTest.testMapSubclassSerialization":452,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":255,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":341,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":594,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":17,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":63,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":352,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":265,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":380,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":323,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":244,"com.google.gson.functional.EnumTest.testEnumSubclass":332,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":143,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":508,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":88,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":79,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":602,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":149,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":218,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":91,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":491,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":127,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":490,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":226,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":399,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":600,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":133,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":504,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":125,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":310,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":494,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":449,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":398,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":383,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":392,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":241,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":534,"com.google.gson.CommentsTest.testParseComments":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":439,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":496,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":146,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":405,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":538,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":368,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":471,"com.google.gson.MixedStreamTest.testReadInvalidState":16,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":253,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":312,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":540,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":607,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":99,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":411,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":13,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":43,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":116,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":40,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":293,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":395,"com.google.gson.functional.MapTest.testMapDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":287,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":581,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":448,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":432,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":235,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":458,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":438,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":434,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":224,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":333,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":263,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":509,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":524,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":353,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":272,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":222,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":488,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":470,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":577,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":85,"com.google.gson.functional.PrimitiveTest.testShortSerialization":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":441,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":152,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":590,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":122,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":151,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":277,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":545,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":331,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":552,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":340,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":454,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":172,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":573,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":304,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":446,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":179,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":173,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":187,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":234,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":525,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":258,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":158,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":425,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":128,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":190,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":529,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":500,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":273,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":561,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":191,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":294,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":440,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":280,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":422,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":299,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":231,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":159,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":130,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":176,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":49,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":330,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":437,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":59,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":541,"com.google.gson.functional.MapTest.testGeneralMapField":476,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":498,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":178,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":81,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":349,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":306,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":474,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":259,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":414,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":154,"com.google.gson.MixedStreamTest.testReadMixedStreamed":23,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":274,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":462,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":10,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":421,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":568,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":135,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":589,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":3,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":292,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":463,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":202,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":177,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":194,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":418,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":290,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":384,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":257,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":562,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":200,"com.google.gson.functional.ObjectTest.testNestedDeserialization":530,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":239,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":516,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":56,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":225,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":45,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":204,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":367,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":464,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":243,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":214,"com.google.gson.JavaSerializationTest.testListIsSerializable":5,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":78,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":382,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":571,"com.google.gson.functional.ObjectTest.testNullSerialization":618,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":217,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":201,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":455,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":475,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":401,"com.google.gson.functional.MapTest.testInterfaceTypeMap":473,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":351,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":230,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":93,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":335,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":612,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":260,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":585,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":109,"com.google.gson.MixedStreamTest.testWriteClosed":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":58,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":559,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":320,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":499,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":249,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":44,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":527,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":313,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":236,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":502,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":558,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":69,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":138,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":71,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":219,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":300,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":35,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":38,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":180,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":114,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":268,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":386,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":537,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":47,"com.google.gson.functional.CollectionTest.testQueueDeserialization":574,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":120,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":136,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":372,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":52,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":311,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":460,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":282,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":416,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":528,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":551,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":15,"com.google.gson.functional.MapTest.testRawMapSerialization":478,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":298,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":212,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":514,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":544,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":443,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":597,"com.google.gson.functional.PrimitiveTest.testByteSerialization":161,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":322,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":391,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":599,"com.google.gson.ObjectTypeAdapterTest.testSerialize":603,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":613,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":104,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":608,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":75,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":402,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":546,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":250,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":369,"com.google.gson.functional.MapTest.testMapWithQuotes":465,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":267,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":182,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":420,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":199,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":355,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":264,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":345,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":435,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":240,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":526,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":279,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":408,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":269,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":67,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":281,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":157,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":616,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":565,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":394,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":309,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":216,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":36,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":72,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":326,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":196,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":513,"com.google.gson.functional.ObjectTest.testNestedSerialization":515,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":50,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":108,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":375,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":413,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":417,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":477,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":542,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":424,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":11,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":21,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":32,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":507,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":232,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":284,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":26,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":262,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":517,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":66,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":374,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":397,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":82,"com.google.gson.functional.CollectionTest.testSetSerialization":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":192,"com.google.gson.functional.StringTest.testStringValueSerialization":377,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":579,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":73,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":39,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":206,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":555,"com.google.gson.MixedStreamTest.testWriteInvalidState":18,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":388,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":617,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":113,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":119,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":406,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":275,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":547,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":532,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":37,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":584,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":302,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":614,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":457,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":27,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":393},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"63626ec1-3e5b-11e6-9f55-ef31b372fc23","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6362e3f2-3e5b-11e6-9f55-e5e1154ebb1e","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"6362e3f3-3e5b-11e6-9f55-c54c8a537693","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src.isNumber()) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6362e3f4-3e5b-11e6-9f55-1992bd6c3f20","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"63630b05-3e5b-11e6-9f55-edea42dab388","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"63630b06-3e5b-11e6-9f55-77101ebe66d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604],"tindex":"63630b07-3e5b-11e6-9f55-89cbda1f32ef","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"63635928-3e5b-11e6-9f55-31ff87605e06","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"63635929-3e5b-11e6-9f55-d756abbb398b","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"6363803a-3e5b-11e6-9f55-2908455f0ba7","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"6363803b-3e5b-11e6-9f55-2ba1411b7da9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6363803c-3e5b-11e6-9f55-951a1807f5d2","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"6363a74d-3e5b-11e6-9f55-d93ef261eb5f","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[605,606,607,259,269,271,309],"tindex":"6363a74e-3e5b-11e6-9f55-97b3105ff0a1","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json instanceof com.google.gson.JsonObject) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6363a74f-3e5b-11e6-9f55-bbc6816f7acc","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"6363ce60-3e5b-11e6-9f55-bfb0db2bb7ca","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6363ce61-3e5b-11e6-9f55-1b3026e73eb1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[608],"tindex":"6363ce62-3e5b-11e6-9f55-f7f2faca4f93","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isAssignableFrom(cls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"cls","classOfPrimitive":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"6363ce63-3e5b-11e6-9f55-e5acd5be1625","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:735","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN))"},"failures":[],"tindex":"6363f574-3e5b-11e6-9f55-31354e8d155e","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if ((topOfStack == topOfStack) || (last == topOfStack)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN":"topOfStack","last":"topOfStack","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"6363f575-3e5b-11e6-9f55-c319f98657c7","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[609,381],"tindex":"6363f576-3e5b-11e6-9f55-059a699e890d","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6363f577-3e5b-11e6-9f55-011f283ff089","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"63641c88-3e5b-11e6-9f55-d760877dc642","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"63641c89-3e5b-11e6-9f55-096ef9c4d543","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"63641c8a-3e5b-11e6-9f55-97c9eddb7f63","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"delta == (-2)"},"failures":[305,309],"tindex":"63641c8b-3e5b-11e6-9f55-3d139e8dbf8f","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == (-2)) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"63641c8c-3e5b-11e6-9f55-d7584fafe2a7","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"63646aad-3e5b-11e6-9f55-61e1ff3809d5","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"636491be-3e5b-11e6-9f55-d94914b32fec","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,1,2,7,8,9,10,11,610,611,25,26,33,34,36,38,39,40,41,42,43,44,45,46,49,50,51,52,54,57,60,61,62,612,63,64,67,68,71,73,613,614,79,80,81,83,84,88,90,96,99,107,108,114,116,117,120,123,125,126,129,130,134,143,145,147,148,151,154,156,160,161,162,163,164,165,166,170,172,176,177,179,182,184,188,189,190,192,193,194,196,198,199,200,202,203,205,207,209,210,211,212,213,214,215,216,217,220,222,228,229,230,235,236,238,239,240,242,243,244,245,246,247,249,250,251,253,256,258,259,260,264,266,267,269,271,272,275,277,279,280,281,282,283,285,287,288,290,292,293,294,295,297,300,302,303,305,306,308,309,310,311,312,313,316,317,319,322,324,615,616,328,329,330,331,332,335,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,357,361,362,363,364,365,368,370,374,377,386,387,389,390,391,392,393,396,397,398,402,404,406,408,410,412,413,414,415,416,417,418,419,422,423,424,426,429,431,434,436,437,438,440,441,442,443,445,448,452,453,456,458,460,465,466,467,470,471,473,474,475,476,477,478,480,481,483,486,487,488,491,492,493,496,499,502,617,505,618,507,509,511,512,514,515,516,518,522,524,525,527,532,533,534,535,537,540,542,545,546,547,548,549,550,551,552,553,557,558,559,560,561,564,567,568,570,571,573,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,593,595,600,601],"tindex":"636491bf-3e5b-11e6-9f55-2f27d9d9c044","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6364b8d0-3e5b-11e6-9f55-d9f31be236e9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"6364b8d1-3e5b-11e6-9f55-9740a11d7db8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[608],"tindex":"6364dfe2-3e5b-11e6-9f55-8391a7924738","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:906","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"6364dfe3-3e5b-11e6-9f55-e900d533e3cf","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_LONG":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"6364dfe4-3e5b-11e6-9f55-8f49266ada00","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.Character) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246624223/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":36,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
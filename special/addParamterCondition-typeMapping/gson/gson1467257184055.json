{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":168,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":639,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":242,"com.google.gson.functional.StringTest.testStringValueDeserialization":637,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":63,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":661,"com.google.gson.stream.JsonWriterTest.testRepeatedName":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":478,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":13,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":130,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":52,"com.google.gson.MixedStreamTest.testWriteLenient":383,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":621,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":656,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":41,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":35,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":39,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":99,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":524,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":411,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":587,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":149,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":486,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":26,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":74,"com.google.gson.functional.ObjectTest.testSingletonLists":97,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":615,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":472,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":640,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":234,"com.google.gson.stream.JsonWriterTest.testStrings":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":434,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":9,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":628,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":112,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":401,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":526,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":211,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":282,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":652,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":516,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":315,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":58,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":393,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":464,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":566,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":452,"com.google.gson.functional.EnumTest.testEnumCaseMapping":410,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":385,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":638,"com.google.gson.functional.JsonTreeTest.testToJsonTree":199,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":463,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":662,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":94,"com.google.gson.stream.JsonWriterTest.testNulls":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":600,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":279,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":581,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":612,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":459,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":335,"com.google.gson.functional.ObjectTest.testNullDeserialization":658,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":137,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":649,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":109,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":535,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":479,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":564,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":68,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":119,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":245,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":659,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":70,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":539,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":538,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":627,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":280,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":521,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":500,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":660,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":121,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":380,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":498,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":53,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":448,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":513,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":609,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":296,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":45,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":272,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":439,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":514,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":118,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":366,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":7,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":105,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":219,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":318,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":18,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":454,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":483,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":191,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":24,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":429,"com.google.gson.stream.JsonWriterTest.testEmptyArray":301,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":403,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":287,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":572,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":611,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":140,"com.google.gson.functional.CollectionTest.testSetDeserialization":38,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":150,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":108,"com.google.gson.functional.EnumTest.testEnumSet":324,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":589,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":505,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":340,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":228,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":603,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":113,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":23,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":518,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":154,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":314,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":528,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":10,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":561,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":529,"com.google.gson.functional.MapTest.testHashMapDeserialization":442,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":476,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":619,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":574,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":248,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":192,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":407,"com.google.gson.functional.MapTest.testSortedMap":453,"com.google.gson.functional.MapTest.testMapSerialization":266,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":169,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":158,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":511,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":583,"com.google.gson.functional.MapTest.testSerializeMaps":261,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":291,"com.google.gson.functional.MapTest.testComplexKeysSerialization":62,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":588,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":295,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":456,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":375,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":12,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":139,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":417,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":409,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":156,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":554,"com.google.gson.functional.MapTest.testStringKeyDeserialization":455,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":230,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":584,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":256,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":541,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":273,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":482,"com.google.gson.functional.PrettyPrintingTest.testMap":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":477,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":557,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":331,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":171,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":598,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":281,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":400,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":585,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":643,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":646,"com.google.gson.functional.CollectionTest.testQueueSerialization":332,"com.google.gson.functional.MapTest.testMapSerializationEmpty":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":379,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":506,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":244,"com.google.gson.functional.MapTest.testMapOfMapSerialization":265,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":497,"com.google.gson.JavaSerializationTest.testMapIsSerializable":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":613,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":423,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":236,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":146,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":435,"com.google.gson.functional.FieldNamingTest.testIdentity":220,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":430,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":174,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":308,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":122,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":17,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":96,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":198,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":390,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":303,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":466,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":394,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":391,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":642,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":132,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":622,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":604,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":608,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":440,"com.google.gson.functional.MapTest.testMapSubclassSerialization":260,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":537,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":32,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":164,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":591,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":151,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":223,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":495,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":632,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":597,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":8,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":22,"com.google.gson.functional.EnumTest.testEnumSubclass":327,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":517,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":111,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":402,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":465,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":64,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":523,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":468,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":134,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":501,"com.google.gson.stream.JsonWriterTest.testTwoNames":235,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":133,"com.google.gson.stream.JsonWriterTest.testNullName":306,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":83,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":580,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":507,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":551,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":16,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":311,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":499,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":624,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":98,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":441,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":372,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":307,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":437,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":368,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":20,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":138,"com.google.gson.CommentsTest.testParseComments":655,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":77,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":257,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":180,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":520,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":571,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":268,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":382,"com.google.gson.MixedStreamTest.testReadInvalidState":654,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":31,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":626,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":159,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":299,"com.google.gson.JsonParserTest.testParseMixedArray":300,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":475,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":294,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":586,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":182,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":491,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":144,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":614,"com.google.gson.functional.MapTest.testMapDeserialization":447,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":610,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":361,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":341,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":73,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":92,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":263,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":76,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":345,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":418,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":197,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":203,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":123,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":552,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":250,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":559,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":601,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":30,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":131,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":255,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":155,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":267,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":629,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":433,"com.google.gson.functional.PrimitiveTest.testShortSerialization":536,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":525,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":568,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":496,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":205,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":474,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":288,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":326,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":36,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":163,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":444,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":490,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":351,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":427,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":55,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":298,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":620,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":227,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":543,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":277,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":46,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":91,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":124,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":594,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":95,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":48,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":502,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":128,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":104,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":328,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":251,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":590,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":204,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":431,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":72,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":286,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":481,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":378,"com.google.gson.stream.JsonWriterTest.testNullStringValue":237,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":617,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":88,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":419,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":531,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":504,"com.google.gson.stream.JsonWriterTest.testEmptyObject":313,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":546,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":50,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":75,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":325,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":173,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":160,"com.google.gson.functional.MapTest.testGeneralMapField":61,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":102,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":365,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":547,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":65,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":381,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":269,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":344,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":595,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":527,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":0,"com.google.gson.MixedStreamTest.testReadMixedStreamed":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":348,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":602,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":193,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":337,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":395,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":316,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":509,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":567,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":397,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":207,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":450,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":635,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":443,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":432,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":178,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":214,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":238,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":492,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":285,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":438,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":175,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":593,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":461,"com.google.gson.functional.ObjectTest.testNestedDeserialization":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":259,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":354,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":555,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":170,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":545,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":184,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":412,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":451,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":644,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":21,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":534,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":34,"com.google.gson.JavaSerializationTest.testListIsSerializable":399,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":44,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":56,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":338,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":253,"com.google.gson.stream.JsonWriterTest.testDoubles":320,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":634,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":445,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":60,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":467,"com.google.gson.functional.MapTest.testInterfaceTypeMap":59,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":317,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":558,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":87,"com.google.gson.FieldAttributesTest.testModifiers":2,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":470,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":416,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":596,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":563,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":484,"com.google.gson.MixedStreamTest.testWriteClosed":225,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":172,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":334,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":90,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":631,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":27,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":86,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":187,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":126,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":183,"com.google.gson.stream.JsonWriterTest.testLongs":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":106,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":333,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":512,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":415,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":618,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":576,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":142,"com.google.gson.stream.JsonWriterTest.testNumbers":321,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":549,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":489,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":599,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":141,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":363,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":186,"com.google.gson.functional.CollectionTest.testQueueDeserialization":428,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":494,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":510,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":648,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":573,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":625,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":57,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":120,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":607,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":71,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":127,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":330,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":222,"com.google.gson.functional.MapTest.testRawMapSerialization":271,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":616,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":278,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":115,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":249,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":162,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":460,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":387,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":367,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":389,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":404,"com.google.gson.functional.PrimitiveTest.testByteSerialization":533,"com.google.gson.ObjectTypeAdapterTest.testSerialize":6,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":292,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":69,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":480,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":42,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":373,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":289,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":28,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":392,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":645,"com.google.gson.functional.MapTest.testMapWithQuotes":264,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":487,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":647,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":339,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":592,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":436,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":166,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":376,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":148,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":310,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":458,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":19,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":125,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":605,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":657,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":107,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":377,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":43,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":606,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":530,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":424,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":578,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":247,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":623,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":252,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":176,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":633,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":165,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":406,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":413,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":471,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":356,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":114,"com.google.gson.functional.ObjectTest.testNestedSerialization":116,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":51,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":347,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":651,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":362,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":270,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":161,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":200,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":384,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":396,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":323,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":110,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":575,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":542,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":89,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":206,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":485,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":202,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":212,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":357,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":650,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":371,"com.google.gson.functional.CollectionTest.testSetSerialization":40,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":66,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":49,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":359,"com.google.gson.functional.StringTest.testStringValueSerialization":653,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":221,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":15,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":143,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":420,"com.google.gson.MixedStreamTest.testWriteInvalidState":224,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":577,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":353,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":488,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":181,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":493,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":218,"com.google.gson.stream.JsonWriterTest.testBooleans":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":284,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":1,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":136,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":177,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":297,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":562,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":29,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":293,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":446,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":241,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":369,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":569},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"6c0353b2-3e72-11e6-a5cf-b93533b3ce38","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6c03a1d3-3e72-11e6-a5cf-6914da728cca","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"6c03c8e4-3e72-11e6-a5cf-cf47d0a3efa1","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"6c03c8e5-3e72-11e6-a5cf-6bb931a5f6b2","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"6c03c8e6-3e72-11e6-a5cf-4367571d2c7e","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other != (other[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"other","lowerBound":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[0,1],"tindex":"6c03eff7-3e72-11e6-a5cf-073fdd771963","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:506","type":"CtBinaryOperatorImpl","sourcecode":"peekStack != (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"6c03eff8-3e72-11e6-a5cf-b7aa9b0c784e","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index != index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"6c03eff9-3e72-11e6-a5cf-51ee02b4fe67","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:958","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[2],"tindex":"6c04170a-3e72-11e6-a5cf-775a5b9978db","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"modifier"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"6c043e1b-3e72-11e6-a5cf-0fb817349245","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"6c043e1c-3e72-11e6-a5cf-752657e66063","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c04652d-3e72-11e6-a5cf-dd9f334e9596","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"6c04652e-3e72-11e6-a5cf-1197e20f7a3d","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c048c3f-3e72-11e6-a5cf-2568e950bd1f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"6c048c40-3e72-11e6-a5cf-11e27c5b27ed","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227],"tindex":"6c048c41-3e72-11e6-a5cf-fd3e6e22355b","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[228,229,230],"tindex":"6c04b352-3e72-11e6-a5cf-e7290f339b9a","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to == to) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"to","typeOfT":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[231,232,233,3,4,5,6,234,7,235,236,237,238,239,240,241,242,243,244,245,246,9,10,11,13,14,17,18,19,247,21,22,23,24,25,27,28,29,31,33,248,249,250,251,252,253,254,255,35,36,37,39,40,47,256,48,49,257,258,259,50,51,260,261,262,263,57,264,265,266,267,268,59,269,60,61,270,271,62,272,273,63,64,67,68,69,70,71,72,75,76,78,274,79,80,85,86,87,92,93,96,97,100,103,106,108,110,113,115,116,118,121,123,124,126,131,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149,150,275,151,276,277,278,279,280,281,282,283,155,156,157,159,161,163,164,165,166,167,169,171,174,175,176,178,179,182,183,184,185,190,192,194,195,197,200,284,285,207,286,287,208,209,210,213,214,217,218,219,288,289,290,291,220,221,292,293,222,223],"tindex":"6c04b353-3e72-11e6-a5cf-9f43bbed0a42","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"6c04da64-3e72-11e6-a5cf-87d4d648005d","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[294],"tindex":"6c04da65-3e72-11e6-a5cf-47597eaee835","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[295,296,297,231,232,298,233,3,4,5,299,6,234,7,300,301,235,236,302,237,303,304,305,306,238,239,307,240,308,309,310,311,241,242,312,243,313,314,315,316,317,318,319,320,244,321,322,323,245,246,9,10,324,325,326,327,11,328,13,14,329,17,18,19,247,21,22,23,24,25,27,28,29,31,33,248,249,250,251,252,253,254,255,35,330,36,331,332,333,334,335,37,336,39,337,40,338,339,340,47,256,48,49,257,258,259,50,51,341,260,261,262,263,57,264,265,266,267,268,59,269,60,61,270,271,62,342,272,273,63,64,65,67,68,69,343,344,70,71,72,345,75,76,78,274,79,80,85,86,87,92,93,346,347,348,349,350,351,352,96,97,100,103,106,353,108,110,113,115,116,354,118,121,123,124,126,131,134,135,136,137,138,139,141,142,143,144,145,146,147,355,148,149,150,275,151,356,276,277,278,357,279,280,281,282,358,283,155,156,359,360,361,157,159,161,163,164,165,166,167,169,171,174,175,176,362,178,363,364,365,366,367,368,369,370,371,372,373,179,181,374,375,182,183,184,185,190,192,194,195,197,200,376,377,284,378,379,285,207,286,380,287,381,208,209,210,213,214,217,218,219,288,289,290,291,220,382,221,292,293,222,223,224,383,384,225,385,386],"tindex":"6c050176-3e72-11e6-a5cf-7d336183afd6","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[205],"tindex":"6c052887-3e72-11e6-a5cf-95f35b1558a4","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[387,388,389,247,41,42,390,43,44,63,391,82,83,84,88,89,94,135,168,186,187,196,197,198,199],"tindex":"6c052888-3e72-11e6-a5cf-39d3d26168fa","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src.equals(src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src","to":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"6c052889-3e72-11e6-a5cf-f535d20438f9","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b != (a[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"a","upperBound":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"6c054f9a-3e72-11e6-a5cf-e593e4913156","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n        out.beginObject();\n        out.endObject();\n        return ;\n    } \n    typeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c054f9b-3e72-11e6-a5cf-a5ab6f88b52c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"6c054f9c-3e72-11e6-a5cf-f59efcaf0690","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"6c054f9d-3e72-11e6-a5cf-2fd1ad32be38","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[0,1],"tindex":"6c0576ae-3e72-11e6-a5cf-b5112ff6d386","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"6c0576af-3e72-11e6-a5cf-a7434fb5e6aa","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[245,246,63,353,197,292,293],"tindex":"6c0576b0-3e72-11e6-a5cf-995bc716a22e","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c0576b1-3e72-11e6-a5cf-83fbdc660d0d","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[392,3,393,394,395,387,388,389,4,5,6,234,7,396,397,398,399,400,401,402,403,404,8,9,405,406,407,10,324,325,326,327,408,409,11,12,328,410,411,13,412,14,15,329,16,17,18,19,20,247,21,22,23,24,25,26,27,28,29,30,31,413,32,33,248,249,250,34,251,252,253,414,415,254,416,255,417,418,35,330,36,331,419,420,421,332,333,334,335,37,422,423,336,424,38,39,337,425,40,338,426,427,428,41,42,390,43,44,339,45,340,429,430,46,47,256,48,431,49,257,432,433,258,434,435,436,259,50,51,52,53,54,55,56,437,438,439,440,341,441,442,443,260,261,444,445,262,446,263,447,57,448,449,450,451,264,265,266,452,58,267,268,453,59,269,60,61,270,271,454,62,342,455,272,456,457,273,63,64,391,65,66,67,68,69,343,344,70,71,72,73,74,345,458,459,75,76,77,78,274,79,460,461,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,462,463,464,465,466,467,468,469,470,471,472,346,473,474,475,476,477,478,479,480,481,482,483,347,484,485,486,487,488,489,490,491,348,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,349,525,526,527,528,529,530,95,531,532,533,534,535,536,350,537,538,539,540,541,542,351,543,544,545,546,352,547,548,549,550,96,97,98,99,100,101,102,103,104,105,106,107,551,108,109,110,111,552,112,553,113,114,115,116,354,117,118,119,120,554,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,555,136,137,138,139,140,141,142,143,144,145,146,147,355,148,149,150,275,556,557,558,151,559,560,561,562,563,564,565,566,567,568,569,152,153,154,570,358,283,155,156,359,360,361,157,571,158,159,160,161,572,162,163,164,165,166,167,573,168,169,574,170,171,172,173,575,174,175,576,176,177,362,178,363,364,577,365,366,367,368,369,578,579,370,371,372,580,581,582,373,583,179,180,181,584,374,585,375,586,182,183,184,185,186,187,587,188,189,190,191,588,589,590,591,192,592,193,194,195,196,197,198,199,200,201,593,594,595,596,202,203,597,598,599,377,600,601,204,602,603,205,604,605,378,606,607,379,206,608,609,610,611,612,285,613,207,614,286,380,615,616,617,618,619,287,620,621,381,622,208,623,624,625,626,209,627,628,629,630,631,632,210,211,212,213,214,215,216,217,633,634,635,218,219,636,288,289,290,291,220,637,638,639,640,641,642,643,644,382,645,646,647,648,649,650,651,652,653,221,222,654,223,224,383,384,225,226,227,385,386,655,656],"tindex":"6c059dc2-3e72-11e6-a5cf-3b92f3238b36","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c059dc3-3e72-11e6-a5cf-a5d3803021e3","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c05c4d4-3e72-11e6-a5cf-a322adfb208b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[3,394,395,4,5,6,7,396,400,401,402,404,8,9,405,406,10,326,327,409,11,12,410,13,412,14,15,16,17,18,19,20,247,21,22,23,24,25,26,27,28,29,30,31,413,32,33,248,249,250,34,251,252,253,414,415,254,416,255,417,418,35,36,37,424,38,39,40,426,41,42,43,44,45,429,46,47,48,431,49,434,436,50,51,52,53,54,55,56,441,57,58,59,60,61,62,63,64,65,66,67,68,69,344,70,71,72,73,74,458,75,76,77,78,79,461,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,464,466,471,472,473,474,475,482,486,487,490,493,495,496,498,505,510,511,513,514,515,516,523,524,525,528,95,531,538,539,542,544,549,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,657,111,112,113,114,115,116,117,118,119,120,554,658,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,555,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,275,556,558,151,559,561,562,563,564,565,566,567,568,152,153,154,570,155,156,157,571,158,159,160,161,572,162,163,164,165,166,167,168,169,574,170,171,172,173,174,175,576,176,177,362,178,578,579,580,582,583,179,180,181,584,585,586,182,183,184,185,186,187,188,189,190,191,588,589,591,192,193,194,195,196,197,198,199,200,201,593,595,659,202,203,597,599,660,600,204,602,603,205,604,206,609,612,613,207,614,380,661,617,618,619,620,622,208,623,625,209,627,628,662,631,210,211,212,213,214,215,216,217,633,634,218,219,288,289,290,291,220,637,639,641,643,644,645,647,648,649,651,652,221,222,223,224,225,226,227],"tindex":"6c05c4d5-3e72-11e6-a5cf-75e574dffa7a","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key","rawSupertype":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"6c05c4d6-3e72-11e6-a5cf-6bd9f05a2c91","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6c05ebe7-3e72-11e6-a5cf-ed544cc63c02","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6c05ebe8-3e72-11e6-a5cf-0b37bbe0f979","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1256","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME))"},"failures":[],"tindex":"6c05ebe9-3e72-11e6-a5cf-8d57448c97fa","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum == minimum) || (p == minimum)) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"minimum","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"6c0612fa-3e72-11e6-a5cf-7f0bfb463a6f","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[],"tindex":"6c0612fb-3e72-11e6-a5cf-439ef6ccdd00","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if ((!serializeNulls) && (!serializeNulls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256501989/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serializeNulls","skipSerialize":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
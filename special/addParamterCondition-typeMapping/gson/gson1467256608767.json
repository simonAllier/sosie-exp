{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":107,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":45,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":21,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":63,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":22,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":106,"com.google.gson.functional.MapTest.testSerializeMaps":94,"com.google.gson.functional.MapTest.testComplexKeysSerialization":104,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":10,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":31,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":120,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":59,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":127,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":90,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":71,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":17,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":129,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":97,"com.google.gson.functional.ObjectTest.testSingletonLists":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":91,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":64,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":84,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":121,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":5,"com.google.gson.functional.MapTest.testRawMapSerialization":103,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":54,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":26,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":50,"com.google.gson.functional.CollectionTest.testQueueSerialization":122,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":133,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":53,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":73,"com.google.gson.functional.MapTest.testMapOfMapSerialization":99,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":47,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":34,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":131,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":125,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":14,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":65,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":77,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":8,"com.google.gson.functional.MapTest.testMapWithQuotes":98,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":62,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":87,"com.google.gson.functional.JsonTreeTest.testToJsonTree":61,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":42,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":46,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":66,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":135,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":18,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":13,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":124,"com.google.gson.functional.MapTest.testMapSubclassSerialization":93,"com.google.gson.functional.MapTest.testGeneralMapField":102,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":78,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":52,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":56,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":79,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":6,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":29,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":58,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":82,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":4,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":27,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":128,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":48,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":72,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":35,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":57,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":108,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":75,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":116,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":86,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":38,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":134,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":36,"com.google.gson.functional.ObjectTest.testNestedSerialization":115,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":9,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":19,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":81,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":88,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":85,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":119,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":89,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":37,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":105,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":7,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":74,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":113,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":110,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":24,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":43,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":132,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":67,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":40,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":69,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":76,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":118,"com.google.gson.functional.StringTest.testStringValueSerialization":70,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":28,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":51,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":30,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":101,"com.google.gson.functional.MapTest.testInterfaceTypeMap":100,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":41,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":49,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":12,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":23,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":114,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":3,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":44,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":96,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":55,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":123,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":92,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":111,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":60,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":16,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":20,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":32,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":39},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"151d09fb-3e71-11e6-9e0b-737612b6b4dc","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"151d581c-3e71-11e6-9e0b-b74087ffd1a8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"151d7f2d-3e71-11e6-9e0b-f76c15f74401","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[0],"tindex":"151d7f2e-3e71-11e6-9e0b-07fd68c7837e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"151dcd4f-3e71-11e6-9e0b-b3c17b6d409d","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:345","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY)"},"failures":[1,2],"tindex":"151df460-3e71-11e6-9e0b-89ef813fc986","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"151df461-3e71-11e6-9e0b-b5fa6a662bb5","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"151e1b72-3e71-11e6-9e0b-bff8cbc7626a","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"151e1b73-3e71-11e6-9e0b-0fb7fbba7a5a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"151e1b74-3e71-11e6-9e0b-69777e942da7","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"151e1b75-3e71-11e6-9e0b-6394c193b1a6","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"tindex":"151e4286-3e71-11e6-9e0b-3321d09747ba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:735","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN))"},"failures":[],"tindex":"151e4287-3e71-11e6-9e0b-8d6b4c1b0bcd","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (last == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_SIGN":"newTop","last":"newTop","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"151e6998-3e71-11e6-9e0b-77072f550b6b","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256318648/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":14,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
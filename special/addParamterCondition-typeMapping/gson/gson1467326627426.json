{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":241,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":369,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":525,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":150,"com.google.gson.stream.JsonWriterTest.testRepeatedName":522,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":159,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":233,"com.google.gson.MixedStreamTest.testWriteLenient":9,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":167,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":420,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":189,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":151,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":154,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":202,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":393,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":430,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":144,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":34,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":314,"com.google.gson.functional.ObjectTest.testSingletonLists":200,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":416,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":370,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":509,"com.google.gson.stream.JsonWriterTest.testStrings":527,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":281,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":215,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":338,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":99,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":519,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":138,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":363,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":115,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":58,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":500,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":504,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":348,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":57,"com.google.gson.functional.EnumTest.testEnumCaseMapping":392,"com.google.gson.GenericArrayTypeTest.testNotEquals":116,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":340,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":368,"com.google.gson.functional.JsonTreeTest.testToJsonTree":292,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":547,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":279,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":516,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":20,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":494,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":284,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":212,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":462,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":499,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":434,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":346,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":261,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":222,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":498,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":545,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":308,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":327,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":454,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":517,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":546,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":224,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":415,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":52,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":168,"com.google.gson.ParameterizedTypeTest.testNotEquals":16,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":302,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":111,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":262,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":15,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":67,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":455,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":221,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":354,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":123,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":125,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":208,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":544,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":63,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":166,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":440,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":198,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":270,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":145,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":18,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":69,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":419,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":411,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":260,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":287,"com.google.gson.functional.CollectionTest.testSetDeserialization":81,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":26,"com.google.gson.functional.EnumTest.testEnumSet":87,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":211,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":101,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":505,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":48,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":32,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":325,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":128,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":343,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":458,"com.google.gson.functional.MapTest.testHashMapDeserialization":44,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":74,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":240,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":293,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":106,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":107,"com.google.gson.functional.MapTest.testSortedMap":60,"com.google.gson.functional.MapTest.testMapSerialization":56,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":242,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":139,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":543,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":535,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":187,"com.google.gson.functional.MapTest.testSerializeMaps":385,"com.google.gson.functional.MapTest.testComplexKeysSerialization":64,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":68,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":537,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":362,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":286,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":305,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":481,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":137,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":161,"com.google.gson.functional.MapTest.testStringKeyDeserialization":66,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":474,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":466,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":70,"com.google.gson.functional.PrettyPrintingTest.testMap":364,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":489,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":390,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":399,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":337,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":518,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":374,"com.google.gson.functional.MapTest.testMapSerializationEmpty":65,"com.google.gson.functional.CollectionTest.testQueueSerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":408,"com.google.gson.functional.MapTest.testMapOfMapSerialization":387,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":446,"com.google.gson.JavaSerializationTest.testMapIsSerializable":13,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":79,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":239,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":451,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":478,"com.google.gson.functional.FieldNamingTest.testIdentity":188,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":102,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":253,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":225,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":165,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":199,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":291,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":429,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":501,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":326,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":372,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":472,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":173,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":449,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":324,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":427,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":43,"com.google.gson.functional.MapTest.testMapSubclassSerialization":384,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":465,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":41,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":194,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":311,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":380,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":169,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":280,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":31,"com.google.gson.functional.EnumTest.testEnumSubclass":90,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":452,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":214,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":436,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":264,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":541,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":300,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":175,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":332,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":531,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":174,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":268,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":323,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":98,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":164,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":447,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":423,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":201,"com.google.gson.MixedStreamTest.testWriteNulls":336,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":19,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":93,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":356,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":28,"com.google.gson.CommentsTest.testParseComments":112,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":285,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":317,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":475,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":132,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":250,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":373,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":388,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":425,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":464,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":11,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":140,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":508,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":439,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":506,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":533,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":247,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":503,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":443,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":413,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":459,"com.google.gson.functional.MapTest.testMapDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":410,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":367,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":383,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":313,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":510,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":50,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":277,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":316,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":493,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":306,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":91,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":177,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":226,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":433,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":295,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":491,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":402,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":38,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":172,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":304,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":59,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":136,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":103,"com.google.gson.functional.PrimitiveTest.testShortSerialization":463,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":495,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":350,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":179,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":184,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":89,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":152,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":193,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":46,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":467,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":170,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":321,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":122,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":511,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":470,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":514,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":163,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":263,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":276,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":395,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":513,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":234,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":265,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":231,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":207,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":92,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":297,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":394,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":487,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":331,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":21,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":312,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":414,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":334,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":405,"com.google.gson.stream.JsonWriterTest.testNullStringValue":520,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":319,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":72,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":273,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":450,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":468,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":129,"com.google.gson.JsonPrimitiveTest.testEquals":542,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":88,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":315,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":246,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":141,"com.google.gson.functional.MapTest.testGeneralMapField":149,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":205,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":353,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":131,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":258,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":488,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":421,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":396,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":438,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":484,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":457,"com.google.gson.MixedStreamTest.testReadMixedStreamed":121,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":444,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":82,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":109,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":502,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":349,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":12,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":181,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":54,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":382,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":45,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":476,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":23,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":521,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":412,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":94,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":254,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":78,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":536,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":104,"com.google.gson.functional.ObjectTest.testNestedDeserialization":232,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":377,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":435,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":267,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":347,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":249,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":55,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":160,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":30,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":461,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":296,"com.google.gson.JavaSerializationTest.testListIsSerializable":14,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":171,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":192,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":84,"com.google.gson.functional.ObjectTest.testNullSerialization":432,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":299,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":47,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":148,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":437,"com.google.gson.functional.MapTest.testInterfaceTypeMap":147,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":272,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":157,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":379,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":329,"com.google.gson.MixedStreamTest.testReadClosed":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":397,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":345,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":539,"com.google.gson.MixedStreamTest.testWriteClosed":120,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":245,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":391,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":206,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":275,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":35,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":271,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":252,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":248,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":183,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":278,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":76,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":530,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":301,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":417,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":235,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":442,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":289,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":288,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":351,"com.google.gson.functional.CollectionTest.testQueueDeserialization":86,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":251,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":445,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":333,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":471,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":424,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":146,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":223,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":407,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":230,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":309,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":71,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":117,"com.google.gson.functional.MapTest.testRawMapSerialization":389,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":96,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":515,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":218,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":294,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":143,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":496,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":113,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":355,"com.google.gson.functional.PrimitiveTest.testByteSerialization":460,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":480,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":497,"com.google.gson.ObjectTypeAdapterTest.testSerialize":322,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":485,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":307,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":532,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":190,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":529,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":360,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":538,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":36,"com.google.gson.functional.MapTest.testMapWithQuotes":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":400,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":473,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":108,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":479,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":398,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":25,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":27,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":228,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":453,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":210,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":95,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":3,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":406,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":482,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":29,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":422,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":298,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":255,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":540,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":40,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":477,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":217,"com.google.gson.functional.ObjectTest.testNestedSerialization":219,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":130,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":441,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":483,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":378,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":62,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":142,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":134,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":10,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":342,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":528,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":100,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":274,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":180,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":176,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":220,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":375,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":359,"com.google.gson.functional.CollectionTest.testSetSerialization":155,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":266,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":365,"com.google.gson.functional.StringTest.testStringValueSerialization":376,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":310,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":73,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":162,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":236,"com.google.gson.MixedStreamTest.testWriteInvalidState":119,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":431,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":133,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":403,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":186,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":283,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":256,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":418,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":486,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":49,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":524,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":17,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":357},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7],"tindex":"1b7e0c7d-3f14-11e6-a8e2-ef78e4362846","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7e81ae-3f14-11e6-a8e2-6b0d18824bfd","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"tindex":"1b7ea8bf-3f14-11e6-a8e2-e13774a6e1bc","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl"},"failures":[117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,22,138,23,139,140,141,142,143,0,1,2,3,4,5,6,7,24,25,144,26,27,28,30,31,32,145,33,34,35,36,37,38,39,41,42,146,58,147,148,149,64,150,151,152,153,81,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,97,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,107,109,110,111,322,323,324,325,326,327,328,329,330],"tindex":"1b7ecfd0-3f14-11e6-a8e2-a5881d0dfaa7","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7ef6e1-3f14-11e6-a8e2-ff03b1f505d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[331,332,333,334,335],"tindex":"1b7f1df2-3f14-11e6-a8e2-47af568b2492","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[117,118,336,119,9,10,120,337,338,339,340,341,342,123,124,125,335,343,344,345,346,347,348,349,350,129,130,351,352,353,354,355,356,357,358,359,19,360,131,133,361,362,134,363,364,136,137,365,366,367,22,368,369,370,371,372,373,374,375,376,138,377,378,23,140,142,379,380,0,3,4,7,24,381,25,144,26,27,29,30,31,32,145,33,35,36,37,39,42,382,383,384,385,48,50,146,386,387,56,59,388,147,61,148,149,62,389,64,65,67,70,150,151,71,152,390,75,76,391,77,153,80,154,82,155,84,85,156,87,88,89,90,157,92,392,393,394,159,161,163,165,166,172,175,395,396,397,398,399,400,95,401,402,403,179,404,405,406,407,408,409,410,411,412,181,413,414,415,416,417,418,419,420,421,182,422,423,424,425,183,426,427,428,184,185,186,187,188,189,190,429,191,192,193,194,97,430,197,199,200,203,206,209,431,211,432,213,433,434,216,218,219,435,221,224,226,227,229,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,235,236,237,238,239,240,471,241,242,244,247,248,249,250,251,252,253,254,255,257,472,258,260,261,473,101,264,474,265,266,475,476,477,478,479,104,267,268,269,270,271,272,273,274,277,278,279,480,281,481,482,282,283,284,285,286,288,289,290,291,292,293,294,295,297,298,299,302,304,307,483,484,308,309,310,485,486,487,488,489,490,311,491,492,312,493,494,315,316,318,495,319,496,320,107,110,111,323,324,113,114,497,498,499,325,500,501,502],"tindex":"1b7f4503-3f14-11e6-a8e2-3749c278e9ea","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if ((!htmlSafe) && (!htmlSafe)) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"htmlSafe","lenient":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1254","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7f6c14-3f14-11e6-a8e2-b1980a18803d","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if ((i == i) || (p == i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"1b7f6c15-3f14-11e6-a8e2-e7bee9e60624","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.isNumber()) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[289,290,291,292],"tindex":"1b7f9326-3f14-11e6-a8e2-e5974a6fd124","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7f9327-3f14-11e6-a8e2-bf3afb77d693","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7fba38-3f14-11e6-a8e2-d7df53721711","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7fba39-3f14-11e6-a8e2-1b4cc2ceb7e9","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b7fba3a-3f14-11e6-a8e2-8b1fba7fe519","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b7fba3b-3f14-11e6-a8e2-7d8e68614425","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[503,138,29,147,149,150,189,190,191,192,241,251,267,268,269,273,274,279,289,290,292,111,113],"tindex":"1b7fe14c-3f14-11e6-a8e2-1badb63b37d7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"1b7fe14d-3f14-11e6-a8e2-3b12ffd2d821","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter.getRawType().equals(typeAdapter.getRawType())) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter","to":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b7fe14e-3f14-11e6-a8e2-9bedb3e35283","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[340,341,504,458],"tindex":"1b80085f-3f14-11e6-a8e2-bbeec0cb0172","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializationPolicy == serializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b800860-3f14-11e6-a8e2-839306ef870c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b800861-3f14-11e6-a8e2-9715ffce39bd","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b800862-3f14-11e6-a8e2-47d70d2317a1","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[505,506,507],"tindex":"1b800863-3f14-11e6-a8e2-b1bdee992ac9","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (!(from instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[508,322,509],"tindex":"1b802f74-3f14-11e6-a8e2-2340bc9b0239","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b802f75-3f14-11e6-a8e2-99cba12c4492","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[117,118,10,337,510,340,342,123,511,512,513,124,125,343,344,345,346,347,348,349,350,129,130,351,352,355,356,358,359,360,131,361,134,364,136,137,22,368,369,370,371,372,373,374,375,376,138,377,378,23,140,142,379,514,515,516,517,518,519,0,3,4,7,24,25,144,26,27,29,30,31,32,145,33,35,36,37,39,42,382,384,385,48,50,146,386,387,56,388,147,148,149,62,389,64,67,70,150,151,71,152,75,391,77,153,80,154,82,155,85,156,87,88,89,90,157,92,392,393,394,159,161,165,166,172,175,395,396,397,399,400,95,401,402,403,404,406,407,408,409,410,411,412,181,413,414,416,417,419,420,421,422,423,424,425,183,426,428,184,185,186,187,188,193,194,97,430,197,199,200,203,206,209,211,213,216,218,219,221,224,226,227,229,438,439,442,458,235,236,237,238,239,240,242,244,247,248,249,250,253,254,255,257,260,261,473,101,264,474,265,266,475,476,477,104,270,271,272,277,278,480,281,282,283,284,285,286,288,290,293,294,295,297,298,299,302,304,307,483,484,308,309,310,485,486,487,488,489,490,311,491,312,493,315,316,318,495,319,320,107,110,111,322,509,520,521,522,523,524,525,526,527,528,323,324,498,499,325,502],"tindex":"1b802f76-3f14-11e6-a8e2-c5e3dfe274e9","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"1b805687-3f14-11e6-a8e2-89c4d140e707","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"toFind","to":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b805688-3f14-11e6-a8e2-47f283110f96","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b805689-3f14-11e6-a8e2-c9d9d00202df","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"1b807d9a-3f14-11e6-a8e2-d3f8d3163802","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[117,118,123,352,357,19,360,131,362,134,363,364,136,137,365,366,367,22,23,515,0,3,4,7,24,381,25,144,26,27,29,30,31,32,145,33,35,36,37,39,42,385,56,149,389,70,151,390,76,153,154,155,84,156,161,165,172,175,184,185,186,187,188,194,97,197,203,211,213,216,219,224,226,229,458,462,464,240,241,242,249,250,252,253,254,265,266,271,277,281,282,289,290,291,292,299,304,307,308,309,310,107,110,111,322],"tindex":"1b807d9b-3f14-11e6-a8e2-711de5cd03c6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"1b807d9c-3f14-11e6-a8e2-61b4968f9d8d","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b807d9d-3f14-11e6-a8e2-a5086b00bb8e","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b80a4ae-3f14-11e6-a8e2-2136312aca4c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b80a4af-3f14-11e6-a8e2-a93a02ae69c5","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,289,292],"tindex":"1b80cbc0-3f14-11e6-a8e2-5117b222b2c1","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1b80cbc1-3f14-11e6-a8e2-1bd4dbd635af","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl"},"failures":[],"tindex":"1b80cbc2-3f14-11e6-a8e2-5f0f26f6809b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1b80cbc3-3f14-11e6-a8e2-f56164949b55","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializationPolicy == serializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[],"tindex":"1b80f2d4-3f14-11e6-a8e2-8372ee4f536c","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325900978/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":129,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":227,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":61,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":348,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":84,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":36,"com.google.gson.functional.PrimitiveTest.testShortSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":38,"com.google.gson.stream.JsonWriterTest.testRepeatedName":81,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":252,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":108,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":309,"com.google.gson.MixedStreamTest.testWriteLenient":360,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":342,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":59,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":19,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":130,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":132,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":140,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":272,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":107,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":302,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":242,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.ObjectTest.testSingletonLists":211,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":323,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":349,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":10,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":74,"com.google.gson.stream.JsonWriterTest.testStrings":90,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":97,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":209,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":255,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":94,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":225,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":305,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":27,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":40,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":262,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":125,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":304,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":244,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":168,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":46,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":321,"com.google.gson.functional.EnumTest.testEnumCaseMapping":106,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":347,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":362,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":311,"com.google.gson.stream.JsonWriterTest.testNullStringValue":77,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":267,"com.google.gson.stream.JsonWriterTest.testNulls":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":121,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":190,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":258,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":207,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":144,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":37,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":102,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":170,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":137,"com.google.gson.functional.MapTest.testGeneralMapField":157,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":286,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":230,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":245,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":326,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":52,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":165,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":182,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":202,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":197,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":219,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":45,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":186,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":14,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":70,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":141,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":332,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":166,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":251,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":85,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":194,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":319,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":208,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":223,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":322,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":283,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":336,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":80,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":9,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":318,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":128,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":281,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":49,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":6,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":34,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":41,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":161,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":195,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":250,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":300,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":75,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":340,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":3,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":112,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":176,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":115,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":22,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":143,"com.google.gson.functional.ObjectTest.testNullSerialization":216,"com.google.gson.stream.JsonWriterTest.testDoubles":87,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":325,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":156,"com.google.gson.functional.MapTest.testInterfaceTypeMap":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":317,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":42,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":178,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":243,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":104,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":254,"com.google.gson.functional.EnumTest.testEnumSet":101,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":215,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":24,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":306,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":44,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":148,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":220,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":114,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":43,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":100,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":136,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":198,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":213,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":117,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":177,"com.google.gson.stream.JsonWriterTest.testLongs":78,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":226,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":299,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":341,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":276,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":330,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":180,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":214,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":135,"com.google.gson.functional.MapTest.testMapSerialization":153,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":278,"com.google.gson.functional.MapTest.testSerializeMaps":147,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":345,"com.google.gson.functional.MapTest.testComplexKeysSerialization":160,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":337,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":324,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":297,"com.google.gson.stream.JsonWriterTest.testNumbers":89,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":232,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":175,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":185,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":233,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":284,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":187,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":277,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":328,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":109,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":150,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":26,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":167,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":205,"com.google.gson.functional.MapTest.testRawMapSerialization":159,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":357,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":162,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":246,"com.google.gson.functional.PrettyPrintingTest.testMap":263,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":256,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":123,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":133,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":221,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":307,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":260,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":353,"com.google.gson.functional.CollectionTest.testQueueSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":314,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":174,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":86,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":96,"com.google.gson.functional.PrimitiveTest.testByteSerialization":200,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":287,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":62,"com.google.gson.ObjectTypeAdapterTest.testSerialize":73,"com.google.gson.functional.MapTest.testMapOfMapSerialization":152,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":163,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":64,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":20,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":191,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":32,"com.google.gson.functional.FieldNamingTest.testIdentity":346,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":350,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":293,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":118,"com.google.gson.functional.MapTest.testMapWithQuotes":151,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":54,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":110,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":23,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":33,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":12,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":53,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":351,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":189,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":241,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":72,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":331,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":111,"com.google.gson.functional.MapTest.testMapSubclassSerialization":146,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":269,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":193,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":310,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":247,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":333,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":364,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":113,"com.google.gson.functional.EnumTest.testEnumSubclass":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":55,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":192,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":95,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":181,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":312,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":335,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":99,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":60,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":285,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":126,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":2,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":228,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":253,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":71,"com.google.gson.functional.ObjectTest.testNestedSerialization":222,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":145,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":164,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":184,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":188,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":282,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":158,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":327,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":51,"com.google.gson.MixedStreamTest.testWriteNulls":359,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":292,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":92,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":361,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":91,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":288,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":217,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":29,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":212,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":301,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":154,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":352,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":257,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":239,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":329,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":291,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":270,"com.google.gson.functional.CollectionTest.testSetSerialization":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":28,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":266,"com.google.gson.functional.StringTest.testStringValueSerialization":355,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":356,"com.google.gson.JsonParserTest.testParseMixedArray":13,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":235,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":183,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":39,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":67,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":298,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":236,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":295,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":320,"com.google.gson.stream.JsonWriterTest.testBooleans":76,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":57,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":316,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":344,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":229,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":268,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":35,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":65,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":149,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":179,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":171,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":169,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":50,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":7,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":249,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":58,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":218,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":224,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":63,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":248,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":308,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":289},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[0,1,2,3,4],"tindex":"1a92abd9-3e59-11e6-8554-ef357802abe4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if ((!create) && (!create)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"create","deserialize":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"1a93210a-3e59-11e6-8554-c70a6ca74464","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"1a93481b-3e59-11e6-8554-67422c8aa24a","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"1a936f2c-3e59-11e6-8554-ddad3881c849","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:226","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"1a936f2d-3e59-11e6-8554-c9808ef73279","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"1a93963e-3e59-11e6-8554-0731242d9b34","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"1a93bd4f-3e59-11e6-8554-8ffdba44b88e","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.getRawType().equals(type.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:383","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"1a93e460-3e59-11e6-8554-ffa4e7773e22","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"1a940b71-3e59-11e6-8554-317105fe0516","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"1a940b72-3e59-11e6-8554-3dc9ddf237aa","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[66,67,68],"tindex":"1a943283-3e59-11e6-8554-6bbf8ec5ea13","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (!(to instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"1a943284-3e59-11e6-8554-67e07cbc6df0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[6,7,8,11,69,12,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,14,15,92,93,94,95,96,97,98,99,100,101,102,16,103,104,105,106,107,108,109,110,111,17,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,18,23,24,25,26,27,28,29,30,31,32,33,34,144,145,35,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,36,163,164,165,166,167,168,169,37,170,171,172,38,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,40,41,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,42,247,248,43,249,44,45,250,46,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,47,48,49,50,51,305,52,306,53,307,54,55,56,308,57,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,58,325,59,326,60,327,328,329,330,61,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,62,63,357,358,359,360,361,64,65,362,363],"tindex":"1a945995-3e59-11e6-8554-415dba96115b","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if ((!root) && (!root)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"root","deserialize":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[77,137,150,155,156,36,168,169,170,171,174,175,176,178,180,235,291,296,309,364],"tindex":"1a945996-3e59-11e6-8554-bb88ccf6cf10","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"1a945997-3e59-11e6-8554-5f1852bbf97d","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1236","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"1a9480a8-3e59-11e6-8554-85a912f3cf24","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == dateStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"1a94a7b9-3e59-11e6-8554-6daeb907bfde","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016547/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":17,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":112,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":106,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":173,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":60,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":10,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":100,"com.google.gson.functional.MapTest.testMapSerialization":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":155,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":5,"com.google.gson.functional.PrimitiveTest.testShortSerialization":147,"com.google.gson.functional.MapTest.testSerializeMaps":33,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":116,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":78,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":103,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":140,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":0,"com.google.gson.MixedStreamTest.testWriteLenient":45,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":56,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":113,"com.google.gson.stream.JsonWriterTest.testNumbers":178,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":6,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":97,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":98,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":19,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":36,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":11,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":31,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":61,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":150,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":120,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":161,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":176,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":34,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":149,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":43,"com.google.gson.functional.MapTest.testRawMapSerialization":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":96,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":169,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":1,"com.google.gson.functional.PrettyPrintingTest.testMap":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":70,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":99,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":125,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":171,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":69,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":156,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":74,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":3,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":162,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":26,"com.google.gson.functional.PrimitiveTest.testByteSerialization":144,"com.google.gson.ObjectTypeAdapterTest.testSerialize":41,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":4,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":174,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":58,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":46,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":35,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":7,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":165,"com.google.gson.functional.FieldNamingTest.testIdentity":117,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":55,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":88,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":109,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":24,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":21,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":105,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":121,"com.google.gson.functional.JsonTreeTest.testToJsonTree":22,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":63,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":16,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":18,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":166,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":102,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":179,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":91,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":108,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":72,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":133,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":30,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":151,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":80,"com.google.gson.functional.MapTest.testGeneralMapField":94,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":27,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":65,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":137,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":44,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":146,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":141,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":83,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":136,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":130,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":8,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":76,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":79,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":175,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":52,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":111,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":138,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":107,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":119,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":127,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":152,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":66,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":77,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":14,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":164,"com.google.gson.functional.ObjectTest.testNestedSerialization":126,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":160,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":25,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":131,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":50,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":132,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":13,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":54,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":139,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":38,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":157,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":122,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":17,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":49,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":158,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":82,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":48,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":145,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":71,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":29,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":90,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":148,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":101,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":40,"com.google.gson.functional.CollectionTest.testSetSerialization":37,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":62,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":163,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":172,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":39,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":177,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":32,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":68,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":123,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":86,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":110,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":115,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":64,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":84,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":92,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":47,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":168,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":170,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":142,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":20,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":87,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":51,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":167,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":89,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":12,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":128,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":129,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":15,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":154,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":53},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"dacb4a20-3f53-11e6-b922-f9d198e7bdcc","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if ((name.length()) == 0) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dacbbf51-3f53-11e6-b922-db74e530991b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dacbbf52-3f53-11e6-b922-77ad74fdbb24","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"dacbbf53-3f53-11e6-b922-f1571df341aa","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"dacbbf54-3f53-11e6-b922-57d096bca2f9","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[43,44,45,46,47,48,49,50,51,1,52,53,54,55,28,56,57,58,59,60,61,62,63,64,65,4,66,67,68,69,70,71,72,73,74,75,76,77,78,29,79,30,31,32,80,81,82,83,84,85,86,87,88,89,90,91,92,33,93,94,95,96,97,98,99,100,35,36,37,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,38,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,20,171,172,173,174,175,176,39,23,24,25,41,177,178,179],"tindex":"dacbe665-3f53-11e6-b922-d7e777d24295","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dacbe666-3f53-11e6-b922-d1e566e6142e","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dacc0d77-3f53-11e6-b922-2f2b40c67ada","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"dacc0d78-3f53-11e6-b922-372181e564e5","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isJsonNull()) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"dacc0d79-3f53-11e6-b922-e107dfde50d4","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dacc348a-3f53-11e6-b922-81e9ddba76b8","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dacc348b-3f53-11e6-b922-29a80c30de30","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353773154/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":12,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":631,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":11,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":421,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":73,"com.google.gson.functional.StringTest.testStringValueDeserialization":595,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":270,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":583,"com.google.gson.JsonPrimitiveTest.testDeepCopy":644,"com.google.gson.stream.JsonWriterTest.testRepeatedName":65,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":154,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":532,"com.google.gson.MixedStreamTest.testWriteLenient":92,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":449,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":651,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":400,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":13,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":300,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":310,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":514,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":560,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":412,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":428,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":209,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":545,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":2,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":658,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":491,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":507,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":635,"com.google.gson.functional.ObjectTest.testSingletonLists":274,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":397,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":422,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":541,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":328,"com.google.gson.stream.JsonWriterTest.testStrings":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":570,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":197,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":589,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":522,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":337,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":670,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":126,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":472,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":603,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":623,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":314,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":558,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":78,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":510,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":339,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":538,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":440,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":39,"com.google.gson.functional.EnumTest.testEnumCaseMapping":411,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":97,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":420,"com.google.gson.functional.JsonTreeTest.testToJsonTree":419,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":590,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":3,"com.google.gson.stream.JsonWriterTest.testNulls":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":387,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":123,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":676,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":581,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":429,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":51,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":307,"com.google.gson.functional.ObjectTest.testNullDeserialization":616,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":291,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":459,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":601,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":520,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":640,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":96,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":371,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":433,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":657,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":52,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":438,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":137,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":525,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":95,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":407,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":233,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":565,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":564,"com.google.gson.JsonParserTest.testParseString":46,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":124,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":358,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":576,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":222,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":286,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":192,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":551,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":450,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":448,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":580,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":33,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":330,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":478,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":268,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":365,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":556,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":218,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":285,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":81,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":117,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":322,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":518,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":647,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":40,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":158,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":352,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":505,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":167,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":177,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":535,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":17,"com.google.gson.stream.JsonWriterTest.testEmptyArray":55,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":671,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":683,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":193,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":395,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":466,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":136,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":533,"com.google.gson.functional.CollectionTest.testSetDeserialization":534,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":210,"com.google.gson.functional.EnumTest.testEnumSet":199,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":279,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":620,"com.google.gson.JsonStreamParserTest.testIterator":632,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":552,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":146,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":578,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":281,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":88,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":176,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":468,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":77,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":562,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":198,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":435,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":585,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":345,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":536,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":159,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":625,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":237,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":672,"com.google.gson.functional.MapTest.testSortedMap":682,"com.google.gson.functional.MapTest.testMapSerialization":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":114,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":461,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":456,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":554,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":608,"com.google.gson.functional.MapTest.testSerializeMaps":251,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":298,"com.google.gson.functional.MapTest.testComplexKeysSerialization":266,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":619,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":329,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":454,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":293,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":499,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":248,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":665,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":486,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":409,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":594,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":317,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":659,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":155,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":615,"com.google.gson.functional.MapTest.testStringKeyDeserialization":41,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":148,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":374,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":269,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":544,"com.google.gson.functional.PrettyPrintingTest.testMap":315,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":414,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":385,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":592,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":125,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":336,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":610,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":425,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":596,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":188,"com.google.gson.functional.MapTest.testMapSerializationEmpty":267,"com.google.gson.functional.CollectionTest.testQueueSerialization":304,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":82,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":84,"com.google.gson.functional.MapTest.testMapOfMapSerialization":256,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":356,"com.google.gson.JavaSerializationTest.testMapIsSerializable":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":582,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":688,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":57,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":106,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":378,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":654,"com.google.gson.functional.FieldNamingTest.testIdentity":299,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":423,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":18,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":68,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":99,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":527,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":31,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":157,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":273,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":347,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":60,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":539,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":340,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":348,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":424,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":359,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":587,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":579,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":406,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":678,"com.google.gson.functional.MapTest.testMapSubclassSerialization":250,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":373,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":28,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":493,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":621,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":212,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":346,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":549,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":574,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":498,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":175,"com.google.gson.functional.EnumTest.testEnumSubclass":202,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":362,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":338,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":521,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":349,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":134,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":559,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":483,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":272,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":69,"com.google.gson.stream.JsonWriterTest.testTwoNames":56,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":512,"com.google.gson.stream.JsonWriterTest.testNullName":63,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":20,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":324,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":606,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":54,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":684,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":71,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":357,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":481,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":402,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":513,"com.google.gson.MixedStreamTest.testWriteNulls":343,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":613,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":224,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":66,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":674,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":220,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":292,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":490,"com.google.gson.CommentsTest.testParseComments":691,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":151,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":275,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":508,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":110,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":500,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":455,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":214,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":259,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":182,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":404,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":42,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":326,"com.google.gson.JsonParserTest.testParseMixedArray":323,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":628,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":351,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":696,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":611,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":107,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":655,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":354,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":104,"com.google.gson.JsonArrayTest.testRemove":650,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":396,"com.google.gson.functional.MapTest.testMapDeserialization":37,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":394,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":320,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":249,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":463,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":506,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":170,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":253,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":244,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":12,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":487,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":213,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":673,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":495,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":287,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":432,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":161,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":388,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":492,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":660,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":166,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":271,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":258,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":316,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":405,"com.google.gson.functional.PrimitiveTest.testShortSerialization":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":634,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":561,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":442,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":652,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":550,"com.google.gson.JsonParserTest.testParseEmptyString":637,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":664,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":543,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":295,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":201,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":53,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":302,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":50,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":205,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":35,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":143,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":434,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":32,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":626,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":334,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":586,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":332,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":465,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":376,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":120,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":156,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":479,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":489,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":127,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":382,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":641,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":477,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":502,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":149,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":530,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":517,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":204,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":162,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":443,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":496,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":569,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":191,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":187,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":238,"com.google.gson.stream.JsonWriterTest.testNullStringValue":59,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":584,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":22,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":685,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":563,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":360,"com.google.gson.JsonArrayTest.testSet":648,"com.google.gson.stream.JsonWriterTest.testEmptyObject":76,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":375,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":111,"com.google.gson.JsonPrimitiveTest.testEquals":643,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":200,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":447,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":43,"com.google.gson.functional.MapTest.testGeneralMapField":263,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":516,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":217,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":135,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":226,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":413,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":194,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":261,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":138,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":383,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":366,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":48,"com.google.gson.MixedStreamTest.testReadMixedStreamed":464,"com.google.gson.JsonObjectTest.testDeepCopy":6,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":577,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":656,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":680,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":311,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":341,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":501,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":79,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":504,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":441,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":653,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":666,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":190,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":38,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":380,"com.google.gson.JsonArrayTest.testDeepCopy":649,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":377,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":236,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":129,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":64,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":189,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":675,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":642,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":693,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":573,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":687,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":153,"com.google.gson.functional.ObjectTest.testNestedDeserialization":531,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":284,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":470,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":439,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":109,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":572,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":597,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":638,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":681,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":174,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":370,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":482,"com.google.gson.JavaSerializationTest.testListIsSerializable":668,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":452,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":313,"com.google.gson.functional.ObjectTest.testNullSerialization":431,"com.google.gson.stream.JsonWriterTest.testDoubles":83,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":164,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":571,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":36,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":262,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":350,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":80,"com.google.gson.functional.MapTest.testInterfaceTypeMap":260,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":607,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":415,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":169,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":446,"com.google.gson.FieldAttributesTest.testModifiers":662,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":119,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":203,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":384,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":437,"com.google.gson.MixedStreamTest.testWriteClosed":94,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":306,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":471,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":276,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":591,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":179,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":168,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":10,"com.google.gson.stream.JsonWriterTest.testLongs":61,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":289,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":196,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":171,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":277,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":305,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":474,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":692,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":484,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":309,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":460,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":624,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":661,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":398,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":8,"com.google.gson.stream.JsonWriterTest.testNumbers":85,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":102,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":568,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":646,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":353,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":575,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":294,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":9,"com.google.gson.functional.CollectionTest.testQueueDeserialization":690,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":355,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":553,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":600,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":695,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":403,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":475,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":254,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":526,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":392,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":234,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":529,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":301,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":89,"com.google.gson.functional.MapTest.testRawMapSerialization":265,"com.google.gson.JsonParserTest.testParseReader":45,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":689,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":121,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":160,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":282,"com.google.gson.JsonPrimitiveTest.testExponential":645,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":458,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":430,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":47,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":219,"com.google.gson.functional.PrimitiveTest.testByteSerialization":369,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":408,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":445,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":132,"com.google.gson.ObjectTypeAdapterTest.testSerialize":327,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":230,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":462,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":14,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":225,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":296,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":180,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":598,"com.google.gson.functional.MapTest.testMapWithQuotes":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":386,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":546,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":599,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":145,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":677,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":379,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":184,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":208,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":70,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":453,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":172,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":528,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":321,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":390,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":614,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":228,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":185,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":15,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":391,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":410,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":617,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":604,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":173,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":401,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":163,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":101,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":537,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":29,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":593,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":26,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":540,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":152,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":523,"com.google.gson.JsonObjectTest.testAddingStringProperties":7,"com.google.gson.functional.ObjectTest.testNestedSerialization":283,"com.google.gson.internal.LinkedTreeMapTest.testClear":663,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":112,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":139,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":231,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":602,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":235,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":264,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":44,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":239,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":636,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":93,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":342,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":87,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":280,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":669,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":566,"com.google.gson.JsonPrimitiveTest.testBoolean":639,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":497,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":494,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":524,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":122,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":426,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":223,"com.google.gson.functional.CollectionTest.testSetSerialization":312,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":476,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":150,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":318,"com.google.gson.functional.StringTest.testStringValueSerialization":427,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":131,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":103,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":480,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":686,"com.google.gson.MixedStreamTest.testWriteInvalidState":91,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":278,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":227,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":548,"com.google.gson.stream.JsonWriterTest.testBooleans":58,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":186,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":49,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":297,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":290,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":1,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":469,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":630,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":436,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":694,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":399,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":133,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":679,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":72,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":221},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"276a7ae7-3e34-11e6-ab3b-d319fa04d7be","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"276af018-3e34-11e6-ab3b-033e16258bf8","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == array) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"array","java.sql.Timestamp.class":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276b1729-3e34-11e6-ab3b-d964b958197d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"276b3e3a-3e34-11e6-ab3b-312916045b52","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276b3e3b-3e34-11e6-ab3b-eda538629aa0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"276b8c5c-3e34-11e6-ab3b-85435c154b81","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType == keyType) {\n        {\n            if (keyType == keyType) {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"keyType","java.util.Date.class":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"276bb36d-3e34-11e6-ab3b-d1c1d2015d27","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"276bda7e-3e34-11e6-ab3b-b92a70721426","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if ((key != null) && (((key == key) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key","value":"key","java.lang.Object.class":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,25,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,28,29,206,207,208,209,210,211,212,30,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,33,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,42,44,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335],"tindex":"276bda7f-3e34-11e6-ab3b-198c2112bf23","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"276c0190-3e34-11e6-ab3b-61665928cce9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"276c0191-3e34-11e6-ab3b-bb2fd57400c8","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"276c28a2-3e34-11e6-ab3b-6d65dd3a345d","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            if (o instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"276c28a3-3e34-11e6-ab3b-03f26e91aeca","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[131,206,208,209,210,217,226,251,280,301,308,310,312,326,327,328],"tindex":"276c28a4-3e34-11e6-ab3b-1d9f50c7adde","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof com.google.gson.JsonNull) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"276c4fb5-3e34-11e6-ab3b-497397613ec9","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof com.google.gson.JsonNull) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276c4fb6-3e34-11e6-ab3b-1948f52a21fb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[336,337,338,88,339,340,341,342,89,90,343,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,9,10,111,112,113,344,11,114,115,116,117,345,119,346,127,128,129,130,131,132,133,13,14,347,15,16,134,348,135,136,137,349,350,138,351,352,139,353,354,140,355,356,357,358,359,360,361,362,363,364,365,141,366,367,368,369,370,371,372,142,373,374,143,375,144,376,145,146,147,148,149,150,151,377,152,378,379,153,380,154,155,156,157,158,159,160,161,162,163,164,165,166,19,20,21,167,168,169,22,23,170,171,24,25,381,172,173,174,175,176,177,178,179,180,181,182,183,382,383,384,184,385,386,185,387,388,186,389,390,187,391,392,188,393,394,395,189,190,396,191,192,397,398,399,193,400,194,195,401,402,403,404,196,405,406,407,408,197,409,410,198,199,200,201,202,203,204,411,412,205,28,29,206,207,208,209,210,211,413,414,415,212,416,417,30,418,213,31,419,420,421,422,423,424,214,425,426,427,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,33,239,428,240,241,242,429,243,244,245,246,247,430,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,431,280,432,433,281,282,283,284,285,286,287,288,289,290,291,292,293,294,42,44,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,434,314,315,316,317,318,319,320,321,435,436,437,438,439,440,441,442,443,322,47,444,445,324,325],"tindex":"276c76c7-3e34-11e6-ab3b-75ae69c4fbd9","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"276c9dd8-3e34-11e6-ab3b-613808ddc002","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276c9dd9-3e34-11e6-ab3b-09639f58f5f5","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"276c9dda-3e34-11e6-ab3b-ad8898d801ec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,95,1,2,3,4,5,6,7,96,446,8,9,10,11,447,448,132,133,13,14,15,16,348,17,147,148,149,152,19,20,21,22,23,24,25,173,26,27,186,197,30,418,213,31,419,449,450,451,32,452,237,238,33,453,246,454,270,455,456,42,43,44,457,458,45,46,322,47,332,333,335,459,460,461],"tindex":"276cc4eb-3e34-11e6-ab3b-17bc016fd67e","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property != null) {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1170","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,336,337,338,88,340,341,342,89,90,343,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,344,114,115,116,117,345,118,119,120,121,122,123,124,125,126,346,127,128,129,130,131,132,133,134,135,136,137,349,138,351,139,353,140,355,357,359,360,361,362,363,364,365,141,366,367,368,369,370,371,372,142,374,143,375,144,376,145,146,147,148,149,150,151,377,152,378,379,153,380,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,25,381,172,173,174,175,176,177,178,179,180,181,182,183,382,383,384,184,385,386,185,387,388,186,389,390,187,391,392,188,393,394,395,189,190,396,191,192,397,398,399,193,400,194,195,401,402,403,404,196,405,406,407,408,197,409,410,198,199,200,201,202,203,204,411,412,205,28,29,206,207,208,209,210,211,413,414,415,212,416,30,213,420,421,422,423,424,214,425,426,427,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,33,239,428,240,241,242,429,243,244,245,246,247,430,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,431,280,432,433,281,282,283,284,285,286,287,288,289,290,291,292,293,294,42,44,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,434,314,315,316,317,318,319,320,321,435,436,437,438,439,440,441,442,443,322,323,462,463,324,325,326,327,328,329,330,331,332,333,334,335],"tindex":"276cebfc-3e34-11e6-ab3b-e52c9e7139c9","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (topOfStack == topOfStack) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int[][((int) - 1)] = topOfStack;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_NONE":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"276d130d-3e34-11e6-ab3b-e37ead531f87","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == timeStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"timeStyle","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[],"tindex":"276d130e-3e34-11e6-ab3b-832876bd3aad","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == value) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"value","o":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[88,89,90,91,94,464,465,466,467,468,99,100,101,469,102,103,104,105,106,107,108,109,110,9,10,111,112,113,11,114,470,115,471,447,116,117,127,472,473,128,129,474,475,130,131,13,14,15,16,134,135,476,136,137,477,478,479,147,149,150,154,155,480,481,157,158,159,160,161,482,162,163,164,483,484,165,485,166,486,487,19,20,21,167,168,169,22,23,488,489,170,171,24,25,172,490,174,175,176,177,178,491,179,180,181,492,182,493,183,494,495,496,389,497,190,195,196,498,197,198,203,499,205,28,29,206,208,209,210,212,30,418,213,31,419,449,450,451,32,452,226,500,227,230,233,234,236,237,501,238,33,239,502,503,504,240,505,241,506,507,243,244,508,245,247,248,509,254,510,260,262,263,266,270,271,511,512,272,273,274,513,514,275,515,516,276,517,518,277,519,279,520,280,521,522,281,523,282,283,524,285,525,526,286,527,287,288,528,289,529,530,531,532,290,291,292,293,533,294,456,42,43,44,458,295,296,297,298,299,300,302,308,534,310,312,316,317,321,322,324,325,327],"tindex":"276d3a1f-3e34-11e6-ab3b-01a8e4a67689","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[88,89,90,91,94,464,465,466,467,468,99,100,101,469,102,103,104,105,106,107,108,109,110,9,10,111,112,113,11,114,470,115,471,447,116,117,127,472,473,128,129,474,475,130,131,13,14,15,16,134,135,476,136,137,477,478,479,147,149,150,154,155,480,481,157,158,159,160,161,482,162,163,164,483,484,165,485,166,486,487,19,20,21,167,168,169,22,23,488,489,170,171,24,25,172,490,174,175,176,177,178,491,179,180,181,492,182,26,493,183,494,495,496,389,497,190,195,196,498,197,198,203,499,205,28,29,206,208,209,210,212,30,418,213,31,419,449,450,451,32,452,226,500,227,230,233,234,236,237,501,238,33,239,502,503,504,240,505,241,506,507,243,244,508,245,247,248,509,254,510,260,262,263,266,270,271,511,512,272,273,274,513,514,275,515,516,276,517,518,277,519,279,520,280,521,522,281,523,282,283,524,285,525,526,286,527,287,288,528,289,529,530,531,532,290,291,292,293,533,294,456,42,43,44,458,295,296,297,298,299,300,302,308,534,310,312,316,317,321,322,324,325,327],"tindex":"276d3a20-3e34-11e6-ab3b-81d3f90374e8","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[336,337,338,88,340,341,342,89,90,91,94,464,465,466,467,468,535,99,100,8,101,469,102,103,104,105,106,107,108,109,110,9,10,111,112,113,11,114,536,470,115,471,447,116,117,127,472,473,128,129,474,475,130,537,131,13,14,15,16,134,135,476,136,137,538,539,540,541,542,543,351,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,477,563,564,565,566,567,568,478,17,479,147,149,569,150,570,379,571,154,572,155,480,481,157,158,159,160,161,482,162,163,164,483,484,165,485,166,486,487,19,20,21,167,168,169,22,23,488,489,170,171,24,25,381,172,490,173,174,175,176,177,178,491,179,180,181,492,182,26,493,183,573,383,27,494,495,574,575,576,387,496,577,578,389,579,497,580,581,582,190,396,192,583,584,398,585,586,587,195,401,403,196,588,589,590,591,408,498,197,592,593,198,201,202,594,203,499,411,205,28,29,206,208,209,210,211,413,415,212,416,30,418,213,31,419,595,421,423,596,597,598,599,600,601,602,603,449,450,451,32,452,604,605,606,607,608,226,500,227,609,610,611,230,232,233,234,235,236,237,501,238,33,239,502,503,504,240,505,241,506,507,453,243,244,508,245,247,612,248,509,613,254,510,260,262,263,266,270,271,511,512,272,273,274,513,514,275,515,516,276,517,518,277,519,279,520,280,614,521,522,281,523,282,283,524,285,525,526,615,616,286,527,287,288,528,289,529,530,531,532,290,291,292,293,533,294,455,456,42,43,44,457,458,295,296,297,298,299,300,302,308,617,534,310,312,618,316,317,321,435,436,437,438,439,440,441,442,619,620,621,322,324,325,327],"tindex":"276d6131-3e34-11e6-ab3b-531fb0654b68","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[343,622,623,624,625,626,627,628,0,95,4,5,6,7,96,629,630,631,632,633,8,9,10,11,447,448,132,133,13,14,347,15,16,348,145,146,18,147,151,377,634,570,153,19,20,21,22,23,24,25,381,173,26,383,386,185,387,400,401,405,590,408,197,201,413,415,30,418,213,31,419,449,450,451,32,452,237,238,33,239,453,260,263,454,270,455,456,42,43,44,457,458,434,435,437,438,440,635,45,46,322,636,323,637,638,639,463,640,641,642,643,644,645,646,647,47,444,445,648,649,650,651,329,330,331,652,653,654,655,332,333,334,335,656,460,657,658,659,660,661],"tindex":"276d8842-3e34-11e6-ab3b-fbb7c9bd2829","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target == null) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"276d8843-3e34-11e6-ab3b-434cc3e7daae","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (jsonElement instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"276daf54-3e34-11e6-ab3b-613449e7f9c4","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"276daf55-3e34-11e6-ab3b-456580345895","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (topOfStack == topOfStack) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int[][((int) - 1)] = topOfStack;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"topOfStack","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[330,652],"tindex":"276daf56-3e34-11e6-ab3b-5b18a540d412","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"276daf57-3e34-11e6-ab3b-6fd629a66460","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[662],"tindex":"276dd668-3e34-11e6-ab3b-274faa871184","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"modifier"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276dd669-3e34-11e6-ab3b-79493d15c882","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[389],"tindex":"276dd66a-3e34-11e6-ab3b-1baec24118ac","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[113,11,114,536,447],"tindex":"276dd66b-3e34-11e6-ab3b-71e4e75eb935","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1249","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[],"tindex":"276dd66c-3e34-11e6-ab3b-13320264a6ad","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[11,447,25,197,418,213,31,419,451,32,618,322,49,50,663,51,664,54,665],"tindex":"276dfd7d-3e34-11e6-ab3b-b5f1af0029ec","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"276dfd7e-3e34-11e6-ab3b-7f9525acc1e8","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            if (o instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"276dfd7f-3e34-11e6-ab3b-d16904f11e9f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"276e2490-3e34-11e6-ab3b-01d3595fbcbb","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276e2491-3e34-11e6-ab3b-6bd448a73eb9","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"276e2492-3e34-11e6-ab3b-c918b21fd19a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"276e2493-3e34-11e6-ab3b-d327d9751459","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (jsonElement instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"276e4ba4-3e34-11e6-ab3b-317a28a2d270","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        {\n            if (o instanceof java.util.Iterator) {\n                {\n                    if (o instanceof java.util.Map.Entry) {\n                        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276e4ba5-3e34-11e6-ab3b-6de975313878","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[],"tindex":"276e4ba6-3e34-11e6-ab3b-3fd3e4347d62","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == key) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"key","o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[389],"tindex":"276e4ba7-3e34-11e6-ab3b-29ffdb3ea683","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276e72b8-3e34-11e6-ab3b-89fe79b9ba0f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"276e72b9-3e34-11e6-ab3b-3fd20241b901","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance.peek()) == instance) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"instance","com.google.gson.stream.JsonToken.NULL":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[666,667,668,92,93,466,669,102,103,104,105,106,107,108,109,110,9,10,111,112,116,117,13,14,15,16,134,476,137,138,670,478,146,18,147,634,153,154,155,480,481,157,158,159,160,161,482,162,163,164,483,484,486,487,20,168,22,488,489,170,24,172,174,175,176,179,180,181,182,183,494,495,185,389,497,190,194,196,671,672,199,200,201,202,673,204,28,29,206,207,208,209,210,212,30,213,674,675,224,676,236,237,677,501,238,33,239,502,241,243,244,248,678,34,35,36,252,679,253,37,254,680,38,681,257,39,510,258,682,260,261,262,263,264,40,266,267,41,268,454,683,269,270,274,519,684,279,285,287,288,529,290,291,292,293,533,294,458,300,301,303,685,686,304,305,307,308,687,688,309,617,534,689,312,313,618,690,316,320,321,691,47,444,327],"tindex":"276e72ba-3e34-11e6-ab3b-2bd3c67ed176","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"276e99cb-3e34-11e6-ab3b-3dd143928571","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276e99cc-3e34-11e6-ab3b-8dffccda2d94","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:879","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"276e99cd-3e34-11e6-ab3b-9d9c35f13a78","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_NONE":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[127,472,473,128,129,474,475,130],"tindex":"276e99ce-3e34-11e6-ab3b-b9d12f39023f","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[88,89,90,91,94,464,465,466,467,468,99,100,101,469,102,103,104,105,106,107,108,109,110,9,10,111,112,113,11,114,470,115,471,447,116,117,127,472,473,128,129,474,475,130,131,13,14,15,16,134,135,476,136,137,477,478,479,147,149,150,154,155,480,481,157,158,159,160,161,482,162,163,164,483,484,165,485,166,486,487,19,20,21,167,168,169,22,23,488,489,170,171,24,25,172,490,174,175,176,177,178,491,179,180,181,492,182,493,183,494,495,496,389,497,190,195,196,498,197,198,203,499,205,28,29,206,208,209,210,212,30,418,213,31,419,449,450,451,32,452,226,500,227,230,233,234,236,237,501,238,33,239,502,503,504,240,505,241,506,507,243,244,508,245,247,248,509,254,510,260,262,263,266,270,271,511,512,272,273,274,513,514,275,515,516,276,517,518,277,519,279,520,280,521,522,281,523,282,283,524,285,525,526,286,527,287,288,528,289,529,530,531,532,290,291,292,293,533,294,456,42,43,44,458,295,296,297,298,299,300,302,308,534,310,312,316,317,321,322,324,325,327],"tindex":"276ec0df-3e34-11e6-ab3b-c9d8ea286119","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276ec0e0-3e34-11e6-ab3b-83a33c388744","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"276ec0e1-3e34-11e6-ab3b-396a98361990","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b.equals(a)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"a","type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"276ec0e2-3e34-11e6-ab3b-b39d488ce524","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"276ec0e3-3e34-11e6-ab3b-1d2d90a364da","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:381","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[4,32,665],"tindex":"276ee7f4-3e34-11e6-ab3b-2579d2a7ec10","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"276ee7f5-3e34-11e6-ab3b-2bfcb5ad51f5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return containsKey(o);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276f0f06-3e34-11e6-ab3b-1fed1b8b8bb5","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance.peek()) == instance) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[464,465,466,467,468,99,102,104,105,106,11,470,471,447,119,692,693,694,448,695,472,473,474,475,476,477,478,479,480,481,160,483,484,485,486,487,488,489,25,172,490,175,491,179,180,181,492,493,494,497,498,197,499,205,28,29,30,450,32,230,233,234,236,501,238,33,502,503,504,505,506,507,508,509,511,512,274,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,290,291,292,293,533,294,456,42,43,458,300,302,534,322],"tindex":"276f0f07-3e34-11e6-ab3b-89b20c6f9a94","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"276f0f08-3e34-11e6-ab3b-4f8bcabda77b","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[95,96,132,133,13,14,15,16,147,148,149,152,25,173,213,237,238,33,246,270,278,323,329,332,333,335],"tindex":"276f0f09-3e34-11e6-ab3b-736293f4f95c","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"276f0f0a-3e34-11e6-ab3b-fbb2dc6953f4","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"276f361b-3e34-11e6-ab3b-e9444d43489e","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType == keyType) {\n        {\n            if (keyType == keyType) {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"keyType","java.util.Date.class":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276f361c-3e34-11e6-ab3b-8d23955c3dac","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276f361d-3e34-11e6-ab3b-7531e709d00c","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"276f361e-3e34-11e6-ab3b-91e47e5379aa","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (value == null) {\n                {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"276f361f-3e34-11e6-ab3b-c7e0aa6e3feb","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        type = value.getClass();\n    } \n    return type;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"276f3620-3e34-11e6-ab3b-4b5086baec38","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isString()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"276f5d31-3e34-11e6-ab3b-417874b78b21","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[696],"tindex":"276f5d32-3e34-11e6-ab3b-01d0c702f917","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced == null) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"276f8443-3e34-11e6-ab3b-2d8d01a3aa07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"276f8444-3e34-11e6-ab3b-9fd4f010d27a","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[],"tindex":"276f8445-3e34-11e6-ab3b-cf0076a2af58","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"276f8446-3e34-11e6-ab3b-33a545148a80","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == array) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"276f8447-3e34-11e6-ab3b-9d06aaace15e","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof com.google.gson.JsonObject) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"276fab58-3e34-11e6-ab3b-89c493d2b041","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"276fab59-3e34-11e6-ab3b-a5893b4a11e3","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"276fab5a-3e34-11e6-ab3b-cd53c03eef8d","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"276fab5b-3e34-11e6-ab3b-cb3fd498d556","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property != null) {\n        {\n            if (property == null) {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"276fab5c-3e34-11e6-ab3b-5bb051fc5ccf","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (replacement != null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                            if (replacement != null) {\n                                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                            } \n                            if (parent != null) {\n                                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                } else {\n                                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                                }\n                            } else {\n                                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"276fd26d-3e34-11e6-ab3b-67b5a68f4c13","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"276fd26e-3e34-11e6-ab3b-572d6c213f0f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"276ff97f-3e34-11e6-ab3b-27fa23097c88","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852488/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":89,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
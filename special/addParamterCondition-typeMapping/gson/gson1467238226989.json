{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":56,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":155,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":179,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":192,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":87,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":22,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":229,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":76,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":125,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":244,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":65,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":59,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":60,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":63,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":123,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":187,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":37,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":98,"com.google.gson.functional.ObjectTest.testSingletonLists":121,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":79,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":214,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":18,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":105,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":255,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":136,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":3,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":70,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":115,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":148,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":234,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":119,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":72,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":152,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":128,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":49,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":228,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":15,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":96,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":7,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":5,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":218,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":103,"com.google.gson.functional.JsonTreeTest.testToJsonTree":223,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":112,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":118,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":44,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":74,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":197,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":184,"com.google.gson.functional.MapTest.testGeneralMapField":85,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":126,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":161,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":89,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":203,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":133,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":263,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":265,"com.google.gson.MixedStreamTest.testReadMixedStreamed":254,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":92,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":143,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":217,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":264,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":94,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":213,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":231,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":260,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":8,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":202,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":77,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":238,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":6,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":54,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":219,"com.google.gson.functional.ObjectTest.testNestedDeserialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":69,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":194,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":208,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":142,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":14,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":129,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":243,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":23,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":29,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":32,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":215,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":48,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":109,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":35,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":68,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":80,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":51,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":84,"com.google.gson.functional.MapTest.testInterfaceTypeMap":83,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":176,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":91,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":111,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":164,"com.google.gson.functional.CollectionTest.testSetDeserialization":62,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":174,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":20,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":132,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":55,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":36,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":137,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":34,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":178,"com.google.gson.MixedStreamTest.testWriteClosed":253,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":19,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":196,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":114,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":127,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":38,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":110,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":211,"com.google.gson.stream.JsonWriterTest.testLongs":0,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":150,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":207,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":45,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":191,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":233,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":117,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":130,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":193,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":182,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":247,"com.google.gson.functional.MapTest.testComplexKeysSerialization":86,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":241,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":53,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":166,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":21,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":163,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":104,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":57,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":165,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":210,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":16,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":180,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":240,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":24,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":81,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":144,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":95,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":151,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":250,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":46,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":195,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":186,"com.google.gson.ObjectTypeAdapterTest.testSerialize":13,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":267,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":93,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":66,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":170,"com.google.gson.functional.FieldNamingTest.testIdentity":248,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":39,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":198,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":146,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":28,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":120,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":222,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":190,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":259,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":156,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":172,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":12,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":169,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":30,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":149,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":181,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":43,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":188,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":175,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":251,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":232,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":17,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":33,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":4,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":135,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":88,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":67,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":71,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":50,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":200,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":158,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":189,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":257,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":157,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":107,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":261,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":11,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":138,"com.google.gson.functional.ObjectTest.testNestedSerialization":140,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":75,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":27,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":2,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":185,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":122,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":224,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":134,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":31,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":162,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":101,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":124,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":113,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":212,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":204,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":230,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":226,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":236,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":171,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":42,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":183,"com.google.gson.functional.CollectionTest.testSetSerialization":64,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":73,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":249,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":25,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":167,"com.google.gson.MixedStreamTest.testWriteInvalidState":252,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":266,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":9,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":206,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":256,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":168,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":205,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":242,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":160,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":97,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":116,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":100,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":201,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":58,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":227,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":40,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":47,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":268,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":108,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":41},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"48b84f7e-3e46-11e6-9efe-cb184302fc2c","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"48b89d9f-3e46-11e6-9efe-633d3e9c48d0","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[9],"tindex":"48b8c4b0-3e46-11e6-9efe-47714874b908","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"48b8ebc1-3e46-11e6-9efe-97737e7273f3","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != null) && ((src.peek()) != src)) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","obj":"src","reader":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"48b8ebc2-3e46-11e6-9efe-87510aae61e4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263],"tindex":"48b912d3-3e46-11e6-9efe-b914a00c5450","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (!serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"48b939e4-3e46-11e6-9efe-a50182c8c984","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[264,265,87,266,221,267,268],"tindex":"48b939e5-3e46-11e6-9efe-d903aad21a32","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"48b960f6-3e46-11e6-9efe-29b2fa12a177","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value == value) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"48b960f7-3e46-11e6-9efe-e35ff94c066e","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= 'a') && (c <= 'f')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:47","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Collection.class.isAssignableFrom(rawType))"},"failures":[],"tindex":"48b98808-3e46-11e6-9efe-1f367ad6ee52","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (!(type.isAssignableFrom(rawType))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Collection.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"48b98809-3e46-11e6-9efe-d54c1616b8a7","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"48b9af1a-3e46-11e6-9efe-1348348c8b97","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237980994/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":13,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
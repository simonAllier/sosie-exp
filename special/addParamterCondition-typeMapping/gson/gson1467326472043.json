{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":346,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":38,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":269,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":97,"com.google.gson.stream.JsonWriterTest.testRepeatedName":266,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":120,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":344,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":305,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":149,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":318,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":98,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":106,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":326,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":118,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":166,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":65,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":386,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":377,"com.google.gson.functional.ObjectTest.testSingletonLists":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":146,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":167,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":39,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":263,"com.google.gson.stream.JsonWriterTest.testStrings":271,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":221,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":334,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":58,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":292,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":46,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":300,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":18,"com.google.gson.functional.EnumTest.testEnumCaseMapping":117,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":5,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":37,"com.google.gson.functional.JsonTreeTest.testToJsonTree":369,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":364,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":132,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":55,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":103,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":224,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":332,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":276,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":16,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":204,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":337,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":157,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":56,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":27,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":179,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":306,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":235,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":261,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":355,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":95,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":178,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":7,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":12,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":330,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":123,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":324,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":215,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":141,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":283,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":203,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":366,"com.google.gson.functional.CollectionTest.testSetDeserialization":301,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":66,"com.google.gson.functional.EnumTest.testEnumSet":111,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":173,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":206,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":82,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":175,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":71,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":277,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":285,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":13,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":222,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":186,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":192,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":229,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":259,"com.google.gson.functional.MapTest.testMapSerialization":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":193,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":289,"com.google.gson.functional.MapTest.testSerializeMaps":81,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":161,"com.google.gson.functional.MapTest.testComplexKeysSerialization":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":302,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":258,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":374,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":35,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":387,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":208,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":96,"com.google.gson.functional.PrettyPrintingTest.testMap":33,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":129,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":194,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":3,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":57,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":43,"com.google.gson.functional.CollectionTest.testQueueSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":138,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":388,"com.google.gson.functional.MapTest.testMapOfMapSerialization":86,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":191,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":40,"com.google.gson.functional.FieldNamingTest.testIdentity":162,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":199,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":339,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":122,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":168,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":368,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":41,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":310,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":139,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":190,"com.google.gson.functional.MapTest.testMapSubclassSerialization":80,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":164,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":299,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":249,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":307,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":365,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":70,"com.google.gson.functional.EnumTest.testEnumSubclass":114,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":333,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":207,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":371,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":125,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":358,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":273,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":304,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":152,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":325,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":225,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":296,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":211,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":378,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":198,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":286,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":42,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":88,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":63,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":154,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":50,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":184,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":195,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":140,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":4,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":376,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":83,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":218,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":254,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":375,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":313,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":250,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":298,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":236,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":156,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":256,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":315,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":158,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":113,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":100,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":163,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":109,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":308,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":379,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":8,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":282,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":53,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":382,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":356,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":363,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":10,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":126,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":345,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":209,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":342,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":329,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":116,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":119,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":232,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":245,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":255,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":260,"com.google.gson.stream.JsonWriterTest.testNullStringValue":264,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":257,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":360,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":21,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":112,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":349,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":290,"com.google.gson.functional.MapTest.testGeneralMapField":91,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":328,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":383,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":246,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":127,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":183,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":239,"com.google.gson.MixedStreamTest.testReadMixedStreamed":281,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":107,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":278,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":380,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":323,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":19,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":143,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":212,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":49,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":61,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":265,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":142,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":214,"com.google.gson.functional.ObjectTest.testNestedDeserialization":343,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":347,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":357,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":17,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":197,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":381,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":69,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":370,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":309,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":321,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":234,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":90,"com.google.gson.functional.MapTest.testInterfaceTypeMap":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":248,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":217,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":52,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":373,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":128,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":15,"com.google.gson.MixedStreamTest.testWriteClosed":280,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":102,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":348,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":171,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":362,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":74,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":216,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":351,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":182,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":155,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":172,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":219,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":294,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":372,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":147,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":187,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":185,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":367,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":23,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":153,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":295,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":84,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":338,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":137,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":241,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":341,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":99,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":54,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":176,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":230,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":291,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":384,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":25,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":220,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":243,"com.google.gson.ObjectTypeAdapterTest.testSerialize":262,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":237,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":319,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":29,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":159,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":75,"com.google.gson.functional.MapTest.testMapWithQuotes":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":205,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":110,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":64,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":67,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":340,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":135,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":31,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":131,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":136,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":320,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":233,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":201,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":213,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":335,"com.google.gson.functional.ObjectTest.testNestedSerialization":177,"com.google.gson.JsonObjectTest.testAddingStringProperties":389,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":22,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":238,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":48,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":92,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":51,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":32,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":2,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":6,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":272,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":174,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":361,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":312,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":336,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":293,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":44,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":28,"com.google.gson.functional.CollectionTest.testSetSerialization":108,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":354,"com.google.gson.functional.StringTest.testStringValueSerialization":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":210,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":242,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":188,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":303,"com.google.gson.MixedStreamTest.testWriteInvalidState":279,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":287,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":134,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":160,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":223,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":385,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":352,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":76,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":244,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":268},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],"tindex":"bedf1cbf-3f13-11e6-8140-05cca45e9c6e","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,1,279,280,281,282,7,11,12,283,284,285,21,22,30,286,287,32,288,34,35,36,46,49,289,50,290,51,291,59,292,293,60,61,294,295,62,63,64,65,66,67,296,69,70,71,72,73,297,74,75,76,298,77,299,78,84,300,89,90,91,94,97,98,100,104,301,106,108,110,115,302,120,121,303,304,122,123,305,306,307,308,309,124,310,311,125,312,313,314,315,316,143,317,155,158,159,160,161,162,318,319,320,321,163,164,165,322,323,167,324,168,169,325,326,170,327,328,171,329,330,172,331,173,332,174,333,334,175,335,176,177,336,178,337,338,179,339,180,181,340,182,341,342,343,344,345,187,188,189,190,191,192,346,193,347,194,348,349,195,196,197,198,350,351,199,200,201,352,202,353,354,203,204,355,356,207,209,210,357,358,359,215,216,217,360,361,362,363,218,219,364,365,221,222,223,224,225,226,366,227,367,228,368,369,229,230,231,370,232,233,234,371,372,235,373,236,374,375,237,240,241,242,249,251,376,377,253,254,378,255,257,258,379,259,380,260,261,262,273,274,277],"tindex":"bedfb800-3f13-11e6-8140-b5cde9d2f594","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[0,1,279,280,281,282,7,11,12,283,284,285,21,22,30,286,287,32,288,34,35,36,46,49,289,50,290,51,291,59,292,293,60,61,294,295,62,63,64,65,66,67,296,69,70,71,72,73,297,74,75,76,298,77,299,78,84,300,89,90,91,94,97,98,100,104,301,106,108,110,115,302,120,381,121,303,382,304,122,123,305,306,307,308,309,124,310,311,125,312,313,314,315,316,143,317,155,158,159,160,161,162,318,319,320,321,163,164,165,322,323,167,324,168,169,325,326,170,327,328,171,329,330,172,331,173,332,174,333,334,175,335,176,177,336,178,337,338,179,339,180,181,340,182,341,342,343,344,345,187,188,189,190,191,192,346,193,347,194,348,349,195,196,197,198,350,351,199,200,201,352,202,353,354,203,204,355,356,207,209,210,357,358,359,215,216,217,360,361,362,363,218,219,364,365,221,222,223,224,225,226,366,227,367,228,368,369,229,230,231,370,232,233,234,371,372,235,373,236,374,375,237,240,241,242,249,251,376,377,253,254,378,255,257,258,379,259,380,260,261,262,273,274,277],"tindex":"bedfdf11-3f13-11e6-8140-af51976a8d70","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee00622-3f13-11e6-8140-b51a245a4453","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"bee00623-3f13-11e6-8140-89053959929b","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"bee02d34-3f13-11e6-8140-11657f895d31","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token.equals(token)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"token","to":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee02d35-3f13-11e6-8140-b901406bcc2e","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee02d36-3f13-11e6-8140-5708f271f192","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonPrimitive) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee02d37-3f13-11e6-8140-fd35873153ba","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee05448-3f13-11e6-8140-d37777f7e1d2","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee05449-3f13-11e6-8140-ed454d180d29","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee0544a-3f13-11e6-8140-6f2d65782f47","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee07b5b-3f13-11e6-8140-65ff256581b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"bee07b5c-3f13-11e6-8140-093c4d1c6865","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee07b5d-3f13-11e6-8140-49521ce5aade","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee07b5e-3f13-11e6-8140-fd821b53d54f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[97,357,358,359,360,361,364,368],"tindex":"bee0a26f-3f13-11e6-8140-e5ce6a3e3e5b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl"},"failures":[149,151],"tindex":"bee0a270-3f13-11e6-8140-05cf5153e6ba","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"style","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"bee0a271-3f13-11e6-8140-47b15e441935","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.getRawType().equals(type.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee0c982-3f13-11e6-8140-9d3fce37e6d8","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a != null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee0c983-3f13-11e6-8140-816aa45285b6","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee0c984-3f13-11e6-8140-453801efe405","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee0f095-3f13-11e6-8140-1901e5197c87","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[383,81,99,262,263],"tindex":"bee0f096-3f13-11e6-8140-fffb0845e8da","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bee117a7-3f13-11e6-8140-6b0080ec1217","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[368,384,385,386,387,388,389],"tindex":"bee117a8-3f13-11e6-8140-4369fca62370","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee117a9-3f13-11e6-8140-0f2d274009cf","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key != null) && ((key.peek()) != key)) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[110,224,225,226,366,227,245,246,248,250,390],"tindex":"bee117aa-3f13-11e6-8140-a9b4201b49b7","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee13ebb-3f13-11e6-8140-27dd6f19ade2","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bee13ebc-3f13-11e6-8140-db531764a3ec","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop != newTop) && (context != newTop)) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325901052/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"newTop","nonempty":"newTop","empty":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":30,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":34,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":478,"com.google.gson.functional.StringTest.testStringValueDeserialization":610,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":648,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":14,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":633,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":523,"com.google.gson.stream.JsonWriterTest.testRepeatedName":645,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":53,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":131,"com.google.gson.MixedStreamTest.testWriteLenient":48,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":96,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":51,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":624,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":6,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":113,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":323,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":555,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":317,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":430,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":273,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":530,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":79,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":105,"com.google.gson.functional.ObjectTest.testSingletonLists":111,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":454,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":479,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":518,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":502,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":72,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":607,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":121,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":310,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":263,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":175,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":638,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":618,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":32,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":406,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":551,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":243,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":301,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":512,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":403,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":242,"com.google.gson.functional.EnumTest.testEnumCaseMapping":316,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":477,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":488,"com.google.gson.functional.JsonTreeTest.testToJsonTree":42,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":511,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":634,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":30,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":621,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":439,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":67,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":281,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":599,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":345,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":210,"com.google.gson.functional.ObjectTest.testNullDeserialization":629,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":135,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":616,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":119,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":307,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":368,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":524,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":382,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":401,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":259,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":124,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":306,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":631,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":102,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":561,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":606,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":68,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":360,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":622,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":59,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":632,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":387,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":453,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":538,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":97,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":507,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":548,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":147,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":598,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":170,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":94,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":254,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":361,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":504,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":549,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":266,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":420,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":70,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":117,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":295,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":193,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":250,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":298,"com.google.gson.metrics.PerformanceTest.testDummy":627,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":346,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":319,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":500,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":185,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":457,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":574,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":449,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":138,"com.google.gson.functional.CollectionTest.testSetDeserialization":93,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":274,"com.google.gson.functional.EnumTest.testEnumSet":187,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":265,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":589,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":541,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":221,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":596,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":195,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":552,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":151,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":557,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":314,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":398,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":364,"com.google.gson.functional.MapTest.testHashMapDeserialization":506,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":521,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":603,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":471,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":575,"com.google.gson.MixedStreamTest.testReadNulls":637,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":198,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":186,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":286,"com.google.gson.functional.MapTest.testSortedMap":245,"com.google.gson.functional.MapTest.testMapSerialization":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":413,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":152,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":546,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":583,"com.google.gson.functional.MapTest.testSerializeMaps":11,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":475,"com.google.gson.functional.MapTest.testComplexKeysSerialization":251,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":588,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":255,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":429,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":137,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":313,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":496,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":408,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":54,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":570,"com.google.gson.functional.MapTest.testStringKeyDeserialization":253,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":585,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":327,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":371,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":257,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":394,"com.google.gson.functional.PrettyPrintingTest.testMap":407,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":522,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":205,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":437,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":69,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":309,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":586,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":483,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":611,"com.google.gson.functional.CollectionTest.testQueueSerialization":208,"com.google.gson.functional.MapTest.testMapSerializationEmpty":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":446,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":542,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":650,"com.google.gson.functional.MapTest.testMapOfMapSerialization":338,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":58,"com.google.gson.JavaSerializationTest.testMapIsSerializable":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":600,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":213,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":642,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":143,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":333,"com.google.gson.functional.FieldNamingTest.testIdentity":476,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":480,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":222,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":163,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":126,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":8,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":41,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":55,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":375,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":513,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":302,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":15,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":481,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":132,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":605,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":597,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":463,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":230,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":299,"com.google.gson.functional.MapTest.testMapSubclassSerialization":336,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":84,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":157,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":590,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":275,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":465,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":536,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":98,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":592,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":71,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":78,"com.google.gson.functional.EnumTest.testEnumSubclass":190,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":359,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":120,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":311,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":349,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":258,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":554,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":223,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":86,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":514,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":390,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":492,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":539,"com.google.gson.stream.JsonWriterTest.testTwoNames":641,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":133,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":26,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":304,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":581,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":264,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":543,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":75,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":355,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":459,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":112,"com.google.gson.MixedStreamTest.testWriteNulls":46,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":505,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":280,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":228,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":422,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":136,"com.google.gson.CommentsTest.testParseComments":296,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":330,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":376,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":285,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":553,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":584,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":573,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":339,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":482,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":630,"com.google.gson.MixedStreamTest.testReadInvalidState":619,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":270,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":461,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":153,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":350,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":587,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":282,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":57,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":451,"com.google.gson.functional.MapTest.testMapDeserialization":237,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":448,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":277,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":335,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":104,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":236,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":19,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":90,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":40,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":173,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":267,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":396,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":440,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":83,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":321,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":389,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":244,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":276,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":462,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":224,"com.google.gson.functional.PrimitiveTest.testShortSerialization":369,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":537,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":290,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":520,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":472,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":189,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":92,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":156,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":232,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":533,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":372,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":99,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":604,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":180,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":639,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":374,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":564,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":64,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":318,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":95,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":109,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":268,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":433,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":466,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":110,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":328,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":540,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":129,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":116,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":192,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":201,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":432,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":594,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":501,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":16,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":452,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":443,"com.google.gson.stream.JsonWriterTest.testNullStringValue":643,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":602,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":28,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":515,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":559,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":357,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":373,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":226,"com.google.gson.JsonPrimitiveTest.testEquals":651,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":18,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":188,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":162,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":154,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":115,"com.google.gson.functional.MapTest.testGeneralMapField":249,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":419,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":567,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":341,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":393,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":292,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":247,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":262,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":434,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":363,"com.google.gson.MixedStreamTest.testReadMixedStreamed":179,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":595,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":168,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":303,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":324,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":166,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":544,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":404,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":182,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":291,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":239,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":470,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":61,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":331,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":164,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":468,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":644,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":534,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":450,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":229,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":145,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":414,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":591,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":509,"com.google.gson.functional.ObjectTest.testNestedDeserialization":130,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":225,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":386,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":391,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":160,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":25,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":402,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":566,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":284,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":240,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":497,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":612,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":194,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":367,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":200,"com.google.gson.JavaSerializationTest.testListIsSerializable":184,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":10,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":503,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":218,"com.google.gson.functional.ObjectTest.testNullSerialization":379,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":203,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":609,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":233,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":248,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":297,"com.google.gson.functional.MapTest.testInterfaceTypeMap":246,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":395,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":516,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":63,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":315,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":625,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":397,"com.google.gson.MixedStreamTest.testReadClosed":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":435,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":400,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":528,"com.google.gson.MixedStreamTest.testWriteClosed":50,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":161,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":322,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":108,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":608,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":80,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":260,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":38,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":283,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":293,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":348,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":378,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":209,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":177,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":547,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":469,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":87,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":455,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":576,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":140,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":568,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":352,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":593,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":139,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":417,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":37,"com.google.gson.functional.CollectionTest.testQueueDeserialization":220,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":354,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":545,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":493,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":615,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":412,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":460,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":12,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":125,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":445,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":103,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":128,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":204,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":44,"com.google.gson.functional.MapTest.testRawMapSerialization":340,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":601,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":65,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":85,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":384,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":155,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":23,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":1,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":3,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":312,"com.google.gson.functional.PrimitiveTest.testByteSerialization":366,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":421,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":43,"com.google.gson.ObjectTypeAdapterTest.testSerialize":181,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":525,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":7,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":425,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":473,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":81,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":490,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":613,"com.google.gson.functional.MapTest.testMapWithQuotes":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":438,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":531,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":614,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":326,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":287,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":334,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":436,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":272,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":508,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":76,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":127,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":278,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":442,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":628,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":118,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":289,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":444,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":558,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":4,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":215,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":579,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":52,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":202,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":415,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":635,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":158,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":620,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":495,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":498,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":517,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":623,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":62,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":332,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":122,"com.google.gson.functional.ObjectTest.testNestedSerialization":385,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":227,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":351,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":617,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":416,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":13,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":411,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":288,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":49,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":308,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":279,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":380,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":563,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":29,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":174,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":489,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":529,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":626,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":172,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":176,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":66,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":484,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":36,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":100,"com.google.gson.functional.CollectionTest.testSetSerialization":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":329,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":409,"com.google.gson.functional.StringTest.testStringValueSerialization":485,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":486,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":74,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":207,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":269,"com.google.gson.MixedStreamTest.testWriteInvalidState":47,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":578,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":31,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":532,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":427,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":535,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":441,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":474,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":134,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":577,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":146,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":399,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":456,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":487,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":235,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":647,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":423,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":571},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d05a0818-3e47-11e6-9280-255cdbbb54fc","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"d05a5639-3e47-11e6-9280-815f11809e3a","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d05a563a-3e47-11e6-9280-a7d1a1c01124","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05a7d4b-3e47-11e6-9280-fdbaea539312","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05a7d4c-3e47-11e6-9280-59b4c3a44c7e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"d05a7d4d-3e47-11e6-9280-85a52ff4fcd4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.util.Map.Entry)) {\n        return false;\n    } \n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n    if (node == null) {\n        return false;\n    } \n    removeInternal(node, true);\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05aa45e-3e47-11e6-9280-6de176e7d9b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d05af27f-3e47-11e6-9280-4b355dcb2134","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"d05af280-3e47-11e6-9280-9728ef67bc4b","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05af281-3e47-11e6-9280-69ec8c5eafd0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05b1992-3e47-11e6-9280-a382e5996cf4","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05b1993-3e47-11e6-9280-edd093b2e213","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:364","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[51,52],"tindex":"d05b40a4-3e47-11e6-9280-f12b9724be8c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == 2) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05b40a5-3e47-11e6-9280-a391b9d2d91b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,48],"tindex":"d05b40a6-3e47-11e6-9280-5566b00cf52b","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d05b67b7-3e47-11e6-9280-6fc8604fe29a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05b67b8-3e47-11e6-9280-0d5e0b8fa743","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05b67b9-3e47-11e6-9280-a96906b2c022","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05b67ba-3e47-11e6-9280-8f68e91fd1ad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"d05b67bb-3e47-11e6-9280-9f9f75cf79fb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,32,134,135,136,137,138,139,140,141,142,143,63,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,34,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180],"tindex":"d05b8ecc-3e47-11e6-9280-5bdca8df9a99","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"d05b8ecd-3e47-11e6-9280-b5781a306e7f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (type != type) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[1,2,181,182,183,184,185,186,187,188,189,190,191,192,53,54,74,75,55,193,76,194,78,195,80,81,82,196,197,198,85,199,200,201,202,203,86,87,89,90,91,204,205,206,207,208,209,210,211,212,213,214,215,93,216,217,218,219,220,6,7,9,10,94,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,12,238,239,240,241,242,243,244,245,246,247,248,249,13,250,251,252,253,254,255,256,257,14,258,100,259,16,18,19,24,26,260,28,108,109,261,30,262,263,111,118,264,265,266,267,268,128,134,135,136,137,138,139,140,269,141,142,143,270,271,272,273,274,275,149,276,277,278,155,157,158,159,279,164,280,281,282,283,284,285,37,38,286,287,168,169,170,40,288,171,172,173,289,290,174,291,292,293,294,295,48,49,296],"tindex":"d05b8ece-3e47-11e6-9280-9728696a4589","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"d05bb5df-3e47-11e6-9280-b1166c54291b","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[297,298,57,58,59,299,48],"tindex":"d05bdcf0-3e47-11e6-9280-e3f0d9d81e57","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05bdcf1-3e47-11e6-9280-7150fca4bc84","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05bdcf2-3e47-11e6-9280-cd369eaba51f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d05bdcf3-3e47-11e6-9280-add8dafe77c3","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"d05c0404-3e47-11e6-9280-418a0ff1ac51","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d05c0405-3e47-11e6-9280-bfab2e84f081","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[300,301,302,303,304,305,70,306,307,308,309,310,311,312,72,313,4,314,187,188,189,190,315,192,316,317,53,54,318,55,193,76,5,194,78,195,319,56,80,81,82,196,197,198,85,199,200,201,202,203,320,321,91,204,92,205,208,209,322,210,211,214,323,324,217,218,325,326,221,223,327,328,329,330,331,332,333,334,225,226,227,335,336,11,234,236,12,337,338,241,244,339,246,247,248,249,13,340,251,252,254,257,14,258,15,341,342,259,101,343,344,102,103,16,17,345,18,19,20,21,22,23,24,346,260,347,261,348,349,297,262,350,298,351,352,57,353,354,58,355,59,356,357,358,359,60,360,361,362,363,364,365,366,367,368,369,370,299,371,372,373,61,374,375,111,376,377,378,31,265,379,380,381,382,383,384,385,386,266,387,267,268,388,389,390,32,391,134,135,136,137,139,140,269,141,142,143,270,271,272,273,274,392,393,394,395,275,396,397,398,399,400,401,402,403,404,405,63,406,407,276,408,409,410,277,278,153,411,156,157,158,159,33,412,413,35,163,414,415,416,164,417,418,419,420,421,422,423,424,36,280,425,426,427,428,429,282,283,284,285,430,431,432,286,169,170,40,288,433,434,435,436,437,438,289,439,440,441,290,442,443,444,445,446,447,448,449,450,291,451,452,453,454,455,456,457,51,292,458,52,459,460,461,293,462,463,464,465,466,467,468,469,470,294,295,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,43,487,488,489],"tindex":"d05c0406-3e47-11e6-9280-f5f576f9f8f7","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d05c0407-3e47-11e6-9280-fff9b798ffc9","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[490,300,301,302,303,1,2,3,304,305,181,491,70,492,493,308,182,183,184,309,310,311,185,312,71,72,494,495,186,314,187,188,189,190,191,496,315,73,192,316,317,53,497,54,74,318,75,55,193,76,77,5,194,78,195,319,56,79,80,81,82,83,196,498,84,197,198,85,199,200,201,202,203,86,87,320,88,321,89,90,91,204,92,205,206,207,499,208,209,322,210,211,212,213,214,215,93,323,324,216,217,218,219,325,220,6,7,8,9,10,326,94,221,500,222,95,223,327,328,501,329,330,331,224,332,502,333,334,225,226,227,96,97,98,99,503,228,229,504,230,335,505,506,231,336,11,232,233,234,235,236,237,12,507,238,239,240,337,338,241,242,243,244,339,245,246,247,248,249,13,340,250,251,252,253,254,255,256,257,14,258,15,341,100,342,259,101,343,344,102,103,16,104,105,17,508,345,18,19,106,20,21,22,23,509,24,107,25,26,27,346,260,347,28,29,108,109,261,348,30,510,511,512,349,513,297,514,515,516,517,518,262,519,520,350,521,522,523,524,525,526,527,298,351,528,529,530,531,532,352,533,57,353,534,535,354,536,537,58,538,355,59,539,540,356,357,541,542,543,358,544,545,546,547,548,549,550,551,359,552,60,553,360,361,554,555,362,556,263,363,557,364,558,110,559,365,366,367,368,369,370,299,560,561,562,371,563,372,564,565,566,373,61,567,374,568,569,375,111,112,113,376,114,115,377,116,117,378,118,264,265,119,380,120,381,121,382,383,122,384,385,386,123,266,124,125,570,387,126,267,268,127,388,128,129,130,131,389,132,133,390,32,391,134,135,136,137,138,139,140,269,141,142,143,270,271,272,273,274,392,393,394,395,275,396,397,398,399,400,401,402,403,404,405,571,149,150,151,572,406,407,276,408,409,410,277,278,573,152,153,154,411,574,155,156,157,158,159,33,412,34,413,575,160,35,161,162,279,163,414,576,415,577,416,164,417,418,578,419,420,421,422,423,579,580,424,36,280,581,281,582,425,583,426,584,427,585,428,586,429,587,282,283,284,285,37,38,430,165,166,431,167,588,589,432,590,286,287,168,169,170,39,40,41,42,288,171,591,433,434,435,172,173,592,437,593,289,439,440,594,595,596,290,597,442,443,444,445,446,174,447,598,448,449,599,450,600,291,451,452,453,454,601,602,455,603,457,604,51,292,605,458,52,459,460,461,293,606,607,462,464,608,466,175,176,467,468,177,178,469,609,470,294,295,472,473,474,475,476,610,477,478,479,480,481,611,612,482,613,483,614,615,616,484,617,618,485,486,44,619,45,47,48,49,50,179,180,488,489,296,620,621,622,623,624,625],"tindex":"d05c2b18-3e47-11e6-9280-93f94c423aaa","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[490,300,301,302,303,304,305,626,70,306,307,308,627,309,310,311,185,312,71,72,313,494,495,186,4,314,187,188,189,190,191,496,315,73,192,316,317,53,497,54,74,318,75,55,193,76,77,5,194,78,195,319,56,79,80,81,82,83,196,498,84,197,198,85,199,200,201,202,203,86,87,320,88,321,89,90,91,204,92,205,206,207,499,208,209,322,210,211,212,213,214,215,93,323,324,216,217,218,219,325,220,6,7,8,9,10,326,94,221,500,222,95,223,327,328,501,329,330,331,224,332,502,333,334,225,226,227,96,97,98,99,503,228,229,504,230,335,505,506,231,336,11,232,233,234,235,236,237,12,507,238,239,240,337,338,241,242,243,244,339,245,246,247,248,249,13,340,250,251,252,253,254,255,256,257,14,258,15,341,100,342,259,101,343,344,102,103,16,104,105,17,508,345,18,19,106,20,21,22,23,509,24,107,25,26,27,346,260,347,28,29,108,109,261,348,30,510,511,512,349,513,297,514,515,516,517,518,262,519,520,350,521,522,523,524,525,526,527,298,351,528,529,530,531,532,352,533,57,353,534,535,354,536,537,58,538,355,59,539,540,356,357,541,542,543,358,544,545,546,547,548,549,550,551,359,552,60,553,360,361,554,555,362,556,263,363,557,364,558,110,559,365,366,367,368,369,370,299,560,561,562,371,563,372,564,565,566,373,61,567,374,568,569,375,111,112,113,376,114,115,377,116,117,378,31,118,264,265,119,379,380,628,120,381,121,382,383,122,384,385,386,123,266,124,125,570,629,387,126,267,268,127,388,128,129,130,131,389,132,133,390,32,391,630,134,135,136,137,138,139,270,271,272,273,274,392,393,394,395,275,396,397,398,399,400,401,402,403,404,405,571,149,150,151,572,406,407,276,408,409,410,277,278,573,152,153,154,411,574,155,156,157,158,33,412,34,413,575,160,35,161,162,279,163,414,576,415,577,416,164,417,418,578,419,420,421,422,423,579,580,424,36,280,581,281,582,425,583,426,584,427,585,428,586,429,587,282,283,284,285,37,38,430,165,166,431,167,588,589,432,590,286,287,168,169,170,39,40,41,42,288,171,591,433,434,435,631,172,173,436,592,437,438,593,289,632,439,440,594,595,441,596,290,597,442,443,444,445,446,174,447,598,448,449,599,450,600,291,451,452,453,633,454,601,602,455,603,456,457,604,51,292,605,458,52,459,460,461,293,606,607,462,463,634,464,608,465,466,175,176,467,468,177,178,469,635,609,470,294,295,471,472,473,474,475,476,610,477,478,479,480,481,611,612,482,613,483,614,615,616,484,617,618,485,486,43,487,44,619,636,45,46,47,48,637,49,50,179,180,488,489,296],"tindex":"d05c5229-3e47-11e6-9280-95a087ce967e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"d05c793a-3e47-11e6-9280-75eeb2e1b4a4","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"a","java.sql.Timestamp.class":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"d05c793b-3e47-11e6-9280-4f5ca75a74cd","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"d05ca04c-3e47-11e6-9280-b3c3c390caad","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"d05ca04d-3e47-11e6-9280-eff250a3dee8","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"d05ca04e-3e47-11e6-9280-2d235694c48e","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isAssignableFrom(cls)) {\n        {\n            if (cls.isAssignableFrom(cls)) {\n                {\n                    return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"d05ca04f-3e47-11e6-9280-5de7fbd8e1f2","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (type != type) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                        type = value.getClass();\n                    } \n                    return type;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05ca050-3e47-11e6-9280-1d7b956f8a2c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"d05cc761-3e47-11e6-9280-79148819a4d0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"value","com.google.gson.LongSerializationPolicy.DEFAULT":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05cc762-3e47-11e6-9280-27dfada7b92f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05cc763-3e47-11e6-9280-bdb166ae4d62","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"d05cee74-3e47-11e6-9280-536b023d8a29","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d05cee75-3e47-11e6-9280-afff1cb6f974","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d05cee76-3e47-11e6-9280-fd576fe777c2","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d05cee77-3e47-11e6-9280-f9282f5b8f21","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d05cee78-3e47-11e6-9280-c107bd27eded","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[300,303,1,304,305,70,312,72,314,5,56,198,199,201,202,320,91,204,208,322,210,211,214,323,324,226,227,336,11,234,236,12,337,338,246,248,249,340,251,254,14,101,343,344,102,103,17,25,26,27,346,347,28,29,261,348,30,262,350,352,111,376,377,378,380,383,385,387,388,389,390,32,140,269,141,142,143,275,65,638,408,278,153,411,157,158,33,34,413,163,414,416,164,417,418,421,422,424,36,425,426,428,282,283,37,430,431,432,169,170,39,40,42,288,446,457,292,467,294,295,477,478,479,480,481,482,483,484,485,486,44,45,49],"tindex":"d05d1589-3e47-11e6-9280-5d11c5c90a4c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"d05d158a-3e47-11e6-9280-65aa1fc1f40f","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"d05d158b-3e47-11e6-9280-494c3c72454b","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[639,640,0,300,304,305,181,491,70,641,642,643,644,645,646,647,648,649,650,306,307,72,314,315,53,54,55,193,76,5,194,78,195,319,56,80,81,82,196,197,198,85,199,201,202,203,320,321,91,92,211,323,217,223,327,328,329,330,332,225,226,227,336,11,234,236,12,337,338,241,244,339,246,247,248,249,13,340,251,254,257,14,258,342,259,101,102,103,16,18,19,20,21,22,24,346,260,347,261,348,375,111,376,377,378,265,380,383,384,385,266,387,267,268,388,389,390,32,134,135,136,137,139,140,269,141,142,143,270,272,273,274,392,275,63,64,65,67,68,69,638,407,276,408,278,153,411,156,157,158,159,33,413,35,163,414,415,164,426,282,283,284,285,431,286,169,170,40,288,441,450,291,452,457,458,293,466,467,468,469,294,295,472,473,474,475,476,486,43,487,44,45],"tindex":"d05d158c-3e47-11e6-9280-433ba11a5c5d","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"d05d3c9d-3e47-11e6-9280-512ffd524db4","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isAssignableFrom(cls)) {\n        {\n            if (cls.isAssignableFrom(cls)) {\n                {\n                    return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d05d3c9e-3e47-11e6-9280-bfa794418482","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[39,42,634,651],"tindex":"d05d3c9f-3e47-11e6-9280-d12556e577af","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"d05d3ca0-3e47-11e6-9280-bf68e1fd7858","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
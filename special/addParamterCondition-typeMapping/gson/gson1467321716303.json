{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":238,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":3,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":343,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":12,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":350,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":303,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":332,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":17,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":102,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":31,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":110,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":124,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":145,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":129,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":266,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":93,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":94,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":14,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":97,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":133,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":143,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":69,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":282,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":309,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":78,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":248,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":338,"com.google.gson.functional.ObjectTest.testSingletonLists":141,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":22,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":138,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":25,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":341,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":20,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":40,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":269,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":156,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":334,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":106,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":322,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":202,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":215,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":59,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":60,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":271,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":175,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":204,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":172,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":148,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":1,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":231,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":119,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":347,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":246,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":268,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":87,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":360,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":32,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":331,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":287,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":257,"com.google.gson.functional.JsonTreeTest.testToJsonTree":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":252,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":6,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":218,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":310,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":85,"com.google.gson.JsonArrayTest.testSet":319,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":46,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":357,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":16,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":249,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":24,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":56,"com.google.gson.functional.MapTest.testGeneralMapField":90,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":146,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":222,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":48,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":197,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":354,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":153,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":315,"com.google.gson.MixedStreamTest.testReadMixedStreamed":39,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":304,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":265,"com.google.gson.JsonObjectTest.testDeepCopy":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":329,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":200,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":256,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":307,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":292,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":137,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":242,"com.google.gson.JsonParserTest.testParseString":264,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":121,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":286,"com.google.gson.JsonArrayTest.testDeepCopy":320,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":281,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":349,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":53,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":111,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":63,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":277,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":270,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":236,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":193,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":258,"com.google.gson.functional.ObjectTest.testNestedDeserialization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":353,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":183,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":330,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":188,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":162,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":13,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":42,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":149,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":103,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":109,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":288,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":318,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":73,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":209,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":76,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":112,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":132,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":296,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":233,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":276,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":283,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":89,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":43,"com.google.gson.functional.MapTest.testInterfaceTypeMap":88,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":356,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":225,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":316,"com.google.gson.functional.CollectionTest.testSetDeserialization":96,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":70,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":100,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":333,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":237,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":77,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":346,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":328,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":157,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":75,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":261,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":45,"com.google.gson.MixedStreamTest.testWriteClosed":38,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":185,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":326,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":147,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":79,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":191,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":187,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":227,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":123,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":150,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":217,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":64,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":182,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":274,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":335,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":54,"com.google.gson.functional.MapTest.testSerializeMaps":10,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":127,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":66,"com.google.gson.functional.MapTest.testComplexKeysSerialization":91,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":235,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":273,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":340,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":294,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":176,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":101,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":224,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":253,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":26,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":19,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":190,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":4,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":65,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":311,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":86,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":164,"com.google.gson.functional.MapTest.testStringKeyDeserialization":289,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":171,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":298,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":36,"com.google.gson.JsonParserTest.testParseReader":263,"com.google.gson.functional.PrettyPrintingTest.testMap":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":355,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":159,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":184,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":58,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":321,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":312,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":305,"com.google.gson.ObjectTypeAdapterTest.testSerialize":34,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":300,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":241,"com.google.gson.JavaSerializationTest.testMapIsSerializable":262,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":130,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":180,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":352,"com.google.gson.functional.FieldNamingTest.testIdentity":128,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":80,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":297,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":192,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":166,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":28,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":108,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":140,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":345,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":99,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":361,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":295,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":114,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":68,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":260,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":302,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":179,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":71,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":169,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":8,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":84,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":134,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":151,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":245,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":122,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":74,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":155,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":323,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":196,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":358,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":62,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":131,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":203,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":232,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":194,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":116,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":135,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":115,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":280,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":299,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":158,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":259,"com.google.gson.internal.LinkedTreeMapTest.testClear":15,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":18,"com.google.gson.functional.ObjectTest.testNestedSerialization":160,"com.google.gson.JsonObjectTest.testAddingStringProperties":314,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":47,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":107,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":57,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":51,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":142,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":337,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":291,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":154,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":223,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":306,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":144,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":348,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":136,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":49,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":189,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":117,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":161,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":61,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":342,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":33,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":55,"com.google.gson.functional.CollectionTest.testSetSerialization":98,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":198,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":205,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":244,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":105,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":177,"com.google.gson.JsonParserTest.testParseMixedArray":317,"com.google.gson.MixedStreamTest.testWriteInvalidState":37,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":186,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":50,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":339,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":41,"com.google.gson.functional.MapTest.testMapDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":293,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":30,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":126,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":7,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":221,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":308,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":336,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":247,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":216,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":250,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":278,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":118,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":327,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":81,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":229,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":301,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":284,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":11,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":208,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":82,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":324},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[],"tindex":"ac3b150a-3f08-11e6-8467-0756d5b892e1","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isAssignableFrom(clazz)) {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"ac3b632b-3f08-11e6-8467-5f96657b5413","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:261","type":"CtBinaryOperatorImpl"},"failures":[13,14,15,16,17,18,19,9,20,21,22,23,24,25,26,27,28,29,30],"tindex":"ac3b8a3c-3f08-11e6-8467-bd918c098341","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3b8a3d-3f08-11e6-8467-a5d0eea74593","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:78","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3bb14e-3f08-11e6-8467-511d65ebc48d","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (!(type.isAssignableFrom(rawType))) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"rawType","java.lang.Object.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3bd85f-3f08-11e6-8467-b5e6e275f762","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3bd860-3f08-11e6-8467-dbed6ebcdb10","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[31,32],"tindex":"ac3bd861-3f08-11e6-8467-57ea46a4950c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ac3bff72-3f08-11e6-8467-c98b7b7db09b","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key.isSynthetic()) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[33,34,35],"tindex":"ac3bff73-3f08-11e6-8467-b12abfa65814","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3bff74-3f08-11e6-8467-01078604c6b6","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3c2685-3f08-11e6-8467-556b8e4c5931","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"ac3c2686-3f08-11e6-8467-b7ed3eeb67e2","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc.getRawType().equals(typeOfSrc.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc","to":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3c4d97-3f08-11e6-8467-fd0054db833d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3c4d98-3f08-11e6-8467-9993c129f253","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[36,0,37,38,39,40,13,41,42,43,44,45,46,47,48,49,50,51,52,3,4,8,9,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,21,22,112,113,114,115,116,117,118,119,31,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,23,182,183,184,185,24,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,25,220,221,222,223,224,225,226,26,27,28,29,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,32,252,253,254,255,256,257,258,34,259,260,261],"tindex":"ac3c4d99-3f08-11e6-8467-cf4032f2cfc5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[262,263,264,13,14,15,16,265,266,17,267,268,18,19,269,270,271,272,273,274,9,275,54,55,56,57,276,58,277,278,279,280,281,282,283,284,285,286,287,288,289,290,92,20,99,110,111,21,22,112,291,292,293,129,130,131,132,134,135,23,24,190,191,294,295,296,297,203,298,204,299,206,207,208,212,213,218,25,26,27,28,29,300,301,302,303,255,257,258,304,30,305,306,307,308,309,310,311,312,313,314,315,316],"tindex":"ac3c74aa-3f08-11e6-8467-ff5f80d5fa3c","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[36,0,37,38,39,40,13,41,42,43,44,45,46,47,48,49,50,51,52,3,4,8,9,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,108,109,110,111,21,22,112,113,114,115,116,117,118,119,31,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,23,182,183,184,185,24,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,25,220,221,222,223,224,225,226,26,27,28,29,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,32,252,253,254,255,256,257,258,34,259,260,261],"tindex":"ac3c9bbb-3f08-11e6-8467-454eca8cbec6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3cc2cc-3f08-11e6-8467-f9e320ca6042","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3cc2cd-3f08-11e6-8467-71732ed4f04a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3ce9de-3f08-11e6-8467-d933656a2373","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3ce9df-3f08-11e6-8467-7323d6a4422c","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1249","type":"CtBinaryOperatorImpl"},"failures":[317,318,319,320],"tindex":"ac3ce9e0-3f08-11e6-8467-f10dc470e12b","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3ce9e1-3f08-11e6-8467-95728d60fe35","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3d0ff2-3f08-11e6-8467-07ab06d2aaf9","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if ((from instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"ac3d0ff3-3f08-11e6-8467-173cd946a4b9","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3d0ff4-3f08-11e6-8467-7f1b94c6def5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3d3705-3f08-11e6-8467-dd4171395994","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[36,0,37,38,39,40,13,41,42,43,44,45,46,47,48,49,50,51,52,3,4,8,9,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,107,108,109,110,111,21,22,112,113,114,115,116,117,118,119,31,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,23,182,183,184,185,24,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,25,220,221,222,223,224,225,226,26,27,28,29,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,32,252,253,254,255,256,257,258,34,259,260,261],"tindex":"ac3d3706-3f08-11e6-8467-23aaae79ccc9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3d5e17-3f08-11e6-8467-53a6a13fec3d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[321,322,323,324,43,44,45,325,326,327,328,329,330,331,332,51,52,275,54,55,56,57,276,58,333,334,335,279,78,82,280,336,337,92,338,102,103,104,105,106,107,108,109,339,340,341,342,343,129,130,344,131,132,174,294,295,345,201,346,296,297,202,203,298,204,347,205,348,349,350,299,351,352,353,221,223,354,355,356,302,357,303,358,359,261,360,361,362],"tindex":"ac3d5e18-3f08-11e6-8467-13530d550778","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonPrimitive) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3d8529-3f08-11e6-8467-ad17c567c213","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3d852a-3f08-11e6-8467-0d605a2d2750","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3d852b-3f08-11e6-8467-7fe5e2f3abef","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3d852c-3f08-11e6-8467-1bd84324a40e","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (!(java.lang.Character.isUpperCase(quote))) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3dac3d-3f08-11e6-8467-4b449ebc7c6e","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isAssignableFrom(clazz)) {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:826","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ac3dac3e-3f08-11e6-8467-f5e064298985","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ac3dfa5f-3f08-11e6-8467-734ef1a63c24","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321013496/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":38,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":86,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":183,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":244,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":312,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":289,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":350,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":67,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":121,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":144,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":192,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":233,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":315,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":52,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":238,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":239,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":131,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":190,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":242,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":322,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":136,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":110,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":168,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":337,"com.google.gson.functional.ObjectTest.testSingletonLists":188,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":147,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":291,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":127,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":307,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":311,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":203,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":71,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":63,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":98,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":215,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":43,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":44,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":61,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":65,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":219,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":195,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":338,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":120,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":286,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":166,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":177,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":255,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":272,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":305,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":348,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":259,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":158,"com.google.gson.functional.JsonTreeTest.testToJsonTree":143,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":341,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":95,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":101,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":280,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":32,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":325,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":40,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":230,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":353,"com.google.gson.functional.MapTest.testGeneralMapField":180,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":193,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":223,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":57,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":316,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":299,"com.google.gson.MixedStreamTest.testReadMixedStreamed":12,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":334,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":346,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":60,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":210,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":157,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":257,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":153,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":163,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":310,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":123,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":275,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":5,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":288,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":155,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":145,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":303,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":84,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":18,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":159,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":328,"com.google.gson.functional.ObjectTest.testNestedDeserialization":220,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":294,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":62,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":295,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":37,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":89,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":276,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":347,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":28,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":209,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":42,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":196,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":247,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":2,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":68,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":74,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":105,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":165,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":78,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":92,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":108,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":55,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":148,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":283,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":81,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":336,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":1,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":179,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":14,"com.google.gson.functional.MapTest.testInterfaceTypeMap":178,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":226,"com.google.gson.functional.CollectionTest.testSetDeserialization":241,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":137,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":129,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":85,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":345,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":204,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":107,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":16,"com.google.gson.MixedStreamTest.testWriteClosed":11,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":39,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":128,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":343,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":97,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":194,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":277,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":111,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":93,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":31,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":27,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":217,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":265,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":266,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":125,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":100,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":197,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":48,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":36,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":228,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":236,"com.google.gson.functional.MapTest.testSerializeMaps":331,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":50,"com.google.gson.functional.MapTest.testComplexKeysSerialization":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":306,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":263,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":21,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":225,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":174,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":273,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":30,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":264,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":49,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":308,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":354,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":69,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":176,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":211,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":154,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":285,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":279,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":8,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":317,"com.google.gson.functional.PrettyPrintingTest.testMap":339,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":76,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":206,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":38,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":313,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":232,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":251,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":327,"com.google.gson.ObjectTypeAdapterTest.testSerialize":250,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":269,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":4,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":152,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":53,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":25,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":292,"com.google.gson.functional.FieldNamingTest.testIdentity":237,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":112,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":284,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":17,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":213,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":73,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":142,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":187,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":270,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":281,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":321,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":293,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":139,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":256,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":271,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":184,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":135,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":249,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":324,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":24,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":103,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":216,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":6,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":246,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":116,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":302,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":198,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":352,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":9,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":138,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":267,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":124,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":126,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":300,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":202,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":253,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":56,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":46,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":54,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":314,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":64,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":297,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":80,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":19,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":268,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":133,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":186,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":298,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":290,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":205,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":248,"com.google.gson.functional.ObjectTest.testNestedSerialization":207,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":33,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":72,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":320,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":332,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":231,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":160,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":189,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":330,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":258,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":201,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":224,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":171,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":287,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":96,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":162,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":29,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":150,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":122,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":260,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":118,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":208,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":45,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":296,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":309,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":319,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":229,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":58,"com.google.gson.functional.CollectionTest.testSetSerialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":66,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":340,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":51,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":22,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":70,"com.google.gson.MixedStreamTest.testWriteInvalidState":10,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":333,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":26,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":3,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":23,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":304,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":41,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":235,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":222,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":342,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":329,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":167,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":99,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":170,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":20,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":323,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":88,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":113,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":77,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":114,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":261},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[0,1,2,3,4,5,6],"tindex":"9f1d5dc0-3e4b-11e6-91e9-393335313b91","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[],"tindex":"9f1dd2f1-3e4b-11e6-91e9-6d1b2710bd37","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if ((!serialization) && (!deserialization)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"deserialization","skipSerialize":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9f1dfa02-3e4b-11e6-91e9-dbb98ed290a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9f1e2113-3e4b-11e6-91e9-590858fe82d4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"9f1e2114-3e4b-11e6-91e9-41438e407d22","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n    } \n    return toJson(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250],"tindex":"9f1e4825-3e4b-11e6-91e9-332fd68e759f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9f1e4826-3e4b-11e6-91e9-61a61b2710a4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl","sourcecode":"(context != nonempty) && (context != empty)"},"failures":[],"tindex":"9f1e6f37-3e4b-11e6-91e9-df7a3352a169","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((timeStyle == dateStyle) || (peekStack == dateStyle)) {\n        {\n            if ((timeStyle != timeStyle) && (context != timeStyle)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"timeStyle","nonempty":"timeStyle","empty":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"9f1e6f38-3e4b-11e6-91e9-f1026b539e43","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:952","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[251,252,253,254,7,255,256,257,0,258,259,260,261,14,15,16,262,263,34,264,35,36,265,37,38,39,40,41,42,266,267,43,44,45,46,47,48,49,50,268,269,52,53,270,54,55,271,272,273,274,275,276,277,278,279,280,281,62,282,283,284,63,64,285,65,286,66,287,288,289,290,291,292,293,294,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,85,86,87,88,102,295,296,297,110,114,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,152,320,155,156,321,157,158,159,160,161,322,162,163,164,165,166,167,323,324,325,169,170,172,326,173,327,328,174,175,329,330,331,176,178,180,332,182,333,334,221,222,224,335,228,229,230,231,336,232,233,234,235,236,237,337,338,339,244,245,340,341,342,246,343,344,345,346,347,348,349,350,248,249,351],"tindex":"9f1e6f39-3e4b-11e6-91e9-873125e11235","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == dateStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_LONG":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"9f1e964a-3e4b-11e6-91e9-8bb1a9d24fc9","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"9f1ebd5b-3e4b-11e6-91e9-f9715fb7cf87","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"9f1ebd5c-3e4b-11e6-91e9-17962c6dd7a6","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"9f1ee46d-3e4b-11e6-91e9-2515ee0a71a3","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"9f1ee46e-3e4b-11e6-91e9-2d0dec586bd5","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9f1ee46f-3e4b-11e6-91e9-1b1e5e06d8ce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"9f1ee470-3e4b-11e6-91e9-c7fbf8e8f883","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9f1f0b81-3e4b-11e6-91e9-df6953deeea4","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9f1f0b82-3e4b-11e6-91e9-f70b164a53b5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"9f1f0b83-3e4b-11e6-91e9-1f391b02d885","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == o) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"o","com.google.gson.LongSerializationPolicy.DEFAULT":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9f1f3294-3e4b-11e6-91e9-0902adac683c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"9f1f59a5-3e4b-11e6-91e9-b9d087454a4e","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"9f1f59a6-3e4b-11e6-91e9-b11f59aa079d","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"9f1f59a7-3e4b-11e6-91e9-e5b6224aae33","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if ((reader.peek()) == obj) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"reader","com.google.gson.stream.JsonToken.NULL":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl","sourcecode":"(peekStack == (com.google.gson.stream.JsonScope.EMPTY_OBJECT)) || (peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT))"},"failures":[],"tindex":"9f1f80b8-3e4b-11e6-91e9-fba52aeb8488","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((timeStyle == dateStyle) || (peekStack == dateStyle)) {\n        {\n            if ((timeStyle != timeStyle) && (context != timeStyle)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"timeStyle","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"dateStyle","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"9f1f80b9-3e4b-11e6-91e9-9799e82895ac","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"9f1fa7ca-3e4b-11e6-91e9-7daacc3b09d2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[22,89,90,91,92,94,95,96,100,101,121,142,319,352,166,323,169,170,327,174,176,178,179,182,353],"tindex":"9f1fa7cb-3e4b-11e6-91e9-8d1055952aad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9f1fa7cc-3e4b-11e6-91e9-e9544a797f36","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"9f1fcedd-3e4b-11e6-91e9-61eefeb37fd0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"9f1fcede-3e4b-11e6-91e9-21707061df94","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9f1fcedf-3e4b-11e6-91e9-37bbaf3341ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"9f1fcee0-3e4b-11e6-91e9-b58bd2f4a4dd","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[354,147],"tindex":"9f1ff5f1-3e4b-11e6-91e9-f9752155cd03","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[],"tindex":"9f1ff5f2-3e4b-11e6-91e9-ab10f7e7f394","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848501/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
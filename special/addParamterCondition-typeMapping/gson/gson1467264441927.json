{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":48,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":540,"com.google.gson.functional.StringTest.testStringValueDeserialization":538,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":632,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":191,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":440,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":402,"com.google.gson.stream.JsonWriterTest.testRepeatedName":629,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":80,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":230,"com.google.gson.MixedStreamTest.testWriteLenient":2,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":154,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":201,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":515,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":65,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":247,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":199,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":251,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":447,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":531,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":577,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":146,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":411,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":120,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":177,"com.google.gson.functional.ObjectTest.testSingletonLists":197,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":509,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":395,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":541,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":479,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":137,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":522,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":212,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":362,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":273,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":57,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":641,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":554,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":13,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":352,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":441,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":186,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":365,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":387,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":18,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":320,"com.google.gson.functional.EnumTest.testEnumCaseMapping":530,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":378,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":539,"com.google.gson.functional.JsonTreeTest.testToJsonTree":153,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":386,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":593,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":112,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":377,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":606,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":638,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":298,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":503,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":580,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":551,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":622,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":209,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":457,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":610,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":403,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":17,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":597,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":73,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":219,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":604,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":615,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":162,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":462,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":461,"com.google.gson.JsonParserTest.testParseString":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":521,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":4,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":371,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":639,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":426,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":467,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":565,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":508,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":155,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":438,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":612,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":500,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":168,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":75,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":330,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":5,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":556,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":439,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":218,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":561,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":55,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":205,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":256,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":85,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":327,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":407,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":174,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":103,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":118,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":271,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":474,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":285,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":513,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":590,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":502,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":235,"com.google.gson.functional.CollectionTest.testSetDeserialization":250,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":147,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":208,"com.google.gson.functional.EnumTest.testEnumSet":287,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":600,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":431,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":119,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":275,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":265,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":493,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":213,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":443,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":29,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":451,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":138,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":594,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":452,"com.google.gson.functional.MapTest.testHashMapDeserialization":304,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":400,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":512,"com.google.gson.MixedStreamTest.testReadNulls":268,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":382,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":86,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":165,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":286,"com.google.gson.functional.MapTest.testSortedMap":323,"com.google.gson.functional.MapTest.testMapSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":49,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":624,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":237,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":436,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":570,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":245,"com.google.gson.functional.MapTest.testSerializeMaps":306,"com.google.gson.functional.MapTest.testComplexKeysSerialization":190,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":599,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":331,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":573,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":140,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":183,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":98,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":529,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":254,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":81,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":588,"com.google.gson.functional.MapTest.testStringKeyDeserialization":329,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":267,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":571,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":475,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":7,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":333,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":406,"com.google.gson.functional.PrettyPrintingTest.testMap":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":534,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":488,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":527,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":299,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":361,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":640,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":544,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":282,"com.google.gson.functional.MapTest.testMapSerializationEmpty":328,"com.google.gson.functional.CollectionTest.testQueueSerialization":340,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":432,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":634,"com.google.gson.functional.MapTest.testMapOfMapSerialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":423,"com.google.gson.JavaSerializationTest.testMapIsSerializable":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":505,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":345,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":626,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":3,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":38,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":480,"com.google.gson.functional.FieldNamingTest.testIdentity":246,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":542,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":276,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":30,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":222,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":84,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":152,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":196,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":383,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":389,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":366,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":384,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":543,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":193,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":516,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":494,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":499,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":302,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":460,"com.google.gson.functional.MapTest.testMapSubclassSerialization":585,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":127,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":142,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":602,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":22,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":148,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":421,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":487,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":136,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":116,"com.google.gson.functional.EnumTest.testEnumSubclass":289,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":442,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":211,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":363,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":388,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":69,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":446,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":93,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":391,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":195,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":368,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":427,"com.google.gson.stream.JsonWriterTest.testTwoNames":625,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":194,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":101,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":257,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":567,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":334,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":433,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":83,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":425,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":518,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":198,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":584,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":297,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":293,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":562,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":114,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":233,"com.google.gson.CommentsTest.testParseComments":356,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":603,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":180,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":277,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":42,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":445,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":589,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":322,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":546,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":15,"com.google.gson.MixedStreamTest.testReadInvalidState":375,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":144,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":125,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":520,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":238,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":399,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":574,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":266,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":39,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":416,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":36,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":506,"com.google.gson.functional.MapTest.testMapDeserialization":312,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":501,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":355,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":303,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":176,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":110,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":311,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":179,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":578,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":99,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":151,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":130,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":223,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":586,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":536,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":491,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":97,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":192,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":253,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":321,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":278,"com.google.gson.functional.PrimitiveTest.testShortSerialization":458,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":581,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":449,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":20,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":422,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":398,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":242,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":16,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":248,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":141,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":307,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":415,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":350,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":465,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":10,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":514,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":26,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":619,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":471,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":466,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":636,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":76,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":109,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":224,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":484,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":621,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":74,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":428,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":228,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":204,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":90,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":131,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":249,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":532,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":476,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":175,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":507,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":405,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":496,"com.google.gson.stream.JsonWriterTest.testNullStringValue":627,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":510,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":106,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":337,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":392,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":454,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":430,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":8,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":45,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":178,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":53,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":239,"com.google.gson.functional.MapTest.testGeneralMapField":189,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":202,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":470,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":70,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":284,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":324,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":485,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":575,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":450,"com.google.gson.MixedStreamTest.testReadMixedStreamed":25,"com.google.gson.JsonObjectTest.testDeepCopy":608,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":314,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":492,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":166,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":347,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":367,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":434,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":19,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":262,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":133,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":315,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":482,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":305,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":477,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":164,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":60,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":418,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":504,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":294,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":31,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":583,"com.google.gson.functional.ObjectTest.testNestedDeserialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":279,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":14,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":587,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":50,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":100,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":468,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":41,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":260,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":316,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":545,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":115,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":6,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":89,"com.google.gson.JavaSerializationTest.testListIsSerializable":264,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":68,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":157,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":349,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":92,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":481,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":308,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":188,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":390,"com.google.gson.functional.MapTest.testInterfaceTypeMap":187,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":568,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":535,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":105,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":611,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":393,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":139,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":635,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":374,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":486,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":409,"com.google.gson.MixedStreamTest.testWriteClosed":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":52,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":342,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":108,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":525,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":121,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":104,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":44,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":40,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":135,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":111,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":206,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":341,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":61,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":437,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":63,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":94,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":346,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":511,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":380,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":34,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":472,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":414,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":489,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":236,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":557,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":43,"com.google.gson.functional.CollectionTest.testQueueDeserialization":351,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":420,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":435,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":369,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":550,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":381,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":519,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":185,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":220,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":498,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":163,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":227,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":335,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":21,"com.google.gson.functional.MapTest.testRawMapSerialization":326,"com.google.gson.JsonParserTest.testParseReader":617,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":283,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":637,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":87,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":215,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":241,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":582,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":357,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":295,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":359,"com.google.gson.functional.PrimitiveTest.testByteSerialization":456,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":526,"com.google.gson.ObjectTypeAdapterTest.testSerialize":259,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":613,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":404,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":66,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":569,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":243,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":122,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":364,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":547,"com.google.gson.functional.MapTest.testMapWithQuotes":317,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":412,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":549,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":274,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":301,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":12,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":149,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":463,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":145,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":579,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":113,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":225,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":495,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":207,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":281,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":59,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":453,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":591,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":563,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":517,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":558,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":91,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":32,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":143,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":376,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":528,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":126,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":394,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":478,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":214,"com.google.gson.functional.ObjectTest.testNestedSerialization":216,"com.google.gson.JsonObjectTest.testAddingStringProperties":609,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":46,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":300,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":408,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":553,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":576,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":325,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":240,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":169,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":269,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":370,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":210,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":272,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":464,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":132,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":379,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":129,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":217,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":58,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":552,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":566,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":71,"com.google.gson.functional.CollectionTest.testSetSerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":79,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":354,"com.google.gson.functional.StringTest.testStringValueSerialization":555,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":64,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":35,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":82,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":338,"com.google.gson.MixedStreamTest.testWriteInvalidState":23,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":559,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":413,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":160,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":419,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":616,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":244,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":231,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":605,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":33,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":595,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":123,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":614,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":310,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":631,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":270,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":296},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"520bc65a-3e83-11e6-8444-c56caa5aa3d3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"520c3b8b-3e83-11e6-8444-57bf42d728c1","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"rawType","rawSupertype":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[1],"tindex":"520c629c-3e83-11e6-8444-b9b7fd48affa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"520c89ad-3e83-11e6-8444-0b2a816ebab5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"520c89ae-3e83-11e6-8444-7309eb93d2e4","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token.getRawType().equals(token.getRawType())) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"token","to":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"520cb0bf-3e83-11e6-8444-07b79a87ef25","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"520cb0c0-3e83-11e6-8444-07661abd1419","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"520cb0c1-3e83-11e6-8444-d7c78f8f3370","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if ((!(other.isJsonNull())) && ((other.peek()) != other)) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"other","jsonReader":"other","element":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[2,3,4,5,6,7,8],"tindex":"520cd7d2-3e83-11e6-8444-edc7008b3012","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"520cd7d3-3e83-11e6-8444-410a2e4b47ab","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"modifier","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[9,10],"tindex":"520cd7d4-3e83-11e6-8444-5d0eac11079f","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.sql.Timestamp.class":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[11,12,13,14,15,16,17,18,19,20],"tindex":"520cfee5-3e83-11e6-8444-3120a77aa984","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,13,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,0,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,10,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"520cfee6-3e83-11e6-8444-bb24fd4d3c8d","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"520d25f7-3e83-11e6-8444-65e1562f62e6","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"520d25f8-3e83-11e6-8444-e1db6629ba82","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,260,81,82,261,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,13,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,0,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,10,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"520d25f9-3e83-11e6-8444-eb540236def1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"520d4d0a-3e83-11e6-8444-393e010b3b6d","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != null) && ((src.peek()) != src)) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","obj":"src","reader":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"520d4d0b-3e83-11e6-8444-813746fed2fa","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"context","context":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[262,263,264,265,266,267,2,268,269,270,271,272,34,35,36,37,38,39,40,42,43,44,64,69,71,73,273,274,275,276,277,278,279,101,104,108,113,114,280,115,116,117,119,120,121,122,123,124,125,126,127,128,281,0,282,283,284,285,286,287,288,16,289,290,291,141,142,143,144,292,145,146,147,293,294,295,296,297,298,299,300,164,165,301,166,167,168,169,170,175,178,179,183,302,303,304,305,306,307,308,309,310,311,312,185,313,314,315,316,317,318,319,320,186,321,322,323,187,324,188,189,325,326,327,190,328,329,330,331,332,333,191,197,200,334,218,222,224,227,247,335,248,336,337,338,339,340,341,342,343,249,344,345,346,250,251,347,348,252,349,350,351,352,353,253,354,355,255,356,357,358,359,259,360],"tindex":"520d741c-3e83-11e6-8444-4b82625f01be","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"520d741d-3e83-11e6-8444-974ea6c0229a","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if ((array instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[361,362,363,262,263,264,364,11,365,366,367,368,369,370,371,372,373,374,21,375,22,23,2,269,24,25,26,376,377,378,379,270,27,28,29,271,272,30,31,380,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,381,48,49,382,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,383,67,68,69,384,70,71,72,73,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,3,434,435,436,437,438,439,440,441,442,443,444,445,4,5,446,447,448,449,273,450,451,452,453,74,454,455,456,6,457,458,459,460,461,462,463,7,464,465,466,467,468,8,469,470,471,472,473,274,75,275,474,276,76,77,475,78,476,79,277,477,278,478,479,480,12,279,481,482,80,260,81,82,261,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,13,14,113,114,280,115,116,117,118,119,120,121,122,123,124,125,126,127,128,483,484,485,486,129,130,487,488,489,281,490,491,131,492,493,0,494,495,496,497,498,282,132,499,500,501,502,503,504,505,133,506,507,508,509,283,510,511,512,513,514,515,284,516,134,517,518,519,520,135,521,522,523,524,525,285,526,136,137,527,528,286,138,287,288,16,289,290,529,139,140,291,530,531,141,142,143,144,292,145,146,147,532,533,534,535,148,536,537,149,150,151,152,153,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,154,155,156,10,157,293,294,556,557,558,559,560,561,295,562,296,563,564,565,566,297,567,298,568,569,570,158,159,160,571,572,299,573,574,161,300,575,162,163,576,164,165,301,166,167,168,169,170,577,171,172,173,174,175,176,177,578,579,580,178,179,180,181,581,182,582,583,183,184,302,303,584,304,305,585,306,307,308,309,310,311,312,185,313,314,315,316,317,318,319,320,186,321,322,323,187,324,188,189,325,326,327,190,328,329,330,331,332,333,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,334,208,209,210,211,586,212,17,213,214,215,216,587,217,218,219,220,588,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,589,237,238,239,240,590,241,242,243,244,245,246,247,335,248,336,337,338,339,340,341,342,343,249,344,345,346,591,250,251,347,348,252,349,592,350,351,352,353,253,254,354,593,355,255,594,595,596,597,598,18,19,20,599,600,601,602,256,356,357,358,359,257,258,259,360],"tindex":"520d9b2e-3e83-11e6-8444-4dbdbb12f22c","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[603,604,605,606,9,607,608,609,610,611,380,43,44,48,53,612,613,614,65,66,67,68,384,474,77,475,78,478,100,101,102,106,107,112,13,280,126,615,616,137,149,150,151,152,153,154,155,156,10,157,165,167,168,579,581,331,191,589,237,238,239,240,590,241,617,618,256,357,619,620,621,622,623,624],"tindex":"520dc23f-3e83-11e6-8444-1fdeee8e1818","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"520dc240-3e83-11e6-8444-efeb13fc877a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"520dc241-3e83-11e6-8444-f3d80dcd7ce7","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[625,626,627,628,629,630,631,632,633,634,11,21,22,604,610,30,31,32,34,35,36,37,38,39,40,41,42,45,46,47,49,51,54,55,635,636,637,638,639,640,641,56,59,60,63,64,613,614,69,72,73,77,475,78,79,277,478,279,80,81,84,85,86,87,88,90,91,92,95,97,103,104,105,110,111,13,113,280,115,116,117,118,119,121,122,123,125,128,616,504,133,507,513,134,135,137,138,139,141,142,143,144,145,146,147,532,148,149,151,158,161,162,163,164,165,167,168,169,173,175,178,179,181,581,182,183,585,306,309,311,185,317,318,319,321,322,187,324,188,189,325,326,190,330,333,191,192,195,196,197,200,203,206,208,210,213,215,216,218,221,223,224,226,231,232,233,234,236,238,240,242,243,244,245,246,247,248,249,251,252,353,253,254,255,256,257,258,259,360,619,620,621],"tindex":"520de952-3e83-11e6-8444-cd51c8c354c4","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"520de953-3e83-11e6-8444-a1b14c076e1c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"520de954-3e83-11e6-8444-cf2f44cb9177","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"520e1065-3e83-11e6-8444-3fa1df46506d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"520e1066-3e83-11e6-8444-0d5bb5e56921","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"520e1067-3e83-11e6-8444-7324595fcfd3","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"520e1068-3e83-11e6-8444-c7bb2a1c000e","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"520e1069-3e83-11e6-8444-19afb75a2fa8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"520e377a-3e83-11e6-8444-9b2a51475603","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != null) && (((typeOfSrc == typeOfSrc) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc","value":"src","java.lang.Object.class":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"520e377b-3e83-11e6-8444-47d8594683fb","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if ((message.length()) == 0) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"520e377c-3e83-11e6-8444-f1bd40a27f4a","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"520e377d-3e83-11e6-8444-c70d3f05090b","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"520e5e8e-3e83-11e6-8444-e916e1b98d2b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"520e5e8f-3e83-11e6-8444-9df1541e297d","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263737984/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":38,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":180,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":334,"com.google.gson.functional.StringTest.testStringValueDeserialization":332,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":675,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":87,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":533,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":640,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":495,"com.google.gson.stream.JsonWriterTest.testRepeatedName":669,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":97,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":172,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":105,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":18,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":615,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":127,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":88,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":92,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":141,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":540,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":422,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":472,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":64,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":504,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":73,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":253,"com.google.gson.functional.ObjectTest.testSingletonLists":139,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":455,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":335,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":488,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":607,"com.google.gson.stream.JsonWriterTest.testStrings":682,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":583,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":220,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":468,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":154,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":285,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":543,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":55,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":635,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":348,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":11,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":47,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":327,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":534,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":82,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":480,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":612,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":301,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":381,"com.google.gson.functional.EnumTest.testEnumCaseMapping":421,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":290,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":333,"com.google.gson.functional.JsonTreeTest.testToJsonTree":231,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":479,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":330,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":218,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":268,"com.google.gson.stream.JsonWriterTest.testNulls":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":17,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":80,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":660,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":449,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":490,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":602,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":403,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":223,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":345,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":551,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":630,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":496,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":475,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":299,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":200,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":161,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":629,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":469,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":247,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":556,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":467,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":2,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":273,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":661,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":519,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":561,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":14,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":163,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":454,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":517,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":106,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":374,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":531,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":653,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":264,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":655,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":201,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":391,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":3,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":532,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":160,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":308,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":31,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":33,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":147,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":677,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":104,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":388,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":500,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":639,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":137,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":209,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":71,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":295,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":575,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":393,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":587,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":460,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":448,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":226,"com.google.gson.functional.CollectionTest.testSetDeserialization":91,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":65,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":150,"com.google.gson.functional.EnumTest.testEnumSet":414,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":424,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":524,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":72,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":574,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":7,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":438,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":155,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":70,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":271,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":536,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":36,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":545,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":221,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":296,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":546,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":642,"com.google.gson.functional.MapTest.testHashMapDeserialization":364,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":493,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":459,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":293,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":569,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":179,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":232,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":261,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":591,"com.google.gson.functional.MapTest.testSortedMap":384,"com.google.gson.functional.MapTest.testMapSerialization":380,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":181,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":49,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":529,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":321,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":125,"com.google.gson.functional.MapTest.testSerializeMaps":367,"com.google.gson.functional.MapTest.testComplexKeysSerialization":86,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":423,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":277,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":392,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":325,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":225,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":259,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":244,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":625,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":419,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":45,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":644,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":649,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":99,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":477,"com.google.gson.functional.MapTest.testStringKeyDeserialization":390,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":9,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":577,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":5,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":394,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":499,"com.google.gson.functional.PrettyPrintingTest.testMap":328,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":494,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":596,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":396,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":434,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":589,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":284,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":324,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":662,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":338,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":342,"com.google.gson.functional.MapTest.testMapSerializationEmpty":389,"com.google.gson.functional.CollectionTest.testQueueSerialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":525,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":678,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":680,"com.google.gson.functional.MapTest.testMapOfMapSerialization":379,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":516,"com.google.gson.JavaSerializationTest.testMapIsSerializable":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":451,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":405,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":584,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":633,"com.google.gson.functional.FieldNamingTest.testIdentity":126,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":576,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":192,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":164,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":103,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":138,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":230,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":471,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":665,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":482,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":613,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":272,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":337,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":572,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":111,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":463,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":439,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":622,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":361,"com.google.gson.functional.MapTest.testMapSubclassSerialization":366,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":554,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":79,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":132,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":426,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":24,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":250,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":354,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":514,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":433,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":567,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":69,"com.google.gson.functional.EnumTest.testEnumSubclass":417,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":535,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":153,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":286,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":481,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":196,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":539,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":203,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":484,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":113,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":672,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":520,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":112,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":207,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":269,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":317,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":473,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":526,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":102,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":518,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":671,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":464,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":140,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":363,"com.google.gson.MixedStreamTest.testWriteNulls":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":316,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":670,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":427,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":310,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":224,"com.google.gson.CommentsTest.testParseComments":608,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":142,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":579,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":538,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":352,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":340,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":383,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":645,"com.google.gson.MixedStreamTest.testReadInvalidState":282,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":466,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":553,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":50,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":492,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":631,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":326,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":186,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":266,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":509,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":452,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":549,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":313,"com.google.gson.functional.MapTest.testMapDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":447,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":331,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":362,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":252,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":216,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":372,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":255,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":600,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":245,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":229,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":115,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":165,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":474,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":234,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":598,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":436,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":77,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":110,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":243,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":44,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":382,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":478,"com.google.gson.functional.PrimitiveTest.testShortSerialization":552,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":581,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":603,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":542,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":303,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":515,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":117,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":491,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":122,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":416,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":89,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":131,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":368,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":508,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":412,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":559,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":13,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":108,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":656,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":461,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":28,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":278,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":560,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":658,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":101,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":166,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":202,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":215,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":54,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":431,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":173,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":521,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":170,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":146,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":420,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":236,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":425,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":116,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":594,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":578,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":251,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":453,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":498,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":637,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":441,"com.google.gson.stream.JsonWriterTest.testNullStringValue":664,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":457,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":212,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":485,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":548,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":523,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":6,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":37,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":254,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":415,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":185,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":51,"com.google.gson.functional.MapTest.testGeneralMapField":85,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":144,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":307,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":564,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":10,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":39,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":595,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":462,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":15,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":489,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":593,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":544,"com.google.gson.MixedStreamTest.testReadMixedStreamed":27,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":437,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":510,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":262,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":408,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":614,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":527,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":302,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":287,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":119,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":376,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":360,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":365,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":563,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":580,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":48,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":58,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":668,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":511,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":450,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":643,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":428,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":651,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":193,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":430,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":605,"com.google.gson.functional.ObjectTest.testNestedDeserialization":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":586,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":350,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":182,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":562,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":188,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":98,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":339,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":377,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":68,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":4,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":235,"com.google.gson.JavaSerializationTest.testListIsSerializable":289,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":109,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":130,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":410,"com.google.gson.functional.ObjectTest.testNullSerialization":624,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":238,"com.google.gson.stream.JsonWriterTest.testDoubles":679,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":359,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":369,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":84,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":483,"com.google.gson.functional.MapTest.testInterfaceTypeMap":83,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":319,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":597,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":486,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":95,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":617,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":275,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":502,"com.google.gson.MixedStreamTest.testWriteClosed":26,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":184,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":402,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":145,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":470,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":641,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":74,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":191,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":168,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":187,"com.google.gson.stream.JsonWriterTest.testLongs":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":121,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":148,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":217,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":401,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":59,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":650,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":530,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":240,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":406,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":458,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":571,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":174,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":566,"com.google.gson.stream.JsonWriterTest.testNumbers":681,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":507,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":227,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":304,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":190,"com.google.gson.functional.CollectionTest.testQueueDeserialization":413,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":636,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":513,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":528,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":30,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":344,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":654,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":465,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":81,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":162,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":443,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":169,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":248,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":395,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":23,"com.google.gson.functional.MapTest.testRawMapSerialization":387,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":456,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":632,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":157,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":233,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":53,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":604,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":281,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":309,"com.google.gson.functional.PrimitiveTest.testByteSerialization":550,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":588,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":610,"com.google.gson.ObjectTypeAdapterTest.testSerialize":265,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":627,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":246,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":497,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":128,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":320,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":123,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":75,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":341,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":611,"com.google.gson.functional.MapTest.testMapWithQuotes":378,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":619,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":573,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":606,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":585,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":94,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":618,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":63,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":673,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":66,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":167,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":647,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":440,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":537,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":149,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":16,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":57,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":547,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":626,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":407,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":19,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":237,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":194,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":355,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":638,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":133,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":267,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":590,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":358,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":487,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":21,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":582,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":657,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":156,"com.google.gson.functional.ObjectTest.testNestedSerialization":158,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":38,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":347,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":501,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":592,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":351,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":386,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":52,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":42,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":283,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":292,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":683,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":152,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":570,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":558,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":118,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":291,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":503,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":114,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":159,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":659,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":346,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":315,"com.google.gson.functional.CollectionTest.testSetSerialization":93,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":205,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":329,"com.google.gson.functional.StringTest.testStringValueSerialization":349,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":249,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":100,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":175,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":398,"com.google.gson.MixedStreamTest.testWriteInvalidState":25,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":306,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":623,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":506,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":41,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":512,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":32,"com.google.gson.stream.JsonWriterTest.testBooleans":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":620,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":222,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":195,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":297,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":634,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":652,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":621,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":628,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":648,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":371,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":674,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":294,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":311},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc6193d-3f37-11e6-9c74-9769e704e93a","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc68e6e-3f37-11e6-9c74-1d83076ab34e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (!(o instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc68e6f-3f37-11e6-9c74-77dcf0f79792","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"rawType","rawSupertype":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc6b580-3f37-11e6-9c74-07ee79f3b75d","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"7bc6b581-3f37-11e6-9c74-9da7750da467","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc6dc92-3f37-11e6-9c74-7958d2c5f5bd","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json instanceof com.google.gson.JsonArray) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc703a3-3f37-11e6-9c74-cf7a9b46fc93","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc703a4-3f37-11e6-9c74-611ba4de562a","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[7,8,9],"tindex":"7bc72ab5-3f37-11e6-9c74-d56f52349cc2","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, from, typeVarMap)) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[],"tindex":"7bc751c6-3f37-11e6-9c74-b38d5f0397fb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:952","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc751c7-3f37-11e6-9c74-b752718babdd","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == count) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_LONG":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc778d8-3f37-11e6-9c74-e50921ba1227","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20],"tindex":"7bc778d9-3f37-11e6-9c74-6396f43f23e6","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc778da-3f37-11e6-9c74-275708eae8fc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc79feb-3f37-11e6-9c74-97245766e465","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc79fec-3f37-11e6-9c74-3be81e86a923","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"7bc79fed-3f37-11e6-9c74-f78b8f30900b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc7ee0e-3f37-11e6-9c74-f5c418a8cd30","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc7ee0f-3f37-11e6-9c74-61b1d3bd34e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc7ee10-3f37-11e6-9c74-6d12b3239eb2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc7ee11-3f37-11e6-9c74-2be6ecb17ef9","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[22],"tindex":"7bc81522-3f37-11e6-9c74-6d2cf8f583e4","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == null) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc81523-3f37-11e6-9c74-4b665c44aa3b","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc81524-3f37-11e6-9c74-11e980b5d77b","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276],"tindex":"7bc81525-3f37-11e6-9c74-c3947593f317","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[277,278,279,280,47,87,127,128,129,130,180,190,191,206,207,208,212,213,218,228,229,230,231,261,263,264,281],"tindex":"7bc83c36-3f37-11e6-9c74-1f12aefbea53","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if ((name.length()) == 0) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"7bc83c37-3f37-11e6-9c74-89df9f600677","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key.getRawType().equals(key.getRawType())) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","to":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc83c38-3f37-11e6-9c74-dfdff0911f9a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"7bc83c39-3f37-11e6-9c74-1db779493fdd","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc8634a-3f37-11e6-9c74-9be28f7978ea","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc8634b-3f37-11e6-9c74-873c97de2655","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc8634c-3f37-11e6-9c74-2d565c7ec536","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"7bc8634d-3f37-11e6-9c74-5fee603b4a67","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[23,282,24,25,0,283,26,27,28,284,285,286,287,288,289,290,291,292,31,32,33,293,294,34,35,36,295,296,297,298,299,300,301,302,303,37,38,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,39,40,41,322,323,324,325,326,42,43,327,328,44,45,329,330,331,46,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,47,350,351,48,352,49,50,51,52,353,53,354,54,55,56,57,58,59,60,61,355,62,356,63,64,65,66,67,357,68,69,70,71,72,73,74,75,76,77,78,358,79,80,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,81,374,375,376,377,378,379,380,381,82,382,383,384,83,385,84,85,386,387,388,86,389,390,391,392,393,394,87,88,395,89,396,397,398,399,400,401,402,403,90,404,405,406,407,91,92,408,409,93,410,411,412,413,94,414,415,416,417,418,419,95,96,420,421,422,423,424,425,426,97,98,99,100,101,102,103,104,105,106,107,108,109,427,428,429,110,111,112,113,430,431,15,432,114,115,433,434,435,16,17,436,116,437,438,117,439,440,441,442,443,444,118,445,446,447,448,449,450,451,119,452,453,454,455,456,457,458,459,460,461,18,462,463,120,19,464,465,466,121,467,468,20,469,470,122,123,124,125,126,127,128,471,129,130,131,132,133,472,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,473,150,151,152,153,474,154,475,155,156,157,158,476,159,160,161,162,477,163,164,165,166,167,168,169,170,171,172,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,1,527,528,529,530,531,532,533,534,535,536,537,538,2,3,539,540,541,542,543,544,545,546,547,173,548,549,550,4,551,552,553,554,555,556,557,5,558,559,560,561,562,6,563,564,565,566,567,174,175,176,177,178,179,568,180,181,569,182,183,184,185,186,187,188,189,190,191,570,192,193,571,194,195,196,572,197,198,199,200,573,201,574,575,576,202,203,577,204,578,205,579,580,581,582,583,584,585,586,206,207,208,209,210,211,212,213,214,215,216,217,218,587,588,219,220,589,590,591,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,592,593,247,248,249,594,595,596,597,250,598,599,251,252,253,600,601,602,254,255,256,257,603,258,604,605,259,260,261,606,262,263,264,265,607,608,269,270,281,609,610,611,271,612,613,614,615],"tindex":"7bc88a5e-3f37-11e6-9c74-1d23c4caded3","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[23,24,616,25,0,283,26,284,285,286,290,291,292,31,32,33,293,296,297,298,299,300,301,302,303,37,38,304,305,307,308,309,310,311,314,315,316,320,39,41,323,325,42,327,328,44,45,329,330,331,46,333,334,335,336,337,340,342,346,349,47,350,351,48,50,52,617,354,54,57,58,61,62,356,63,64,65,66,357,68,69,70,71,72,74,75,76,78,80,360,362,366,367,370,372,81,378,379,380,382,383,83,385,84,85,386,387,86,389,391,394,87,88,395,89,396,400,401,402,403,90,406,92,408,93,410,412,94,414,415,416,417,95,420,421,422,425,97,99,101,103,104,110,113,431,15,432,618,434,619,16,17,436,620,117,440,441,442,443,444,445,447,448,450,119,452,453,454,455,458,621,460,18,462,120,19,464,465,466,121,20,622,469,122,123,124,125,126,127,128,471,129,130,131,132,133,472,136,138,139,142,145,148,623,150,624,152,474,475,155,157,158,476,160,163,165,166,168,481,483,489,492,500,501,507,509,510,513,516,518,519,522,523,1,535,537,2,3,541,544,546,549,550,4,551,552,553,554,5,559,6,563,565,174,175,176,177,178,179,568,180,181,183,186,187,188,189,190,191,192,193,194,196,572,197,199,200,573,574,203,577,204,205,579,580,582,584,585,586,206,207,208,209,210,211,212,213,216,217,218,588,220,625,626,221,222,223,224,225,227,228,229,230,231,232,233,234,236,237,238,241,243,246,592,593,247,248,249,627,628,594,595,596,597,250,598,599,251,600,602,254,255,257,603,258,604,259,261,263,264,269,270,281,609,610,629,630,271,612,613,614],"tindex":"7bc8b16f-3f37-11e6-9c74-ed6618aeb8e3","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[117],"tindex":"7bc8b170-3f37-11e6-9c74-19a01ebb10c2","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[117,257],"tindex":"7bc8d881-3f37-11e6-9c74-e92c4ebf857c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[631],"tindex":"7bc8d882-3f37-11e6-9c74-53825aa8662a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[23,24,31,305,311,316,320,39,325,42,327,328,44,45,329,330,331,46,48,632,54,57,58,61,62,356,63,64,65,66,357,68,69,70,71,72,74,75,76,78,80,367,380,85,387,394,88,396,401,90,92,93,410,94,99,103,110,113,122,123,124,125,126,132,133,136,142,150,152,155,158,163,165,168,546,551,553,179,180,181,188,189,191,192,193,204,205,210,216,220,221,228,229,230,231,238,243,246,247,248,249,261,263,264,265],"tindex":"7bc8d883-3f37-11e6-9c74-cd467a87a8b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc8d884-3f37-11e6-9c74-f77e89940bab","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc8ff95-3f37-11e6-9c74-1fff783b339c","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:366","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc8ff96-3f37-11e6-9c74-1f6a866dfc0d","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == 0) {\n        {\n            if (end == 0) {\n                {\n                    return new java.lang.String(char[] , start , (end - start));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc8ff97-3f37-11e6-9c74-5b272d11d715","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc8ff98-3f37-11e6-9c74-6f1c9c0a37ab","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[430,438,465],"tindex":"7bc926a9-3f37-11e6-9c74-8fb71ed79dc0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json != null) {\n        {\n            if (json != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[633,47,357,180,191,228,229,230,231,261,263,264],"tindex":"7bc926aa-3f37-11e6-9c74-0b00735f8982","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc926ab-3f37-11e6-9c74-b1e35b6bf3ab","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc926ac-3f37-11e6-9c74-2f3093daffb0","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (((style == style) || (last == style)) || (last == style)) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"style","last":"style","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"style","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc94dbd-3f37-11e6-9c74-f5f4bc18358b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[634,278],"tindex":"7bc94dbe-3f37-11e6-9c74-1db3a7dfe144","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc94dbf-3f37-11e6-9c74-810566b1278f","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc94dc0-3f37-11e6-9c74-d370c0db5cda","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"7bc94dc1-3f37-11e6-9c74-5b38bbfe41a2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.getRawType().equals(o.getRawType())) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[23,24,283,31,32,33,37,38,304,305,309,310,314,315,320,39,323,42,45,46,333,334,335,336,337,340,342,346,349,47,351,48,50,52,632,635,57,357,72,366,367,370,372,81,378,379,83,84,85,387,86,391,87,88,395,400,402,403,90,406,92,408,425,110,113,444,460,462,132,133,472,136,139,142,145,148,152,155,158,163,168,489,492,507,174,175,176,177,178,179,180,181,186,187,190,192,193,206,207,208,209,211,212,213,216,217,218,588,220,221,228,229,231,232,234,236,237,241,246,592,593,247,248,249,250,600,263,264,269,270,281,271,614],"tindex":"7bc974d2-3f37-11e6-9c74-63064ba9357e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc974d3-3f37-11e6-9c74-615d7c9d4899","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[631,636,637,638,639,640,641,642,643,21],"tindex":"7bc974d4-3f37-11e6-9c74-73c05e0eb1bd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl"},"failures":[108,644],"tindex":"7bc99be5-3f37-11e6-9c74-35fde182ba8d","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (!(key instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc99be6-3f37-11e6-9c74-bfcc417ba5a5","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc99be7-3f37-11e6-9c74-6f1aa1de740f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc99be8-3f37-11e6-9c74-818cca1daf35","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json != null) {\n        {\n            if (json != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc9c2f9-3f37-11e6-9c74-dbd363ddb16f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (!(o instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc9c2fa-3f37-11e6-9c74-7920e179c76a","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc9c2fb-3f37-11e6-9c74-650c516e2e9b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bc9c2fc-3f37-11e6-9c74-13cd3b9f780e","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bc9ea0d-3f37-11e6-9c74-21d00be8cd1b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1118","type":"CtBinaryOperatorImpl"},"failures":[0,283,284,285,286,290,291,32,33,293,294,34,35,36,295,296,297,298,299,300,301,302,303,315,42,43,327,328,44,45,329,330,331,46,47,350,645,351,48,352,49,50,51,52,353,53,354,54,55,56,57,58,59,60,61,355,357,73,77,358,362,363,367,81,83,85,386,87,412,416,97,98,99,100,101,102,103,104,15,16,17,440,450,452,453,458,461,18,19,465,466,467,468,20,122,123,124,125,126,127,128,471,129,130,472,134,135,136,137,623,475,172,480,507,1,2,3,546,4,5,6,179,568,180,181,569,182,183,184,185,571,572,573,201,574,575,576,202,203,577,204,578,205,579,580,581,582,583,584,585,586,589,626,222,224,232,234,235,236,237,238,239,240,242,243,244,245,246,627,595,596,597,251,252,600,601,602,254,255,257,603,258,604,605,259,260,261,606,262,263,264,269,270,646,611,271,612,613,614],"tindex":"7bc9ea0e-3f37-11e6-9c74-434805fec3d3","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == '\\n') {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl"},"failures":[647,631,648,649],"tindex":"7bc9ea0f-3f37-11e6-9c74-8d7bc3f468ff","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"7bca1120-3f37-11e6-9c74-b1775e8d3fb9","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca1121-3f37-11e6-9c74-05d16b09b202","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[0,2,5,6],"tindex":"7bca1122-3f37-11e6-9c74-d7d88ab68578","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca1123-3f37-11e6-9c74-a326838bcfd5","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:152","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca1124-3f37-11e6-9c74-e39fc05457fa","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == 0) {\n        {\n            if (end == 0) {\n                {\n                    return new java.lang.String(char[] , start , (end - start));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[117,622,604],"tindex":"7bca3835-3f37-11e6-9c74-a7150c91f9e2","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca3836-3f37-11e6-9c74-973a8f09bcf3","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"7bca3837-3f37-11e6-9c74-573d7cac8379","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT.equals(typeOfT)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca3838-3f37-11e6-9c74-cd56596ba533","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[27,28,31,34,35,36,43,47,48,49,50,51,53,617,650,651,652,653,654,55,56,59,60,66,67,69,73,74,75,76,77,79,88,89,91,94,96,100,102,105,106,107,108,111,112,114,115,118,131,132,133,134,135,137,139,140,141,143,144,146,147,149,151,153,154,156,159,161,162,164,167,169,170,171,172,173,174,176,177,178,180,182,184,185,192,198,201,202,214,215,219,220,222,223,224,225,226,227,233,239,240,242,244,245,246,247,248,252,253,256,260,262,263,264],"tindex":"7bca3839-3f37-11e6-9c74-87ab270a684c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca5f4a-3f37-11e6-9c74-13ed65dda846","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[624,604],"tindex":"7bca5f4b-3f37-11e6-9c74-25dcfe2daf6c","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca5f4c-3f37-11e6-9c74-d52fea2579e7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca5f4d-3f37-11e6-9c74-cf883e68811a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca5f4e-3f37-11e6-9c74-4553486beba1","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca5f4f-3f37-11e6-9c74-97b5dc5d6882","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bca8660-3f37-11e6-9c74-e3caf88e9310","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            if (src == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bca8661-3f37-11e6-9c74-73a945ae0723","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,269,270,271],"tindex":"7bca8662-3f37-11e6-9c74-a3b17cf7efa5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[94,223,224,225,226,227,594,595,597,598,599],"tindex":"7bca8663-3f37-11e6-9c74-935e05709d2d","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl"},"failures":[],"tindex":"7bcaad74-3f37-11e6-9c74-f3d1e0b6cc67","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, from, typeVarMap)) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from.getRawType().equals(to.getRawType())) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                        for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                            if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                                return false;\n                            } \n                        }\n                        return true;\n                    } \n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from","typeVarMap":"typeVarMap","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7bcaad75-3f37-11e6-9c74-cfcf2cc7b745","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:346","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcaad76-3f37-11e6-9c74-255f3d7d786d","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == (-2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"7bcaad77-3f37-11e6-9c74-6bc94f4d6939","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcaad78-3f37-11e6-9c74-7301da0ddf4c","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:191","type":"CtBinaryOperatorImpl"},"failures":[23,24,0,283,26,290,291,31,655,634,278,279,656,280,32,33,37,38,304,305,307,309,310,311,314,315,316,320,39,41,323,325,42,327,328,44,45,329,330,331,46,340,47,351,48,50,52,657,617,658,632,659,660,661,662,635,54,57,58,61,62,356,63,64,65,66,357,68,69,70,71,72,74,75,76,78,80,362,366,367,370,372,81,378,379,380,383,83,84,85,386,387,86,391,394,87,88,395,89,396,400,401,402,403,90,406,92,408,93,410,94,414,415,416,417,95,420,97,99,103,104,110,113,618,16,620,441,444,450,119,453,454,460,462,121,122,123,124,125,126,131,132,133,136,138,139,142,145,148,150,152,155,157,158,160,163,165,166,168,501,510,541,553,559,563,174,175,176,177,178,179,181,183,186,187,188,189,192,193,194,196,199,200,573,574,203,577,204,205,579,582,586,209,210,211,216,217,220,221,222,223,224,225,227,229,232,233,234,236,237,238,241,243,246,592,593,247,248,249,627,628,594,250,251,600,254,255,257,603,258,259,261,263,264,265,607,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,269,270,629,630,271],"tindex":"7bcaad79-3f37-11e6-9c74-83104cd407d5","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if ((topOfStack++) > topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"topOfStack","threshold":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48a-3f37-11e6-9c74-e7ed4c1eeeb9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48b-3f37-11e6-9c74-a9bb85739d96","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"element","this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48c-3f37-11e6-9c74-5366b94995ae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48d-3f37-11e6-9c74-8d0ae646529b","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:722","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48e-3f37-11e6-9c74-5999a0d0df9f","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (last == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"newTop","com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN":"newTop","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcad48f-3f37-11e6-9c74-4bd30d26cbbc","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 'n') || (c == 'N')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7bcafba0-3f37-11e6-9c74-abdc652fc9c5","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if ((value != null) && (((type == value) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467340023266/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type","value":"value","java.lang.Object.class":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
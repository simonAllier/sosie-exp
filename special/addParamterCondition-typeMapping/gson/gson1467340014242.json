{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":155,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":278,"com.google.gson.functional.StringTest.testStringValueDeserialization":277,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":636,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":62,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":347,"com.google.gson.stream.JsonWriterTest.testRepeatedName":628,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":72,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":147,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":80,"com.google.gson.MixedStreamTest.testWriteLenient":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":531,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":501,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":102,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":63,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":67,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":385,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":485,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":507,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":39,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":370,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":48,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":228,"com.google.gson.functional.ObjectTest.testSingletonLists":114,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":499,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":365,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":469,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":618,"com.google.gson.stream.JsonWriterTest.testStrings":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":402,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":195,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":357,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":252,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":387,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":30,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":477,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":287,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":22,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":383,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":548,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":641,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":456,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":57,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":362,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":650,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":265,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":306,"com.google.gson.functional.EnumTest.testEnumCaseMapping":326,"com.google.gson.GenericArrayTypeTest.testNotEquals":457,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":459,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":468,"com.google.gson.functional.JsonTreeTest.testToJsonTree":206,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":358,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":193,"com.google.gson.stream.JsonWriterTest.testNulls":625,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":338,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":555,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":343,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":366,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":615,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":441,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":198,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":285,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":598,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":649,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":574,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":263,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":175,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":136,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":526,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":506,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":391,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":390,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":356,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":245,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":556,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":591,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":337,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":393,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":138,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":346,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":376,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":81,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":380,"com.google.gson.ParameterizedTypeTest.testNotEquals":423,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":239,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":533,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":176,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":422,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":435,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":592,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":381,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":135,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":545,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":8,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":122,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":644,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":79,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":308,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":578,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":112,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":184,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":46,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":398,"com.google.gson.stream.JsonWriterTest.testEmptyArray":619,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":310,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":451,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":500,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":498,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":174,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":201,"com.google.gson.functional.CollectionTest.testSetDeserialization":66,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":40,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":125,"com.google.gson.functional.EnumTest.testEnumSet":320,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":328,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":377,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":340,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":427,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":130,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":45,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":243,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":11,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":388,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":640,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":260,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":510,"com.google.gson.functional.MapTest.testHashMapDeserialization":297,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":351,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":395,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":543,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":154,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":207,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":236,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":452,"com.google.gson.functional.MapTest.testSortedMap":307,"com.google.gson.functional.MapTest.testMapSerialization":430,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":156,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":379,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":273,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":100,"com.google.gson.functional.MapTest.testSerializeMaps":480,"com.google.gson.functional.MapTest.testComplexKeysSerialization":61,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":327,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":436,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":532,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":547,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":200,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":234,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":219,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":612,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":325,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":20,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":74,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":361,"com.google.gson.functional.MapTest.testStringKeyDeserialization":309,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":609,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":602,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":369,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":437,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":518,"com.google.gson.functional.PrettyPrintingTest.testMap":549,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":562,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":158,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":489,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":251,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":275,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":557,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":280,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":472,"com.google.gson.functional.MapTest.testMapSerializationEmpty":434,"com.google.gson.functional.CollectionTest.testQueueSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":495,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":522,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":646,"com.google.gson.functional.MapTest.testMapOfMapSerialization":482,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":583,"com.google.gson.JavaSerializationTest.testMapIsSerializable":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":344,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":315,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":621,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":153,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":588,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":611,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":537,"com.google.gson.functional.FieldNamingTest.testIdentity":101,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":279,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":399,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":167,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":631,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":139,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":78,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":113,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":205,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":570,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":623,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":363,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":414,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":244,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":470,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":608,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":86,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":353,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":341,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":569,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":295,"com.google.gson.functional.MapTest.testMapSubclassSerialization":479,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":601,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":54,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":107,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":329,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":225,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":374,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":558,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":334,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":194,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":44,"com.google.gson.functional.EnumTest.testEnumSubclass":323,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":589,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":128,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":576,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":171,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":384,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":214,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":88,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":632,"com.google.gson.stream.JsonWriterTest.testTwoNames":620,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":87,"com.google.gson.stream.JsonWriterTest.testNullName":626,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":182,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":241,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":270,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":448,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":77,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":584,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":634,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":503,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":115,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":296,"com.google.gson.MixedStreamTest.testWriteNulls":527,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":424,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":629,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":447,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":463,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":42,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":199,"com.google.gson.CommentsTest.testParseComments":413,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":117,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":512,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":15,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":164,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":289,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":471,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":561,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":37,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":504,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":600,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":421,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":25,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":617,"com.google.gson.JsonParserTest.testParseMixedArray":530,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":368,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":416,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":276,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":161,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":538,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":580,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":345,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":595,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":269,"com.google.gson.functional.MapTest.testMapDeserialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":497,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":552,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":560,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":227,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":458,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":191,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":429,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":230,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":519,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":220,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":204,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":140,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":573,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":209,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":410,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":491,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":52,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":85,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":218,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":431,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":401,"com.google.gson.functional.PrimitiveTest.testShortSerialization":599,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":386,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":267,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":535,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":375,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":92,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":367,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":97,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":322,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":64,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":106,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":299,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":372,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":445,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":603,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":83,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":541,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":352,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":5,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":539,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":606,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":475,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":76,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":141,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":177,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":190,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":487,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":542,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":148,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":179,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":145,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":121,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":446,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":211,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":486,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":91,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":400,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":425,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":226,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":567,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":565,"com.google.gson.stream.JsonWriterTest.testNullStringValue":521,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":349,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":187,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":311,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":389,"com.google.gson.JsonArrayTest.testSet":249,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":587,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":604,"com.google.gson.stream.JsonWriterTest.testEmptyObject":639,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":12,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":229,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":321,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":160,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":26,"com.google.gson.functional.MapTest.testGeneralMapField":60,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":119,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":544,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":14,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":172,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":408,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":502,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":332,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":406,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":508,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":594,"com.google.gson.MixedStreamTest.testReadMixedStreamed":4,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":339,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":581,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":237,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":415,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":443,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":642,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":110,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":266,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":536,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":254,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":94,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":304,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":478,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":298,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":513,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":605,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":23,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":33,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":627,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":566,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":330,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":168,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":331,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":412,"com.google.gson.functional.ObjectTest.testNestedDeserialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":450,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":288,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":575,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":157,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":181,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":264,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":163,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":73,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":281,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":305,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":43,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":597,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":210,"com.google.gson.JavaSerializationTest.testListIsSerializable":256,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":84,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":105,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":444,"com.google.gson.functional.ObjectTest.testNullSerialization":572,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":213,"com.google.gson.stream.JsonWriterTest.testDoubles":645,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":294,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":300,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":59,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":577,"com.google.gson.functional.MapTest.testInterfaceTypeMap":58,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":272,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":643,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":409,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":186,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":70,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":291,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":217,"com.google.gson.MixedStreamTest.testReadClosed":418,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":262,"com.google.gson.MixedStreamTest.testWriteClosed":3,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":159,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":484,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":120,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":359,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":49,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":185,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":166,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":162,"com.google.gson.stream.JsonWriterTest.testLongs":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":96,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":123,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":192,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":440,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":34,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":215,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":350,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":397,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":149,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":394,"com.google.gson.stream.JsonWriterTest.testNumbers":647,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":509,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":335,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":202,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":460,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":165,"com.google.gson.functional.CollectionTest.testQueueDeserialization":319,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":378,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":582,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":607,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":355,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":56,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":137,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":494,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":144,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":223,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":438,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":483,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":348,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":476,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":132,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":208,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":28,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":520,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":454,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":462,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":514,"com.google.gson.functional.PrimitiveTest.testByteSerialization":596,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":648,"com.google.gson.ObjectTypeAdapterTest.testSerialize":240,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":516,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":221,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":528,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":103,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":466,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":98,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":50,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":282,"com.google.gson.functional.MapTest.testMapWithQuotes":481,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":490,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":511,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":453,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":403,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":563,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":38,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":633,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":411,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":41,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":142,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":21,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":492,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":590,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":124,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":336,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":32,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":493,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":613,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":316,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":426,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":461,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":212,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":169,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":292,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":108,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":405,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":293,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":364,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":246,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":610,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":131,"com.google.gson.functional.ObjectTest.testNestedSerialization":133,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":13,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":286,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":515,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":579,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":250,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":433,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":27,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":17,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":257,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":420,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":525,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":127,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":396,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":392,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":188,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":93,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":89,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":134,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":554,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":473,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":465,"com.google.gson.functional.CollectionTest.testSetSerialization":68,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":180,"com.google.gson.functional.StringTest.testStringValueSerialization":474,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":550,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":224,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":75,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":150,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":312,"com.google.gson.MixedStreamTest.testWriteInvalidState":2,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":571,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":16,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":373,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":7,"com.google.gson.stream.JsonWriterTest.testBooleans":622,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":564,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":99,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":197,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":170,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":261,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":534,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":568,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":517,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":428,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":635,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":258,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":546},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"tindex":"46a8109e-3f33-11e6-9ee3-170e99b0924f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46a8acdf-3f33-11e6-9ee3-7dec68df5f46","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeOfT","typeOfT":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46a8ace0-3f33-11e6-9ee3-57f95dc5943d","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"46a8d3f1-3f33-11e6-9ee3-2770df81a90e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl"},"failures":[249],"tindex":"46a8d3f2-3f33-11e6-9ee3-2b9724897ce3","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[250,23],"tindex":"46a8fb03-3f33-11e6-9ee3-73c3c7cdfc68","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[251,252,253,254,255,256,257,258,9,10,11,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,15,274,275,276,18,277,278,279,280,281,282,283,284,285,286,287,22,288,250,23,289,24,25,26,27,290,28,291,30,31,34,35,292,41,42,44,48,49,50,51,52,293,54,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,63,64,311,312,313,314,315,316,66,317,318,319,69,320,321,322,323,324,325,71,326,327,328,329,73,75,77,330,86,87,331,332,333,89,334,335,336,337,338,91,339,340,92,341,93,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,106,107,108,109,110,112,114,115,116,118,119,121,122,124,126,360,128,129,131,134,136,137,361,139,142,144,145,146,147,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,148,389,390,391,392,393,394,149,151,152,153,395,157,159,396,167,397,173,176,398,399,177,400,401,402,403,189,190,194,404,405,197,198,199,200,201,202,208,214,215,217,219,220,221,406,222,223,407,408,409,410,227,228,411,231,412,235,237,238,239,413,414,415],"tindex":"46a8fb04-3f33-11e6-9ee3-d15a33c08e37","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (!(obj instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[416,417],"tindex":"46a94925-3f33-11e6-9ee3-3f6949b8e856","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[418,419,420,421,254,255,256,422,423,258,259,424,271,425,21,23,37,38,40,41,42,426,43,44,45,47,48,49,50,51,52,53,293,54,55,295,297,298,299,300,427,428,429,301,302,303,304,305,430,306,57,431,307,432,433,308,61,434,309,435,436,310,437,438,311,312,313,439,440,441,314,315,442,66,443,317,444,445,319,320,321,322,323,324,446,447,330,336,348,108,448,387,396,449,399,401,450,451,452,236,453,237,238,239,413,454,455,456,457],"tindex":"46a97036-3f33-11e6-9ee3-354c92ff721f","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[0,1,420,251,458,459,257,6,7,8,260,261,262,263,264,265,266,267,12,13,460,461,462,463,464,465,466,467,17,20,468,278,469,279,470,471,472,473,474,22,288,250,23,25,27,291,475,476,477,32,426,47,478,479,480,427,429,56,481,482,58,59,60,483,61,435,62,63,438,439,484,441,442,67,443,445,69,320,321,322,323,70,446,326,485,486,85,88,487,332,488,489,490,336,338,491,92,492,493,494,495,496,497,498,345,499,350,500,501,502,95,354,503,355,504,505,506,107,108,507,114,117,120,123,127,130,133,138,141,143,508,368,509,510,149,150,151,152,153,154,156,161,162,511,449,178,512,513,450,184,185,186,191,192,514,195,197,198,199,200,202,204,207,209,211,212,216,221,515,406,222,223,516,517,407,408,518,409,225,410,226,519,229,230,520,234,238,239,521,522,523,524,525,241,242,526,243,415],"tindex":"46a97037-3f33-11e6-9ee3-3f9eca8101cb","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"46a99748-3f33-11e6-9ee3-17e6f564d461","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"46a9be59-3f33-11e6-9ee3-d7213bdc4dec","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"46a9be5a-3f33-11e6-9ee3-39edc6b0c034","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46a9e56b-3f33-11e6-9ee3-472436f2ac32","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"46a9e56c-3f33-11e6-9ee3-19124dd3ddea","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[417],"tindex":"46aa0c7d-3f33-11e6-9ee3-cb5bff4a08af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"46aa5a9e-3f33-11e6-9ee3-357fa97f1ea0","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46aa81af-3f33-11e6-9ee3-c91c15794da7","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:818","type":"CtBinaryOperatorImpl"},"failures":[0,1,527,2,419,420,3,251,252,253,528,458,459,529,257,6,530,531,532,533,534,535,536,537,538,539,540,541,542,7,8,543,260,261,262,263,264,265,266,267,12,13,460,461,544,545,462,463,546,464,465,424,466,14,16,467,547,17,548,549,19,20,550,551,552,21,468,278,469,279,470,471,472,473,474,22,288,250,23,25,27,553,291,475,476,554,555,556,557,477,558,29,32,33,36,37,559,38,39,40,41,426,43,44,45,46,47,49,50,51,53,55,478,560,479,480,427,429,56,481,482,430,431,561,58,432,59,60,433,483,61,434,435,437,62,63,438,64,562,439,440,484,441,65,442,67,443,68,444,445,69,320,321,322,323,70,446,326,485,486,72,74,76,78,79,85,88,487,332,488,563,489,490,336,338,491,564,92,492,565,493,494,495,496,497,498,566,94,345,567,346,499,350,568,500,501,502,95,354,503,355,504,96,505,569,506,97,98,99,100,101,102,103,570,104,105,106,107,108,507,111,113,114,117,120,123,571,125,572,127,573,574,130,132,133,575,135,138,140,141,143,576,577,508,368,578,579,509,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,510,595,596,597,598,599,600,601,602,603,604,605,606,149,150,151,152,153,154,607,155,156,158,161,162,163,164,165,166,167,168,169,171,608,172,174,175,511,449,178,609,179,180,512,513,610,611,403,450,181,182,183,184,185,186,187,188,191,192,193,514,195,612,613,196,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,216,218,221,515,406,222,223,224,516,517,407,408,518,409,225,410,614,226,519,615,229,230,232,616,233,520,234,236,238,239,617,240,618,619,620,621,622,521,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,522,645,646,523,647,524,525,241,242,454,455,648,526,649,243,650,414,415],"tindex":"46aaa8c0-3f33-11e6-9ee3-13e515713760","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NONE":"newTop"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46aacfd1-3f33-11e6-9ee3-b1dbacb84bfd","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"46aaf6e2-3f33-11e6-9ee3-013d0f9e8dc6","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339613367/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
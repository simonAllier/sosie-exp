{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":15,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":153,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":452,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":64,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":402,"com.google.gson.stream.JsonWriterTest.testRepeatedName":444,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":66,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":84,"com.google.gson.MixedStreamTest.testWriteLenient":415,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":256,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":79,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":205,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":215,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":486,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":226,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":273,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":171,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":59,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":516,"com.google.gson.functional.ObjectTest.testSingletonLists":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":253,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":274,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":154,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":435,"com.google.gson.stream.JsonWriterTest.testStrings":462,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":102,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":17,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":12,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":494,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":34,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":407,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":432,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":11,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":144,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":456,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":24,"com.google.gson.functional.EnumTest.testEnumCaseMapping":225,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":121,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":152,"com.google.gson.functional.JsonTreeTest.testToJsonTree":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":149,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":412,"com.google.gson.stream.JsonWriterTest.testNulls":442,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":237,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":429,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":465,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":111,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":7,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":212,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":356,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":492,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":320,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":394,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":30,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":44,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":346,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":497,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":393,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":264,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":371,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":523,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":312,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":430,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":306,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":136,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":252,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":477,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":471,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":366,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":390,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":420,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":88,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":203,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":313,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":132,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":289,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":125,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":457,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":490,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":73,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":298,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":401,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":347,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":177,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":90,"com.google.gson.stream.JsonWriterTest.testEmptyArray":436,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":255,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":248,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":345,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":511,"com.google.gson.functional.CollectionTest.testSetDeserialization":475,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":172,"com.google.gson.functional.EnumTest.testEnumSet":220,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":281,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":89,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":187,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":285,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":176,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":39,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":455,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":41,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":355,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":316,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":404,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":120,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":126,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":359,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":388,"com.google.gson.functional.MapTest.testMapSerialization":192,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":119,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":49,"com.google.gson.functional.MapTest.testSerializeMaps":186,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":268,"com.google.gson.functional.MapTest.testComplexKeysSerialization":201,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":419,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":357,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":476,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":387,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":514,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":353,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":23,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":147,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":466,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":68,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":94,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":324,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":204,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":108,"com.google.gson.functional.PrettyPrintingTest.testMap":145,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":234,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":335,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":33,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":431,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":158,"com.google.gson.functional.MapTest.testMapSerializationEmpty":202,"com.google.gson.functional.CollectionTest.testQueueSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":245,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":458,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":460,"com.google.gson.functional.MapTest.testMapOfMapSerialization":191,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":304,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":437,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":309,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":103,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":155,"com.google.gson.functional.FieldNamingTest.testIdentity":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":91,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":340,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":447,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":499,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":20,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":72,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":81,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":275,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":440,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":116,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":86,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":156,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":307,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":478,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":263,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":332,"com.google.gson.functional.MapTest.testMapSubclassSerialization":185,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":323,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":271,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":474,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":377,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":414,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":13,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":510,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":175,"com.google.gson.functional.EnumTest.testEnumSubclass":222,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":310,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":35,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":493,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":294,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":113,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":343,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":93,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":395,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":229,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":448,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":479,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":391,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":9,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":71,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":305,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":450,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":260,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":485,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":63,"com.google.gson.MixedStreamTest.testWriteNulls":520,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":138,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":445,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":106,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":98,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":277,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":517,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":339,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":48,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":157,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":194,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":28,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":168,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":77,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":322,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":50,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":433,"com.google.gson.JsonParserTest.testParseMixedArray":418,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":297,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":397,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":336,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":301,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":74,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":247,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":150,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":62,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":515,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":522,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":188,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":350,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":383,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":396,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":19,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":284,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":361,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":238,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":60,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":367,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":100,"com.google.gson.functional.PrimitiveTest.testShortSerialization":321,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":112,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":26,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":8,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":240,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":265,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":29,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":207,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":5,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":270,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":65,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":325,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":14,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":76,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":518,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":422,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":468,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":328,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":56,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":92,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":292,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":509,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":230,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":425,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":504,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":95,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":502,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":489,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":224,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":363,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":376,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":96,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":384,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":242,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":389,"com.google.gson.stream.JsonWriterTest.testNullStringValue":439,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":385,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":308,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":326,"com.google.gson.stream.JsonWriterTest.testEmptyObject":454,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":127,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":221,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":382,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":16,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":51,"com.google.gson.functional.MapTest.testGeneralMapField":198,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":488,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":107,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":140,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":257,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":231,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":296,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":370,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":315,"com.google.gson.MixedStreamTest.testReadMixedStreamed":467,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":302,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":117,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":216,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":519,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":483,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":25,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":250,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":99,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":162,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":166,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":443,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":249,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":405,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":469,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":104,"com.google.gson.functional.ObjectTest.testNestedDeserialization":503,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":27,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":505,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":45,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":338,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":67,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":174,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":362,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":83,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":218,"com.google.gson.functional.ObjectTest.testNullSerialization":282,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":365,"com.google.gson.stream.JsonWriterTest.testDoubles":459,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":197,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":295,"com.google.gson.functional.MapTest.testInterfaceTypeMap":195,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":109,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":55,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":223,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":379,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":232,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":43,"com.google.gson.MixedStreamTest.testWriteClosed":417,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":211,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":506,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":278,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":508,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":403,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":179,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":348,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":293,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":337,"com.google.gson.stream.JsonWriterTest.testLongs":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":262,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":279,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":351,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":210,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":409,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":57,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":512,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":75,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":85,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":329,"com.google.gson.stream.JsonWriterTest.testNumbers":461,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":300,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":18,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":358,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":398,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":334,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":410,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":189,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":498,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":244,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":372,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":501,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":206,"com.google.gson.functional.MapTest.testRawMapSerialization":200,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":413,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":427,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":286,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":360,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":54,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":386,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":133,"com.google.gson.functional.PrimitiveTest.testByteSerialization":318,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":352,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":374,"com.google.gson.ObjectTypeAdapterTest.testSerialize":434,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":368,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":521,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":80,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":139,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":266,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":180,"com.google.gson.functional.MapTest.testMapWithQuotes":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":235,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":31,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":233,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":170,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":449,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":110,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":173,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":500,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":464,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":241,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":311,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":142,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":236,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":82,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":243,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":58,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":259,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":364,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":342,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":400,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":272,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":411,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":61,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":406,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":426,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":495,"com.google.gson.internal.LinkedTreeMapTest.testClear":6,"com.google.gson.functional.ObjectTest.testNestedSerialization":287,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":128,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":299,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":369,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":161,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":199,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":52,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":46,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":123,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":416,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":463,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":283,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":481,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":480,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":496,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":408,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":428,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":159,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":137,"com.google.gson.functional.CollectionTest.testSetSerialization":217,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":97,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":148,"com.google.gson.functional.StringTest.testStringValueSerialization":160,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":373,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":69,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":330,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":280,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":141,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":124,"com.google.gson.stream.JsonWriterTest.testBooleans":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":239,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":524,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":22,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":105,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":42,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":421,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":470,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":254,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":375,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":451,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":36,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":135},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319810dd-3f0e-11e6-957d-4d1e2a4e16d8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198860e-3f0e-11e6-957d-8bca960a31a6","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3198860f-3f0e-11e6-957d-e547ef098613","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198ad20-3f0e-11e6-957d-e94a285ac50f","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198ad21-3f0e-11e6-957d-f536e16ed0d6","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == 0) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"3198ad22-3f0e-11e6-957d-6f8a50e71a3b","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198d433-3f0e-11e6-957d-07f1c8645317","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3198d434-3f0e-11e6-957d-7ffefc0b005a","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.WildcardType)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198fb45-3f0e-11e6-957d-dfbcae614df2","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3198fb46-3f0e-11e6-957d-534e55387edd","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"31992257-3f0e-11e6-957d-e16fd345e2f1","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"31992258-3f0e-11e6-957d-2921aaa88109","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"31992259-3f0e-11e6-957d-6336bb925532","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:251","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"3199496a-3f0e-11e6-957d-3feee6aa7056","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if ((replacement != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3199707b-3f0e-11e6-957d-7fbb79770f94","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3199707c-3f0e-11e6-957d-851aae7e7859","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (value instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:828","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3199978d-3f0e-11e6-957d-6dd5529ef34d","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[24,25,26,11,27,28,29,30,31,32],"tindex":"3199978e-3f0e-11e6-957d-379d7be9db7f","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3199978f-3f0e-11e6-957d-79a7baa0d4e8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[33,34,35,36,37,38,39,40,41,42,43,44,45,24,26,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,32,115,116,117],"tindex":"3199bea0-3f0e-11e6-957d-cbb0e29d06bb","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3199e5b1-3f0e-11e6-957d-312b2627f8b6","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (keyElement.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            return java.lang.String.valueOf(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            return java.lang.Boolean.toString(primitive.getAsBoolean());\n                        } else if (primitive.isString()) {\n                            return primitive.getAsString();\n                        } else {\n                            throw new java.lang.AssertionError();\n                        }\n                    } else if (keyElement.isJsonNull()) {\n                        return \"null\";\n                    } else {\n                        throw new java.lang.AssertionError();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a0cc2-3f0e-11e6-957d-cd1d494a1c09","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (keyElement.isJsonPrimitive()) {\n                        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                        if (primitive.isNumber()) {\n                            return java.lang.String.valueOf(primitive.getAsNumber());\n                        } else if (primitive.isBoolean()) {\n                            return java.lang.Boolean.toString(primitive.getAsBoolean());\n                        } else if (primitive.isString()) {\n                            return primitive.getAsString();\n                        } else {\n                            throw new java.lang.AssertionError();\n                        }\n                    } else if (keyElement.isJsonNull()) {\n                        return \"null\";\n                    } else {\n                        throw new java.lang.AssertionError();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl"},"failures":[118,15,119,120,16],"tindex":"319a0cc3-3f0e-11e6-957d-5177694f5597","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a0cc4-3f0e-11e6-957d-5b237918d748","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != null) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","obj":"src","reader":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319a33d5-3f0e-11e6-957d-4344b0401336","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a33d6-3f0e-11e6-957d-d5ea4db05f99","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[33,34,35,121,122,123,4,124,125,126,41,42,43,44,45,24,25,26,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,46,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,11,27,161,162,50,52,55,163,164,165,166,167,168,169,170,171,172,173,58,174,175,176,177,178,179,180,181,182,183,184,62,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,64,205,206,207,208,209,210,211,212,213,214,215,216,217,218,65,219,220,221,29,222,223,224,225,226,227,66,68,70,72,73,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,74,251,252,253,75,254,255,256,257,258,259,260,261,77,262,78,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,30,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,118,334,119,335,336,337,338,339,340,341,342,343,86,344,345,346,87,89,93,94,95,97,98,99,101,103,31,104,347,348,349,350,351,352,17,353,354,355,105,356,106,357,358,19,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,107,108,109,377,378,379,380,381,111,382,383,384,112,385,386,387,388,389,390,391,392,393,394,32,115,116,117],"tindex":"319a5ae7-3f0e-11e6-957d-0508a18d7506","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (appendable == null) {\n                {\n                    return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a5ae8-3f0e-11e6-957d-4b46d6878c1b","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319a5ae9-3f0e-11e6-957d-cf3d171bb65b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:226","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a5aea-3f0e-11e6-957d-e5b3b11b6817","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if ((replacement != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement","right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319a81fb-3f0e-11e6-957d-a1fab9269013","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319a81fc-3f0e-11e6-957d-07f82dd92e2f","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[265,268,359,364,395,396],"tindex":"319a81fd-3f0e-11e6-957d-5fb71da6ded4","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319aa90e-3f0e-11e6-957d-d7538ab9ac94","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319aa90f-3f0e-11e6-957d-936854db914c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319aa910-3f0e-11e6-957d-1df3f13b139a","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319aa911-3f0e-11e6-957d-6f412d8eef0f","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319aa912-3f0e-11e6-957d-e52ffff3f4f0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319aa913-3f0e-11e6-957d-092f4e89118f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (value instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319acf24-3f0e-11e6-957d-1ded5d4eb716","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319acf25-3f0e-11e6-957d-0fff5c6dbeef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[123,4,124,125,126,41,42,43,44,45,24,25,26,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,50,52,163,164,165,166,167,168,169,170,171,172,177,184,186,189,190,191,194,195,197,198,200,64,205,206,208,210,211,213,214,215,217,219,220,221,29,222,223,224,226,227,66,68,70,72,73,228,229,230,232,234,238,241,242,243,244,245,246,247,248,249,250,251,252,253,255,256,257,258,259,260,261,77,262,78,264,265,266,267,268,269,270,271,273,274,275,276,277,278,279,281,283,284,30,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,319,320,322,323,324,325,326,327,329,330,331,332,333,118,335,336,337,338,339,340,341,342,343,86,344,345,346,87,93,94,95,97,98,99,101,31,348,350,351,352,17,105,356,106,357,358,19,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,376,107,108,109,377,378,379,380,381,111,382,383,384,112,385,387,391,392,115,116,117],"tindex":"319acf26-3f0e-11e6-957d-013df9f0bd0a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319af637-3f0e-11e6-957d-4d21ed8d05ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319af638-3f0e-11e6-957d-71080ea4baea","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[397,398,399,400,401,402,403,404,405,406],"tindex":"319af639-3f0e-11e6-957d-0bb0bd4a95c9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b1d4a-3f0e-11e6-957d-c5a1f6365e5a","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"319b1d4b-3f0e-11e6-957d-9302041c2696","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b1d4c-3f0e-11e6-957d-5704a21097e5","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319b445d-3f0e-11e6-957d-c949d0c6307b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b445e-3f0e-11e6-957d-bdce3341ffff","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if ((obj != obj) && (token != obj)) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"obj","token":"obj","com.google.gson.stream.JsonToken.NUMBER":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[164,407,408,165,166,409,410,167,411,412],"tindex":"319b445f-3f0e-11e6-957d-4385f03f9742","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl"},"failures":[413,414,415,416,417,121,122,4,418,419,420,421,422,423,424,425,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,46,144,145,146,147,148,149,150,151,157,11,161,162,50,52,426,55,56,427,428,429,430,431,432,164,165,166,167,168,169,170,171,172,173,58,174,175,176,177,178,179,180,181,182,183,62,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,64,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,29,222,223,224,66,68,70,72,73,228,229,233,236,239,242,245,249,250,251,252,255,257,258,262,265,266,267,268,269,270,271,272,274,275,276,277,278,279,280,281,283,285,286,287,288,289,290,291,292,293,296,299,302,314,322,325,327,329,330,331,332,333,118,119,335,336,337,338,339,340,341,342,344,346,87,89,93,94,95,97,98,101,104,347,348,349,350,351,17,355,105,356,106,357,358,19,359,360,361,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,380,381,382,383,384,112,385,387,388,389,390,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,391,392,393,394,32],"tindex":"319b4460-3f0e-11e6-957d-cd547da2466a","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty == nonempty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"nonempty","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"nonempty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319b6b71-3f0e-11e6-957d-116df50290e2","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b6b72-3f0e-11e6-957d-ad25f97e7a75","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319b6b73-3f0e-11e6-957d-a7b8dd4f8028","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b6b74-3f0e-11e6-957d-a1000fbf63a2","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (appendable == null) {\n                {\n                    return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:958","type":"CtBinaryOperatorImpl"},"failures":[464,397,465,466],"tindex":"319b6b75-3f0e-11e6-957d-c16f89096ddf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"319b9286-3f0e-11e6-957d-356375597290","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b9287-3f0e-11e6-957d-616550cec22c","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b9288-3f0e-11e6-957d-6d3e7148889a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[467,468,4,37,38,39,47,11,162,49,50,51,54,55,57,469,470,471,472,407,408,409,410,173,473,175,59,179,180,181,60,474,205,207,475,219,476,69,71,477,14,478,479,480,481,270,271,272,482,483,484,276,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,84,504,329,331,332,333,15,505,506,16,340,507,88,92,508,509,510,17,105,356,106,357,511,358,360,395,512,513,514,396,368,371,372,515,516,517,518,519,389,390],"tindex":"319b9289-3f0e-11e6-957d-0b1d66175dbd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Number) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value","value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319b928a-3f0e-11e6-957d-f71ffaa30d15","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319bb99b-3f0e-11e6-957d-35fcb3007f7e","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[413,414,520,415,416,33,34,35,521,522,121,122,123,4,420,421,422,425,124,125,126,41,42,43,44,45,24,25,26,127,128,129,130,131,133,134,135,136,137,138,139,140,141,142,143,46,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,11,27,161,162,50,52,426,55,56,427,428,429,430,431,432,163,164,165,166,167,168,169,170,171,172,173,58,174,175,176,177,178,179,180,181,182,183,184,62,185,186,187,188,189,190,191,192,194,195,197,198,199,200,201,203,204,64,205,206,207,208,209,210,211,212,213,214,215,216,217,218,65,219,220,221,29,222,223,224,225,226,227,66,68,72,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,74,251,252,253,75,254,255,256,257,259,260,261,77,262,78,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,281,282,283,284,30,285,286,287,290,291,292,293,294,296,297,299,300,302,303,305,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,324,325,326,327,328,329,330,331,332,333,118,334,119,335,336,337,338,339,340,341,87,89,93,94,95,97,98,99,101,103,31,104,347,348,349,350,351,352,17,353,354,355,105,356,106,357,358,19,359,360,361,363,364,365,366,367,368,369,370,371,372,373,374,375,376,107,108,109,377,378,380,381,111,382,383,384,112,385,386,387,388,389,390,434,435,438,439,441,442,443,444,446,451,452,523,458,459,524,461,462,463,391,392,393,394,32,116,117],"tindex":"319bb99c-3f0e-11e6-957d-7ddd2d5caff6","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"319bb99d-3f0e-11e6-957d-2926512ddacd","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[],"tindex":"319be0ae-3f0e-11e6-957d-81c1d9b202c8","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (java.lang.Character.isLetter(c)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467322888463/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":66,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
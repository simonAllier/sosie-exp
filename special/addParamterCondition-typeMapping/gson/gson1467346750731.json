{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":404,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":299,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":357,"com.google.gson.functional.StringTest.testStringValueDeserialization":637,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":130,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":525,"com.google.gson.stream.JsonWriterTest.testRepeatedName":352,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":459,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":271,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":605,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":411,"com.google.gson.MixedStreamTest.testWriteLenient":428,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":87,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":374,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":256,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":266,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":585,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":491,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":106,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":323,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":229,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":569,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":633,"com.google.gson.functional.ObjectTest.testSingletonLists":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":83,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":107,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":300,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":454,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":337,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":386,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":191,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":532,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":594,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":8,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":493,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":366,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":606,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":645,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":278,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":196,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":487,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":552,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":12,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":448,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":236,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":551,"com.google.gson.functional.EnumTest.testEnumCaseMapping":322,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":298,"com.google.gson.functional.JsonTreeTest.testToJsonTree":410,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":447,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":533,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":423,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":363,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":561,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":285,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":168,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":400,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":643,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":592,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":3,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":44,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":460,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":215,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":234,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":334,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":597,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":2,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":406,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":499,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":498,"com.google.gson.JsonParserTest.testParseString":399,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":531,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":36,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":30,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":516,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":140,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":82,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":474,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":412,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":484,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":424,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":522,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":250,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":380,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":128,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":37,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":583,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":485,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":136,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":220,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":296,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":589,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":22,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":275,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":554,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":537,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":251,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":445,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":381,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":556,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":86,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":77,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":442,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":333,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":572,"com.google.gson.functional.CollectionTest.testSetDeserialization":621,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":230,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":211,"com.google.gson.functional.EnumTest.testEnumSet":316,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":579,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":477,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":173,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":438,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":519,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":216,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":488,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":444,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":494,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":194,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":231,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":40,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":457,"com.google.gson.functional.MapTest.testHashMapDeserialization":541,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":528,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":297,"com.google.gson.MixedStreamTest.testReadNulls":429,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":508,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":307,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":248,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":577,"com.google.gson.functional.MapTest.testSortedMap":553,"com.google.gson.functional.MapTest.testMapSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":55,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":402,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":370,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":482,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":563,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":101,"com.google.gson.functional.MapTest.testSerializeMaps":111,"com.google.gson.functional.MapTest.testComplexKeysSerialization":126,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":578,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":343,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":407,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":170,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":652,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":292,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":648,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":192,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":651,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":199,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":393,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":272,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":599,"com.google.gson.functional.MapTest.testStringKeyDeserialization":555,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":440,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":175,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":48,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":129,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":150,"com.google.gson.functional.PrettyPrintingTest.testMap":197,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":458,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":63,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":575,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":7,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":365,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":566,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":304,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":74,"com.google.gson.functional.MapTest.testMapSerializationEmpty":127,"com.google.gson.functional.CollectionTest.testQueueSerialization":260,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":478,"com.google.gson.functional.MapTest.testMapOfMapSerialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":28,"com.google.gson.JavaSerializationTest.testMapIsSerializable":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":524,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":619,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":348,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":33,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":181,"com.google.gson.functional.FieldNamingTest.testIdentity":102,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":382,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":280,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":600,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":205,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":274,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":376,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":409,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":449,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":13,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":302,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":331,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":31,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":530,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":96,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":327,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":539,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":47,"com.google.gson.functional.MapTest.testMapSubclassSerialization":110,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":16,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":571,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":580,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":152,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":243,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":472,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":514,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":319,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":34,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":9,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":593,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":18,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":330,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":426,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":646,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":450,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":277,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":475,"com.google.gson.stream.JsonWriterTest.testTwoNames":347,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":629,"com.google.gson.stream.JsonWriterTest.testNullName":350,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":419,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":560,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":479,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":591,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":29,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":355,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":627,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":91,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":584,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":540,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":142,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":353,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":581,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":169,"com.google.gson.CommentsTest.testParseComments":425,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":568,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":178,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":634,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":489,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":564,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":369,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":119,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":303,"com.google.gson.MixedStreamTest.testReadInvalidState":427,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":93,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":131,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":335,"com.google.gson.JsonParserTest.testParseMixedArray":342,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":21,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":567,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":439,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":239,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":25,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":80,"com.google.gson.functional.MapTest.testMapDeserialization":546,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":76,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":202,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":632,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":113,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":287,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":649,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":184,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":513,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":214,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":153,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":570,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":315,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":118,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":198,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":95,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":446,"com.google.gson.functional.PrimitiveTest.testShortSerialization":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":385,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":492,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":473,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":69,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":456,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":98,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":318,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":258,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":15,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":543,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":49,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":270,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":636,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":344,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":432,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":52,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":502,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":361,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":273,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":383,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":59,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":244,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":346,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":496,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":476,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":603,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":588,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":321,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":311,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":517,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":148,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":384,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":81,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":71,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":249,"com.google.gson.stream.JsonWriterTest.testNullStringValue":349,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":527,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":421,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":615,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":497,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":32,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":50,"com.google.gson.stream.JsonWriterTest.testEmptyObject":360,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":286,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":317,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":405,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":371,"com.google.gson.functional.MapTest.testGeneralMapField":123,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":587,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":505,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":149,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":88,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":121,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":60,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":187,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":39,"com.google.gson.MixedStreamTest.testReadMixedStreamed":431,"com.google.gson.JsonObjectTest.testDeepCopy":395,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":518,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":548,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":14,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":612,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":536,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":480,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":237,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":435,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":79,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":549,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":108,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":542,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":179,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":58,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":246,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":351,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":470,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":78,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":582,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":511,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":618,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":183,"com.google.gson.functional.ObjectTest.testNestedDeserialization":604,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":219,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":279,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":509,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":418,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":504,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":241,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":550,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":625,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":639,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":310,"com.google.gson.JavaSerializationTest.testListIsSerializable":437,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":378,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":415,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":269,"com.google.gson.functional.ObjectTest.testNullSerialization":212,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":313,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":538,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":544,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":122,"com.google.gson.functional.MapTest.testInterfaceTypeMap":120,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":562,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":253,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":452,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":329,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":154,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":61,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":464,"com.google.gson.MixedStreamTest.testWriteClosed":341,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":262,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":510,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":534,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":613,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":252,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":417,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":94,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":255,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":261,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":608,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":483,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":367,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":265,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":84,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":388,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":324,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":506,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":24,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":515,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":416,"com.google.gson.functional.CollectionTest.testQueueDeserialization":624,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":27,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":481,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":642,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":92,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":609,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":114,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":598,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":73,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":602,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":257,"com.google.gson.functional.MapTest.testRawMapSerialization":125,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":338,"com.google.gson.JsonParserTest.testParseReader":398,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":526,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":362,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":217,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":308,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":373,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":291,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":403,"com.google.gson.functional.PrimitiveTest.testByteSerialization":42,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":137,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":190,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":434,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":104,"com.google.gson.ObjectTypeAdapterTest.testSerialize":336,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":461,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":375,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":143,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":99,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":163,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":368,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":640,"com.google.gson.functional.MapTest.testMapWithQuotes":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":64,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":467,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":611,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":182,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":225,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":62,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":228,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":389,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":155,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":601,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":203,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":70,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":146,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":245,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":377,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":495,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":193,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":620,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":90,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":312,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":282,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":610,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":17,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":576,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":379,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":180,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":595,"com.google.gson.functional.ObjectTest.testNestedSerialization":218,"com.google.gson.JsonObjectTest.testAddingStringProperties":396,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":294,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":23,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":644,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":124,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":132,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":204,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":10,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":430,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":213,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":630,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":501,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":422,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":521,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":512,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":596,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":607,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":305,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":141,"com.google.gson.functional.CollectionTest.testSetSerialization":268,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":653,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":177,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":200,"com.google.gson.functional.StringTest.testStringValueSerialization":306,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":103,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":325,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":616,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":626,"com.google.gson.MixedStreamTest.testWriteInvalidState":340,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":557,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":210,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":468,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":145,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":471,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":68,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":167,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":391,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":631,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":85,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":105,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":545,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":356,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":139,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":441},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334],"tindex":"f5edc368-3f42-11e6-add1-d10edf6ecd83","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5eed4d9-3f42-11e6-add1-ebcafa3ac2e9","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[],"tindex":"f5eed4da-3f42-11e6-add1-2bd83def7d8a","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"rawType","classOfPrimitive":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5ef22fb-3f42-11e6-add1-1f392663f191","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5ef22fc-3f42-11e6-add1-37a34804a13c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:151","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,335,336,337,338,339,340,341,6,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,11,15,16,17,20,53,55,56,58,68,78,79,81,86,89,94,98,99,100,101,102,103,104,105,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,144,148,152,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,174,175,176,177,178,180,183,184,185,188,189,191,194,197,198,199,203,204,205,206,207,208,209,210,211,213,216,217,218,219,220,221,222,223,224,225,226,228,229,230,239,240,241,242,244,245,246,247,248,249,250,251,252,253,254,255,256,258,264,266,268,271,272,273,274,275,276,277,278,280,281,282,283,286,287,288,289,290,292,293,294,295,296,307,308,309,311,312,313,314,315,320,324,325,326,327,328,329,361,362,363,364,365,366,330,332,333,334],"tindex":"f5efbf3d-3f42-11e6-add1-45a3db1f78cf","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == (openBracket.length())) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"openBracket","index":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f00d5e-3f42-11e6-add1-8bfe525afd07","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f00d5f-3f42-11e6-add1-297b87a05392","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (!(from instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[99,311,367],"tindex":"f5f05b80-3f42-11e6-add1-19172621c383","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f05b81-3f42-11e6-add1-e54004ba114e","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"f5f08292-3f42-11e6-add1-a5124eed8c29","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f08293-3f42-11e6-add1-b35e74eeb6c4","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if ((type instanceof java.lang.reflect.ParameterizedType) && (!(type.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f0a9a4-3f42-11e6-add1-43490edeb72e","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f0a9a5-3f42-11e6-add1-bf04793d0334","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f0d0b6-3f42-11e6-add1-4df607ed09fd","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f0f7c7-3f42-11e6-add1-0dd96db028ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f20938-3f42-11e6-add1-c35622b83560","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == timeStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f23049-3f42-11e6-add1-59161fa97296","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"f5f2575a-3f42-11e6-add1-a38dfd487e89","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,40],"tindex":"f5f2575b-3f42-11e6-add1-35b388b591db","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f2575c-3f42-11e6-add1-3fcc405335c7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[368,11,12,13,14,95,109,130,369,370,131,371,132,372,373,149,151,374,375,376,377,378,156,379,172,380,173,381,382,383,174,175,176,384,177,178,179,385,180,386,181,183,204,387,231,232,233,234,236,270,388,389,285,289,331],"tindex":"f5f27e6d-3f42-11e6-add1-d5988a5b4da5","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f27e6e-3f42-11e6-add1-a1452fd708ed","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f27e6f-3f42-11e6-add1-f922c8db7397","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f2a580-3f42-11e6-add1-294fbfa2bab7","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f2a581-3f42-11e6-add1-97012fc6dbe3","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[390,2,391,392,393,394,395,396,3,397,398,399,6,400,401,402,344,345,346,403,404,405,406,68,104,105,407,130,369,370,131,371,132,372,373,374,375,377,378,156,379,381,174,175,176,180,408,184,409,410,191,411,412,413,414,415,225,416,417,248,249,250,418,419,420,421,422,423,278,388,389,289,424,331],"tindex":"f5f2cc92-3f42-11e6-add1-9709a1935e4a","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[425,0,1,4,5,426,336,338,427,339,340,428,429,430,341,431,432,6,7,8,9,403,433,434,10,368,11,12,13,14,435,436,437,438,439,440,441,442,443,444,445,15,16,17,446,447,448,18,449,19,450,451,452,453,454,20,455,456,21,457,458,459,460,461,462,463,22,23,464,465,466,467,468,24,469,25,26,470,471,27,472,473,28,474,29,30,475,476,31,32,477,478,479,33,480,481,482,483,484,485,486,487,34,488,35,489,36,37,490,491,38,492,493,39,494,40,495,496,497,41,42,43,44,45,46,47,498,499,500,48,501,49,502,503,504,50,51,505,52,506,507,53,54,404,55,508,509,56,510,405,57,58,511,59,60,61,406,512,513,62,514,63,64,515,65,516,66,67,517,518,68,519,69,520,70,71,72,73,74,521,75,522,76,77,523,78,524,79,80,81,82,525,83,526,527,84,528,85,86,529,87,88,530,89,90,91,92,93,94,531,532,95,96,533,97,534,98,99,100,101,102,103,106,535,536,107,537,538,108,539,109,540,541,542,110,111,543,544,112,545,113,546,114,547,548,549,550,115,116,117,551,552,118,119,553,120,121,122,123,124,125,554,126,127,555,128,407,556,129,130,369,370,131,371,132,372,373,133,134,557,135,136,137,138,139,558,559,140,141,142,560,561,562,143,563,144,564,145,565,146,566,147,567,148,149,150,151,152,153,154,374,375,376,377,378,155,568,156,157,158,159,160,161,569,162,163,164,570,165,379,571,166,167,168,169,170,572,171,172,380,173,381,382,383,174,175,176,384,177,178,179,385,180,386,181,182,183,408,184,409,410,185,186,187,188,189,573,190,574,191,575,576,577,194,578,579,195,580,196,197,198,199,200,201,202,203,204,387,411,412,413,414,415,581,582,583,205,206,584,585,207,586,587,208,588,589,209,590,591,211,592,213,593,214,594,215,216,595,217,218,219,596,220,597,598,599,221,600,222,223,601,224,602,603,604,605,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,416,417,243,244,606,607,245,246,608,609,247,610,248,611,612,249,250,418,419,420,251,252,253,421,422,613,614,254,255,423,256,257,258,259,615,616,617,260,261,262,263,264,618,619,265,620,621,266,267,622,268,269,623,270,624,271,625,272,626,273,627,274,275,276,628,629,277,278,279,630,280,281,388,282,631,283,632,633,284,389,285,286,287,634,288,289,290,291,635,292,636,293,294,295,296,297,637,298,299,300,301,302,638,639,303,640,304,641,642,643,305,644,645,306,307,308,309,310,311,312,313,646,367,314,647,315,648,649,316,317,318,319,650,651,320,652,321,322,323,324,325,326,327,328,330,331,332,653,333,334],"tindex":"f5f2f3a3-3f42-11e6-add1-db2721121128","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f5f31ab4-3f42-11e6-add1-8b60d0e20245","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (!throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f341c5-3f42-11e6-add1-ed0e33c06724","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f341c6-3f42-11e6-add1-593f84fe67c1","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"f5f341c7-3f42-11e6-add1-5f2234583d4e","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f368d8-3f42-11e6-add1-61d42b775b3c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"f5f368d9-3f42-11e6-add1-438318e8d7d1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f5f3b6fa-3f42-11e6-add1-eda5035b4b27","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            if (value instanceof java.lang.Number) {\n                {\n                    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346101935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
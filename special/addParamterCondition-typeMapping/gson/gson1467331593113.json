{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":232,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":46,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":97,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":275,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":109,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":248,"com.google.gson.stream.JsonWriterTest.testRepeatedName":267,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":131,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":180,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":151,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":127,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":110,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":112,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":120,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":156,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":74,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":182,"com.google.gson.functional.ObjectTest.testSingletonLists":161,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":22,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":256,"com.google.gson.stream.JsonWriterTest.testStrings":288,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":217,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":20,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":60,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":133,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":175,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":23,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":66,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":207,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":53,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":44,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":228,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":241,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":247,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":141,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":252,"com.google.gson.stream.JsonWriterTest.testNullStringValue":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":249,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":49,"com.google.gson.stream.JsonWriterTest.testNulls":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":87,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":63,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":6,"com.google.gson.stream.JsonWriterTest.testEmptyObject":278,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":26,"com.google.gson.JsonPrimitiveTest.testEquals":295,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":245,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":117,"com.google.gson.functional.MapTest.testGeneralMapField":102,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":220,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":39,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":148,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":100,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":177,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":235,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":293,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":202,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":179,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":121,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":292,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":281,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":72,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":236,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":276,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":144,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":35,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":146,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":55,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":69,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":266,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":143,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":231,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":197,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":253,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":211,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":171,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":107,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":194,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":31,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":172,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":15,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":25,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":283,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":296,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":135,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":78,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":4,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":212,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":81,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":123,"com.google.gson.stream.JsonWriterTest.testEmptyArray":257,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":230,"com.google.gson.stream.JsonWriterTest.testDoubles":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":147,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":101,"com.google.gson.functional.MapTest.testInterfaceTypeMap":99,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":282,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":214,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":75,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":59,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":129,"com.google.gson.functional.EnumTest.testEnumSet":125,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":166,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":204,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":91,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":168,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":80,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":294,"com.google.gson.MixedStreamTest.testWriteClosed":12,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":279,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":116,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":218,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":163,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":83,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":213,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":176,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":193,"com.google.gson.stream.JsonWriterTest.testLongs":263,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":150,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":216,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":115,"com.google.gson.functional.MapTest.testMapSerialization":96,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":190,"com.google.gson.functional.MapTest.testSerializeMaps":90,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":154,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":70,"com.google.gson.functional.MapTest.testComplexKeysSerialization":105,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":17,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":42,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":184,"com.google.gson.stream.JsonWriterTest.testNumbers":287,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":222,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":28,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":223,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":47,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":132,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":93,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":206,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":237,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":5,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":111,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":8,"com.google.gson.functional.MapTest.testRawMapSerialization":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":108,"com.google.gson.functional.PrettyPrintingTest.testMap":45,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":61,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":113,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":169,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":191,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":65,"com.google.gson.functional.MapTest.testMapSerializationEmpty":106,"com.google.gson.functional.CollectionTest.testQueueSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":142,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":284,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":32,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":286,"com.google.gson.functional.MapTest.testMapOfMapSerialization":95,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":239,"com.google.gson.ObjectTypeAdapterTest.testSerialize":255,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":233,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":259,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":188,"com.google.gson.functional.FieldNamingTest.testIdentity":155,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":38,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":152,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":84,"com.google.gson.functional.MapTest.testMapWithQuotes":94,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":196,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":270,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":134,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":203,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":262,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":138,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":73,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":291,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":272,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":187,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":76,"com.google.gson.functional.MapTest.testMapSubclassSerialization":89,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":51,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":157,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":41,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":9,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":149,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":79,"com.google.gson.functional.EnumTest.testEnumSubclass":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":139,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":199,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":68,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":205,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":29,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":229,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":198,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":137,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":158,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":271,"com.google.gson.stream.JsonWriterTest.testTwoNames":258,"com.google.gson.stream.JsonWriterTest.testNullName":265,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":58,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":210,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":290,"com.google.gson.functional.ObjectTest.testNestedSerialization":170,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":27,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":178,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":234,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":54,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":273,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":103,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":269,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":57,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":43,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":37,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":268,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":11,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":289,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":33,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":167,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":221,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":209,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":195,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":14,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":52,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":98,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":62,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":71,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":181,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":36,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":56,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":254,"com.google.gson.functional.CollectionTest.testSetSerialization":122,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":48,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":208,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":238,"com.google.gson.JsonParserTest.testParseMixedArray":16,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":185,"com.google.gson.MixedStreamTest.testWriteInvalidState":10,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":165,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":7,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":192,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":40,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":186,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":24,"com.google.gson.stream.JsonWriterTest.testBooleans":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":140,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":153,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":50,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":219,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":88,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":92,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":246,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":244,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":297,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":224,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":19,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":85,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":227,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":240,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":274,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":34},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab45c0d2-3f1f-11e6-86e7-8d7a4c7b27fc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ab468423-3f1f-11e6-86e7-f1898c373f99","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"ab46ab34-3f1f-11e6-86e7-e35efe019e40","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"ab46d245-3f1f-11e6-86e7-5f9db2dcfa59","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294],"tindex":"ab46f956-3f1f-11e6-86e7-43377f74489e","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"ab46f957-3f1f-11e6-86e7-a75dccd13783","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    try {\n        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n        } \n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl"},"failures":[295,296],"tindex":"ab472068-3f1f-11e6-86e7-d95fdb35ffd9","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab472069-3f1f-11e6-86e7-05ff6ee9eddf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[265],"tindex":"ab47477a-3f1f-11e6-86e7-65c218af7b78","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ab476e8b-3f1f-11e6-86e7-277c2530cdb8","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab476e8c-3f1f-11e6-86e7-4fc448c97d41","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ab476e8d-3f1f-11e6-86e7-dfe1cfd76f12","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ab47959e-3f1f-11e6-86e7-7979069e3f66","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[151,225,297],"tindex":"ab47959f-3f1f-11e6-86e7-f36c49733cf5","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab4795a0-3f1f-11e6-86e7-7913db441580","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab47bcb1-3f1f-11e6-86e7-4bfb0bb3c297","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab47bcb2-3f1f-11e6-86e7-21d07ab695bb","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof com.google.gson.JsonArray) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab47e3c3-3f1f-11e6-86e7-ffa7a05b9207","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ab47e3c4-3f1f-11e6-86e7-0b21c23f98b1","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331215589/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":19,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":204,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":365,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":168,"com.google.gson.stream.JsonWriterTest.testRepeatedName":363,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":32,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":301,"com.google.gson.MixedStreamTest.testWriteLenient":95,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":249,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":90,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":25,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":84,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":276,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":313,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":238,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":265,"com.google.gson.functional.ObjectTest.testSingletonLists":169,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":262,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":8,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":244,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":329,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":287,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":354,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":101,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":211,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":376,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":234,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":71,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":153,"com.google.gson.functional.JsonTreeTest.testToJsonTree":89,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":55,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":318,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":392,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":373,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":127,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":335,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":78,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":341,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":284,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":369,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":100,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":293,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":326,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":258,"com.google.gson.JsonParserTest.testParseString":331,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":374,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":359,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":250,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":320,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":133,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":30,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":164,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":345,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":171,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":24,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":282,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":315,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":37,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":161,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":263,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":230,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":324,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":114,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":166,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":380,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":9,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":220,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":81,"com.google.gson.functional.CollectionTest.testSetDeserialization":85,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":67,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":74,"com.google.gson.functional.EnumTest.testEnumSet":116,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":102,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":144,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":109,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":190,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":198,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":245,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":38,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":203,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":115,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":129,"com.google.gson.functional.MapTest.testSortedMap":155,"com.google.gson.functional.MapTest.testMapSerialization":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":205,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":342,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":302,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":309,"com.google.gson.functional.MapTest.testSerializeMaps":384,"com.google.gson.functional.MapTest.testComplexKeysSerialization":72,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":165,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":80,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":247,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":139,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":338,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":47,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":314,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":33,"com.google.gson.functional.MapTest.testStringKeyDeserialization":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":377,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":347,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":167,"com.google.gson.functional.PrettyPrintingTest.testMap":389,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":375,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":0,"com.google.gson.functional.MapTest.testMapSerializationEmpty":162,"com.google.gson.functional.CollectionTest.testQueueSerialization":176,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":367,"com.google.gson.functional.MapTest.testMapOfMapSerialization":386,"com.google.gson.JavaSerializationTest.testMapIsSerializable":93,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":180,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":361,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":14,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":343,"com.google.gson.functional.FieldNamingTest.testIdentity":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":103,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":199,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":296,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":36,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":88,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":274,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":271,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":317,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":13,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":140,"com.google.gson.functional.MapTest.testMapSubclassSerialization":383,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":122,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":240,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":68,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":192,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":251,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":243,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":108,"com.google.gson.functional.EnumTest.testEnumSubclass":119,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":286,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":355,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":98,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":31,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":45,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":273,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":2,"com.google.gson.stream.JsonWriterTest.testTwoNames":360,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":272,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":49,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":316,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":337,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":170,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":35,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":353,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":275,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":126,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":79,"com.google.gson.CommentsTest.testParseComments":187,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":266,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":378,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":18,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":255,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":387,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":64,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":56,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":6,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":303,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":15,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":12,"com.google.gson.functional.MapTest.testMapDeserialization":147,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":264,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":54,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":48,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":321,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":70,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":59,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":40,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":229,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":227,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":270,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":154,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":185,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":393,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":104,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":382,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":60,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":306,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":118,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":311,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":248,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":333,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":142,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":252,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":269,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":196,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":371,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":350,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":53,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":222,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":390,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":221,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":223,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":299,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":281,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":121,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":241,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":381,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":1,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":136,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":358,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":4,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":356,"com.google.gson.stream.JsonWriterTest.testNullStringValue":362,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":268,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":51,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":174,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":348,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":21,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":117,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":137,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":209,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":304,"com.google.gson.functional.MapTest.testGeneralMapField":159,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":279,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":219,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":254,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":157,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":391,"com.google.gson.MixedStreamTest.testReadMixedStreamed":195,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":149,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":131,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":261,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":92,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":62,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":150,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":141,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":128,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":214,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":352,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":357,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":125,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":200,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":105,"com.google.gson.functional.ObjectTest.testNestedDeserialization":300,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":228,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":17,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":151,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":349,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":107,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":346,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":41,"com.google.gson.JavaSerializationTest.testListIsSerializable":94,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":28,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":253,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":183,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":44,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":143,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":158,"com.google.gson.functional.MapTest.testInterfaceTypeMap":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":231,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":319,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":246,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":370,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":226,"com.google.gson.MixedStreamTest.testWriteClosed":194,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":208,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":52,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":280,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":110,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":50,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":20,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":16,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":298,"com.google.gson.stream.JsonWriterTest.testLongs":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":63,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":233,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":283,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":177,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":215,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":46,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":181,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":10,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":82,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":19,"com.google.gson.functional.CollectionTest.testQueueDeserialization":184,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":3,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":216,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":148,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":294,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":366,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":172,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":259,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":173,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":191,"com.google.gson.functional.MapTest.testRawMapSerialization":388,"com.google.gson.JsonParserTest.testParseReader":330,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":182,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":372,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":39,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":290,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":83,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":188,"com.google.gson.ObjectTypeAdapterTest.testSerialize":7,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":322,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":257,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":394,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":26,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":307,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":111,"com.google.gson.functional.MapTest.testMapWithQuotes":385,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":130,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":69,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":65,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":106,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":297,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":186,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":113,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":27,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":379,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":43,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":201,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":325,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":289,"com.google.gson.functional.ObjectTest.testNestedSerialization":291,"com.google.gson.internal.LinkedTreeMapTest.testClear":334,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":22,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":160,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":305,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":134,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":96,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":97,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":285,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":232,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":58,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":292,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":212,"com.google.gson.functional.CollectionTest.testSetSerialization":86,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":224,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":218,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":11,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":34,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":175,"com.google.gson.MixedStreamTest.testWriteInvalidState":193,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":256,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":327,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":308,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":332,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":77,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":202,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":112,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":323,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":145,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":364},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61bb6888-3e70-11e6-b731-6b0af255e371","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"61bbddb9-3e70-11e6-b731-4936574ff550","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[1,2,3,4,5],"tindex":"61bbddba-3e70-11e6-b731-d1a9d59a5773","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"61bc04cb-3e70-11e6-b731-8d524c14426b","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"61bc2bdc-3e70-11e6-b731-fd78650e7386","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"61bc2bdd-3e70-11e6-b731-b91749d09e86","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key.length()) == 0) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[6,7,8],"tindex":"61bc52ee-3e70-11e6-b731-29a1916cee79","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (out == null) {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[],"tindex":"61bc52ef-3e70-11e6-b731-df2f7a4f250b","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,7],"tindex":"61bc7a00-3e70-11e6-b731-798bc0e43469","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61bca111-3e70-11e6-b731-db89ec9893c6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61bca112-3e70-11e6-b731-0b56202bcf2e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"61bcc823-3e70-11e6-b731-3b301e30b6de","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"offset","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[87,70,88,89],"tindex":"61bcc824-3e70-11e6-b731-d54509edc4da","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"61bcef35-3e70-11e6-b731-0dad7b40d1e9","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"61bcef36-3e70-11e6-b731-634b915a506e","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61bcef37-3e70-11e6-b731-b9f12bd73199","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME)"},"failures":[90,91],"tindex":"61bcef38-3e70-11e6-b731-b7ada4af657e","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[92,93,94,95,96,97,10,11,12,13,14,15,16,18,19,20,98,99,100,101,102,103,104,105,49,50,52,106,107,108,109,110,111,112,56,57,113,114,115,116,117,118,119,120,121,122,123,64,65,67,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,71,154,155,156,157,158,159,160,161,72,162,163,164,165,166,167,168,169,170,171,76,172,84,173,174,175,176,177,178,179,180,181,85,182,183,184,185,186,187,188,189],"tindex":"61bd1649-3e70-11e6-b731-0bae36845155","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"61bd3d5a-3e70-11e6-b731-e36d67d422a6","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"61bd3d5b-3e70-11e6-b731-31d86dc4e38a","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (out == null) {\n                {\n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n                    write(writer, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"61bd3d5c-3e70-11e6-b731-43844c8bc910","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61bd3d5d-3e70-11e6-b731-4541471dadd3","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"61bd3d5e-3e70-11e6-b731-db13cde7c553","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[190,191,192,193,194,195,196,9,197,198,199,200,201,202,10,11,12,13,14,15,16,17,18,19,20,21,22,203,204,205,206,207,208,209,23,24,210,211,212,213,214,215,216,217,218,25,26,27,28,98,219,99,220,100,221,30,222,31,223,224,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,225,226,227,47,48,228,49,229,230,50,231,51,232,52,53,54,233,55,234,106,235,107,108,109,236,237,238,110,111,112,239,56,240,57,58,59,241,60,61,62,242,63,243,244,245,246,247,248,122,123,64,65,66,67,68,69,87,70,88,89,249,250,251,252,253,254,255,256,257,258,259,128,129,131,132,133,134,135,260,261,262,263,136,264,265,137,138,266,267,268,139,269,148,71,156,158,159,72,168,270,271,272,273,274,169,275,276,277,278,279,280,281,282,283,73,74,284,285,286,287,288,289,290,291,292,171,293,294,295,296,75,76,297,298,172,299,300,301,77,78,79,80,81,82,302,303,304,305,83,306,307,308,309,310,84,311,312,85,313,86,185,314,186,315,316,317,7],"tindex":"61bd646f-3e70-11e6-b731-59804da3da5f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[93,318,319,19,20,204,209,320,321,322,323,324,325,49,229,51,232,55,234,326,327,244,122,69,87,70,88,89,249,250,251,252,253,129,132,133,147,150,153,163,304,328,83,329,330,331,315,332,333,334,335,336,337,338,339,340,341,342],"tindex":"61bd6470-3e70-11e6-b731-0de928f230c8","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61bd8b81-3e70-11e6-b731-25fa61bb62f3","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"61bdb292-3e70-11e6-b731-4569244d2a30","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61bdb293-3e70-11e6-b731-cfdfe68adae6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[95,343,344,345,346,347,348],"tindex":"61bdb294-3e70-11e6-b731-916f0267491b","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"61bdb295-3e70-11e6-b731-7b2a62202bad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"61bdb296-3e70-11e6-b731-07b582479cd5","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a.length()) == 0) {\n        {\n            if (a == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[190,191,192,193,194,195,196,9,197,198,199,200,201,202,10,11,12,13,14,15,16,17,18,19,20,21,22,203,204,205,206,207,208,209,23,24,210,211,212,213,214,215,216,217,218,25,26,27,28,98,219,99,220,100,221,30,222,31,223,224,32,349,33,34,350,35,36,37,38,39,40,41,42,43,44,45,46,225,226,227,47,48,228,49,229,230,50,231,51,232,52,53,54,233,55,234,106,235,107,108,109,236,237,238,110,111,112,239,56,240,57,58,59,241,60,61,62,242,63,243,244,245,246,247,248,122,123,64,65,66,67,68,69,87,70,88,89,249,250,251,252,253,254,255,256,257,258,259,128,129,131,132,133,134,135,260,261,262,263,136,264,265,137,138,266,267,268,139,269,148,71,156,158,159,72,168,270,271,272,273,274,169,275,276,277,278,279,280,281,282,283,73,74,284,285,286,287,288,289,290,291,292,171,293,294,295,296,75,76,297,298,172,299,300,301,77,78,79,80,81,82,302,303,304,305,83,306,307,308,309,310,84,311,312,85,313,86,185,314,186,315,316,317,7],"tindex":"61bdd9a7-3e70-11e6-b731-27c6bc1c0e5c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61bdd9a8-3e70-11e6-b731-2befacd78cd1","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"61bdd9a9-3e70-11e6-b731-672d8775a01d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61bdd9aa-3e70-11e6-b731-0950877dd656","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"61be00bb-3e70-11e6-b731-93aefd17981b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61be00bc-3e70-11e6-b731-d7148d6246c1","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"61be00bd-3e70-11e6-b731-31de27102d96","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"61be00be-3e70-11e6-b731-eb8f14483ccd","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            if (insert) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"61be27cf-3e70-11e6-b731-094223cf134c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"61be27d0-3e70-11e6-b731-fb93a9e316e2","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a.length()) == 0) {\n        {\n            if (a == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"61be27d1-3e70-11e6-b731-0705254512e5","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[351,352,353,354,355,356,357,358,359],"tindex":"61be4ee2-3e70-11e6-b731-f18f7c008889","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61be4ee3-3e70-11e6-b731-add88b92cc66","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"61be4ee4-3e70-11e6-b731-af25d6104258","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    if (node != null) {\n        removeInternal(node, true);\n    } \n    return node;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"61be4ee5-3e70-11e6-b731-a7b36f908488","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[360,361,362,352,363,353,364,365,366,367,190,191,192,368,369,199,200,201,10,11,12,13,14,15,16,17,18,21,22,203,205,207,23,24,370,371,372,373,374,375,376,210,213,214,217,218,322,323,98,220,100,31,377,223,224,378,325,105,32,33,36,37,38,39,40,42,43,44,225,227,230,50,231,54,233,234,106,379,107,108,109,236,237,110,111,112,56,57,327,357,62,358,380,242,63,244,245,246,248,122,123,64,65,66,67,381,68,69,70,254,257,258,259,128,129,132,133,134,262,136,137,138,267,382,268,139,383,384,144,146,148,385,386,152,154,387,156,157,158,159,160,388,72,164,167,168,270,273,274,169,277,280,283,74,285,288,290,291,171,295,75,76,298,77,78,79,80,82,303,305,306,307,308,309,310,84,311,312,313,86,389,185,314,186,315,316,317,7,8,339,340,390],"tindex":"61be4ee6-3e70-11e6-b731-bdba752e9e5d","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[391,113,392,90,91,393],"tindex":"61be75f7-3e70-11e6-b731-0b8b5e0b2147","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"61be75f8-3e70-11e6-b731-f7f5a048ec10","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"61be75f9-3e70-11e6-b731-e771cc30964a","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeOfT","context":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"61be75fa-3e70-11e6-b731-73dc596abd14","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"61be9d0b-3e70-11e6-b731-8571784e100c","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[394],"tindex":"61be9d0c-3e70-11e6-b731-031b05cdea7b","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"61be9d0d-3e70-11e6-b731-2dbecd4ed897","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"type","typeOfT":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"61be9d0e-3e70-11e6-b731-ad0177debf6c","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"61be9d0f-3e70-11e6-b731-457d33e0f727","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write(java.lang.Long.toString(value));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"61bec420-3e70-11e6-b731-03d6f755ddfa","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (!(java.lang.Character.isUpperCase(quote))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1344","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"61bec421-3e70-11e6-b731-b570ce8e6979","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","l":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"61bec422-3e70-11e6-b731-5d54f684c8e6","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[],"tindex":"61bec423-3e70-11e6-b731-abacc0acbbf0","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255209675/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
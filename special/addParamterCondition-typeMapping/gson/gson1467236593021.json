{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":178,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":592,"com.google.gson.functional.StringTest.testStringValueDeserialization":590,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":662,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":73,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":435,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":396,"com.google.gson.stream.JsonWriterTest.testRepeatedName":654,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":10,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":140,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":62,"com.google.gson.MixedStreamTest.testWriteLenient":609,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":573,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":617,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":51,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":45,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":49,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":109,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":444,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":302,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":532,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":159,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":405,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":624,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":23,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":84,"com.google.gson.functional.ObjectTest.testSingletonLists":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":566,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":389,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":593,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":280,"com.google.gson.stream.JsonWriterTest.testStrings":675,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":334,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":6,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":581,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":122,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":287,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":447,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":221,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":680,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":606,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":145,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":436,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":498,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":667,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":68,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":274,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":381,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":493,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":264,"com.google.gson.functional.EnumTest.testEnumCaseMapping":301,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":591,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":611,"com.google.gson.functional.JsonTreeTest.testToJsonTree":209,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":380,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":501,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":104,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":256,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":616,"com.google.gson.stream.JsonWriterTest.testNulls":651,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":546,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":634,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":523,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":560,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":620,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":375,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":246,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":147,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":251,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":603,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":456,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":678,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":397,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":477,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":491,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":78,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":129,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":677,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":583,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":80,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":461,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":460,"com.google.gson.JsonParserTest.testParseString":255,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":580,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":441,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":635,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":420,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":467,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":131,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":519,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":565,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":63,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":352,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":433,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":266,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":557,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":205,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":638,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":366,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":340,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":442,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":434,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":128,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":513,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":115,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":229,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":670,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":15,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":401,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":95,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":21,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":260,"com.google.gson.stream.JsonWriterTest.testEmptyArray":644,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":289,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":368,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":571,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":559,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":150,"com.google.gson.functional.CollectionTest.testSetDeserialization":48,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":160,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":118,"com.google.gson.functional.EnumTest.testEnumSet":294,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":534,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":425,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":327,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":685,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":549,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":123,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":438,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":164,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":449,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":666,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":7,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":488,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":450,"com.google.gson.functional.MapTest.testHashMapDeserialization":344,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":394,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":570,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":505,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":589,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":31,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":202,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":293,"com.google.gson.functional.MapTest.testSortedMap":360,"com.google.gson.functional.MapTest.testMapSerialization":357,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":179,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":252,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":168,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":431,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":526,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":233,"com.google.gson.functional.MapTest.testSerializeMaps":346,"com.google.gson.functional.MapTest.testComplexKeysSerialization":72,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":533,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":367,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":637,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":530,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":9,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":149,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":90,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":243,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":43,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":299,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":166,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":621,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":625,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":479,"com.google.gson.functional.MapTest.testStringKeyDeserialization":265,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":687,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":527,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":329,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":463,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":369,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":395,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":484,"com.google.gson.functional.PrettyPrintingTest.testMap":499,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":181,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":543,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":286,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":529,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":636,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":596,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":600,"com.google.gson.functional.CollectionTest.testQueueSerialization":312,"com.google.gson.functional.MapTest.testMapSerializationEmpty":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":555,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":626,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":426,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":671,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":673,"com.google.gson.functional.MapTest.testMapOfMapSerialization":356,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":417,"com.google.gson.JavaSerializationTest.testMapIsSerializable":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":562,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":317,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":646,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":156,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":428,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":335,"com.google.gson.functional.FieldNamingTest.testIdentity":234,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":328,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":184,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":657,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":132,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":106,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":208,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":325,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":649,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":383,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":275,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":370,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":595,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":142,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":575,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":550,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":556,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":341,"com.google.gson.functional.MapTest.testMapSubclassSerialization":345,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":459,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":29,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":174,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":161,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":237,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":415,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":585,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":64,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":542,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":5,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":19,"com.google.gson.functional.EnumTest.testEnumSubclass":297,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":437,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":121,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":288,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":382,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":74,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":443,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":38,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":385,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":144,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":281,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":658,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":421,"com.google.gson.stream.JsonWriterTest.testTwoNames":645,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":143,"com.google.gson.stream.JsonWriterTest.testNullName":652,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":93,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":1,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":522,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":248,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":427,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":475,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":13,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":419,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":660,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":656,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":577,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":108,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":343,"com.google.gson.MixedStreamTest.testWriteNulls":683,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":521,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":655,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":338,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":515,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":17,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":148,"com.google.gson.CommentsTest.testParseComments":613,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":622,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":87,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":331,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":195,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":440,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":503,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":359,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":598,"com.google.gson.MixedStreamTest.testReadInvalidState":608,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":157,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":28,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":579,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":169,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":642,"com.google.gson.JsonParserTest.testParseMixedArray":643,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":393,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":619,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":531,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":686,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":192,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":614,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":410,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":154,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":563,"com.google.gson.functional.MapTest.testMapDeserialization":262,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":558,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":502,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":342,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":83,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":102,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":351,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":86,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":373,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":44,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":267,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":207,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":213,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":133,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":476,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":33,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":486,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":547,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":42,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":141,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":165,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":358,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":582,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":333,"com.google.gson.functional.PrimitiveTest.testShortSerialization":457,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":376,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":446,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":416,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":247,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":215,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":392,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":230,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":296,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":46,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":173,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":244,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":347,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":409,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":323,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":465,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":640,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":572,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":241,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":472,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":466,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":631,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":101,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":134,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":539,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":641,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":105,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":58,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":422,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":138,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":114,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":35,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":535,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":330,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":82,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":564,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":399,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":552,"com.google.gson.stream.JsonWriterTest.testNullStringValue":648,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":568,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":98,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":386,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":452,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":424,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":469,"com.google.gson.stream.JsonWriterTest.testEmptyObject":665,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":60,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":85,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":295,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":183,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":170,"com.google.gson.functional.MapTest.testGeneralMapField":71,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":112,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":512,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":471,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":75,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":574,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":361,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":372,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":540,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":448,"com.google.gson.MixedStreamTest.testReadMixedStreamed":240,"com.google.gson.JsonObjectTest.testDeepCopy":627,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":353,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":203,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":276,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":320,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":668,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":494,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":284,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":217,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":263,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":588,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":332,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":470,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":188,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":224,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":653,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":412,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":561,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":339,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":185,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":538,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":378,"com.google.gson.functional.ObjectTest.testNestedDeserialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":337,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":478,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":480,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":180,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":92,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":492,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":468,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":194,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":303,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":354,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":597,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":18,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":455,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":34,"com.google.gson.JavaSerializationTest.testListIsSerializable":285,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":54,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":66,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":322,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":37,"com.google.gson.stream.JsonWriterTest.testDoubles":672,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":587,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":348,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":70,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":384,"com.google.gson.functional.MapTest.testInterfaceTypeMap":69,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":524,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":669,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":485,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":97,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":387,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":8,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":630,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":541,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":490,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":403,"com.google.gson.MixedStreamTest.testWriteClosed":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":182,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":314,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":100,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":584,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":24,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":96,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":197,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":193,"com.google.gson.stream.JsonWriterTest.testLongs":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":219,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":103,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":116,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":313,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":225,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":432,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":39,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":569,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":507,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":152,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":473,"com.google.gson.stream.JsonWriterTest.testNumbers":674,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":408,"com.google.gson.JsonNullTest.testEqualsAndHashcode":688,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":544,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":151,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":509,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":196,"com.google.gson.functional.CollectionTest.testQueueDeserialization":324,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":414,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":430,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":602,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":504,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":578,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":67,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":130,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":554,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":81,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":137,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":307,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":236,"com.google.gson.functional.MapTest.testRawMapSerialization":363,"com.google.gson.JsonParserTest.testParseReader":254,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":567,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":632,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":32,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":125,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":172,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":377,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":277,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":279,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":290,"com.google.gson.functional.PrimitiveTest.testByteSerialization":454,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":514,"com.google.gson.ObjectTypeAdapterTest.testSerialize":3,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":271,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":79,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":398,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":52,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":525,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":25,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":273,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":599,"com.google.gson.functional.MapTest.testMapWithQuotes":355,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":684,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":601,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":326,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":537,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":336,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":681,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":158,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":659,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":374,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":16,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":135,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":618,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":551,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":117,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":545,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":53,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":553,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":451,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":682,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":319,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":517,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":305,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":576,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":36,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":186,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":586,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":175,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":615,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":292,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":306,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":261,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":629,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":124,"com.google.gson.functional.ObjectTest.testNestedSerialization":126,"com.google.gson.internal.LinkedTreeMapTest.testClear":245,"com.google.gson.JsonObjectTest.testAddingStringProperties":628,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":61,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":371,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":402,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":605,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":362,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":171,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":210,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":283,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":610,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":676,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":120,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":506,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":464,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":99,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":216,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":404,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":612,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":212,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":222,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":633,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":604,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":520,"com.google.gson.functional.CollectionTest.testSetSerialization":50,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":500,"com.google.gson.functional.StringTest.testStringValueSerialization":607,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":235,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":12,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":153,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":310,"com.google.gson.MixedStreamTest.testWriteInvalidState":238,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":511,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":679,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":407,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":191,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":413,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":228,"com.google.gson.stream.JsonWriterTest.testBooleans":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":270,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":232,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":253,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":146,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":623,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":187,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":489,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":639,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":26,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":272,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":350,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":661,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":496,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":516},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7acc9427-3e42-11e6-b9bc-0584b64df388","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"tindex":"7acce248-3e42-11e6-b9bc-edd058ccb706","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[242],"tindex":"7acce249-3e42-11e6-b9bc-8169f3a93dfe","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"7acd095a-3e42-11e6-b9bc-03c308ed7e43","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[243],"tindex":"7acd095b-3e42-11e6-b9bc-0f1efb3a8ecd","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[37,215],"tindex":"7acd306c-3e42-11e6-b9bc-e709af572185","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[244,245,246,247,248,243,249,250,251,252,253,254,255,4,256,257,258,6,259,260,261,62,63,64,65,66,262,263,264,265,93,94,98,99,104,145,266,267,170,268,172,174,176,178,183,196,197,202,204,205,206,207,208,209,269,270,271,272],"tindex":"7acd577d-3e42-11e6-b9bc-232b5415a635","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"7acd7e8e-3e42-11e6-b9bc-cd579381847a","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree instanceof com.google.gson.JsonObject) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"7acd7e8f-3e42-11e6-b9bc-e7b5b533704d","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[273,0,274,275,276,277,278,279,1,2,3,280,4,281,282,283,284,258,285,286,287,288,289,290,5,6,291,292,293,7,294,295,296,297,298,299,8,9,300,301,302,10,303,11,12,304,13,14,15,16,17,305,18,19,20,21,22,23,24,25,26,27,28,306,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,307,46,308,309,310,311,312,313,314,315,47,316,317,318,319,48,49,320,321,50,322,259,323,324,51,52,325,53,54,326,55,327,260,328,56,57,329,58,330,59,331,332,333,261,334,335,336,337,60,61,62,63,64,65,66,338,339,340,341,342,343,344,242,345,346,347,348,349,350,351,262,67,352,353,263,354,355,356,357,264,68,358,359,360,69,361,70,71,362,363,364,72,365,265,366,367,368,369,73,74,370,75,76,77,78,79,371,372,80,81,82,83,84,373,374,375,85,86,87,88,376,89,377,378,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,105,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,106,107,108,109,110,111,112,113,114,115,116,117,475,118,119,120,121,476,122,477,123,124,125,126,478,127,128,129,130,479,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,480,146,147,148,149,150,151,152,153,154,155,156,157,481,158,159,160,482,483,484,485,161,486,487,488,489,490,491,492,493,494,495,496,162,163,164,497,498,499,165,166,500,501,502,167,503,168,169,170,171,268,172,173,174,175,176,177,504,178,179,505,180,181,182,183,506,184,185,507,186,187,508,188,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,189,190,191,527,528,529,530,531,192,193,194,195,196,197,532,198,199,200,201,533,534,535,536,202,537,203,204,205,206,207,208,209,210,211,538,539,540,541,212,213,542,543,544,545,546,547,214,548,549,215,550,551,552,553,554,555,216,556,557,558,559,560,561,562,217,563,564,565,566,567,568,569,570,571,572,573,574,575,218,576,577,578,579,219,580,581,582,583,584,585,220,221,222,223,224,225,226,227,586,587,588,228,229,589,230,231,232,233,234,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,235,236,608,237,238,609,610,239,240,241,611,612,613,614,615,616,617],"tindex":"7acda5a0-3e42-11e6-b9bc-970e6cbfee28","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:694","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"7acda5a1-3e42-11e6-b9bc-113f0256bb0a","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"7acdccb2-3e42-11e6-b9bc-5d6a6fbb9b99","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if ((value != value) && (token != value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"value","token":"value","com.google.gson.stream.JsonToken.NUMBER":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"7acdccb3-3e42-11e6-b9bc-61661fab4b19","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if ((firstCharacter >= 'a') && (c <= 'f')) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[],"tindex":"7acdccb4-3e42-11e6-b9bc-a9f87dd699b1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:912","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[618,619,620,621],"tindex":"7ace1ad5-3e42-11e6-b9bc-e125080e4031","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7ace1ad6-3e42-11e6-b9bc-e3e55eb9d5fd","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"7ace1ad7-3e42-11e6-b9bc-0b3e0b394441","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset != length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"7ace41e8-3e42-11e6-b9bc-bd855c9e31a2","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[254,255,622,623,624,625,626,627,628,306,51,52,53,54,260,92,93,94,98,99,104,145,169,170,171,176,178,507,196,197],"tindex":"7ace41e9-3e42-11e6-b9bc-7157fd492270","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[10,11,14,22,96,384,401,410,417,420,439,459,470,629,630,631,632,633,634,635,636,525,207,609],"tindex":"7ace41ea-3e42-11e6-b9bc-5be5429f5d3e","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"7ace41eb-3e42-11e6-b9bc-d505972503b7","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7ace68fc-3e42-11e6-b9bc-ff5dc71d05cb","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[271,272],"tindex":"7ace68fd-3e42-11e6-b9bc-9dbc781f34d6","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"delta == (-2)"},"failures":[637,638,639,249,250,640,641,0,1,2,642,3,280,4,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,6,7,294,295,296,297,8,300,10,11,304,14,15,16,305,18,19,20,21,22,24,25,26,28,30,31,32,33,35,36,37,40,42,45,307,46,308,312,313,314,315,47,318,49,320,50,322,326,327,57,329,58,59,331,261,337,60,61,342,345,346,349,351,67,355,356,357,358,359,69,361,70,71,362,363,72,365,366,369,73,74,75,77,78,79,371,372,80,81,82,373,85,86,88,376,89,90,95,96,97,102,103,390,402,411,445,458,465,470,106,107,110,113,116,679,118,120,123,125,126,478,128,131,133,134,136,141,144,145,146,147,148,149,151,152,153,154,155,156,157,481,158,159,160,482,161,629,630,631,632,633,634,635,636,680,498,499,165,166,500,501,502,167,169,171,173,174,175,176,177,179,181,184,185,186,508,188,509,510,512,513,514,515,516,519,520,521,525,189,191,528,530,192,193,194,195,200,202,204,205,207,210,681,545,270,552,555,561,217,564,565,571,574,218,219,220,223,224,227,228,229,230,231,232,233,234,598,235,271,272,236,237,238,609,610,239,611,612],"tindex":"7ace68fe-3e42-11e6-b9bc-f9975e89c46d","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == (-2)) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"7ace68ff-3e42-11e6-b9bc-5b16db19a122","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"7ace6900-3e42-11e6-b9bc-9bfa51e6a2b3","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"7ace9011-3e42-11e6-b9bc-151895759111","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json.isString()) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"7aceb722-3e42-11e6-b9bc-ab826844a480","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7aceb723-3e42-11e6-b9bc-b57d495b8733","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:709","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)"},"failures":[],"tindex":"7aceb724-3e42-11e6-b9bc-4d73d325f3f1","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"7aceb725-3e42-11e6-b9bc-51a9f0bb426e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"value","typeOfT":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"7aceb726-3e42-11e6-b9bc-5536fb4026c1","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"7acede37-3e42-11e6-b9bc-c34ecade2353","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((!(key.isJsonNull())) && ((key.peek()) != key)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","jsonReader":"key","element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"7acede38-3e42-11e6-b9bc-69afa2db3add","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"7acede39-3e42-11e6-b9bc-d544bad940e5","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7acede3a-3e42-11e6-b9bc-85015549f4f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"7acede3b-3e42-11e6-b9bc-4578a276bdcc","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7acf054c-3e42-11e6-b9bc-5112b8cac793","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7acf054d-3e42-11e6-b9bc-dd4fbd7e3c3e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"7acf054e-3e42-11e6-b9bc-7f080d6156ab","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"7acf2c5f-3e42-11e6-b9bc-afd036853bd5","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[0,1,2,3,4,5,6,7,8,9,10,303,11,12,304,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"tindex":"7acf2c60-3e42-11e6-b9bc-03ffa7387209","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"7acf2c61-3e42-11e6-b9bc-855fea76d287","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[641,277,278,279,682,305,51,52,325,53,54,346,67,362,73,370,82,373,85,86,88,376,89,377,90,92,93,94,98,99,104,679,145,177,178,181,520,196,197,206,207,208,209,271,236,237,683,238,609,610,239],"tindex":"7acf5372-3e42-11e6-b9bc-85bb084c4408","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7acf5373-3e42-11e6-b9bc-496ffb98b0d5","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7acf5374-3e42-11e6-b9bc-bdf28068fb41","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[4,647,653,654,656,661,662,663,678,287,288,6,45,49,335,359,79,80,81,102,414,126,173,174,188,205,684],"tindex":"7acf5375-3e42-11e6-b9bc-bfedd7f8e094","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[],"tindex":"7acf5376-3e42-11e6-b9bc-47345bf0cadc","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"7acf7a87-3e42-11e6-b9bc-f51a8b1ac69e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"7acf7a88-3e42-11e6-b9bc-d75c37819b40","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isAssignableFrom(value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"key","classOfPrimitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"7acf7a89-3e42-11e6-b9bc-dd924c7c9df5","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[685,686,687],"tindex":"7acf7a8a-3e42-11e6-b9bc-a1c942462268","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"7acf7a8b-3e42-11e6-b9bc-d3f1a9613e4f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"7acfa19c-3e42-11e6-b9bc-7b5bf2d9543f","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7acfa19d-3e42-11e6-b9bc-d5d770f231dc","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[688],"tindex":"7acfa19e-3e42-11e6-b9bc-c37caac43f70","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"7acfa19f-3e42-11e6-b9bc-c1f43f13468b","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"7acfa1a0-3e42-11e6-b9bc-61699a5fd693","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == value) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"value","com.google.gson.LongSerializationPolicy.DEFAULT":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"7acfc8b1-3e42-11e6-b9bc-e7e5edcf89d6","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"7acfc8b2-3e42-11e6-b9bc-d5db09d1695f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235653359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
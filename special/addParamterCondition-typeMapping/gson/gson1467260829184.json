{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":182,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":394,"com.google.gson.functional.StringTest.testStringValueDeserialization":393,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":77,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":478,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":17,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":144,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":3,"com.google.gson.MixedStreamTest.testWriteLenient":602,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":583,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":60,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":54,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":58,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":320,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":423,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":560,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":163,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":305,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":32,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":88,"com.google.gson.functional.ObjectTest.testSingletonLists":111,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":580,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":300,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":595,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":277,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":13,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":389,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":126,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":254,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":322,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":225,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":403,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":149,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":318,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":538,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":72,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":297,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":414,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":341,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":291,"com.google.gson.functional.EnumTest.testEnumCaseMapping":262,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":594,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":604,"com.google.gson.functional.JsonTreeTest.testToJsonTree":213,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":470,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":390,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":370,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":354,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":375,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":465,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":429,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":151,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":401,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":123,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":479,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":533,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":339,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":82,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":133,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":589,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":84,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":326,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":388,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":508,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":494,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":369,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":135,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":554,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":378,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":4,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":287,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":315,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":374,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":209,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":408,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":64,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":458,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":442,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":509,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":316,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":132,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":550,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":119,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":233,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":24,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":293,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":482,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":205,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":30,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":273,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":295,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":417,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":582,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":577,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":81,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":154,"com.google.gson.functional.CollectionTest.testSetDeserialization":57,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":164,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":122,"com.google.gson.functional.EnumTest.testEnumSet":256,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":361,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":312,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":372,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":446,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":127,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":29,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":505,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":168,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":323,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":336,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":512,"com.google.gson.functional.MapTest.testHashMapDeserialization":282,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":476,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":383,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":545,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":593,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":40,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":181,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":206,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":421,"com.google.gson.functional.MapTest.testSortedMap":292,"com.google.gson.functional.MapTest.testMapSerialization":451,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":183,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":314,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":356,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":237,"com.google.gson.functional.MapTest.testSerializeMaps":445,"com.google.gson.functional.MapTest.testComplexKeysSerialization":76,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":360,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":459,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":559,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":16,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":153,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":52,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":261,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":170,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":406,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":19,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":330,"com.google.gson.functional.MapTest.testStringKeyDeserialization":294,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":357,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":0,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":522,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":304,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":460,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":477,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":536,"com.google.gson.functional.PrettyPrintingTest.testMap":539,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":425,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":185,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":566,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":253,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":358,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":396,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":598,"com.google.gson.functional.CollectionTest.testQueueSerialization":426,"com.google.gson.functional.MapTest.testMapSerializationEmpty":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":574,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":499,"com.google.gson.functional.MapTest.testMapOfMapSerialization":450,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":492,"com.google.gson.JavaSerializationTest.testMapIsSerializable":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":376,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":268,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":160,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":501,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":439,"com.google.gson.functional.FieldNamingTest.testIdentity":238,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":395,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":274,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":188,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":136,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":23,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":110,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":212,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":434,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":298,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":247,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":461,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":596,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":146,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":385,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":373,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":588,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":280,"com.google.gson.functional.MapTest.testMapSubclassSerialization":444,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":520,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":38,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":178,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":165,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":241,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":309,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":590,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":366,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":530,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":12,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":28,"com.google.gson.functional.EnumTest.testEnumSubclass":259,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":504,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":125,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":255,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":471,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":78,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":47,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":473,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":495,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":147,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":353,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":500,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":531,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":22,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":585,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":112,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":281,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":556,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":441,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":552,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":152,"com.google.gson.CommentsTest.testParseComments":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":437,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":507,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":347,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":453,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":597,"com.google.gson.MixedStreamTest.testReadInvalidState":601,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":161,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":37,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":586,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":173,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":303,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":359,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":196,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":410,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":488,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":158,"com.google.gson.JsonArrayTest.testRemove":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":514,"com.google.gson.functional.MapTest.testMapDeserialization":286,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":576,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":542,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":443,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":87,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":448,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":90,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":463,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":53,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":211,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":217,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":137,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":532,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":42,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":335,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":568,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":51,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":169,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":452,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":587,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":276,"com.google.gson.functional.PrimitiveTest.testShortSerialization":518,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":466,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":321,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":343,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":409,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":310,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":219,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":302,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":234,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":258,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":55,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":177,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":284,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":307,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":523,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":70,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":384,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":524,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":65,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":138,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":563,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":109,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":1,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":496,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":142,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":118,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":422,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":44,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":561,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":332,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":275,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":86,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":481,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":571,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":381,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":102,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":474,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":324,"com.google.gson.JsonArrayTest.testSet":246,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":498,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":526,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":89,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":187,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":174,"com.google.gson.functional.MapTest.testGeneralMapField":75,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":116,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":549,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":528,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":79,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":193,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":584,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":454,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":364,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":407,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":511,"com.google.gson.MixedStreamTest.testReadMixedStreamed":244,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":371,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":207,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":248,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":431,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":203,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":502,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":342,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":250,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":221,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":289,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":592,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":438,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":527,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":192,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":228,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":578,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":279,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":189,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":363,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":468,"com.google.gson.functional.ObjectTest.testNestedDeserialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":440,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":331,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":534,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":525,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":198,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":18,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":290,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":397,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":27,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":516,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":43,"com.google.gson.JavaSerializationTest.testListIsSerializable":252,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":6,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":432,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":46,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":392,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":285,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":74,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":472,"com.google.gson.functional.MapTest.testInterfaceTypeMap":73,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":355,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":334,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":475,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":50,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":338,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":484,"com.google.gson.MixedStreamTest.testWriteClosed":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":186,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":428,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":391,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":33,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":201,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":140,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":223,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":120,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":427,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":503,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":48,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":382,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":349,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":156,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":329,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":487,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":367,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":155,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":546,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":200,"com.google.gson.functional.CollectionTest.testQueueDeserialization":272,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":313,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":491,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":400,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":544,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":387,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":71,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":573,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":85,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":141,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":424,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":240,"com.google.gson.functional.MapTest.testRawMapSerialization":456,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":380,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":41,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":129,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":176,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":467,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":411,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":416,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":418,"com.google.gson.functional.PrimitiveTest.testByteSerialization":515,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":551,"com.google.gson.ObjectTypeAdapterTest.testSerialize":10,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":480,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":61,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":557,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":34,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":398,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":413,"com.google.gson.functional.MapTest.testMapWithQuotes":449,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":567,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":399,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":435,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":562,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":278,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":180,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":565,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":162,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":464,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":25,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":139,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":570,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":121,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":368,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":62,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":572,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":513,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":269,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":386,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":412,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":547,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":45,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":190,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":591,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":179,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":420,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":263,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":299,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":2,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":128,"com.google.gson.functional.ObjectTest.testNestedSerialization":130,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":69,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":402,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":462,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":483,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":350,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":455,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":175,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":214,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":249,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":603,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":124,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":348,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":327,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":103,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":220,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":485,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":605,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":216,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":226,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":599,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":555,"com.google.gson.functional.CollectionTest.testSetSerialization":59,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":67,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":540,"com.google.gson.functional.StringTest.testStringValueSerialization":600,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":239,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":20,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":157,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":265,"com.google.gson.MixedStreamTest.testWriteInvalidState":242,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":548,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":486,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":195,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":308,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":569,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":236,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":150,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":191,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":337,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":581,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":447,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":345,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":553},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,1,2,3,4,5,6],"tindex":"e8ad91dc-3e7a-11e6-a56e-f18f5d72435d","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"e8ae070d-3e7a-11e6-a56e-915e693c89b6","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"e8ae070e-3e7a-11e6-a56e-cdbb27c7b78b","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"e8ae070f-3e7a-11e6-a56e-dfbc5ec2b7de","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,1,67,68,69,3,4,5,70,6,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"e8ae2e20-3e7a-11e6-a56e-61e6d331f448","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e8ae2e21-3e7a-11e6-a56e-7b2e016d8d73","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8ae5532-3e7a-11e6-a56e-8d159dc58877","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl","sourcecode":"c == '#'"},"failures":[246],"tindex":"e8aea353-3e7a-11e6-a56e-bb867acd4576","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == '#') {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"e8aeca64-3e7a-11e6-a56e-7b46511c849a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[247,248,249,250,251,252,253,254,255,12,256,257,258,259,260,261,16,262,18,20,22,25,26,28,32,33,34,35,36,263,38,41,47,48,50,52,53,54,55,264,265,266,267,268,269,57,270,271,272,64,273,274,65,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,80,83,296,84,85,87,88,91,95,104,105,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,109,324,325,326,327,328,329,111,112,113,115,116,118,119,121,123,125,126,128,131,133,134,330,136,139,141,142,143,144,146,147,149,331,150,151,152,153,154,155,156,158,159,160,332,333,334,335,336,337,338,339,340,341,342,343,344,345,166,167,168,346,347,172,173,174,175,176,177,178,179,180,184,186,348,188,349,350,192,351,352,353,354,355,356,194,357,358,359,202,203,205,360,361,362,207,208,209,215,363,364,365,216,366,367,368,369,370,218,371,372,373,220,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,225,226,229,230,392,393,394,395,396,397,398,399,400,401,402,403,404],"tindex":"e8aeca65-3e7a-11e6-a56e-232ccec853e7","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8aeca66-3e7a-11e6-a56e-63d7ad2f1baf","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8aef177-3e7a-11e6-a56e-c30f8fcbe02c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"e8aef178-3e7a-11e6-a56e-5710a62c50d1","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == src) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"src","context":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[405],"tindex":"e8aef179-3e7a-11e6-a56e-7d17ea0c7856","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[406,70],"tindex":"e8aef17a-3e7a-11e6-a56e-f57fdfb6d4a0","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e8af188b-3e7a-11e6-a56e-03ccac82839a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[10,17,19,20,22,23,24,37,39,40,41,42,43,44,45,46,47,48,52,53,54,57,59,60,61,62,63,64,66,68,69,72,76,97,100,102,104,105,106,108,407,121,122,137,138,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,176,180,196,197,198,199,200,201,211,216,217,219,220,221,223,232,233],"tindex":"e8af188c-3e7a-11e6-a56e-71515e5cb8e6","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[408,409],"tindex":"e8af3f9d-3e7a-11e6-a56e-e58d4e70ba52","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"e8af3f9e-3e7a-11e6-a56e-2de18b704692","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"context","typeOfT":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e8af3f9f-3e7a-11e6-a56e-876d21c4b219","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json != null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"e8af3fa0-3e7a-11e6-a56e-c5fdb98b91d9","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[410,411,412,60,61,62,63,73,75,77,96,97,98,102,103,108,149,182,200,209,210,211,213],"tindex":"e8af66b1-3e7a-11e6-a56e-85a504b5747a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"e8af66b2-3e7a-11e6-a56e-6fc7ff43c1d8","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b","value":"a","java.lang.Object.class":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e8af66b3-3e7a-11e6-a56e-bb9cff9abed1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e8af66b4-3e7a-11e6-a56e-7f90aeb05c5e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"e8af66b5-3e7a-11e6-a56e-1b3df4f9d475","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e8af8dc6-3e7a-11e6-a56e-b7a0d81befc0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[413,7,414,247,248,411,415,416,8,9,11,249,250,251,252,253,254,255,417,418,12,13,419,420,421,14,256,257,258,259,260,261,15,16,422,262,423,17,18,19,20,21,22,23,24,25,26,412,27,28,29,30,31,32,33,34,35,36,37,263,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,424,55,425,264,265,266,426,427,428,429,56,267,268,430,269,57,58,431,270,59,432,271,433,272,60,61,434,62,63,435,64,436,273,274,65,66,0,1,275,67,437,438,276,2,277,439,278,440,68,69,3,4,5,70,6,441,279,442,280,443,281,282,283,444,445,284,285,446,447,448,286,71,287,288,289,290,449,450,451,291,72,452,453,292,73,454,74,75,455,456,293,76,457,294,458,459,295,460,77,78,461,79,80,81,82,83,462,296,84,85,86,87,88,463,464,465,89,90,91,92,466,93,467,468,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,469,470,297,471,298,472,473,474,475,299,300,407,301,302,303,476,477,478,479,480,481,304,482,483,484,485,305,306,486,487,307,488,489,490,308,491,309,310,492,311,493,494,495,496,497,498,312,499,500,501,502,313,314,503,315,316,317,318,504,505,506,507,508,509,319,320,510,321,322,511,323,512,513,109,324,514,515,516,517,518,519,520,325,326,521,522,327,523,524,328,525,526,527,528,529,329,530,110,111,112,113,114,115,116,117,118,119,120,121,531,122,123,124,125,532,126,533,127,128,129,130,534,131,132,133,134,330,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,331,150,151,152,153,154,155,156,157,158,159,160,161,535,162,163,164,332,333,536,334,165,335,537,336,337,338,339,340,341,342,343,345,166,167,168,346,538,539,169,170,540,541,542,171,347,172,173,174,175,543,176,177,178,179,180,181,544,182,183,545,184,185,186,187,348,188,189,349,190,191,350,192,546,547,548,549,550,551,552,553,351,352,554,555,556,353,354,355,557,356,193,194,195,357,558,358,559,359,196,197,198,199,200,201,560,202,203,204,205,360,361,561,362,206,562,207,208,209,210,211,212,213,214,215,363,563,364,564,365,216,217,565,366,566,567,367,368,369,370,568,218,371,569,372,219,373,570,571,572,573,574,220,575,374,576,577,375,578,376,221,377,579,378,379,580,380,381,382,383,581,582,384,583,584,385,222,386,585,387,586,223,388,389,587,588,390,589,391,590,224,225,226,227,228,229,230,231,591,392,592,232,233,593,234,235,236,237,238,393,594,394,595,395,596,396,397,597,398,598,399,400,401,599,402,403,600,239,240,601,241,242,602,603,243,244,245,604,605,404],"tindex":"e8af8dc7-3e7a-11e6-a56e-f935933f0c86","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8afb4d8-3e7a-11e6-a56e-63de4967a8d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"e8afb4d9-3e7a-11e6-a56e-7b7c46874c43","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return containsKey(o);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"e8afb4da-3e7a-11e6-a56e-dd3b17a54515","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[350,192],"tindex":"e8afb4db-3e7a-11e6-a56e-474b3868baf5","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8afdbec-3e7a-11e6-a56e-a91deaa5b17e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl","sourcecode":"!((delegate) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"e8afdbed-3e7a-11e6-a56e-d77e806724d0","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"e8afdbee-3e7a-11e6-a56e-ab72b54014b4","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(jsonElement instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"e8afdbef-3e7a-11e6-a56e-dd7000d35cef","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e8afdbf0-3e7a-11e6-a56e-418d43412e14","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:364","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_ARRAY)"},"failures":[],"tindex":"e8b00201-3e7a-11e6-a56e-ef7c73590840","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == start) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"end","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"e8b00202-3e7a-11e6-a56e-69f15a0c0f09","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[],"tindex":"e8b00203-3e7a-11e6-a56e-0d01fbcbc393","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193397/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
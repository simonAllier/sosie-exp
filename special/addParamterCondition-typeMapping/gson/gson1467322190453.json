{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":412,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":641,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":62,"com.google.gson.functional.StringTest.testStringValueDeserialization":639,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":134,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":446,"com.google.gson.stream.JsonWriterTest.testRepeatedName":54,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":340,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":250,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":583,"com.google.gson.MixedStreamTest.testWriteLenient":32,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":549,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":454,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":512,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":236,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":246,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":558,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":384,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":466,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":664,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":218,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":348,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":669,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":518,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":632,"com.google.gson.functional.ObjectTest.testSingletonLists":198,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":447,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":334,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":642,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":28,"com.google.gson.stream.JsonWriterTest.testStrings":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":530,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":186,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":461,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":570,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":312,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":386,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":298,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":595,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":654,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":257,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":377,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":67,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":690,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":485,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":316,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":589,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":484,"com.google.gson.functional.EnumTest.testEnumCaseMapping":663,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":20,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":640,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":325,"com.google.gson.functional.JsonTreeTest.testToJsonTree":535,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":463,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":609,"com.google.gson.stream.JsonWriterTest.testNulls":51,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":670,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":295,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":500,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":443,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":634,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":685,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":243,"com.google.gson.functional.ObjectTest.testNullDeserialization":577,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":167,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":651,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":680,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":565,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":23,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":341,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":571,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":686,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":587,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":301,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":574,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":22,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":464,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":184,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":399,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":398,"com.google.gson.JsonParserTest.testParseString":679,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":460,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":296,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":382,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":362,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":428,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":144,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":101,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":360,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":374,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":480,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":550,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":695,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":440,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":230,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":38,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":523,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":132,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":12,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":556,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":375,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":140,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":209,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":35,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":70,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":271,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":562,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":254,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":345,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":487,"com.google.gson.metrics.PerformanceTest.testDummy":303,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":231,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":159,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":323,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":524,"com.google.gson.stream.JsonWriterTest.testEmptyArray":44,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":490,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":102,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":494,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":442,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":522,"com.google.gson.functional.CollectionTest.testSetDeserialization":616,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":219,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":203,"com.google.gson.functional.EnumTest.testEnumSet":279,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":545,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":367,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":172,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":433,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":205,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":77,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":158,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":379,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":322,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":66,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":388,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":187,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":584,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":389,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":10,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":338,"com.google.gson.functional.MapTest.testHashMapDeserialization":474,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":451,"com.google.gson.MixedStreamTest.testReadNulls":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":413,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":638,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":16,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":88,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":228,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":542,"com.google.gson.functional.MapTest.testSortedMap":486,"com.google.gson.functional.MapTest.testMapSerialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":89,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":682,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":372,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":492,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":502,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":15,"com.google.gson.functional.MapTest.testSerializeMaps":115,"com.google.gson.functional.MapTest.testComplexKeysSerialization":130,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":544,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":37,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":489,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":151,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":169,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":662,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":267,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":692,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":659,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":539,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":661,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":191,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":671,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":251,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":576,"com.google.gson.functional.MapTest.testStringKeyDeserialization":488,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":504,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":174,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":401,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":133,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":344,"com.google.gson.functional.PrettyPrintingTest.testMap":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":508,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":425,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":540,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":297,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":311,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":505,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":645,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":97,"com.google.gson.functional.MapTest.testMapSerializationEmpty":131,"com.google.gson.functional.CollectionTest.testQueueSerialization":240,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":672,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":368,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":73,"com.google.gson.functional.MapTest.testMapOfMapSerialization":120,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":359,"com.google.gson.JavaSerializationTest.testMapIsSerializable":694,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":444,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":614,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":46,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":11,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":289,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":689,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":531,"com.google.gson.functional.FieldNamingTest.testIdentity":108,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":643,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":525,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":57,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":258,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":578,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":197,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":253,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":514,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":534,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":49,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":328,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":317,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":644,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":665,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":365,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":455,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":6,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":439,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":472,"com.google.gson.functional.MapTest.testMapSubclassSerialization":114,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":397,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":79,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":521,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":547,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":153,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":357,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":594,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":424,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":551,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":157,"com.google.gson.functional.EnumTest.testEnumSubclass":282,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":378,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":313,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":568,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":327,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":299,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":383,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":173,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":330,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":256,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":58,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":363,"com.google.gson.stream.JsonWriterTest.testTwoNames":45,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":625,"com.google.gson.stream.JsonWriterTest.testNullName":52,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":603,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":24,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":499,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":691,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":369,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":564,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":60,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":361,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":623,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":457,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":557,"com.google.gson.MixedStreamTest.testWriteNulls":307,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":473,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":146,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":55,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":554,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":168,"com.google.gson.CommentsTest.testParseComments":302,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":517,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":667,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":177,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":199,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":635,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":223,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":381,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":503,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":491,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":123,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":272,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":627,"com.google.gson.MixedStreamTest.testReadInvalidState":305,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":459,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":26,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":135,"com.google.gson.JsonParserTest.testParseMixedArray":36,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":337,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":4,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":506,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":220,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":353,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":287,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":445,"com.google.gson.functional.MapTest.testMapDeserialization":479,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":441,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":194,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":113,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":631,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":117,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":263,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":261,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":19,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":696,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":180,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":660,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":423,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":211,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":274,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":510,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":430,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":519,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":255,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":278,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":122,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":462,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":324,"com.google.gson.functional.PrimitiveTest.testShortSerialization":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":385,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":591,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":358,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":688,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":5,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":336,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":14,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":281,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":687,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":238,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":78,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":683,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":476,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":352,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":86,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":619,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":552,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":453,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":637,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":40,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":310,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":403,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":292,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":252,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":526,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":608,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":43,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":418,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":391,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":548,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":364,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":581,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":561,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":275,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":546,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":431,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":527,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":96,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":229,"com.google.gson.stream.JsonWriterTest.testNullStringValue":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":449,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":605,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":610,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":331,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":392,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":366,"com.google.gson.stream.JsonWriterTest.testEmptyObject":65,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":406,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":268,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":262,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":416,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":493,"com.google.gson.functional.MapTest.testGeneralMapField":127,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":560,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":139,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":407,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":9,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":103,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":125,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":81,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":419,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":387,"com.google.gson.MixedStreamTest.testReadMixedStreamed":309,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":676,"com.google.gson.JsonObjectTest.testDeepCopy":673,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":432,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":481,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":247,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":601,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":68,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":370,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":590,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":99,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":482,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":471,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":475,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":528,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":92,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":226,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":53,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":354,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":98,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":555,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":417,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":613,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":179,"com.google.gson.functional.ObjectTest.testNestedDeserialization":582,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":208,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":626,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":414,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":602,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":588,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":405,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":222,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":483,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":621,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":646,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":156,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":13,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":656,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":516,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":553,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":249,"com.google.gson.functional.ObjectTest.testNullSerialization":566,"com.google.gson.stream.JsonWriterTest.testDoubles":72,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":276,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":470,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":477,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":126,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":329,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":69,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":509,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":233,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":675,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":332,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":283,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":291,"com.google.gson.MixedStreamTest.testReadClosed":306,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":511,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":420,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":586,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":346,"com.google.gson.MixedStreamTest.testWriteClosed":34,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":242,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":415,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":465,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":607,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":161,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":232,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":593,"com.google.gson.stream.JsonWriterTest.testLongs":50,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":213,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":105,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":235,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":241,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":373,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":657,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":245,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":681,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":450,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":629,"com.google.gson.stream.JsonWriterTest.testNumbers":74,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":285,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":409,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":351,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":427,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":592,"com.google.gson.functional.CollectionTest.testQueueDeserialization":620,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":356,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":371,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":650,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":458,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":598,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":118,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":575,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":437,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":185,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":580,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":237,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":29,"com.google.gson.functional.MapTest.testRawMapSerialization":129,"com.google.gson.JsonParserTest.testParseReader":678,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":448,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":293,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":206,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":495,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":8,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":693,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":141,"com.google.gson.functional.PrimitiveTest.testByteSerialization":394,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":537,"com.google.gson.ObjectTypeAdapterTest.testSerialize":27,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":110,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":181,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":342,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":513,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":147,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":106,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":162,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":315,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":647,"com.google.gson.functional.MapTest.testMapWithQuotes":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":426,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":649,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":171,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":600,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":532,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":93,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":217,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":59,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":633,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":154,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":579,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":435,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":567,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":150,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":563,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":94,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":436,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":515,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":390,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":543,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":615,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":497,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":138,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":456,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":17,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":7,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":599,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":80,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":541,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":333,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":178,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":290,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":572,"com.google.gson.functional.ObjectTest.testNestedSerialization":207,"com.google.gson.JsonObjectTest.testAddingStringProperties":674,"com.google.gson.internal.LinkedTreeMapTest.testClear":684,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":269,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":82,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":182,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":653,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":91,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":128,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":136,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":196,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":33,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":314,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":76,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":204,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":628,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":402,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":606,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":438,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":21,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":304,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":422,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":573,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":596,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":294,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":652,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":145,"com.google.gson.functional.CollectionTest.testSetSerialization":248,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":666,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":176,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":192,"com.google.gson.functional.StringTest.testStringValueSerialization":655,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":109,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":286,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":611,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":622,"com.google.gson.MixedStreamTest.testWriteInvalidState":31,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":496,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":202,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":350,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":149,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":355,"com.google.gson.stream.JsonWriterTest.testBooleans":47,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":95,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":107,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":677,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":166,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":668,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":630,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":39,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":585,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":452,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":111,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":478,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":61,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":143,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":319},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6dc23bd-3f09-11e6-b9c3-6fb95cf066d3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6dce70e-3f09-11e6-b9c3-69f0b62e505c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((!serialize) && (((name.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"string":"name","lenient":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"c6ddaa5f-3f09-11e6-b9c3-97cd9289fda8","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl"},"failures":[4],"tindex":"c6ddd170-3f09-11e6-b9c3-bbdf8e4ff37f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root","node":"root","left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6ddf881-3f09-11e6-b9c3-15a1114eac67","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[5,6,7,8,9],"tindex":"c6de1f92-3f09-11e6-b9c3-01b1bd36546b","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src.equals(typeOfSrc)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc","to":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6de1f93-3f09-11e6-b9c3-8585f0afb020","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[10],"tindex":"c6de46a4-3f09-11e6-b9c3-b9ff12d8e3f5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"c6de46a5-3f09-11e6-b9c3-23bea349e1f2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6de6db6-3f09-11e6-b9c3-a188470e2b54","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6de6db7-3f09-11e6-b9c3-cd15bc8fb0ca","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"c6de94c8-3f09-11e6-b9c3-2fa3df23b9df","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[11,12,13],"tindex":"c6dfcd49-3f09-11e6-b9c3-f14e5c244bcf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6e01b6a-3f09-11e6-b9c3-e78b7c32ed9d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[14,15,16,17,18,19],"tindex":"c6e01b6b-3f09-11e6-b9c3-a3b8d8b46e33","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == 0) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,14,106,107,15,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,7,260,261,262,263,264,265,266,267,268,269,270,271,272,16,273,274,275,17,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,9,300,301],"tindex":"c6e0427c-3f09-11e6-b9c3-edcb69a0e842","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if ((!root) && (!root)) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"root","deserialize":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6e0909d-3f09-11e6-b9c3-c106c09aa757","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[302,20,21,303,22,23,24,25,304,29,305,306,30,307,31,32,308,33,34,309,310,35,311,312,313,314,315,77,316,317,318,319,320,321,322,323,78,79,80,324,325,326,327,328,329,330,331,332,333,334,81,335,336,337,338,339,340,341,342,343,344,345,82,346,347,348,349,350,351,352,353,83,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,11,370,371,372,373,374,375,376,377,378,379,380,381,382,12,383,384,84,385,386,387,388,389,390,391,392,393,394,13,395,396,85,397,398,399,400,401,402,86,403,404,405,406,87,407,408,409,410,88,411,412,89,413,414,90,415,416,91,92,417,418,419,420,421,422,423,93,424,425,426,427,94,428,429,430,431,432,95,433,5,434,435,96,436,437,97,438,439,440,441,442,443,98,444,99,445,100,101,446,447,448,449,450,451,452,102,453,454,103,455,104,456,457,458,459,105,460,461,462,6,463,464,465,14,106,107,15,108,109,110,111,466,467,468,112,469,470,471,472,113,473,474,475,114,115,476,477,116,478,117,479,118,480,481,482,483,119,120,121,484,485,122,123,486,124,125,126,127,128,129,487,130,131,488,132,489,490,133,134,491,492,135,493,136,494,495,137,138,496,139,140,141,142,143,497,498,144,145,146,499,500,501,147,502,148,503,149,504,150,505,151,506,152,507,508,509,153,510,511,512,513,514,515,516,154,517,155,156,157,158,159,160,518,161,162,163,519,164,520,521,165,166,167,168,169,522,170,171,523,172,524,525,526,173,174,175,527,176,177,528,529,178,530,531,532,179,533,180,534,535,181,182,183,184,185,536,537,538,186,539,540,541,542,543,187,544,545,546,547,188,189,190,191,192,193,194,195,196,548,549,550,551,552,553,554,555,556,197,198,557,558,199,559,560,200,561,562,201,202,563,564,203,565,566,204,567,568,569,570,571,205,572,206,207,208,573,209,574,575,576,577,210,578,211,212,579,213,580,581,582,583,215,216,217,218,219,584,585,586,587,588,589,590,591,220,221,222,223,592,593,594,224,595,596,225,226,597,598,227,599,228,600,601,229,230,602,603,604,231,232,233,605,606,607,608,234,235,609,236,237,238,239,610,611,612,240,241,242,243,244,613,614,245,615,616,246,247,617,248,249,618,619,620,250,621,251,622,252,623,253,254,255,624,625,256,257,626,627,628,258,259,629,7,630,260,631,632,261,633,634,262,263,635,264,265,266,8,636,267,637,268,269,270,271,638,639,640,641,642,643,644,645,646,272,647,648,649,650,651,652,653,654,655,16,273,274,656,275,17,276,18,657,277,658,278,659,19,279,280,281,282,660,661,283,662,284,663,664,299,665,9,666,300,301],"tindex":"c6e0b7ae-3f09-11e6-b9c3-7bd161950807","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6e12cdf-3f09-11e6-b9c3-39a7de911b31","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[667,22,668,669,670,671,672,673,674,23,675,676,677,678,679,35,680,681,682,40,41,43,683,684,685,686,687,688,689,690,691,692,693,694,79,80,412,416,421,95,110,111,475,476,477,478,479,482,484,487,488,489,134,491,492,135,493,136,494,495,512,513,515,516,155,520,524,525,173,174,175,178,533,180,534,535,186,549,550,551,552,553,554,214,592,593,228,229,230,602,603,604,605,606,609,618,257,629,633,265,695,696,665],"tindex":"c6e12ce0-3f09-11e6-b9c3-270f56ddb60f","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl"},"failures":[],"tindex":"c6e1a211-3f09-11e6-b9c3-c98f6d59c84a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"c6e1a212-3f09-11e6-b9c3-77242a13bdfb","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT.getRawType().equals(typeOfT.getRawType())) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6e1c923-3f09-11e6-b9c3-2dd7378b76b3","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321724431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":23,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
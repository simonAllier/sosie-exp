{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":687,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":428,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":576,"com.google.gson.functional.StringTest.testStringValueDeserialization":574,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":699,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":188,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":530,"com.google.gson.JsonPrimitiveTest.testDeepCopy":671,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":246,"com.google.gson.stream.JsonWriterTest.testRepeatedName":696,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":58,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":369,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":12,"com.google.gson.MixedStreamTest.testWriteLenient":601,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":610,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":539,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":122,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":97,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":114,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":329,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":294,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":57,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":475,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":386,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":255,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":627,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":728,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":74,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":202,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":637,"com.google.gson.functional.ObjectTest.testSingletonLists":327,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":531,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":239,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":577,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":690,"com.google.gson.stream.JsonWriterTest.testStrings":705,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":139,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":40,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":548,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":347,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":35,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":297,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":556,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":720,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":590,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":677,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":374,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":286,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":408,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":170,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":23,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":231,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":400,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":169,"com.google.gson.functional.EnumTest.testEnumCaseMapping":56,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":575,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":607,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":230,"com.google.gson.functional.JsonTreeTest.testToJsonTree":492,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":551,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":228,"com.google.gson.stream.JsonWriterTest.testNulls":694,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":717,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":457,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":205,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":107,"com.google.gson.functional.ObjectTest.testNullDeserialization":359,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":378,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":587,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":341,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":660,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":31,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":307,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":247,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":348,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":624,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":398,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":194,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":356,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":30,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":552,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":198,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":312,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":311,"com.google.gson.JsonParserTest.testParseString":639,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":700,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":547,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":291,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":718,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":270,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":506,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":5,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":360,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":453,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":529,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":13,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":162,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":283,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":650,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":520,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":488,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":612,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":128,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":184,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":148,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":284,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":355,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":447,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":29,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":335,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":567,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":675,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":65,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":180,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":251,"com.google.gson.metrics.PerformanceTest.testDummy":33,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":479,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":219,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":72,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":130,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":37,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":186,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":537,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":522,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":193,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":381,"com.google.gson.functional.CollectionTest.testSetDeserialization":113,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":387,"com.google.gson.functional.EnumTest.testEnumSet":47,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":340,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":481,"com.google.gson.JsonStreamParserTest.testIterator":688,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":275,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":129,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":17,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":511,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":349,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":288,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":406,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":299,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":395,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":300,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":726,"com.google.gson.functional.MapTest.testHashMapDeserialization":152,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":244,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":535,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":430,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":568,"com.google.gson.MixedStreamTest.testReadNulls":602,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":4,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":83,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":426,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":44,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":484,"com.google.gson.functional.MapTest.testSortedMap":173,"com.google.gson.functional.MapTest.testMapSerialization":168,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":429,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":281,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":417,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":672,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":661,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":460,"com.google.gson.functional.MapTest.testSerializeMaps":154,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":572,"com.google.gson.functional.MapTest.testComplexKeysSerialization":181,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":480,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":185,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":611,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":663,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":467,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":54,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":380,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":95,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":41,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":52,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":411,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":628,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":646,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":60,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":358,"com.google.gson.functional.MapTest.testStringKeyDeserialization":183,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":19,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":464,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":9,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":314,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":187,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":245,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":390,"com.google.gson.functional.PrettyPrintingTest.testMap":409,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":100,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":42,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":503,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":34,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":466,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":719,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":580,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":584,"com.google.gson.functional.CollectionTest.testQueueSerialization":104,"com.google.gson.functional.MapTest.testMapSerializationEmpty":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":517,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":647,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":276,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":701,"com.google.gson.functional.MapTest.testMapOfMapSerialization":167,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":525,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":110,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":278,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":711,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":140,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":616,"com.google.gson.functional.FieldNamingTest.testIdentity":573,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":578,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":685,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":131,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":436,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":361,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":124,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":326,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":491,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":233,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":24,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":190,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":579,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":273,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":541,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":550,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":710,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":149,"com.google.gson.functional.MapTest.testMapSubclassSerialization":153,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":310,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":81,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":424,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":483,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":265,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":392,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":554,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":598,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":14,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":502,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":39,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":70,"com.google.gson.functional.EnumTest.testEnumSubclass":50,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":287,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":36,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":345,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":232,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":189,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":625,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":724,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":293,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":133,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":667,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":235,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":373,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":271,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":654,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":372,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":217,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":26,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":456,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":277,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":339,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":63,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":269,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":697,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":543,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":328,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":151,"com.google.gson.MixedStreamTest.testWriteNulls":599,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":455,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":146,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":449,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":379,"com.google.gson.CommentsTest.testParseComments":609,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":644,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":208,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":290,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":462,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":472,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":416,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":172,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":582,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":376,"com.google.gson.MixedStreamTest.testReadInvalidState":596,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":545,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":418,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":723,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":626,"com.google.gson.JsonParserTest.testParseMixedArray":641,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":6,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":243,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":7,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":468,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":18,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":656,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":469,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":617,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":260,"com.google.gson.JsonArrayTest.testRemove":682,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":709,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":527,"com.google.gson.functional.MapTest.testMapDeserialization":160,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":414,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":150,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":201,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":630,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":659,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":159,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":226,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":207,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":203,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":96,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":51,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":500,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":346,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":362,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":85,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":393,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":507,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":78,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":629,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":94,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":370,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":171,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":410,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":549,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":138,"com.google.gson.functional.PrimitiveTest.testShortSerialization":308,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":210,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":402,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":266,"com.google.gson.JsonParserTest.testParseEmptyString":642,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":242,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":569,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":49,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":99,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":423,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":155,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":259,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":316,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":145,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":679,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":620,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":538,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":606,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":317,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":714,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":62,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":132,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":225,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":496,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":555,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":621,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":668,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":302,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":494,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":10,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":272,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":367,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":334,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":55,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":87,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":482,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":508,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":200,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":528,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":249,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":514,"com.google.gson.stream.JsonWriterTest.testNullStringValue":692,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":533,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":101,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":222,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":236,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":303,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":274,"com.google.gson.JsonArrayTest.testSet":680,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":320,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":143,"com.google.gson.JsonPrimitiveTest.testEquals":670,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":206,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":434,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":419,"com.google.gson.functional.MapTest.testGeneralMapField":177,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":332,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":446,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":632,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":322,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":389,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":461,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":540,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":0,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":197,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":240,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":298,"com.google.gson.MixedStreamTest.testReadMixedStreamed":605,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":721,"com.google.gson.JsonObjectTest.testDeepCopy":648,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":163,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":509,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":622,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":25,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":115,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":486,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":477,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":279,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":401,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":615,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":526,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":164,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":565,"com.google.gson.JsonArrayTest.testDeepCopy":681,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":321,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":442,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":559,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":695,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":524,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":147,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":669,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":437,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":495,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":213,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":662,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":142,"com.google.gson.functional.ObjectTest.testNestedDeserialization":368,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":353,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":375,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":431,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":216,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":399,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":319,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":471,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":59,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":165,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":581,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":643,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":69,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":306,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":86,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":15,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":126,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":118,"com.google.gson.functional.ObjectTest.testNullSerialization":342,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":89,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":684,"com.google.gson.stream.JsonWriterTest.testDoubles":702,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":564,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":156,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":234,"com.google.gson.functional.MapTest.testInterfaceTypeMap":174,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":458,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":221,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":727,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":237,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":53,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":713,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":93,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":394,"com.google.gson.MixedStreamTest.testReadClosed":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":497,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":253,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":665,"com.google.gson.MixedStreamTest.testWriteClosed":604,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":433,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":224,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":553,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":75,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":220,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":474,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":365,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":470,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":683,"com.google.gson.stream.JsonWriterTest.testLongs":693,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":546,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":227,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":336,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":105,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":560,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":653,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":725,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":282,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":562,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":91,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":111,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":623,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":633,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":678,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":534,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":438,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":324,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":674,"com.google.gson.stream.JsonWriterTest.testNumbers":704,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":707,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":258,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":382,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":443,"com.google.gson.functional.CollectionTest.testQueueDeserialization":121,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":473,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":264,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":280,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":586,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":544,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":561,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":161,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":516,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":199,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":366,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":98,"com.google.gson.functional.MapTest.testRawMapSerialization":179,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":595,"com.google.gson.JsonParserTest.testParseReader":638,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":532,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":715,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":84,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":351,"com.google.gson.JsonPrimitiveTest.testExponential":673,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":422,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":212,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":634,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":38,"com.google.gson.functional.PrimitiveTest.testByteSerialization":305,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":448,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":636,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":593,"com.google.gson.ObjectTypeAdapterTest.testSerialize":689,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":195,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":248,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":655,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":123,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":652,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":459,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":664,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":570,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":76,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":583,"com.google.gson.functional.MapTest.testMapWithQuotes":166,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":504,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":585,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":127,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":485,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":141,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":651,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":501,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":385,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":204,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":66,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":364,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":289,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":513,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":338,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":1,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":515,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":558,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":301,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":45,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":112,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":68,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":444,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":88,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":439,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":666,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":563,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":425,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":80,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":238,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":712,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":350,"com.google.gson.functional.ObjectTest.testNestedSerialization":352,"com.google.gson.JsonObjectTest.testAddingStringProperties":649,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":144,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":196,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":252,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":589,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":441,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":178,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":420,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":493,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":640,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":32,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":603,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":706,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":343,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":435,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":315,"com.google.gson.JsonPrimitiveTest.testBoolean":657,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":223,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":518,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":28,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":254,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":608,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":499,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":557,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":716,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":588,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":454,"com.google.gson.functional.CollectionTest.testSetSerialization":117,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":192,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":135,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":412,"com.google.gson.functional.StringTest.testStringValueSerialization":591,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":592,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":61,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":102,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":708,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":445,"com.google.gson.MixedStreamTest.testWriteInvalidState":600,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":337,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":257,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":263,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":463,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":566,"com.google.gson.stream.JsonWriterTest.testBooleans":691,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":510,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":703,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":571,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":722,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":377,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":645,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":440,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":686,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":396,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":613,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":536,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":594,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":158,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":698,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":403,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":450},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"65724359-3e58-11e6-8c00-4d89072821c4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[0,1,2,3,4,5,6],"tindex":"6572917a-3e58-11e6-8c00-1dfc0bfa0dca","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json instanceof com.google.gson.JsonArray) {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"6572917b-3e58-11e6-8c00-034f14d12188","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6572b88c-3e58-11e6-8c00-d558e77ac234","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6572b88d-3e58-11e6-8c00-a12435f1c590","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6572b88e-3e58-11e6-8c00-a996337f479f","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"6572df9f-3e58-11e6-8c00-a56f86cf4df7","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6572dfa0-3e58-11e6-8c00-d1c5caa9c703","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[7,8],"tindex":"657306b1-3e58-11e6-8c00-47382060bb7c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[9,10,11,12,13,14,15],"tindex":"657306b2-3e58-11e6-8c00-656b4114873e","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[16],"tindex":"65732dc3-3e58-11e6-8c00-8d84cc7115cc","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"65732dc4-3e58-11e6-8c00-b16f4c8f0a5a","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if ((json.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"65732dc5-3e58-11e6-8c00-6d0c4d5e34ff","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"65732dc6-3e58-11e6-8c00-e9c73c28af63","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"657354d7-3e58-11e6-8c00-6bd2e567fc2d","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if ((type instanceof java.lang.reflect.ParameterizedType) && (!(type.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[17,18,19],"tindex":"657354d8-3e58-11e6-8c00-07da93a59075","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"657354d9-3e58-11e6-8c00-cb8f850b33a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[20],"tindex":"657354da-3e58-11e6-8c00-f1e95a98f883","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,141,142,143,144,12,13,14,145,15,146,147,148,149,150,151,152,20,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,0,497,498,499,500,501,502,503,504,505,1,506,2,507,508,509,510,511,16,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,3,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609],"tindex":"65737beb-3e58-11e6-8c00-95ce4c48521d","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if ((!serializeSpecialFloatingPointValues) && (!serializeSpecialFloatingPointValues)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"serializeSpecialFloatingPointValues","lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"6573a2fc-3e58-11e6-8c00-ed53973c05df","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,23,24,634,635,636,637,638,639,29,640,641,642,643,644,30,645,646,647,648,649,31,38,40,49,68,80,120,122,123,124,125,126,127,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,141,142,12,13,14,145,15,150,174,177,185,188,190,204,216,217,218,222,223,228,303,374,375,389,391,395,397,398,400,650,416,417,418,419,420,421,422,651,428,434,438,473,474,484,487,488,489,490,491,492,493,494,0,498,501,504,1,506,2,510,539,3,549,551,593,594,599,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,4,679,5,6,680,681,682,683,684,685,686,687,688],"tindex":"6573ca0d-3e58-11e6-8c00-e1534ccc2444","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == primitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"primitive","o":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6573ca0e-3e58-11e6-8c00-8958cacc4e4b","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6573ca0f-3e58-11e6-8c00-078b1c178483","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    return toJsonTree(src);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"6573ca10-3e58-11e6-8c00-1972d0052bb7","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[612,613,618,621,22,24,25,26,27,689,690,29,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,30,31,32,34,35,36,38,40,41,45,46,47,48,49,50,53,55,56,57,58,60,64,66,68,69,70,71,72,73,75,76,77,79,82,83,84,85,87,88,89,92,94,97,98,99,100,104,105,106,107,108,111,114,115,117,118,120,127,129,133,9,10,135,136,137,11,140,141,142,143,144,150,153,154,157,159,161,166,167,168,172,174,176,177,178,179,181,184,187,188,195,196,197,198,199,200,203,205,206,207,209,210,211,212,214,219,220,221,226,227,232,240,243,252,258,261,264,269,273,274,278,287,289,291,292,295,298,300,304,305,306,307,308,309,314,316,320,321,323,326,327,330,333,336,340,342,343,346,348,349,351,352,360,362,363,365,370,373,374,375,377,378,379,380,382,707,708,709,710,711,383,384,385,386,387,388,389,390,391,392,393,395,396,397,398,399,400,401,402,712,713,714,715,716,717,718,719,720,408,409,410,411,412,413,414,415,418,420,423,424,425,651,426,427,429,432,436,437,441,442,443,444,446,448,449,450,453,454,455,459,461,463,465,467,469,470,471,472,475,478,482,484,487,488,490,493,496,0,497,501,503,504,1,2,507,510,16,513,514,515,516,517,519,521,522,524,526,527,528,529,531,534,536,537,539,540,3,543,544,545,546,549,550,552,554,555,558,559,562,565,566,567,568,569,570,571,572,573,575,576,577,578,579,582,584,588,591,592,593,594,595,598,599,601,603,655,659,607,608],"tindex":"65741831-3e58-11e6-8c00-6798fb0f9bac","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"65743f42-3e58-11e6-8c00-df98bb7edf99","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[58,60,64,73,220,289,321,712,713,714,715,716,717,718,719,459,490],"tindex":"65743f43-3e58-11e6-8c00-c9e7b95c2359","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"65743f44-3e58-11e6-8c00-65969ccb9b47","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[721,722],"tindex":"65743f45-3e58-11e6-8c00-7fabcac86cc7","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"65743f46-3e58-11e6-8c00-dda9eb0823fe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"65746657-3e58-11e6-8c00-d7b20793f70a","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            if (jsonElement instanceof com.google.gson.JsonObject) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"65746658-3e58-11e6-8c00-7f84e0d942a7","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"65746659-3e58-11e6-8c00-cfb9f08a6c0e","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"6574665a-3e58-11e6-8c00-793d0e0f2ebb","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        {\n            if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"65748d6b-3e58-11e6-8c00-0d4283b02f8f","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"65748d6c-3e58-11e6-8c00-799210b1f696","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.equals(type)) {\n        {\n            if (type == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"65748d6d-3e58-11e6-8c00-332cfaa14d48","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[21,22,23,24,25,634,635,723,689,29,34,35,36,37,38,40,44,49,50,53,54,55,56,64,66,68,69,70,71,73,75,76,77,80,81,84,93,94,97,98,99,100,105,106,108,110,111,112,114,117,120,122,123,124,125,126,127,128,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,141,142,12,146,147,148,150,151,20,153,154,159,161,162,164,167,169,170,174,176,177,181,183,184,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,206,207,210,214,216,217,218,219,221,222,223,225,226,227,228,234,239,241,243,251,252,260,261,263,264,267,270,278,289,291,292,295,303,306,309,310,314,315,316,320,321,326,327,328,329,330,331,332,336,343,345,347,349,351,352,356,360,361,364,368,370,371,372,373,374,375,377,378,379,380,382,707,708,709,710,711,383,384,385,386,387,388,389,390,391,393,395,396,397,398,399,400,401,402,404,405,406,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,651,428,436,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,471,472,473,474,484,486,487,488,490,493,494,0,504,1,2,509,16,527,529,534,535,537,538,539,540,3,544,545,549,551,555,556,557,559,562,564,565,569,570,571,572,573,576,578,582,583,592,595,598,605,606,607,608],"tindex":"6574b47e-3e58-11e6-8c00-bbaa182a28fd","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6574b47f-3e58-11e6-8c00-c3447ce90eeb","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6574b480-3e58-11e6-8c00-9996f3dc9e5b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"6574b481-3e58-11e6-8c00-6be9183e0cac","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"6574b482-3e58-11e6-8c00-9f82b63fb113","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6574db93-3e58-11e6-8c00-f7b8229e9969","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[21,22,23,24,25,724,34,35,36,58,59,60,61,62,63,64,65,68,74,78,80,120,122,123,124,125,126,127,128,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,142,150,151,188,190,204,205,210,369,377,379,389,390,391,395,396,397,398,399,400,402,713,714,725,403,404,405,406,407,416,417,418,419,420,421,422,438,493,494,527,534,538,545,549],"tindex":"6574db94-3e58-11e6-8c00-4bae61c6198d","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6574db95-3e58-11e6-8c00-d511c452be9c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"657502a6-3e58-11e6-8c00-b1d2e0fbe119","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"657502a7-3e58-11e6-8c00-ff0028ca2ee4","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    try {\n        return key != null ? find(((K)(key)), false) : null;\n    } catch (java.lang.ClassCastException e) {\n        return null;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"657502a8-3e58-11e6-8c00-491f38f25bc1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"657502a9-3e58-11e6-8c00-e5bf360547a7","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"657502aa-3e58-11e6-8c00-d5a7a05d2113","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    if (!(isLenient())) {\n                        double double = value.doubleValue();\n                        if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                            throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                        } \n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"657529bb-3e58-11e6-8c00-836a64e6fd79","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"657529bc-3e58-11e6-8c00-63079dfcee6f","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[649,122,123,125,126,133,12,13,14,145,15,190,593,594],"tindex":"657529bd-3e58-11e6-8c00-638341927bb5","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"657529be-3e58-11e6-8c00-57fb6fadb56d","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        {\n            if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[8],"tindex":"657529bf-3e58-11e6-8c00-17b8299c8cf5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"657550d0-3e58-11e6-8c00-49ef87262d75","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:722","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE))"},"failures":[],"tindex":"657577e1-3e58-11e6-8c00-19d536c41e16","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if ((modifier == modifier) || (last == modifier)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"modifier","com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN":"modifier","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[726],"tindex":"657577e2-3e58-11e6-8c00-77b661853033","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"657577e3-3e58-11e6-8c00-a3282406a3f6","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"657577e4-3e58-11e6-8c00-ad0823923651","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"65759ef5-3e58-11e6-8c00-93bcfdc58f7a","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[22,24,25,26,27,689,29,32,34,35,36,38,39,40,42,43,46,49,50,52,53,54,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,108,112,113,114,117,119,122,123,125,126,128,130,132,133,10,134,135,139,141,143,144,12,13,14,145,15,151,161,170,174,176,177,181,188,189,191,192,193,194,195,197,198,199,200,201,202,204,206,207,208,209,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,231,233,238,239,241,242,243,250,255,256,259,263,265,266,268,275,280,281,283,284,285,286,293,294,296,299,302,303,311,312,315,318,324,326,327,328,329,330,331,332,333,334,335,336,338,340,341,343,344,345,347,349,350,351,352,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,378,379,380,381,382,707,708,709,710,711,383,385,386,387,388,389,391,392,393,395,396,397,398,399,400,401,402,404,405,406,407,410,411,415,416,417,418,419,420,421,422,423,424,425,651,426,428,429,430,431,432,433,434,436,437,438,439,440,441,442,451,452,456,458,460,461,462,463,464,466,468,469,470,471,472,473,474,476,477,478,479,480,481,483,484,486,487,488,489,490,491,492,493,494,495,0,498,499,500,502,505,506,2,508,509,511,16,512,518,520,523,525,526,527,529,530,533,534,535,538,541,542,3,544,546,547,548,551,553,555,556,557,558,559,560,561,562,563,564,566,567,569,570,571,572,573,574,576,578,580,581,583,585,586,587,589,590,592,595,598,600,604,605,606],"tindex":"65759ef6-3e58-11e6-8c00-01d10841affd","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"65759ef7-3e58-11e6-8c00-8dd2ea09dd78","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if ((src != null) && (!(\"\".equals(datePattern.trim())))) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                                    } \n                                    return toJsonTree(src, src.getClass());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:558","type":"CtBinaryOperatorImpl","sourcecode":"last < length"},"failures":[682],"tindex":"6575c608-3e58-11e6-8c00-d58aaffc4256","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index < index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"index","length":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"6575c609-3e58-11e6-8c00-299a90798f49","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6575c60a-3e58-11e6-8c00-07722155829e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"6575c60b-3e58-11e6-8c00-0fd3f1297057","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6575ed1c-3e58-11e6-8c00-2d26126b6794","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"6575ed1d-3e58-11e6-8c00-6d2a54174b8b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if ((src != null) && (!(\"\".equals(datePattern.trim())))) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                                    } \n                                    return toJsonTree(src, src.getClass());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"6575ed1e-3e58-11e6-8c00-bb604b751d25","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            if (a != null) {\n                {\n                    return a.compareTo(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6575ed1f-3e58-11e6-8c00-f55163dd3351","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"65761430-3e58-11e6-8c00-e515ef6d17e4","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.Class) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"65761431-3e58-11e6-8c00-3dc7892e6f71","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"65761432-3e58-11e6-8c00-07459a796c75","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.equals(type)) {\n        {\n            if (type == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                public T construct() {\n                                    if (type instanceof java.lang.reflect.ParameterizedType) {\n                                        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                        if (elementType instanceof java.lang.Class) {\n                                            return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                        } else {\n                                            throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                        }\n                                    } else {\n                                        throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                    }\n                                }\n                            };\n                        } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                }\n                            };\n                        } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                        if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                }\n                            };\n                        } else {\n                            return new com.google.gson.internal.ObjectConstructor<T>() {\n                                public T construct() {\n                                    return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                }\n                            };\n                        }\n                    } \n                    return null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,141,142,143,144,12,13,14,145,15,146,147,148,149,150,151,152,20,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,0,497,498,499,500,501,502,503,504,505,1,506,2,507,508,509,510,511,16,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,3,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609],"tindex":"65763b43-3e58-11e6-8c00-9f80ce5091f6","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[88,90,572],"tindex":"65766254-3e58-11e6-8c00-cfa99f89ee22","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[726],"tindex":"65766255-3e58-11e6-8c00-8f52aecaebc5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"65768966-3e58-11e6-8c00-e3f1e91f71b1","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if ((src != null) && (!(\"\".equals(datePattern.trim())))) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                                    } \n                                    return toJsonTree(src, src.getClass());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[21,22,23,24,25,68,80,120,122,123,124,125,126,127,128,129,130,131,132,133,9,10,134,135,136,137,138,11,139,140,142,150,188,190,204,205,210,389,391,395,396,397,398,400,416,417,418,419,420,421,422,438,493,494,549],"tindex":"65768967-3e58-11e6-8c00-53aded729ae7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"65768968-3e58-11e6-8c00-c3fb5db9d30b","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && (((typeAdapter == typeAdapter) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter","value":"typeAdapter","java.lang.Object.class":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"65768969-3e58-11e6-8c00-f32b32a09d12","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"6576d78a-3e58-11e6-8c00-b5c16d514c79","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            if (jsonElement instanceof com.google.gson.JsonObject) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[74,78,79,82],"tindex":"6576d78b-3e58-11e6-8c00-4528969906a6","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6576d78c-3e58-11e6-8c00-bbf94edbc0c8","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            if (a != null) {\n                {\n                    return a.compareTo(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6576d78d-3e58-11e6-8c00-61ddddcc4de4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[727],"tindex":"6576d78e-3e58-11e6-8c00-071692517300","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6576d78f-3e58-11e6-8c00-31fe7ffafc60","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6576d790-3e58-11e6-8c00-53bd129aa3cc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"6576fea1-3e58-11e6-8c00-4fe8c44ffbff","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            if (jsonElement instanceof com.google.gson.JsonObject) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[612,613,620,24,41,45,49,120,124,127,129,135,136,137,140,141,142,150,205,212,342,375,391,395,397,398,400,493,0,1,2,539,3,549,599,655,659],"tindex":"6576fea2-3e58-11e6-8c00-e5b5cd1efbe8","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6576fea3-3e58-11e6-8c00-098606a02ece","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"6576fea4-3e58-11e6-8c00-d3e37b21ad20","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        {\n                            if ((src != null) && (!(\"\".equals(datePattern.trim())))) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    if (src == null) {\n                                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                                    } \n                                    return toJsonTree(src, src.getClass());\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[22,26,27,689,29,39,40,46,53,54,58,60,61,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,108,113,114,117,122,123,125,126,128,132,133,10,135,143,144,12,13,14,145,15,161,170,174,176,177,181,188,189,191,192,193,194,195,198,199,200,201,202,206,207,208,209,211,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,302,326,327,328,329,330,331,332,333,334,335,336,338,340,341,343,345,347,349,350,351,352,354,355,356,357,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,377,378,379,380,381,382,707,708,709,710,711,383,385,386,387,392,404,405,406,410,411,415,417,418,419,420,422,423,424,425,651,426,428,429,431,432,433,434,436,437,439,440,442,461,462,463,469,470,471,472,473,474,476,477,478,479,484,486,487,488,489,490,491,492,493,494,499,500,508,16,518,526,542,546,555,556,557,558,559,560,561,562,566,567,569,570,571,572,573,592,595,598,600,604,605,606],"tindex":"657725b5-3e58-11e6-8c00-c7749fa8f0ce","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"657725b6-3e58-11e6-8c00-4fdba66966c2","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n    } \n    return toJson(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"657725b7-3e58-11e6-8c00-9f825e0e36c8","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            if (jsonElement instanceof com.google.gson.JsonObject) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer","value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"657725b8-3e58-11e6-8c00-f75c86babd1f","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (json instanceof com.google.gson.JsonArray) {\n                {\n                    synchronized(java.text.DateFormat) {\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException ignored) {\n                        }\n                        try {\n                            return java.text.DateFormat.parse(json.getAsString());\n                        } catch (java.text.ParseException e) {\n                            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"65774cc9-3e58-11e6-8c00-ffcaedae99ad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"65774cca-3e58-11e6-8c00-770d2627be8e","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"65774ccb-3e58-11e6-8c00-9dcffff73611","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[634,645,728,646,647,649,491],"tindex":"65774ccc-3e58-11e6-8c00-3542f0be4adf","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244491307/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
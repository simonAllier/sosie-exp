{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":255,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":356,"com.google.gson.functional.StringTest.testStringValueDeserialization":355,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":386,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":96,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":324,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":380,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":495,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":23,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":201,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":84,"com.google.gson.MixedStreamTest.testWriteLenient":621,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":394,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":69,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":61,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":66,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":167,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":154,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":415,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":577,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":221,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":38,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":108,"com.google.gson.functional.ObjectTest.testSingletonLists":165,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":597,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":134,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":610,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":80,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":13,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":335,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":181,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":9,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":528,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":632,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":365,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":397,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":206,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":152,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":388,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":91,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":131,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":402,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":233,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":465,"com.google.gson.functional.EnumTest.testEnumCaseMapping":22,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":609,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":624,"com.google.gson.functional.JsonTreeTest.testToJsonTree":300,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":486,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":336,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":130,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":573,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":319,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":482,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":635,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":424,"com.google.gson.functional.ObjectTest.testNullDeserialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":209,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":363,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":177,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":535,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":496,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":231,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":101,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":188,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":404,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":605,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":104,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":160,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":334,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":525,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":631,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":511,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":310,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":192,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":400,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":570,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":323,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":85,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":149,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":458,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":296,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":73,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":475,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":446,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":526,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":150,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":187,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":566,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":173,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":349,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":29,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":379,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":472,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":499,"com.google.gson.metrics.PerformanceTest.testDummy":406,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":289,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":121,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":36,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":74,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":407,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":477,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":600,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":594,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":212,"com.google.gson.functional.CollectionTest.testSetDeserialization":65,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":222,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":176,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":291,"com.google.gson.functional.EnumTest.testEnumSet":411,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":146,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":314,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":454,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":182,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":522,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":238,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":156,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":16,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":228,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":530,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":382,"com.google.gson.functional.MapTest.testHashMapDeserialization":449,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":493,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":327,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":257,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":608,"com.google.gson.MixedStreamTest.testReadNulls":622,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":254,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":293,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":409,"com.google.gson.functional.MapTest.testSortedMap":468,"com.google.gson.functional.MapTest.testMapSerialization":464,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":148,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":244,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":273,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":353,"com.google.gson.functional.MapTest.testSerializeMaps":387,"com.google.gson.functional.MapTest.testComplexKeysSerialization":95,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":290,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":476,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":576,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":21,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":211,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":116,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":638,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":59,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":408,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":19,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":241,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":25,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":190,"com.google.gson.functional.MapTest.testStringKeyDeserialization":474,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":437,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":540,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":478,"com.google.gson.functional.PrettyPrintingTest.testMap":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":494,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":557,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":417,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":583,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":8,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":278,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":358,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":613,"com.google.gson.functional.CollectionTest.testQueueSerialization":421,"com.google.gson.functional.MapTest.testMapSerializationEmpty":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":591,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":516,"com.google.gson.functional.MapTest.testMapOfMapSerialization":463,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":320,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":426,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":218,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":518,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":442,"com.google.gson.functional.FieldNamingTest.testIdentity":354,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":357,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":436,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":262,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":193,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":28,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":164,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":299,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":433,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":132,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":1,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":479,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":611,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":203,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":329,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":316,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":604,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":447,"com.google.gson.functional.MapTest.testMapSubclassSerialization":451,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":538,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":45,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":251,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":292,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":226,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":368,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":606,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":308,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":548,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":12,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":34,"com.google.gson.functional.EnumTest.testEnumSubclass":18,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":521,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":10,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":180,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":487,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":97,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":153,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":489,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":205,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":512,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":204,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":119,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":3,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":271,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":517,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":550,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":27,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":602,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":166,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":89,"com.google.gson.MixedStreamTest.testWriteNulls":620,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":572,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":444,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":568,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":31,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":210,"com.google.gson.CommentsTest.testParseComments":626,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":112,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":438,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":275,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":524,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":243,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":467,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":612,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":555,"com.google.gson.MixedStreamTest.testReadInvalidState":618,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":43,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":603,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":245,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":137,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":375,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":279,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":280,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":505,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":532,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":270,"com.google.gson.functional.MapTest.testMapDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":593,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":392,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":448,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":107,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":128,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":456,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":111,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":481,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":60,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":298,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":307,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":194,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":552,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":49,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":585,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":42,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":58,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":202,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":485,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":440,"com.google.gson.functional.PrimitiveTest.testShortSerialization":536,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":483,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":235,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":144,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":636,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":527,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":315,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":350,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":17,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":62,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":250,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":633,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":452,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":141,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":431,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":541,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":87,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":399,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":328,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":628,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":127,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":195,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":580,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":157,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":513,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":199,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":172,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":414,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":51,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":578,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":78,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":498,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":377,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":588,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":325,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":124,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":490,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":158,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":515,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":544,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":82,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":110,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":412,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":261,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":246,"com.google.gson.functional.MapTest.testGeneralMapField":94,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":170,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":546,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":98,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":224,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":274,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":601,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":469,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":304,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":492,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":529,"com.google.gson.MixedStreamTest.testReadMixedStreamed":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":313,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":459,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":506,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":2,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":294,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":428,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":374,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":287,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":519,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":234,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":321,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":460,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":607,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":450,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":439,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":545,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":268,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":342,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":507,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":595,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":445,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":303,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":425,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":115,"com.google.gson.functional.ObjectTest.testNestedDeserialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":443,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":207,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":554,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":258,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":118,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":232,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":543,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":282,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":24,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":359,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":461,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":33,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":534,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":50,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":72,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":88,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":430,"com.google.gson.functional.ObjectTest.testNullSerialization":551,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":53,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":347,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":453,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":93,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":488,"com.google.gson.functional.MapTest.testInterfaceTypeMap":92,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":225,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":491,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":20,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":627,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":57,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":558,"com.google.gson.MixedStreamTest.testReadClosed":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":581,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":230,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":501,"com.google.gson.MixedStreamTest.testWriteClosed":370,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":260,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":423,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":126,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":337,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":381,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":39,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":122,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":285,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":333,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":129,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":174,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":422,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":343,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":520,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":345,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":55,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":427,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":326,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":264,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":163,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":214,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":504,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":213,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":562,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":284,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":376,"com.google.gson.functional.CollectionTest.testQueueDeserialization":432,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":508,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":362,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":332,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":344,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":90,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":590,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":105,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":198,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":416,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":367,"com.google.gson.functional.MapTest.testRawMapSerialization":471,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":598,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":629,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":48,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":184,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":249,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":484,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":11,"com.google.gson.functional.PrimitiveTest.testByteSerialization":533,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":567,"com.google.gson.ObjectTypeAdapterTest.testSerialize":5,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":616,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":102,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":497,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":70,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":574,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":351,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":40,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":360,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":401,"com.google.gson.functional.MapTest.testMapWithQuotes":462,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":584,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":434,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":579,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":81,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":253,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":582,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":220,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":109,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":30,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":196,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":242,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":587,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":175,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":393,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":71,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":531,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":410,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":64,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":331,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":563,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":52,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":265,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":346,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":378,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":252,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":15,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":44,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":133,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":441,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":183,"com.google.gson.functional.ObjectTest.testNestedSerialization":185,"com.google.gson.internal.LinkedTreeMapTest.testClear":634,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":83,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":364,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":480,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":500,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":267,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":470,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":247,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":301,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":7,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":623,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":178,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":561,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":161,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":125,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":317,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":403,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":502,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":625,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":306,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":340,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":614,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":571,"com.google.gson.functional.CollectionTest.testSetSerialization":67,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":79,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":390,"com.google.gson.functional.StringTest.testStringValueSerialization":615,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":366,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":26,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":215,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":419,"com.google.gson.MixedStreamTest.testWriteInvalidState":369,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":564,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":549,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":503,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":142,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":276,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":586,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":352,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":639,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":208,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":266,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":229,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":599,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":617,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":455,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":385,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":559,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":569},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1590","type":"CtBinaryOperatorImpl","sourcecode":"(buffer[((pos) + i)]) != (com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX[i])"},"failures":[],"tindex":"b6796861-3e7e-11e6-8892-d96ddd1969a2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if ((buffer[(counter + offset)]) != (buffer[i])) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"counter","i":"offset","buffer":"buffer","com.google.gson.stream.JsonReader.NON_EXECUTE_PREFIX":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372],"tindex":"b679b682-3e7e-11e6-8892-297ecda5e0b8","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[0,3,4,5,6,12,13,16,20,21,23,24,25,26,373,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,69,70,71,72,73,75,76,77,79,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,157,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,236,237,238,240,241,242,244,245,246,247,249,250,251,252,253,254,255,256,258,259,260,261,262,263,265,266,268,274,275,276,280,281,282,283,284,285,286,287,288,289,293,294,295,296,297,298,299,300,301,302,306,307,312,315,317,321,330,333,338,339,340,341,342,343,344,345,348,349,350,351,352,353,354,366,367,368,369,370,371,372],"tindex":"b679dd93-3e7e-11e6-8892-3300af70dd6a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b679dd94-3e7e-11e6-8892-575b2c2cca48","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[374],"tindex":"b67a04a5-3e7e-11e6-8892-a5001ba71703","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67a04a6-3e7e-11e6-8892-cfa2705b916c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"b67a2bb7-3e7e-11e6-8892-3f8a57e51f5b","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b67a2bb8-3e7e-11e6-8892-bfbbdcb93fda","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"b67a2bb9-3e7e-11e6-8892-a3bffec47d72","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.util.Date.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"b67a52ca-3e7e-11e6-8892-3d0f0c375d46","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n    } \n    java.util.Date java.util.Date = deserializeToDate(json);\n    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n        return date;\n    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n        return new java.sql.Timestamp(date.getTime());\n    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"b67a52cb-3e7e-11e6-8892-27bf5bc27f9a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b67a79dc-3e7e-11e6-8892-798e7aec9531","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[315],"tindex":"b67a79dd-3e7e-11e6-8892-37bdc3763663","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67a79de-3e7e-11e6-8892-3babf3fcac65","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"b67aa0ef-3e7e-11e6-8892-73616f65de94","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[375,376,377,378,379,380,381,382,383,384],"tindex":"b67aa0f0-3e7e-11e6-8892-21f14fcacf52","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == 0) {\n        {\n            if (h == h) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    h ^= (h >>> 20) ^ (h >>> 12);\n                    return (h ^ (h >>> 7)) ^ (h >>> 4);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"h","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"b67aa0f1-3e7e-11e6-8892-4734520551f0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[47,60,350],"tindex":"b67aa0f2-3e7e-11e6-8892-c9a8620c7caf","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[385,386,387,206,388,389,240,241,390,391,392,242,368],"tindex":"b67ac803-3e7e-11e6-8892-2dc26e397cc3","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67ac804-3e7e-11e6-8892-612e7a61b997","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[315],"tindex":"b67ac805-3e7e-11e6-8892-5b10e0c070bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"b67ac806-3e7e-11e6-8892-8de94f9abb65","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"b67aef17-3e7e-11e6-8892-91b316ac228b","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67aef18-3e7e-11e6-8892-a5829b96c0fe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67aef19-3e7e-11e6-8892-814042aa141e","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[304,393,311,394,331,395,396,397,398,399,400],"tindex":"b67aef1a-3e7e-11e6-8892-454455f1523d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67aef1b-3e7e-11e6-8892-83a747247a1f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"b67aef1c-3e7e-11e6-8892-a38a4b2a1cad","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67b162d-3e7e-11e6-8892-750d011cc7cf","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:139","type":"CtBinaryOperatorImpl","sourcecode":"comparison == 0"},"failures":[],"tindex":"b67b162e-3e7e-11e6-8892-43286691dc76","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == 0) {\n        {\n            if (h == h) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    h ^= (h >>> 20) ^ (h >>> 12);\n                    return (h ^ (h >>> 7)) ^ (h >>> 4);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b67b162f-3e7e-11e6-8892-5d78659a4ba4","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"b67b1630-3e7e-11e6-8892-c948d2e23181","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (!(token instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b67b3d41-3e7e-11e6-8892-2ff689f6c345","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[401,0,402,1,2,3,4,403,6,404,405,7,406,8,9,10,407,11,12,13,408,14,15,409,410,16,411,412,17,18,413,19,20,21,414,22,415,23,24,25,26,373,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,416,62,417,418,419,420,421,422,423,424,63,425,426,427,64,65,66,428,429,67,430,68,431,432,69,70,433,71,72,434,73,435,74,436,75,76,437,77,78,79,438,439,440,441,80,442,81,443,82,83,84,85,86,87,88,444,445,446,447,448,89,449,450,451,387,452,453,454,455,456,457,90,458,459,460,461,462,463,464,465,91,466,467,468,92,469,93,94,470,471,472,95,473,474,475,476,477,478,96,97,479,98,99,100,101,102,480,103,104,105,106,107,108,481,109,482,110,111,112,113,483,114,484,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,485,486,131,487,132,488,489,490,491,133,134,492,135,136,137,493,494,495,496,497,498,138,499,500,501,502,139,140,503,504,141,505,506,507,142,508,143,144,509,145,510,511,512,513,514,515,146,516,517,518,519,147,148,520,149,150,151,152,521,522,523,524,525,526,153,154,527,155,528,529,156,530,531,157,158,532,533,534,535,536,537,538,159,160,539,540,161,541,542,162,543,544,545,546,547,163,548,164,165,166,167,168,169,170,171,172,173,174,549,175,550,176,177,551,178,179,180,552,181,553,182,183,184,185,554,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,555,208,209,210,211,212,213,219,556,220,221,222,223,224,557,225,226,227,558,228,229,230,231,232,233,234,235,559,236,237,238,239,388,389,240,241,390,391,392,242,243,244,245,246,247,248,249,250,251,252,254,560,255,256,257,258,259,260,261,561,262,263,264,265,266,267,268,562,563,564,565,566,567,568,569,269,270,570,571,572,271,573,272,574,273,274,275,276,277,575,278,576,279,280,281,282,283,284,285,577,286,287,288,289,290,291,578,292,293,579,294,295,296,297,298,299,300,301,302,303,580,304,581,305,306,307,582,308,583,584,309,393,310,311,585,312,313,586,314,315,316,587,588,589,590,591,317,592,318,593,594,319,595,320,321,322,596,323,324,597,598,325,326,327,599,600,328,394,601,329,330,331,602,332,603,333,334,335,395,604,336,605,337,606,338,339,340,341,342,343,344,345,346,347,607,348,349,608,350,351,352,353,354,355,609,356,610,357,611,358,359,612,360,613,361,362,363,614,364,365,615,366,616,617,367,618,619,368,620,369,621,622,623,370,371,372,624,625,626],"tindex":"b67b3d42-3e7e-11e6-8892-1bbb2881a692","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[267,268],"tindex":"b67b6453-3e7e-11e6-8892-717293125294","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b67b6454-3e7e-11e6-8892-cbcf7fc5ec57","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67b6455-3e7e-11e6-8892-75e3cf671f79","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67b6456-3e7e-11e6-8892-5d47312fc0c8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b67b8b67-3e7e-11e6-8892-fbdb9ab889d1","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,3,4,5,6,12,13,16,20,21,23,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,69,70,71,72,73,75,76,77,79,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,157,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,236,237,238,240,241,242,244,245,246,247,249,250,251,252,253,254,255,256,258,259,260,261,262,263,265,266,268,274,275,276,280,281,282,283,284,285,286,287,288,289,293,294,295,296,297,298,299,300,301,302,306,307,312,315,317,321,330,333,338,339,340,341,342,343,344,345,348,349,350,351,352,353,354,366,367,368,369,370,371,372],"tindex":"b67b8b68-3e7e-11e6-8892-a926b4c1f093","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[338,339,340,341,342,343,344,345],"tindex":"b67b8b69-3e7e-11e6-8892-474abb6e225f","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,3,4,5,6,13,16,20,23,25,28,29,30,33,34,35,36,37,39,40,41,43,46,47,48,49,51,52,53,56,58,61,62,63,66,67,69,70,71,72,76,77,79,82,83,90,92,93,94,96,97,100,101,102,104,105,106,110,111,113,114,116,118,119,120,121,122,123,124,125,128,129,130,164,165,168,171,174,176,178,182,184,185,187,192,194,195,197,202,205,206,208,209,210,211,213,214,215,216,217,218,219,220,221,222,226,627,628,629,630,631,632,240,241,242,245,247,250,251,252,253,254,255,256,259,262,263,265,268,274,280,281,282,283,284,285,288,293,295,296,297,298,299,300,301,321,330,333,338,341,342,345,348,349,350,351,352,353,354,366,367,368],"tindex":"b67bb27a-3e7e-11e6-8892-312734a7584e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b67bb27b-3e7e-11e6-8892-9fcd0e027cc8","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:381","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[633,634,635,636,637,638,639,86,87,255,261,298],"tindex":"b67bb27c-3e7e-11e6-8892-dda9b854146b","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b67bd98d-3e7e-11e6-8892-378b3a44f49a","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67bd98e-3e7e-11e6-8892-25f8f9c3799b","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b67bd98f-3e7e-11e6-8892-e1f1152cc370","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"b67bd990-3e7e-11e6-8892-832156161d13","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b67c00a1-3e7e-11e6-8892-8104c7ef890a","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67c00a2-3e7e-11e6-8892-d539d55e9f8d","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67c00a3-3e7e-11e6-8892-d96c7c41c7c1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67c00a4-3e7e-11e6-8892-89a3f624fc78","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b67c00a5-3e7e-11e6-8892-1d916d9e3f23","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"b67c00a6-3e7e-11e6-8892-a94614de0c70","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"b67c00a7-3e7e-11e6-8892-5be553669fde","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b67c27b8-3e7e-11e6-8892-a564360c4679","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b67c27b9-3e7e-11e6-8892-67d197b1b7f6","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"b67c27ba-3e7e-11e6-8892-0d330714f6f5","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b67c27bb-3e7e-11e6-8892-b785d0aed2dd","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b67c27bc-3e7e-11e6-8892-afd275638b1b","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b67c4ecd-3e7e-11e6-8892-57c025f049aa","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b67c4ece-3e7e-11e6-8892-09b69ddc0ea9","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b67c4ecf-3e7e-11e6-8892-7d1a30739fd4","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452913/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":63,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
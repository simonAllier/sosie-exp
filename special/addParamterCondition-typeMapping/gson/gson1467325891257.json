{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":474,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":170,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":387,"com.google.gson.functional.StringTest.testStringValueDeserialization":530,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":54,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":564,"com.google.gson.stream.JsonWriterTest.testRepeatedName":384,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":594,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":223,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":472,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":435,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":255,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":672,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":447,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":55,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":214,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":455,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":630,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":221,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":271,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":198,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":602,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":703,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":403,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":501,"com.google.gson.functional.ObjectTest.testSingletonLists":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":251,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":272,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":171,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":589,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":378,"com.google.gson.stream.JsonWriterTest.testStrings":393,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":651,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":339,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":571,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":463,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":125,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":85,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":191,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":411,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":538,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":178,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":163,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":626,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":691,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":665,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":38,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":582,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":659,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":145,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":37,"com.google.gson.functional.EnumTest.testEnumCaseMapping":220,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":129,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":169,"com.google.gson.GenericArrayTypeTest.testNotEquals":666,"com.google.gson.functional.JsonTreeTest.testToJsonTree":494,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":581,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":572,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":489,"com.google.gson.stream.JsonWriterTest.testNulls":382,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":409,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":670,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":234,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":188,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":562,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":590,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":372,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":61,"com.google.gson.functional.ObjectTest.testNullDeserialization":579,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":344,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":536,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":697,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":461,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":309,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":398,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":595,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":281,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":143,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":99,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":466,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":397,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":406,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":637,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":636,"com.google.gson.JsonParserTest.testParseString":696,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":570,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":189,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":301,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":505,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":613,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":557,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":641,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":156,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":250,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":612,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":436,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":545,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":623,"com.google.gson.ParameterizedTypeTest.testNotEquals":663,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":700,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":561,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":117,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":133,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":482,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":662,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":50,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":302,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":553,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":624,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":82,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":521,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":132,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":138,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":459,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":693,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":46,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":434,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":599,"com.google.gson.metrics.PerformanceTest.testDummy":517,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":453,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":334,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":200,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":519,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":649,"com.google.gson.stream.JsonWriterTest.testEmptyArray":678,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":52,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":254,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":245,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":420,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":481,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":407,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":491,"com.google.gson.functional.CollectionTest.testSetDeserialization":65,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":14,"com.google.gson.functional.EnumTest.testEnumSet":69,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":277,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":616,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":100,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":559,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":18,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":399,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":627,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":422,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":632,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":690,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":140,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":342,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":305,"com.google.gson.functional.MapTest.testHashMapDeserialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":592,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":567,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":139,"com.google.gson.MixedStreamTest.testReadNulls":516,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":646,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":349,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":108,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":113,"com.google.gson.functional.MapTest.testSortedMap":40,"com.google.gson.functional.MapTest.testMapSerialization":36,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":319,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":699,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":424,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":621,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":526,"com.google.gson.functional.MapTest.testSerializeMaps":205,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":268,"com.google.gson.functional.MapTest.testComplexKeysSerialization":47,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":550,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":51,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":674,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":162,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":346,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":429,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":499,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":340,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":549,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":165,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":513,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":704,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":224,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":578,"com.google.gson.functional.MapTest.testStringKeyDeserialization":49,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":527,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":326,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":312,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":53,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":598,"com.google.gson.functional.PrettyPrintingTest.testMap":164,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":593,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":232,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":320,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":652,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":124,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":190,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":528,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":175,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":531,"com.google.gson.functional.MapTest.testMapSerializationEmpty":48,"com.google.gson.functional.CollectionTest.testQueueSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":242,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":705,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":617,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":694,"com.google.gson.functional.MapTest.testMapOfMapSerialization":207,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":611,"com.google.gson.JavaSerializationTest.testMapIsSerializable":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":563,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":63,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":680,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":298,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":332,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":510,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":172,"com.google.gson.functional.FieldNamingTest.testIdentity":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":101,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":322,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":684,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":468,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":225,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":273,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":493,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":574,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":681,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":583,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":400,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":504,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":173,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":648,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":296,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":569,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":560,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":263,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":24,"com.google.gson.functional.MapTest.testMapSubclassSerialization":204,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":635,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":78,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":428,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":552,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":122,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":369,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":609,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":645,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":490,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":17,"com.google.gson.functional.EnumTest.testEnumSubclass":72,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":299,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":126,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":462,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":288,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":97,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":629,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":325,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":585,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":227,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":667,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":685,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":614,"com.google.gson.stream.JsonWriterTest.testTwoNames":679,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":441,"com.google.gson.stream.JsonWriterTest.testNullName":682,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":104,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":395,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":524,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":81,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":618,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":295,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":433,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":687,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":258,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":454,"com.google.gson.MixedStreamTest.testWriteNulls":123,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":543,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":5,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":683,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":75,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":154,"com.google.gson.CommentsTest.testParseComments":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":345,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":427,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":701,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":329,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":502,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":93,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":423,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":628,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":540,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":174,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":208,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":539,"com.google.gson.MixedStreamTest.testReadInvalidState":514,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":260,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":311,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":661,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":181,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":677,"com.google.gson.JsonParserTest.testParseMixedArray":673,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":290,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":405,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":529,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":91,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":709,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":606,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":248,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":306,"com.google.gson.functional.MapTest.testMapDeserialization":31,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":244,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":168,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":203,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":128,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":500,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":30,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":336,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":111,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":371,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":402,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":73,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":443,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":280,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":286,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":351,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":370,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":404,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":356,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":9,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":39,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":262,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":102,"com.google.gson.functional.PrimitiveTest.testShortSerialization":310,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":374,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":631,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":610,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":237,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":591,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":265,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":71,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":210,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":270,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":26,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":605,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":313,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":438,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":676,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":568,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":135,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":316,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":640,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":185,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":432,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":483,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":488,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":136,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":228,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":473,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":327,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":615,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":470,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":458,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":74,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":352,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":444,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":650,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":664,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":249,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":373,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":597,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":239,"com.google.gson.stream.JsonWriterTest.testNullStringValue":380,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":566,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":57,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":586,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":634,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":297,"com.google.gson.JsonArrayTest.testSet":410,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":314,"com.google.gson.stream.JsonWriterTest.testEmptyObject":689,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":148,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":70,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":477,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":425,"com.google.gson.functional.MapTest.testGeneralMapField":44,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":457,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":152,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":643,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":159,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":366,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":480,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":256,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":229,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":289,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":359,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":304,"com.google.gson.MixedStreamTest.testReadMixedStreamed":418,"com.google.gson.JsonObjectTest.testDeepCopy":706,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":558,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":115,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":215,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":401,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":660,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":452,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":619,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":146,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":2,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":247,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":34,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":202,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":315,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":330,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":11,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":195,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":607,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":246,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":76,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":323,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":554,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":103,"com.google.gson.functional.ObjectTest.testNestedDeserialization":471,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":179,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":577,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":475,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":484,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":642,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":321,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":35,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":430,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":308,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":495,"com.google.gson.JavaSerializationTest.testListIsSerializable":4,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":439,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":450,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":67,"com.google.gson.functional.ObjectTest.testNullSerialization":278,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":354,"com.google.gson.stream.JsonWriterTest.testDoubles":390,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":542,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":27,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":584,"com.google.gson.functional.MapTest.testInterfaceTypeMap":41,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":525,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":692,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":368,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":335,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":708,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":587,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":184,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":219,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":507,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":498,"com.google.gson.MixedStreamTest.testReadClosed":515,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":142,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":600,"com.google.gson.MixedStreamTest.testWriteClosed":417,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":212,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":476,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":106,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":573,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":19,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":105,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":95,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":92,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":287,"com.google.gson.stream.JsonWriterTest.testLongs":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":261,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":276,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":337,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":60,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":622,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":497,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":64,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":698,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":252,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":647,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":86,"com.google.gson.stream.JsonWriterTest.testNumbers":392,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":644,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":292,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":556,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":150,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":347,"com.google.gson.functional.CollectionTest.testQueueDeserialization":68,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":294,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":620,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":535,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":668,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":259,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":414,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":32,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":467,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":688,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":241,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":84,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":361,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":56,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":121,"com.google.gson.functional.MapTest.testRawMapSerialization":209,"com.google.gson.JsonParserTest.testParseReader":695,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":565,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":186,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":283,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":350,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":426,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":376,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":119,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":153,"com.google.gson.functional.PrimitiveTest.testByteSerialization":307,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":338,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":671,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":363,"com.google.gson.ObjectTypeAdapterTest.testSerialize":377,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":596,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":127,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":448,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":158,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":266,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":20,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":533,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":658,"com.google.gson.functional.MapTest.testMapWithQuotes":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":233,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":603,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":324,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":114,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":408,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":333,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":218,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":231,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":13,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":686,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":655,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":15,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":469,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":511,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":300,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":576,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":161,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":77,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":240,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":633,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":341,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":547,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":522,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":151,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":257,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":353,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":478,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":415,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":79,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":669,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":653,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":509,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":588,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":506,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":331,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":464,"com.google.gson.functional.ObjectTest.testNestedSerialization":284,"com.google.gson.JsonObjectTest.testAddingStringProperties":707,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":149,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":291,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":358,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":537,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":180,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":45,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":182,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":7,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":1,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":131,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":394,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":96,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":279,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":639,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":487,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":445,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":130,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":601,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":657,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":442,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":465,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":412,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":187,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":176,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":157,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":98,"com.google.gson.functional.CollectionTest.testSetSerialization":216,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":166,"com.google.gson.functional.StringTest.testStringValueSerialization":177,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":328,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":362,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":58,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":87,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":431,"com.google.gson.MixedStreamTest.testWriteInvalidState":416,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":520,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":575,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":604,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":160,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":608,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":137,"com.google.gson.stream.JsonWriterTest.testBooleans":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":236,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":391,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":343,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":702,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":479,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":134,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":141,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":253,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":364,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":512,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":29,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":386,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":155,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":518},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b25a61-3f12-11e6-ae34-d565e5cb1b05","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"64b2a882-3f12-11e6-ae34-c74048212aea","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[121,122,123,0,1,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,5,158,159,160,161,162,7,163,164,9,165,166,167,168,10,169,170,171,172,173,174,175,176,177,178,179,180,11,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,12,197,13,198,14,15,199,16,17,18,200,201,19,20,21,22,23,202,203,204,205,28,30,32,206,207,36,208,41,43,44,45,209,47,50,53,54,55,56,210,211,59,60,212,61,213,64,214,215,216,67,217,218,69,70,71,72,219,74,220,221,222,223,224,225,226,227,228,229,230,231,232,233,77,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,78,79,271,272,273,80,274,275,276,277,278,279,280,281,282,283,284,285,286,83,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,86,87,88,89,90,317,318,319,320,91,92,321,93,322,323,324,100,325,326,327,328,329,330,331,332,333,103,334,105,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,109,371,372,110,111,373,374,375,376,112,113,116,117,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401],"tindex":"64b2f6a3-3f12-11e6-ae34-7d85b7b79cff","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if ((!root) && (!root)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"root","skipSerialize":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[265,349,402],"tindex":"64b31db4-3f12-11e6-ae34-a9e343674774","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b31db5-3f12-11e6-ae34-b7550d0b9470","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b31db6-3f12-11e6-ae34-a7c7605fec55","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b31db7-3f12-11e6-ae34-11c14b8df7b3","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b344c8-3f12-11e6-ae34-d38ae41da5ca","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance.length()) == 0) {\n        {\n            if (instance == instance) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    return java.lang.reflect.Field.get(instance);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"instance","com.google.gson.LongSerializationPolicy.DEFAULT":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1252","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b344c9-3f12-11e6-ae34-25a9a88b3c82","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if ((i == i) || (p == i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b344ca-3f12-11e6-ae34-3d146b399f7f","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b36bdb-3f12-11e6-ae34-2f8f2f41a113","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b36bdc-3f12-11e6-ae34-9b0f62b6f796","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b36bdd-3f12-11e6-ae34-cb7fc777386b","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b36bde-3f12-11e6-ae34-3dea862b721f","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[403,404,22,23],"tindex":"64b392ef-3f12-11e6-ae34-03f379c4095f","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[405],"tindex":"64b392f0-3f12-11e6-ae34-039988ea5726","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b3ba01-3f12-11e6-ae34-29a48282947f","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[278,376],"tindex":"64b3ba02-3f12-11e6-ae34-7d3abba6b83e","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[406,407,408,409],"tindex":"64b3ba03-3f12-11e6-ae34-cb1fc372e040","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b3ba04-3f12-11e6-ae34-6f702b71fedd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == b) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"b","java.util.Date.class":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"64b3e115-3f12-11e6-ae34-6f65eac25ad1","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b3e116-3f12-11e6-ae34-07804a04f53e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b3e117-3f12-11e6-ae34-9d97d2ac8c70","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"64b3e118-3f12-11e6-ae34-b960d80de7b4","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b40829-3f12-11e6-ae34-ffb0389871b5","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:346","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b4082a-3f12-11e6-ae34-97cac375285e","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == (-2)) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1246","type":"CtBinaryOperatorImpl"},"failures":[410],"tindex":"64b4082b-3f12-11e6-ae34-9985b1f7e17e","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4082c-3f12-11e6-ae34-0b08b934e10e","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl"},"failures":[192,193,411,412,194,195,413,414,196,415],"tindex":"64b42f3d-3f12-11e6-ae34-270802ec1289","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"64b42f3e-3f12-11e6-ae34-a9e10aeaccc2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[121,122,416,417,418,419,132,137,138,420,421,422,148,149,159,423,160,7,8,9,165,10,178,11,424,181,425,182,426,193,411,412,194,195,413,414,196,12,13,198,14,15,427,16,17,18,200,201,403,19,20,21,404,22,428,23,32,38,41,43,44,47,54,55,210,213,65,214,216,218,219,429,223,430,224,431,432,433,225,434,435,436,437,438,439,226,440,441,227,442,443,444,237,445,247,446,261,265,266,267,268,269,447,448,449,450,270,78,79,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,460,277,461,279,462,463,282,464,283,284,465,82,466,467,285,468,286,83,469,287,84,470,471,472,473,86,87,88,89,90,317,474,319,475,320,476,477,91,92,321,93,94,95,322,323,478,479,97,480,98,481,99,482,483,325,327,328,484,104,485,334,105,335,486,487,106,488,336,337,489,490,339,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,360,361,362,369,109,500,501,110,111,502,373,375,112,503,113,115,116,117,377,395,396,399,504,505,506,507,508],"tindex":"64b42f3f-3f12-11e6-ae34-e794ae8017e2","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[121,122,416,417,418,419,132,137,138,420,421,422,148,149,159,423,160,7,8,9,165,10,178,11,424,181,425,182,426,193,411,412,194,195,413,414,196,12,13,198,14,15,427,16,17,18,200,201,403,19,20,21,404,22,509,428,23,32,38,41,43,44,47,54,55,210,213,65,214,216,218,219,429,223,224,431,433,225,434,435,436,437,438,439,226,440,441,227,442,443,444,237,445,247,446,261,265,266,267,268,269,447,448,449,450,270,78,79,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,460,277,461,279,462,463,282,464,283,284,465,82,466,467,285,468,286,83,469,287,84,470,471,472,473,86,87,88,89,90,317,474,319,475,320,476,477,91,92,321,93,94,95,322,323,478,479,97,480,98,481,99,482,483,325,327,328,484,104,485,334,105,335,486,487,106,488,336,337,489,490,339,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,360,361,362,369,109,500,501,110,111,502,373,375,112,503,113,115,116,117,377,395,396,399],"tindex":"64b45650-3f12-11e6-ae34-1576e4ccdb44","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[510,178,199,474,95,492,348,493,494,113,116,117],"tindex":"64b45651-3f12-11e6-ae34-730825069c17","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b45652-3f12-11e6-ae34-79dd98901ce0","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        {\n                            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = from;\n                                if (from instanceof java.lang.reflect.GenericArrayType) {\n                                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                                } else if (from instanceof java.lang.Class<?>) {\n                                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                                    while (classType.isArray()) {\n                                        classType = classType.getComponentType();\n                                    }\n                                    t = classType;\n                                } \n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[125,126,239,246,249,250,381,383,385],"tindex":"64b47d63-3f12-11e6-ae34-835cdc9c579e","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[266,267,268,351,352,353,496,497,499],"tindex":"64b47d64-3f12-11e6-ae34-9d74084be38d","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b47d65-3f12-11e6-ae34-593f571b5484","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4a476-3f12-11e6-ae34-bbe51e668e11","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4a477-3f12-11e6-ae34-493f7f0df0ce","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b4a478-3f12-11e6-ae34-a9220fe9008f","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b4a479-3f12-11e6-ae34-717984b1ad74","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (o == null) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4cb8a-3f12-11e6-ae34-6d258843d0c0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"64b4cb8b-3f12-11e6-ae34-250b5e8012cc","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4cb8c-3f12-11e6-ae34-51ad979faef9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4cb8d-3f12-11e6-ae34-23503340327a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b4cb8e-3f12-11e6-ae34-e9017ee37700","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl"},"failures":[511,405,512,513],"tindex":"64b4f29f-3f12-11e6-ae34-c9bf765ddb75","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[121,514,515,122,123,416,0,516,1,417,418,419,124,125,126,129,130,131,517,132,137,138,139,518,420,421,422,519,140,141,142,143,144,145,146,147,148,149,150,151,520,152,521,153,154,155,522,523,156,157,5,524,6,525,158,526,159,423,160,527,161,528,162,529,7,8,163,164,9,165,166,167,168,10,530,169,170,171,172,173,531,532,174,533,175,534,535,536,176,537,538,177,178,179,539,180,11,540,424,181,425,182,541,426,192,193,411,412,194,195,413,414,196,415,12,197,13,198,14,15,427,199,16,17,18,200,201,403,19,20,21,404,22,509,428,23,542,202,24,203,543,544,25,204,205,26,27,28,29,30,31,32,545,33,34,35,206,207,36,37,38,39,208,40,41,42,43,44,45,209,46,47,48,49,50,51,52,53,54,55,56,210,211,57,58,546,59,60,212,61,213,62,63,64,547,65,214,215,66,216,67,548,217,68,69,70,71,72,73,549,219,429,74,220,221,550,551,222,552,223,430,224,431,432,433,225,434,435,436,437,438,439,75,76,553,226,440,441,227,554,228,229,230,406,442,443,231,555,232,233,556,77,557,234,235,444,558,236,559,237,560,238,239,240,241,242,445,243,561,244,245,562,246,563,247,248,249,250,564,251,565,566,252,567,253,254,568,255,256,569,446,257,258,259,260,261,570,571,262,263,572,264,573,265,266,267,268,269,447,448,574,449,450,270,78,79,271,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,575,460,81,277,461,278,279,576,462,280,463,281,282,464,283,284,577,465,82,466,467,578,579,285,468,286,83,469,287,84,470,471,472,580,581,582,288,583,584,585,586,587,588,589,289,590,591,290,592,593,594,595,596,597,598,599,291,600,601,602,603,604,292,605,606,293,607,608,294,609,610,611,612,295,613,614,615,296,297,616,617,618,298,619,620,621,622,623,624,625,626,299,627,300,628,301,302,629,630,303,631,85,304,632,305,633,473,634,306,307,308,309,310,311,635,636,637,638,312,639,313,640,641,642,314,315,643,316,644,645,317,318,474,319,646,475,320,476,477,91,92,321,93,94,95,96,322,323,647,478,479,97,648,480,98,481,99,324,482,100,649,101,483,325,326,327,650,328,329,330,102,331,651,332,333,103,484,104,485,334,105,335,486,487,106,488,336,337,489,107,338,490,339,340,652,653,108,341,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,358,359,360,361,362,363,364,365,366,367,368,369,370,654,109,500,501,371,655,372,110,111,502,373,374,375,376,656,112,503,113,114,115,116,117,118,395,396,657,397,398,658,399,659,400,401],"tindex":"64b4f2a0-3f12-11e6-ae34-dbba120a5cb1","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[660],"tindex":"64b519b1-3f12-11e6-ae34-a3ca753cb22a","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b519b2-3f12-11e6-ae34-a7a5d7252041","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[137,138,420,148,149,426,12,13,198,14,22,23,38,47,55,65,216,218,223,224,431,433,225,434,442,443,237,445,247,261,447,448,449,450,460,277,286,83,289,86,87,88,89,90,91,92,321,93,94,95,482,325,104,105,486,106,488,336,489,343,344,345,346,491,347,348,349,350,351,495,352,353,354,496,497,499,402,369,377],"tindex":"64b519b3-3f12-11e6-ae34-1d9a5fed9cdb","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[121,122,416,417,418,419,132,137,138,420,421,422,148,149,159,423,160,7,8,9,165,10,178,11,424,181,425,182,426,193,411,412,194,195,413,414,196,12,13,198,14,15,427,16,17,18,200,201,403,19,20,21,404,22,428,23,32,38,41,43,44,47,54,55,210,213,65,214,216,218,219,429,223,224,431,433,225,434,435,436,437,438,439,226,440,441,227,442,443,444,237,445,247,446,261,265,266,267,268,269,447,448,449,450,270,78,79,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,460,277,461,279,462,463,282,464,283,284,465,82,466,467,285,468,286,83,469,287,84,470,471,472,473,86,87,88,89,90,317,474,319,475,320,476,477,91,92,321,93,94,95,322,323,478,479,97,480,98,481,99,482,483,325,327,328,484,104,485,334,105,335,486,487,106,488,336,337,489,490,339,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,360,361,362,369,109,500,501,110,111,502,373,375,112,503,113,115,116,117,377,395,396,399],"tindex":"64b540c4-3f12-11e6-ae34-cf8df27f9120","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b540c5-3f12-11e6-ae34-bf8dfaa66a9a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b540c6-3f12-11e6-ae34-2de43ce88960","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b540c7-3f12-11e6-ae34-fbe062034eca","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b567d8-3f12-11e6-ae34-f14c3ac0c32c","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b567d9-3f12-11e6-ae34-397666770b28","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[515,0,1,661,2,3,4,662,663,518,519,5,6,664,10,11,12,13,14,15,427,199,16,17,18,201,403,19,20,21,404,22,509,428,23,24,544,25,26,27,28,29,30,31,545,33,34,35,36,37,38,39,40,42,45,46,47,48,49,50,51,52,53,56,57,58,546,59,60,61,62,63,64,65,215,66,67,217,68,69,70,71,72,73,74,75,76,77,565,79,81,85,96,100,101,102,103,107,108,113,114,115,116,117,118,119,120,665,666],"tindex":"64b567da-3f12-11e6-ae34-fd128daa8be5","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b567db-3f12-11e6-ae34-6d43aa132133","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b567dc-3f12-11e6-ae34-a1fadc7a1b89","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b58eed-3f12-11e6-ae34-ed36a2475ff8","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b58eee-3f12-11e6-ae34-05a53dd8c5d5","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b58eef-3f12-11e6-ae34-19d3ad3a7abc","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[121,514,515,122,123,416,0,516,1,417,418,419,124,125,126,129,130,131,517,132,137,138,139,518,420,421,422,519,140,141,142,143,144,145,146,147,148,149,150,151,520,152,521,153,154,155,522,523,156,157,5,524,6,525,158,526,159,423,160,527,161,528,162,529,7,8,163,164,9,165,166,167,168,10,530,169,170,171,172,173,531,532,174,533,175,534,535,536,176,537,538,177,178,179,539,180,11,540,424,181,425,182,541,426,192,193,411,412,194,195,413,414,196,415,12,197,13,198,14,15,427,199,16,17,18,200,201,403,19,20,21,404,22,509,428,23,542,202,24,203,543,544,25,204,205,26,27,28,29,30,31,32,545,33,34,35,206,207,36,37,38,39,208,40,41,42,43,44,45,209,46,47,48,49,50,51,52,53,54,55,56,210,211,57,58,546,59,60,212,61,213,62,63,64,547,65,214,215,66,216,67,548,217,68,69,70,71,72,73,549,219,429,74,220,221,550,551,222,552,223,430,224,431,432,433,225,434,435,436,437,438,439,75,76,553,226,440,441,227,554,228,229,230,406,442,443,231,555,232,233,556,77,557,234,235,444,558,236,559,237,560,238,239,240,241,242,445,243,561,244,245,562,246,563,247,248,249,250,564,251,565,566,252,567,253,254,568,255,256,569,446,257,258,259,260,261,570,571,262,263,572,264,573,265,266,267,268,269,447,448,574,449,450,270,78,79,271,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,575,460,81,277,461,278,279,576,462,280,463,281,282,464,283,284,577,465,82,466,467,578,579,285,468,286,83,469,287,84,470,471,472,580,581,582,288,583,584,585,586,587,588,589,289,590,591,290,592,593,594,595,596,597,598,599,291,600,601,602,603,604,292,605,606,293,607,608,294,609,610,611,612,295,613,614,615,296,297,616,617,618,298,619,620,621,622,623,624,625,626,299,627,300,628,301,302,629,630,303,631,85,304,632,305,633,473,634,306,307,308,309,310,311,635,636,637,638,312,639,313,640,641,642,314,315,643,316,644,645,317,318,474,319,646,475,320,476,477,91,92,321,93,94,95,96,322,323,647,478,479,97,648,480,98,481,99,324,482,100,649,101,483,325,326,327,650,328,329,330,102,331,651,332,333,103,484,104,485,334,105,335,486,487,106,488,336,337,489,107,338,490,339,340,652,653,108,341,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,358,359,360,361,362,363,364,365,366,367,368,369,370,654,109,500,501,371,655,372,110,111,502,373,374,375,376,656,112,503,113,114,115,116,117,118,395,396,657,397,398,658,399,659,400,401],"tindex":"64b58ef0-3f12-11e6-ae34-3b431fea0d45","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b5b601-3f12-11e6-ae34-3bb691fb211e","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        {\n                            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = from;\n                                if (from instanceof java.lang.reflect.GenericArrayType) {\n                                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                                } else if (from instanceof java.lang.Class<?>) {\n                                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                                    while (classType.isArray()) {\n                                        classType = classType.getComponentType();\n                                    }\n                                    t = classType;\n                                } \n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b5b602-3f12-11e6-ae34-1de84c76106a","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (o == null) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"64b5dd13-3f12-11e6-ae34-c532c3d81d75","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b5dd14-3f12-11e6-ae34-f521933001bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"64b5dd15-3f12-11e6-ae34-7df1406be433","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"64b5dd16-3f12-11e6-ae34-8bbf55380744","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b5dd17-3f12-11e6-ae34-8758870b84a8","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance.length()) == 0) {\n        {\n            if (instance == instance) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    return java.lang.reflect.Field.get(instance);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b5dd18-3f12-11e6-ae34-61eaf248eda8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b5dd19-3f12-11e6-ae34-43ca9416f188","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (!(o instanceof java.lang.reflect.WildcardType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6042a-3f12-11e6-ae34-f762198835b4","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b6042b-3f12-11e6-ae34-abfad74ffdc4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[121,514,122,416,0,1,417,418,419,124,125,126,2,3,4,129,130,131,667,668,132,137,138,518,420,421,422,519,140,141,142,143,144,145,146,147,148,149,150,151,520,152,521,153,154,155,522,523,156,157,5,524,6,525,158,526,159,423,160,527,161,528,162,529,7,8,163,164,9,165,166,167,168,10,530,169,170,171,172,173,531,532,174,533,175,534,535,536,176,537,538,177,178,179,180,11,540,424,181,425,182,541,426,193,411,412,194,195,413,414,196,12,197,13,198,14,15,427,199,16,17,18,200,201,403,19,20,21,404,22,509,428,23,542,202,24,543,544,25,204,205,26,27,28,29,30,31,32,545,33,34,35,206,207,36,37,38,39,208,40,41,42,43,44,45,209,46,47,48,49,50,51,52,53,54,55,56,210,211,57,58,546,59,60,212,61,213,62,63,64,65,214,215,66,216,67,68,218,69,70,71,72,73,549,219,429,74,220,221,550,551,222,552,223,430,224,431,432,433,225,434,435,436,437,438,439,75,76,553,226,440,441,227,554,228,229,230,442,443,555,232,556,77,234,235,444,558,559,237,560,238,239,240,241,242,445,243,561,244,245,562,246,563,247,248,249,250,251,565,566,252,567,254,568,255,256,569,446,257,258,259,260,261,570,571,262,264,573,265,266,267,268,269,447,448,574,449,450,270,78,79,271,451,452,272,453,273,80,454,455,274,456,457,275,458,459,276,460,81,277,461,279,462,280,463,281,282,464,283,284,577,465,82,466,467,578,285,468,286,83,469,287,84,470,471,472,580,581,582,288,583,584,585,586,587,588,589,289,590,591,290,592,593,594,595,596,597,598,599,291,600,601,602,603,604,292,605,606,293,607,608,294,609,610,611,612,295,613,614,615,296,297,616,617,618,298,619,620,621,622,623,624,625,626,299,627,300,628,301,302,629,630,303,631,85,304,632,305,633,473,634,306,307,308,309,310,311,635,636,637,638,312,639,313,640,641,642,314,315,643,316,644,645,86,87,88,89,90,317,318,474,319,646,475,320,476,477,91,92,321,93,94,95,96,322,323,647,478,479,97,648,480,98,481,99,324,482,100,649,101,483,325,326,327,650,328,329,330,102,331,651,332,333,103,484,104,485,334,105,335,486,487,106,488,336,337,489,107,338,490,339,652,653,108,342,343,344,345,346,491,347,492,348,493,494,349,350,351,495,352,353,354,496,497,355,498,356,499,402,357,358,359,360,361,362,365,366,367,368,369,370,654,109,500,501,371,655,372,110,111,502,373,374,375,376,656,112,503,113,114,115,116,117,377,378,118,669,670,395,396,119,120,671,658,399,659,400,401,505,506,672,507],"tindex":"64b62b3c-3f12-11e6-ae34-25e7672745b9","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"64b6524d-3f12-11e6-ae34-41cd754fb239","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"64b6524e-3f12-11e6-ae34-f58a2e78be3d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[121,122,123,416,0,1,417,124,125,126,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,521,153,154,155,156,157,5,158,159,160,161,162,7,163,164,9,165,166,167,168,10,169,170,171,172,173,174,175,176,177,178,179,180,11,181,182,184,192,193,194,195,196,12,197,13,198,14,15,199,16,17,18,200,201,19,20,21,22,23,202,203,204,205,28,30,32,206,207,36,39,208,41,42,43,44,45,209,47,48,50,53,54,55,56,210,211,59,60,212,61,213,64,214,215,216,67,217,218,69,70,71,72,219,74,220,221,222,223,224,432,225,434,226,227,228,229,230,231,232,233,77,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,446,257,258,259,260,261,262,263,264,265,266,267,268,269,447,448,574,449,450,270,78,79,271,272,273,80,274,275,276,575,277,278,279,280,281,282,283,284,577,82,285,286,83,287,288,584,289,290,599,291,292,606,293,294,611,295,613,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,635,312,313,314,315,316,86,87,88,89,90,317,318,474,319,320,91,92,321,93,94,95,322,323,478,97,648,480,481,99,324,100,325,326,327,328,329,330,331,332,333,103,484,104,485,334,105,335,486,487,336,337,489,338,339,340,341,342,343,344,345,346,347,492,348,493,494,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,654,109,371,372,110,111,373,374,375,376,112,113,116,117,395,396,119,120,671,397,398,399,659,400,401],"tindex":"64b6524f-3f12-11e6-ae34-ffeff33fde95","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if ((!htmlSafe) && (!htmlSafe)) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"htmlSafe","lenient":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b65250-3f12-11e6-ae34-f384ce0e79aa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (!(o instanceof java.lang.reflect.WildcardType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"64b67861-3f12-11e6-ae34-f386b73fcf48","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == key) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b67862-3f12-11e6-ae34-99ec4cb2e5e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[223,224,433,225,320,476],"tindex":"64b67863-3f12-11e6-ae34-efb0fbbbeb0c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name != null) {\n        {\n            if (!serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[310],"tindex":"64b69f74-3f12-11e6-ae34-234cc9641fc0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b69f75-3f12-11e6-ae34-ebdd174d3d7a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl"},"failures":[121,122,123,416,0,1,417,124,125,126,127,128,129,130,131,132,673,674,133,134,135,675,676,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,521,153,154,155,156,157,5,158,159,160,161,162,7,163,164,9,165,166,167,168,10,169,170,171,172,173,174,175,176,177,178,179,180,11,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,12,197,13,198,14,15,199,16,17,18,200,201,19,20,21,22,23,202,203,204,205,28,30,32,206,207,36,39,208,41,42,43,44,45,209,47,48,50,53,54,55,56,210,211,59,60,212,61,213,64,214,215,216,67,217,218,69,70,71,72,219,74,220,221,222,223,224,432,225,434,226,227,228,229,230,231,232,233,77,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,446,257,258,259,260,261,262,263,264,265,266,267,268,269,270,78,79,271,272,273,80,274,275,276,575,277,278,279,280,281,282,283,284,577,82,285,286,83,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,86,87,88,89,90,317,318,319,320,91,92,321,93,322,323,478,97,480,481,99,324,100,325,326,327,328,329,330,331,332,333,103,334,105,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,109,371,372,110,111,373,374,375,376,112,113,116,117,677,377,378,678,679,680,379,380,681,381,382,682,383,384,683,385,684,685,686,687,386,387,388,688,689,690,691,660,692,693,389,390,694,392,393,394,395,396,397,398,399,400,401],"tindex":"64b69f76-3f12-11e6-ae34-1798efcfef9b","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b69f77-3f12-11e6-ae34-59675d660e6c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name != null) {\n        {\n            if (!serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[677,377,378],"tindex":"64b6c688-3f12-11e6-ae34-71f41d494cab","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6c689-3f12-11e6-ae34-3169bc993b99","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[695,696,132,135,675,136,697,698,699,178,540,424,181,425,182,541,426,700,199,509,51,54,218,435,436,437,438,439,406,236,447,448,449,450,474,477,94,95,647,648,649,325,326,327,331,484,104,485,486,487,489,339,492,348,493,494,363,364,655,374,113,116,117,119,701,397,702,703,409,704,705,706,707,398,708],"tindex":"64b6c68a-3f12-11e6-ae34-2b2c42443dae","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[180,11],"tindex":"64b6c68b-3f12-11e6-ae34-110a942705be","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b6c68c-3f12-11e6-ae34-6d26de1f922e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6c68d-3f12-11e6-ae34-e1af6aac2c9f","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[554,559,259],"tindex":"64b6c68e-3f12-11e6-ae34-c3d0f8872c7a","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6ed9f-3f12-11e6-ae34-2bfce15a7d8e","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == key) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key","b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[192,193,411,412,195,413,196,415,709,669,670],"tindex":"64b6eda0-3f12-11e6-ae34-236c402666a0","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[682],"tindex":"64b6eda1-3f12-11e6-ae34-67f85ad2eb2a","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"64b6eda2-3f12-11e6-ae34-07f1f42c098b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6eda3-3f12-11e6-ae34-43958c1ee576","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (from instanceof java.lang.reflect.GenericArrayType) {\n                        {\n                            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = from;\n                                if (from instanceof java.lang.reflect.GenericArrayType) {\n                                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                                } else if (from instanceof java.lang.Class<?>) {\n                                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                                    while (classType.isArray()) {\n                                        classType = classType.getComponentType();\n                                    }\n                                    t = classType;\n                                } \n                                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                            } \n                            return true;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"64b6eda4-3f12-11e6-ae34-2990a79fa18d","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324097642/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
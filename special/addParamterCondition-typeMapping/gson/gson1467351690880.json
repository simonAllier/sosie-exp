{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":490,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":142,"com.google.gson.functional.StringTest.testStringValueDeserialization":140,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":652,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":222,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":321,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":88,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":414,"com.google.gson.stream.JsonWriterTest.testRepeatedName":644,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":263,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":396,"com.google.gson.MixedStreamTest.testWriteLenient":97,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":270,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":330,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":57,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":223,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":240,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":460,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":258,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":358,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":170,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":422,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":176,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":588,"com.google.gson.functional.ObjectTest.testSingletonLists":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":322,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":361,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":143,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":407,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":633,"com.google.gson.stream.JsonWriterTest.testStrings":665,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":529,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":547,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":340,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":378,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":103,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":462,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":627,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":155,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":14,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":38,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":452,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":657,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":697,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":205,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":399,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":610,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":11,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":204,"com.google.gson.functional.EnumTest.testEnumCaseMapping":257,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":21,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":141,"com.google.gson.GenericArrayTypeTest.testNotEquals":698,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":398,"com.google.gson.functional.JsonTreeTest.testToJsonTree":561,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":343,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":543,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":9,"com.google.gson.stream.JsonWriterTest.testNulls":641,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":689,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":624,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":314,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":409,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":590,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":233,"com.google.gson.functional.ObjectTest.testNullDeserialization":681,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":553,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":152,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":472,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":668,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":415,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":10,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":513,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":384,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":667,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":344,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":476,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":578,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":475,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":339,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":457,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":625,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":295,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":481,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":30,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":320,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":434,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":197,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":271,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":449,"com.google.gson.ParameterizedTypeTest.testNotEquals":695,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":311,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":602,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":615,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":515,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":694,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":218,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":277,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":458,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":450,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":26,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":383,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":109,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":111,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":370,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":660,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":87,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":214,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":419,"com.google.gson.metrics.PerformanceTest.testDummy":678,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":362,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":535,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":174,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":117,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":517,"com.google.gson.stream.JsonWriterTest.testEmptyArray":634,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":220,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":544,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":328,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":313,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":74,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":688,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":556,"com.google.gson.functional.CollectionTest.testSetDeserialization":239,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":171,"com.google.gson.functional.EnumTest.testEnumSet":249,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":260,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":374,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":441,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":175,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":516,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":685,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":301,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":61,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":454,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":116,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":464,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":656,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":118,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":551,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":465,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":90,"com.google.gson.functional.MapTest.testHashMapDeserialization":187,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":412,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":326,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":492,"com.google.gson.MixedStreamTest.testReadNulls":677,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":488,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":562,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":550,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":598,"com.google.gson.functional.MapTest.testSortedMap":208,"com.google.gson.functional.MapTest.testMapSerialization":203,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":491,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":159,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":447,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":130,"com.google.gson.functional.MapTest.testSerializeMaps":54,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":349,"com.google.gson.functional.MapTest.testComplexKeysSerialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":259,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":219,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":614,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":37,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":555,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":82,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":574,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":682,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":253,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":39,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":265,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":386,"com.google.gson.functional.MapTest.testStringKeyDeserialization":217,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":674,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":521,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":478,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":221,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":418,"com.google.gson.functional.PrettyPrintingTest.testMap":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":413,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":582,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":291,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":494,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":548,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":102,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":133,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":626,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":146,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":149,"com.google.gson.functional.MapTest.testMapSerializationEmpty":216,"com.google.gson.functional.CollectionTest.testQueueSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":308,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":442,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":661,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":663,"com.google.gson.functional.MapTest.testMapOfMapSerialization":202,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":433,"com.google.gson.JavaSerializationTest.testMapIsSerializable":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":316,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":236,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":636,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":73,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":530,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":690,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":144,"com.google.gson.functional.FieldNamingTest.testIdentity":350,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":518,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":504,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":647,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":388,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":56,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":58,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":352,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":560,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":639,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":401,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":611,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":145,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":510,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":279,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":332,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":303,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":342,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":184,"com.google.gson.functional.MapTest.testMapSubclassSerialization":189,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":474,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":180,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":356,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":262,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":95,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":165,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":431,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":584,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":487,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":546,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":49,"com.google.gson.functional.EnumTest.testEnumSubclass":251,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":453,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":104,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":376,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":400,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":509,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":459,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":520,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":403,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":281,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":648,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":670,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":437,"com.google.gson.stream.JsonWriterTest.testTwoNames":635,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":280,"com.google.gson.stream.JsonWriterTest.testNullName":642,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":533,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":127,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":604,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":373,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":443,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":268,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":435,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":650,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":335,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":364,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":186,"com.google.gson.MixedStreamTest.testWriteNulls":676,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":32,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":645,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":275,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":28,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":172,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":554,"com.google.gson.CommentsTest.testParseComments":603,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":59,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":525,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":591,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":500,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":158,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":43,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":207,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":16,"com.google.gson.MixedStreamTest.testReadInvalidState":94,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":167,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":337,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":693,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":160,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":631,"com.google.gson.JsonParserTest.testParseMixedArray":613,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":411,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":83,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":134,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":673,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":497,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":427,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":318,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":469,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":126,"com.google.gson.functional.MapTest.testMapDeserialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":312,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":42,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":587,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":194,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":541,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":81,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":79,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":575,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":252,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":288,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":377,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":389,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":564,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":585,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":177,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":573,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":206,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":341,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":397,"com.google.gson.functional.PrimitiveTest.testShortSerialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":527,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":593,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":461,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":432,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":410,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":346,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":17,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":225,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":355,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":190,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":426,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":67,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":246,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":273,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":329,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":597,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":101,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":617,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":485,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":480,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":622,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":267,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":519,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":540,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":620,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":467,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":136,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":438,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":522,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":394,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":369,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":256,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":261,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":566,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":580,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":669,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":523,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":696,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":319,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":592,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":672,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":417,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":305,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":601,"com.google.gson.stream.JsonWriterTest.testNullStringValue":638,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":324,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":75,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":468,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":440,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":483,"com.google.gson.stream.JsonWriterTest.testEmptyObject":655,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":122,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":80,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":250,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":496,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":161,"com.google.gson.functional.MapTest.testGeneralMapField":55,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":367,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":25,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":484,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":34,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":511,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":331,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":210,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":284,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":408,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":463,"com.google.gson.MixedStreamTest.testReadMixedStreamed":100,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":64,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":299,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":600,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":612,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":658,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":360,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":445,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":12,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":687,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":105,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":317,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":199,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":183,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":188,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":526,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":157,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":643,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":428,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":618,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":315,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":276,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":505,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":282,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":596,"com.google.gson.functional.ObjectTest.testNestedDeserialization":395,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":531,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":15,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":381,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":493,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":532,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":121,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":482,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":499,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":147,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":200,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":264,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":48,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":471,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":565,"com.google.gson.JavaSerializationTest.testListIsSerializable":107,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":274,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":354,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":244,"com.google.gson.functional.ObjectTest.testNullSerialization":679,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":568,"com.google.gson.stream.JsonWriterTest.testDoubles":662,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":182,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":211,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":402,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":129,"com.google.gson.functional.MapTest.testInterfaceTypeMap":209,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":659,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":583,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":405,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":254,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":621,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":572,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":586,"com.google.gson.MixedStreamTest.testReadClosed":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":285,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":120,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":420,"com.google.gson.MixedStreamTest.testWriteClosed":99,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":232,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":345,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":368,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":539,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":89,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":51,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":536,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":502,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":498,"com.google.gson.stream.JsonWriterTest.testLongs":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":338,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":371,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":542,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":231,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":448,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":570,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":325,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":506,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":69,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":486,"com.google.gson.stream.JsonWriterTest.testNumbers":664,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":425,"com.google.gson.JsonNullTest.testEqualsAndHashcode":686,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":293,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":23,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":557,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":84,"com.google.gson.functional.CollectionTest.testQueueDeserialization":247,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":501,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":430,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":446,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":151,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":671,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":489,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":336,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":196,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":385,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":307,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":393,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":579,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":224,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":93,"com.google.gson.functional.MapTest.testRawMapSerialization":213,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":623,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":62,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":563,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":164,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":595,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":606,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":27,"com.google.gson.functional.PrimitiveTest.testByteSerialization":470,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":545,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":608,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":629,"com.google.gson.ObjectTypeAdapterTest.testSerialize":632,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":576,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":416,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":692,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":351,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":33,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":52,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":148,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":609,"com.google.gson.functional.MapTest.testMapWithQuotes":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":292,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":423,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":514,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":599,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":691,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":19,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":289,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":169,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":649,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":589,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":47,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":391,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":304,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":455,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":680,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":36,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":294,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":306,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":353,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":466,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":683,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":238,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":125,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":334,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":567,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":507,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":86,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":166,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":8,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":357,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":549,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":179,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":406,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":92,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":528,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":379,"com.google.gson.functional.ObjectTest.testNestedSerialization":380,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":123,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":63,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":154,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":577,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":44,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":212,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":162,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":135,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":98,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":108,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":666,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":60,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":503,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":479,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":538,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":309,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":22,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":421,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":684,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":287,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":382,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":46,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":153,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":31,"com.google.gson.functional.CollectionTest.testSetSerialization":243,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":512,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":40,"com.google.gson.functional.StringTest.testStringValueSerialization":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":524,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":77,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":70,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":228,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":266,"com.google.gson.MixedStreamTest.testWriteInvalidState":96,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":124,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":628,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":424,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":35,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":429,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":110,"com.google.gson.stream.JsonWriterTest.testBooleans":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":300,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":348,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":552,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":616,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":327,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":630,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":193,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":651,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":29,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":113},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7678dcbf-3f4e-11e6-ae5a-6f29783f8756","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"76792ae0-3f4e-11e6-ae5a-1b13c471d8bc","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[10,11,12,13,14,15,16,17,18,19,20],"tindex":"767951f1-3f4e-11e6-ae5a-47ada3682be1","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter != (typeAdapter[0])) {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767951f2-3f4e-11e6-ae5a-493ce63b1a8d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767951f3-3f4e-11e6-ae5a-4937c7592332","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value != null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"76797904-3f4e-11e6-ae5a-f51062cddab1","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:183","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"76797905-3f4e-11e6-ae5a-b128b69dba63","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7679a016-3f4e-11e6-ae5a-87283e8cd580","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7679a017-3f4e-11e6-ae5a-cf75809f9eef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7679a018-3f4e-11e6-ae5a-7339db71aef4","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,14,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"tindex":"7679c729-3f4e-11e6-ae5a-9b6930a8ab50","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7679c72a-3f4e-11e6-ae5a-e14adee4c874","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7679c72b-3f4e-11e6-ae5a-4ba91e572d12","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl"},"failures":[83,84,85,86,87,88,89,90,91,92],"tindex":"7679c72c-3f4e-11e6-ae5a-139fd2fb4741","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767a154d-3f4e-11e6-ae5a-7f9b050ea7eb","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a != null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767a154e-3f4e-11e6-ae5a-a53363e102f9","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767a154f-3f4e-11e6-ae5a-b74df5a1ffb4","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767a1550-3f4e-11e6-ae5a-b17063e556e6","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767a3c61-3f4e-11e6-ae5a-9f00b34b3ec6","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl"},"failures":[93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,21,22,108,109,110,111,112,113,114,115,116,117,118,119,120,10,121,11,12,13,122,123,23,24,124,25,26,27,28,29,125,126,30,31,32,127,128,129,33,130,34,131,35,132,36,133,37,134,135,136,38,137,138,39,40,41,42,139,140,141,142,143,144,145,146,147,43,148,149,150,151,152,153,154,155,156,14,15,44,157,158,159,160,161,162,163,164,165,0,1,2,3,4,5,6,7,166,167,168,169,170,171,47,172,173,48,49,50,174,175,176,51,52,53,177,178,179,180,181,182,183,184,185,186,187,188,189,54,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,55,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,17,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,56,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,57,351,352,353,354,355,356,357,358,359,360,361,362,58,363,364,365,59,366,367,368,369,370,371,372,373,374,375,60,376,377,378,18,61,379,62,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,63,420,421,422,423,424,425,426,427,64,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,65,461,462,463,464,465,466,467,468,469,470,471,472,473,66,474,475,476,477,478,479,67,480,481,482,483,68,484,485,486,487,69,70,71,72,73,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,74,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,19,531,532,533,534,535,536,537,75,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,76,578,579,77,580,581,582,583,584,585,586,78,587,588,79,589,590,80,81,591,592,593,594,595,596,82,597,598,599,600,601,602,603,604,605,606,607,608,609,20,610,611,612],"tindex":"767a8a82-3f4e-11e6-ae5a-e59907d149b0","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767ab193-3f4e-11e6-ae5a-8fad39fccd0f","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767ab194-3f4e-11e6-ae5a-f7511a227fcd","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767ab195-3f4e-11e6-ae5a-47d9214d2b77","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[93,95,96,97,98,99,21,22,109,613,614,615,616,617,618,619,620,110,111,122,123,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,135,38,137,138,39,40,41,42,139,43,14,44,157,160,162,45,621,622,623,46,624,625,626,627,0,3,4,7,167,168,169,170,171,47,173,48,49,50,174,175,51,52,53,178,181,185,189,54,192,194,196,201,202,203,206,207,209,210,211,55,212,213,215,216,218,221,222,223,224,225,226,230,231,232,233,234,237,240,241,243,244,248,249,250,17,251,254,256,263,265,267,56,269,278,281,289,294,300,305,308,315,317,319,320,328,331,333,338,346,347,348,349,350,355,356,357,361,58,363,59,368,371,628,374,60,61,62,380,381,383,387,389,390,392,408,63,64,65,66,67,68,69,70,71,72,73,488,491,494,497,498,499,500,504,505,507,509,511,74,513,514,516,520,521,522,524,525,528,531,535,536,537,541,542,547,551,552,553,554,555,557,559,562,563,564,566,567,568,571,573,576,577,76,578,579,77,629,630,580,584,78,79,80,81,592,593,594,82,598,601,602,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,604,605,667,668,20],"tindex":"767ad8a6-3f4e-11e6-ae5a-cded5046e85d","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[669,670,671,672,112],"tindex":"767ad8a7-3f4e-11e6-ae5a-41c62a6858a1","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767affb8-3f4e-11e6-ae5a-4305967d2bc5","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"767affb9-3f4e-11e6-ae5a-37c7c885b6dd","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767affba-3f4e-11e6-ae5a-a1c3f3201e41","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767b26cb-3f4e-11e6-ae5a-73d898c0f496","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[93,95,96,99,100,101,109,110,111,114,115,116,122,123,34,131,35,135,136,138,39,139,14,157,159,160,161,162,164,0,1,2,3,4,5,6,7,167,169,170,171,47,172,48,49,50,174,175,176,51,52,53,177,178,180,181,196,205,209,211,55,215,222,223,225,234,239,240,243,248,254,255,263,264,265,266,267,268,56,269,270,271,272,273,274,278,279,280,281,287,288,298,302,309,317,333,338,346,347,348,349,350,57,351,353,354,355,356,357,359,360,361,362,58,363,364,365,59,366,367,368,369,370,371,372,374,375,60,376,378,61,379,62,380,382,383,384,385,387,388,389,390,391,392,393,394,395,396,467,69,70,71,72,73,488,490,491,493,494,495,496,497,498,499,500,501,502,504,505,507,508,509,511,512,74,513,515,519,520,522,524,532,533,534,535,536,537,75,538,539,540,541,542,543,546,547,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,578,579,77,584,78,587,588,80,81,591,592,594,82,597,598,600,601,602,632,604,605,20],"tindex":"767b26cc-3f4e-11e6-ae5a-4762785dbb16","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767b4ddd-3f4e-11e6-ae5a-57537b00fc81","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:919","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b4dde-3f4e-11e6-ae5a-7dfb3fa82632","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty != nonempty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"nonempty","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b4ddf-3f4e-11e6-ae5a-833b2d8231be","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node == replacement) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","node":"replacement","left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[673,674],"tindex":"767b74f0-3f4e-11e6-ae5a-9751df3263f4","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767b74f1-3f4e-11e6-ae5a-c17493ed8316","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767b74f2-3f4e-11e6-ae5a-afc110f3e86f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b74f3-3f4e-11e6-ae5a-15662f78dfda","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b74f4-3f4e-11e6-ae5a-a5df6ccf58ca","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter != (typeAdapter[0])) {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"typeAdapter","upperBound":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b9c05-3f4e-11e6-ae5a-4df042a06a6a","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767b9c06-3f4e-11e6-ae5a-27fa356a7caa","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767b9c07-3f4e-11e6-ae5a-09b9042a2a4a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    return (removeInternalByKey(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[93,94,675,95,676,96,97,677,98,99,100,101,102,103,104,21,22,108,678,109,110,111,112,113,114,115,116,117,118,119,120,10,121,11,12,13,122,123,23,24,124,25,26,27,28,29,125,126,30,31,32,127,128,129,33,130,34,131,35,132,36,133,37,134,135,136,38,137,138,39,40,41,42,139,140,141,142,143,144,145,146,147,43,148,149,150,151,152,153,154,155,156,14,15,16,44,157,158,159,160,161,162,163,164,165,0,1,2,3,4,5,6,7,166,167,168,169,170,171,47,172,173,48,49,50,174,175,176,51,52,53,177,178,179,180,181,182,183,184,185,186,187,188,189,54,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,55,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,249,250,17,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,56,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,57,351,352,353,354,355,356,357,358,359,360,361,362,58,363,364,365,59,366,367,368,369,370,371,628,372,373,374,375,679,60,680,376,377,378,18,61,379,62,380,381,382,383,384,385,386,681,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,63,420,421,422,423,424,425,426,427,64,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,65,461,462,463,464,465,466,467,468,469,470,471,472,473,66,474,475,476,477,478,479,67,480,481,482,483,68,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,74,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,19,531,532,533,534,535,536,537,75,538,539,540,541,542,543,544,545,546,547,682,548,549,550,683,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,76,578,579,77,629,630,580,581,582,583,584,585,586,78,587,588,79,589,590,80,81,591,592,593,594,595,596,82,597,598,599,600,601,602,603,604,605,684,667,668,609,20,610,611,612],"tindex":"767bc318-3f4e-11e6-ae5a-6da115f29da8","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767bc319-3f4e-11e6-ae5a-73b314c829b3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767bea2a-3f4e-11e6-ae5a-07e599a9925e","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767bea2b-3f4e-11e6-ae5a-41bc1b144b6e","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767bea2c-3f4e-11e6-ae5a-c7a505ac8e93","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[346,562,575],"tindex":"767bea2d-3f4e-11e6-ae5a-a1807253f8f8","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767bea2e-3f4e-11e6-ae5a-71737659d6a6","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[685,673,674],"tindex":"767c113f-3f4e-11e6-ae5a-97688dcdfbd0","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (!(from instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1113","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c1140-3f4e-11e6-ae5a-a1a59d62a344","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == '\\\\') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c1141-3f4e-11e6-ae5a-43a5c09bd2d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b != null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c1142-3f4e-11e6-ae5a-8df3b34210cb","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c3853-3f4e-11e6-ae5a-2ba464dc1e44","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c3854-3f4e-11e6-ae5a-43d6f0cf0ae2","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Character) {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767c3855-3f4e-11e6-ae5a-35a5a549103d","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[686,687,321,688,689],"tindex":"767c3856-3f4e-11e6-ae5a-4d646a0694b4","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.reflect.TypeVariable) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c3857-3f4e-11e6-ae5a-b75048ad6175","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c3858-3f4e-11e6-ae5a-9bc18b39205a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767c5f69-3f4e-11e6-ae5a-45cd2e3ab44b","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c5f6a-3f4e-11e6-ae5a-c10b449c92b9","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767c5f6b-3f4e-11e6-ae5a-b3002d88018f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767c5f6c-3f4e-11e6-ae5a-f3c779d6f884","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767c867d-3f4e-11e6-ae5a-c934a7f0e046","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[488,490,491,492,496],"tindex":"767c867e-3f4e-11e6-ae5a-51836c6ac837","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (!serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cad8f-3f4e-11e6-ae5a-735a2b62ec27","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767cad90-3f4e-11e6-ae5a-bbecc730f96a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:563","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cad91-3f4e-11e6-ae5a-0b94b985f630","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if ((style == style) || (peekStack == style)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"style","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"style","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cd4a2-3f4e-11e6-ae5a-9db24407459c","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj instanceof java.lang.Number) && ((obj.java.lang.Object) instanceof java.lang.Number)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"obj","value":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cd4a3-3f4e-11e6-ae5a-81c2a9deda73","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"767cd4a4-3f4e-11e6-ae5a-611a65e6cae2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cd4a5-3f4e-11e6-ae5a-31bcabfa01ae","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"other","this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767cd4a6-3f4e-11e6-ae5a-abf19f06fda9","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Character) {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767cfbb7-3f4e-11e6-ae5a-cba59168d1b8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"767cfbb8-3f4e-11e6-ae5a-4528062d8d7b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767cfbb9-3f4e-11e6-ae5a-25b271537802","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767cfbba-3f4e-11e6-ae5a-e5e33a4d64a4","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767cfbbb-3f4e-11e6-ae5a-215d5cd380f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767d22cc-3f4e-11e6-ae5a-2de9b48ae97e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[690,14,173,490,502,558,559,560,561,598,601,602],"tindex":"767d22cd-3f4e-11e6-ae5a-67bb90df2151","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[349,567,569],"tindex":"767d70ee-3f4e-11e6-ae5a-9b9b46bb0705","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[103,305,320,640],"tindex":"767d70ef-3f4e-11e6-ae5a-5f14375e15a8","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767d70f0-3f4e-11e6-ae5a-f5e0bd200c41","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[47,50,52,53,206,212,263,56,302],"tindex":"767d9801-3f4e-11e6-ae5a-b9ccc75e36ba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767d9802-3f4e-11e6-ae5a-49d31e933b8f","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"767d9803-3f4e-11e6-ae5a-8114c4482a73","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    return ((T)(fromJson(json, typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"767d9804-3f4e-11e6-ae5a-f38773bccfff","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767dbf15-3f4e-11e6-ae5a-2bf6d6e275b6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"767dbf16-3f4e-11e6-ae5a-fd0303eb487b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[14,173,222,57,351,352,353,354,490,501,502,510,532,533,534,75,538,543,558,559,560,561,606,607,608],"tindex":"767dbf17-3f4e-11e6-ae5a-e7d746c75348","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"src","com.google.gson.LongSerializationPolicy.DEFAULT":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"767dbf18-3f4e-11e6-ae5a-59fd6e94531c","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[286,688,691,689],"tindex":"767dbf19-3f4e-11e6-ae5a-77848643ea40","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767de62a-3f4e-11e6-ae5a-3745ba3bf177","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[97,98,105,106,107,32,128,135,136,138,139,157,167,169,171,47,48,49,50,51,52,53,178,181,184,188,190,191,192,193,194,195,196,198,199,200,203,204,205,206,208,209,210,211,55,212,214,215,216,217,218,219,220,221,222,223,224,227,228,230,231,233,235,236,237,239,242,244,247,249,250,17,251,252,256,275,276,294,356,357,363,373,383,390,393,462,69,70,71,72,73,497,498,500,501,502,503,509,512,513,516,518,527,531,533,536,539,544,550,78,80,81,82,598,599,600,601,602,603,606,607],"tindex":"767de62b-3f4e-11e6-ae5a-857f901ccf28","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[83],"tindex":"767e0d3c-3f4e-11e6-ae5a-e3a490b4d70a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if ((unbalanced != null) && (unbalanced != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"unbalanced","right":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[692],"tindex":"767e0d3d-3f4e-11e6-ae5a-af40970c6388","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (!(cls.isInterface())) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767e344e-3f4e-11e6-ae5a-8dd161cb9107","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[675,97,98,693,105,106,107,694,695,113,117,32,128,696,139,157,167,169,171,47,172,173,48,49,50,175,176,51,52,53,177,178,179,180,181,184,187,188,190,191,192,193,194,195,197,198,199,200,203,204,205,206,208,210,212,214,215,216,217,218,219,220,221,224,227,228,229,230,231,233,235,236,237,239,241,242,244,246,247,249,250,17,251,252,256,275,276,294,323,357,373,462,503,516,518,527,531,544,550,598,599,600,601,602,603,606,607,697,698],"tindex":"767e344f-3f4e-11e6-ae5a-014207cb0a98","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767e3450-3f4e-11e6-ae5a-37bf8373432d","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value != null) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767e3451-3f4e-11e6-ae5a-4b63b62fff3b","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\u2028') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"767e5b62-3f4e-11e6-ae5a-45399279d61a","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349900630/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
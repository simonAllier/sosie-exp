{"failureDictionary":{"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":92,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":74,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":121,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":1,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":141,"com.google.gson.functional.MapTest.testMapSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":24,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.functional.PrimitiveTest.testShortSerialization":56,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":181,"com.google.gson.functional.MapTest.testSerializeMaps":116,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":136,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":37,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":69,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":186,"com.google.gson.MixedStreamTest.testWriteLenient":17,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":108,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":133,"com.google.gson.stream.JsonWriterTest.testNumbers":13,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":162,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":138,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":139,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":4,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":161,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":177,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":100,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":189,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":59,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":70,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":63,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":111,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":58,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":15,"com.google.gson.functional.MapTest.testRawMapSerialization":119,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":93,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":120,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":160,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":62,"com.google.gson.functional.PrettyPrintingTest.testMap":147,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":29,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":72,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":128,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":140,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":28,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":33,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":64,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":174,"com.google.gson.functional.PrimitiveTest.testByteSerialization":53,"com.google.gson.ObjectTypeAdapterTest.testSerialize":157,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":2,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":109,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":146,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":155,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":142,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":163,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":67,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":11,"com.google.gson.functional.FieldNamingTest.testIdentity":137,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":106,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":84,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":89,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":178,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":9,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":6,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":71,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":123,"com.google.gson.functional.JsonTreeTest.testToJsonTree":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":151,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":169,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":68,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":171,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":14,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":102,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":88,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":31,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":42,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":99,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":60,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":77,"com.google.gson.functional.MapTest.testGeneralMapField":118,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":107,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":153,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":46,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":95,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":16,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":55,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":50,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":79,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":45,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":39,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":35,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":164,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":98,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":3,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":103,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":91,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":179,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":96,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":122,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":61,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":130,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":112,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":36,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":167,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":185,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":66,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":184,"com.google.gson.functional.ObjectTest.testNestedSerialization":129,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":20,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":10,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":40,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":41,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":158,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":113,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":105,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":166,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":48,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":126,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":21,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":124,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":154,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":22,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":180,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":188,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":78,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":18,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":54,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":30,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":81,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":57,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":165,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":145,"com.google.gson.functional.CollectionTest.testSetSerialization":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":65,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":73,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":150,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":38,"com.google.gson.JsonParserTest.testParseMixedArray":187,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":176,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":12,"com.google.gson.functional.MapTest.testInterfaceTypeMap":172,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":27,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":125,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":175,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":82,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":90,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":152,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":127,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":80,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":115,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":156,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":76,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":94,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":51,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":182,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":183,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":5,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":83,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":75,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":159,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":85,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":0,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":131,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":23,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":8,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":104,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":190},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"5225c220-3e84-11e6-87d4-010634a9d7aa","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"52261041-3e84-11e6-87d4-691d65c1a14b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,2,77,3,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,5,103,104,105,106,107,108,109,110,111,112,8,9,10,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160],"tindex":"52263752-3e84-11e6-87d4-47b89537e8a3","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"52263753-3e84-11e6-87d4-750bd6184743","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"b","context":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"52265e64-3e84-11e6-87d4-e9cff0762dd6","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.reflect.WildcardType) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"52265e65-3e84-11e6-87d4-d3f5579a2f54","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if ((java.lang.String) != null) {\n        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n            object.add(java.lang.String, value);\n        } \n        java.lang.String = null;\n    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n        com.google.gson.JsonElement = value;\n    } else {\n        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n        if (element instanceof com.google.gson.JsonArray) {\n            ((com.google.gson.JsonArray)(element)).add(value);\n        } else {\n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"52265e66-3e84-11e6-87d4-adf96b7d1633","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"52268577-3e84-11e6-87d4-6bf701054344","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[161,1,162,163,164,165,166,167,168,169,170,171,2,3,4,5,7,10,172,118,173,174,175],"tindex":"5226d398-3e84-11e6-87d4-65818bf9e458","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:336","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[176,177,178,179,180,181,182,183,184,185],"tindex":"5226d399-3e84-11e6-87d4-3f18a4d25e7b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == 2) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[17,47,58,60],"tindex":"5226faaa-3e84-11e6-87d4-77d5bee6dd0a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[186],"tindex":"5226faab-3e84-11e6-87d4-f9fb44a69156","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5226faac-3e84-11e6-87d4-f3db232d4408","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"522721bd-3e84-11e6-87d4-77cec8d50112","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"522721be-3e84-11e6-87d4-a1272d69f9cd","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:366","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 0"},"failures":[187,188],"tindex":"522748cf-3e84-11e6-87d4-3b4cbb8f43be","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == 0) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[189,190,86,87],"tindex":"522748d0-3e84-11e6-87d4-6b8ede995912","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type == null) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"522748d1-3e84-11e6-87d4-cf84d7d9bfc0","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c == 'f') || (c == 'F')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"522748d2-3e84-11e6-87d4-2f1204592d22","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"52276ee3-3e84-11e6-87d4-b961bc22ca73","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"522795f4-3e84-11e6-87d4-bf47ca69a19f","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264452055/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
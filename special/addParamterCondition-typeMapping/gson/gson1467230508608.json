{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":375,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":264,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":25,"com.google.gson.functional.StringTest.testStringValueDeserialization":613,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":106,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":597,"com.google.gson.stream.JsonWriterTest.testRepeatedName":22,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":471,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":42,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":541,"com.google.gson.MixedStreamTest.testWriteLenient":282,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":422,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":242,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":364,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":66,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":74,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":521,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":503,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":41,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":211,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":161,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":478,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":398,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":451,"com.google.gson.functional.ObjectTest.testSingletonLists":133,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":239,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":265,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":466,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":18,"com.google.gson.stream.JsonWriterTest.testStrings":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":421,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":33,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":604,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":530,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":286,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":505,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":179,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":607,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":621,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":340,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":499,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":443,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":283,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":460,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":8,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":442,"com.google.gson.functional.EnumTest.testEnumCaseMapping":40,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":263,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":279,"com.google.gson.functional.JsonTreeTest.testToJsonTree":380,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":459,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":605,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":374,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":225,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":176,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":566,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":595,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":303,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":150,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":619,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":528,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":285,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":325,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":472,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":3,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":7,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":109,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":533,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":29,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":583,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":113,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":603,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":177,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":318,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":312,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":588,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":143,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":354,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":486,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":423,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":438,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":496,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":594,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":216,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":415,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":104,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":319,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":497,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":142,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":346,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":19,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":257,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":525,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":45,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":306,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":445,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":575,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":123,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":51,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":549,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":416,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":386,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":241,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":234,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":546,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":544,"com.google.gson.functional.CollectionTest.testSetDeserialization":411,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":162,"com.google.gson.functional.EnumTest.testEnumSet":35,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":137,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":577,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":489,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":79,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":591,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":139,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":500,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":548,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":506,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":34,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":169,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":131,"com.google.gson.functional.MapTest.testHashMapDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":469,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":600,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":359,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":555,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":190,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":214,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":390,"com.google.gson.functional.MapTest.testSortedMap":444,"com.google.gson.functional.MapTest.testMapSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":191,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":494,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":551,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":568,"com.google.gson.functional.MapTest.testSerializeMaps":91,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":261,"com.google.gson.functional.MapTest.testComplexKeysSerialization":103,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":576,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":447,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":350,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":152,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":393,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":404,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":288,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":392,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":182,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":43,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":535,"com.google.gson.functional.MapTest.testStringKeyDeserialization":446,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":81,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":329,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":105,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":165,"com.google.gson.functional.PrettyPrintingTest.testMap":180,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":470,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":292,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":222,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":388,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":178,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":571,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":269,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":614,"com.google.gson.functional.CollectionTest.testQueueSerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":231,"com.google.gson.functional.MapTest.testMapSerializationEmpty":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":490,"com.google.gson.functional.MapTest.testMapOfMapSerialization":96,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":310,"com.google.gson.JavaSerializationTest.testMapIsSerializable":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":596,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":409,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":158,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":315,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":295,"com.google.gson.functional.FieldNamingTest.testIdentity":262,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":417,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":193,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":536,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":44,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":132,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":366,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":379,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":461,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":284,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":267,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":301,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":313,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":602,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":592,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":357,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":430,"com.google.gson.functional.MapTest.testMapSubclassSerialization":90,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":328,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":187,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":400,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":578,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":167,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":276,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":484,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":586,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":387,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":49,"com.google.gson.functional.EnumTest.testEnumSubclass":37,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":316,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":287,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":529,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":305,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":107,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":382,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":502,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":401,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":462,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":630,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":487,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":543,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":370,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":15,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":565,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":491,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":527,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":311,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":396,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":245,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":520,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":431,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":348,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":427,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":151,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":397,"com.google.gson.CommentsTest.testParseComments":627,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":84,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":453,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":210,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":501,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":569,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":550,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":268,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":298,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":6,"com.google.gson.MixedStreamTest.testReadInvalidState":622,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":159,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":184,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":129,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":572,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":207,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":281,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":237,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":322,"com.google.gson.functional.MapTest.testMapDeserialization":437,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":233,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":343,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":296,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":278,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":450,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":93,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":118,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":405,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":217,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":585,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":144,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":336,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":399,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":65,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":147,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":181,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":297,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":249,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":458,"com.google.gson.functional.PrimitiveTest.testShortSerialization":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":504,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":485,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":352,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":468,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":258,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":1,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":68,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":186,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":434,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":481,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":77,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":330,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":425,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":601,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":11,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":333,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":514,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":174,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":290,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":145,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":418,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":457,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":219,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":251,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":508,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":581,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":488,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":539,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":524,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":39,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":61,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":213,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":589,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":163,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":419,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":115,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":238,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":632,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":474,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":353,"com.google.gson.stream.JsonWriterTest.testNullStringValue":20,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":599,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":372,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":406,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":509,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":314,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":331,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":88,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":36,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":558,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":552,"com.google.gson.functional.MapTest.testGeneralMapField":100,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":523,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":345,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":517,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":164,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":205,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":243,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":299,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":112,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":220,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":321,"com.google.gson.MixedStreamTest.testReadMixedStreamed":625,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":590,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":14,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":580,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":574,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":492,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":9,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":383,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":236,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":440,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":255,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":332,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":197,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":253,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":21,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":482,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":235,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":428,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":582,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":87,"com.google.gson.functional.ObjectTest.testNestedDeserialization":540,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":5,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":337,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":556,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":369,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":516,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":209,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":394,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":441,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":615,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":48,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":324,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":291,"com.google.gson.JavaSerializationTest.testListIsSerializable":385,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":368,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":426,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":294,"com.google.gson.functional.ObjectTest.testNullSerialization":335,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":63,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":612,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":435,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":99,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":280,"com.google.gson.functional.MapTest.testInterfaceTypeMap":98,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":567,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":166,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":464,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":173,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":339,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":221,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":171,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":476,"com.google.gson.MixedStreamTest.testWriteClosed":624,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":70,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":557,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":135,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":606,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":53,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":124,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":377,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":146,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":248,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":127,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":136,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":293,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":609,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":495,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":402,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":240,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":560,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":154,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":518,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":130,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":153,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":198,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":376,"com.google.gson.functional.CollectionTest.testQueueDeserialization":414,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":309,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":493,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":618,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":631,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":246,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":610,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":94,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":534,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":230,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":114,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":538,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":67,"com.google.gson.functional.MapTest.testRawMapSerialization":102,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":275,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":598,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":175,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":59,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":140,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":554,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":304,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":361,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":32,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":200,"com.google.gson.functional.PrimitiveTest.testByteSerialization":323,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":363,"com.google.gson.ObjectTypeAdapterTest.testSerialize":17,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":273,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":473,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":365,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":204,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":259,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":54,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":381,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":616,"com.google.gson.functional.MapTest.testMapWithQuotes":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":223,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":479,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":617,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":78,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":579,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":2,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":189,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":351,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":160,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":452,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":46,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":537,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":228,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":317,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":206,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":229,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":252,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":507,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":289,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":410,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":563,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":47,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":244,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":62,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":195,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":611,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":188,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":389,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":465,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":628,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":86,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":531,"com.google.gson.functional.ObjectTest.testNestedSerialization":141,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":89,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":111,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":307,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":620,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":196,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":101,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":185,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":218,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":30,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":277,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":28,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":138,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":559,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":513,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":373,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":593,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":360,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":477,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":584,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":608,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":270,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":203,"com.google.gson.functional.CollectionTest.testSetSerialization":76,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":449,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":83,"com.google.gson.functional.StringTest.testStringValueSerialization":271,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":341,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":272,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":155,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":395,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":407,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":562,"com.google.gson.MixedStreamTest.testWriteInvalidState":623,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":334,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":480,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":349,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":483,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":227,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":260,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":149,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":561,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":170,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":355,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":274,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":436,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":24,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":347,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":545},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"5034d5d9-3e34-11e6-9fce-d37b5f8d14e1","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"503523fa-3e34-11e6-9fce-a9c37d6da17b","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"503523fb-3e34-11e6-9fce-8fe655b5c62c","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"503523fc-3e34-11e6-9fce-bfbd31f62227","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[11,12,13,0,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,1,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,4,5,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,7,172,8,9,10,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279],"tindex":"50354b0d-3e34-11e6-9fce-b741f10941a0","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[280,281,282],"tindex":"5035721e-3e34-11e6-9fce-0bc59297816d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value <= value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"5035992f-3e34-11e6-9fce-b73c95e2be33","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,283,284,14,15,16,19,29,285,30,31,286,287,32,33,288,289,34,35,36,1,37,38,39,40,41,42,43,290,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,291,61,62,63,64,65,66,67,68,292,69,293,70,71,72,73,74,75,76,294,77,78,79,80,81,82,83,84,85,86,295,2,87,88,89,296,90,91,92,93,94,95,96,97,297,298,98,299,99,100,101,102,103,300,104,105,106,107,301,302,108,109,110,111,112,113,114,115,116,303,117,118,119,120,121,304,122,123,124,125,126,127,305,280,128,129,306,307,130,281,308,309,310,311,312,313,314,315,316,317,318,319,320,321,131,322,323,324,325,326,327,328,329,330,331,332,333,132,133,134,135,136,334,137,335,138,336,3,139,140,141,337,142,143,144,145,146,147,148,4,5,149,150,151,152,153,154,155,156,157,158,159,338,160,161,162,163,164,165,166,167,168,339,169,170,171,7,172,8,9,10,173,340,180,181,182,341,342,343,183,184,185,186,187,188,189,190,344,191,192,193,194,195,196,197,198,199,345,346,200,201,347,202,203,348,204,205,349,206,350,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,351,222,223,224,225,226,227,352,228,353,229,230,231,232,233,234,235,236,237,238,354,239,240,355,241,242,243,356,244,245,246,247,248,249,357,250,358,251,252,253,254,255,256,257,359,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,279,360],"tindex":"50359930-3e34-11e6-9fce-81c000e12563","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"5035c041-3e34-11e6-9fce-e986f02a7dd5","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (!(type instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5035c042-3e34-11e6-9fce-b100c020c3c8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[42,44,46,50,54,55,297,101,119,352],"tindex":"5035e753-3e34-11e6-9fce-0bc75ddcc09d","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5035e754-3e34-11e6-9fce-1f9fcc987ed1","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5035e755-3e34-11e6-9fce-5585e952c9eb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"50360e66-3e34-11e6-9fce-673d96b96c18","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"50360e67-3e34-11e6-9fce-db478a7d3e2c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"50360e68-3e34-11e6-9fce-0b05bbd4cb4f","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance != null) && (((instance == instance) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"instance","value":"instance","java.lang.Object.class":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"50360e69-3e34-11e6-9fce-59b8e9c420cc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[361,362,363,47,364,365,366,367,368,106,301,369,370,371,372,373,374,4,375,376,377,378,217,379,380],"tindex":"5036357a-3e34-11e6-9fce-c598a3dc1c06","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[381,0,283,284,14,361,362,363,15,16,382,17,19,30,383,384,385,31,286,287,386,32,387,33,388,389,390,34,35,36,1,37,391,392,38,393,39,40,41,42,394,43,395,290,396,44,45,46,397,47,48,49,50,51,52,398,53,54,55,399,56,400,57,58,59,60,291,61,62,63,401,402,64,403,65,404,405,66,67,68,292,406,407,408,69,293,70,71,72,409,73,410,411,74,75,412,76,294,413,414,364,365,366,367,368,78,415,79,416,417,418,80,81,82,419,83,84,85,420,86,421,295,2,87,88,89,422,423,424,425,426,427,428,429,430,431,432,433,90,91,434,435,92,436,93,437,94,438,439,440,441,95,96,97,442,443,297,298,444,98,299,99,100,101,102,445,103,300,446,104,447,448,105,106,107,301,302,449,108,109,110,111,112,113,114,115,450,451,116,452,303,117,118,453,119,120,121,304,454,122,455,369,370,371,123,124,125,372,373,456,457,126,127,374,458,459,460,305,461,280,462,463,464,465,466,128,467,468,129,469,470,471,472,473,474,475,306,307,476,477,478,479,480,130,481,281,308,482,483,309,484,485,310,486,311,312,487,488,313,314,489,490,491,315,492,493,494,495,496,497,498,499,316,500,317,501,318,319,502,503,320,504,505,321,506,131,507,508,509,322,323,324,325,326,327,328,510,511,512,329,513,330,514,515,516,331,332,517,333,518,519,132,133,520,521,134,522,523,135,524,525,136,526,527,137,528,138,529,336,530,3,139,531,140,141,337,532,142,533,534,535,143,536,144,145,537,146,538,539,540,541,147,542,543,148,4,5,149,150,151,152,544,153,154,155,156,157,158,159,338,160,161,162,163,164,165,166,167,168,339,169,170,171,7,172,8,9,10,545,546,547,548,549,340,180,181,182,341,342,343,183,550,551,184,552,185,553,554,186,187,188,189,190,344,375,191,555,556,192,557,558,559,193,194,560,195,561,196,197,198,199,562,345,346,200,201,347,563,564,202,203,348,565,566,567,204,568,205,569,349,570,206,571,350,572,207,208,209,210,376,377,211,573,574,212,575,576,577,213,578,214,579,580,215,216,378,217,379,380,218,581,582,219,220,221,583,584,585,351,586,222,223,587,224,588,225,226,589,590,227,591,352,592,228,353,229,230,231,593,232,594,233,234,595,235,596,236,237,238,354,597,239,598,599,240,600,355,241,601,242,243,602,356,244,245,246,247,248,603,604,249,357,605,250,606,358,251,607,608,252,253,609,610,254,611,612,255,256,257,359,258,259,260,261,262,613,263,264,265,266,267,614,615,268,616,269,617,618,619,270,620,621,271,272,275,622,276,623,282,277,624,625,626,279,360,627],"tindex":"5036357b-3e34-11e6-9fce-b599800c9d15","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[628],"tindex":"50365c8c-3e34-11e6-9fce-19cb30763b4a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"5036839d-3e34-11e6-9fce-7b2ae130633b","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a","value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"5036839e-3e34-11e6-9fce-f501baf5ca92","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof java.lang.reflect.ParameterizedType) && (!(value.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"value","type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5036839f-3e34-11e6-9fce-1f4dc4fef368","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[629,630,631,632,359],"tindex":"503683a0-3e34-11e6-9fce-fde6e414e568","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"503683a1-3e34-11e6-9fce-855dd764830d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"5036aab2-3e34-11e6-9fce-c98219110e96","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"5036aab3-3e34-11e6-9fce-4d9f84eebaa8","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1529","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'a') && (c <= 'f')"},"failures":[],"tindex":"5036aab4-3e34-11e6-9fce-4bbf33713fb4","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= 'a') && (c <= 'f')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"5036d1c5-3e34-11e6-9fce-0179021ab784","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key.length()) == 0) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036364/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
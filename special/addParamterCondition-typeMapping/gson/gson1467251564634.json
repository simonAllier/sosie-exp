{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":279,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":159,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":5,"com.google.gson.functional.StringTest.testStringValueDeserialization":628,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":213,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":612,"com.google.gson.stream.JsonWriterTest.testRepeatedName":2,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":543,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":69,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":516,"com.google.gson.MixedStreamTest.testWriteLenient":303,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":403,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":446,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":123,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":280,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":243,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":251,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":498,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":575,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":142,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":187,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":148,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":550,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":388,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":475,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":491,"com.google.gson.functional.ObjectTest.testSingletonLists":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":120,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":188,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":160,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":538,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":273,"com.google.gson.stream.JsonWriterTest.testStrings":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":593,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":133,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":619,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":506,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":297,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":577,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":43,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":461,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":636,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":86,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":378,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":571,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":437,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":494,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":299,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":532,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":264,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":416,"com.google.gson.functional.EnumTest.testEnumCaseMapping":141,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":17,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":158,"com.google.gson.functional.JsonTreeTest.testToJsonTree":293,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":531,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":620,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":289,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":389,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":106,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":40,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":643,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":610,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":363,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":432,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":248,"com.google.gson.functional.ObjectTest.testNullDeserialization":662,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":440,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":634,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":504,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":305,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":335,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":544,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":373,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":433,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":262,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":509,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":16,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":402,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":179,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":582,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":581,"com.google.gson.JsonParserTest.testParseString":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":618,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":41,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":328,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":322,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":605,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":171,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":350,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":558,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":404,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":568,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":654,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":397,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":609,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":185,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":448,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":467,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":211,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":329,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":638,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":569,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":226,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":358,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":36,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":268,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":502,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":72,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":315,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":417,"com.google.gson.metrics.PerformanceTest.testDummy":520,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":489,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":81,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":93,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":526,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":399,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":622,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":122,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":115,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":455,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":517,"com.google.gson.functional.CollectionTest.testSetDeserialization":518,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":149,"com.google.gson.functional.EnumTest.testEnumSet":135,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":221,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":672,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":561,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":59,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":294,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":607,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":223,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":92,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":572,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":457,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":578,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":134,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":259,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":541,"com.google.gson.functional.MapTest.testHashMapDeserialization":653,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":615,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":308,"com.google.gson.MixedStreamTest.testReadNulls":524,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":528,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":73,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":183,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":625,"com.google.gson.functional.MapTest.testSortedMap":657,"com.google.gson.functional.MapTest.testMapSerialization":204,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":33,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":442,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":566,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":645,"com.google.gson.functional.MapTest.testSerializeMaps":198,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":241,"com.google.gson.functional.MapTest.testComplexKeysSerialization":210,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":671,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":447,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":234,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":196,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":599,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":353,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":627,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":257,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":390,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":70,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":661,"com.google.gson.functional.MapTest.testStringKeyDeserialization":418,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":296,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":61,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":339,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":212,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":547,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":152,"com.google.gson.functional.PrettyPrintingTest.testMap":255,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":542,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":375,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":103,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":623,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":42,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":647,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":164,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":112,"com.google.gson.functional.CollectionTest.testQueueSerialization":246,"com.google.gson.functional.MapTest.testMapSerializationEmpty":369,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":391,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":562,"com.google.gson.functional.MapTest.testMapOfMapSerialization":203,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":320,"com.google.gson.JavaSerializationTest.testMapIsSerializable":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":611,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":667,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":25,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":325,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":344,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":161,"com.google.gson.functional.FieldNamingTest.testIdentity":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":400,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":18,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":511,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":71,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":216,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":292,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":310,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":533,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":300,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":162,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":311,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":323,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":617,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":608,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":352,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":651,"com.google.gson.functional.MapTest.testMapSubclassSerialization":197,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":338,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":144,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":477,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":673,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":14,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":154,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":556,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":603,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":482,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":91,"com.google.gson.functional.EnumTest.testEnumSubclass":138,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":326,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":298,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":505,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":313,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":51,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":574,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":60,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":596,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":534,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":215,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":559,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":496,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":285,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":270,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":642,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":563,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":659,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":321,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":470,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":126,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":497,"com.google.gson.MixedStreamTest.testWriteNulls":301,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":652,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":360,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":408,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":233,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":474,"com.google.gson.CommentsTest.testParseComments":674,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":64,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":218,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":492,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":29,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":573,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":420,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":163,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":367,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":601,"com.google.gson.MixedStreamTest.testReadInvalidState":522,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":146,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":128,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":337,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":236,"com.google.gson.JsonParserTest.testParseMixedArray":444,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":55,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":648,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":295,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":26,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":450,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":317,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":332,"com.google.gson.functional.MapTest.testMapDeserialization":414,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":114,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":381,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":365,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":269,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":490,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":84,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":200,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":192,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":190,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":398,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":600,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":157,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":479,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":228,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":372,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":155,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":476,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":80,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":214,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":256,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":366,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":130,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":530,"com.google.gson.functional.PrimitiveTest.testShortSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":592,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":194,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":576,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":557,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":435,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":540,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":238,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":137,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":434,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":245,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":143,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":430,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":411,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":553,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":254,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":340,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":406,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":451,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":616,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":274,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":454,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":343,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":585,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":38,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":346,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":468,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":473,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":100,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":276,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":466,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":486,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":560,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":514,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":501,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":76,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":267,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":480,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":591,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":119,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":193,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":546,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":349,"com.google.gson.stream.JsonWriterTest.testNullStringValue":0,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":614,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":287,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":663,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":535,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":580,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":324,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":341,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":30,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":191,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":396,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":422,"com.google.gson.functional.MapTest.testGeneralMapField":207,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":500,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":588,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":151,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":174,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":124,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":368,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":101,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":178,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":331,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":428,"com.google.gson.MixedStreamTest.testReadMixedStreamed":453,"com.google.gson.JsonObjectTest.testDeepCopy":392,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":606,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":655,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":11,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":485,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":488,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":265,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":117,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":415,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":68,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":65,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":342,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":182,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":46,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":1,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":554,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":116,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":637,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":602,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":666,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":650,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":67,"com.google.gson.functional.ObjectTest.testNestedDeserialization":515,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":374,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":459,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":284,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":263,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":587,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":28,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":595,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":630,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":656,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":334,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":471,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":283,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":407,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":377,"com.google.gson.functional.ObjectTest.testNullSerialization":371,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":78,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":594,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":412,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":206,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":314,"com.google.gson.functional.MapTest.testInterfaceTypeMap":205,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":644,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":153,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":536,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":37,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":139,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":356,"com.google.gson.MixedStreamTest.testReadClosed":523,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":102,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":261,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":548,"com.google.gson.MixedStreamTest.testWriteClosed":304,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":247,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":460,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":219,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":621,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":95,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":82,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":278,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":27,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":129,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":85,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":220,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":376,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":463,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":567,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":597,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":250,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":121,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":395,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":21,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":589,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":56,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":604,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":167,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":235,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":277,"com.google.gson.functional.CollectionTest.testQueueDeserialization":670,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":319,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":565,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":127,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":464,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":201,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":510,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":111,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":180,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":513,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":244,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":13,"com.google.gson.functional.MapTest.testRawMapSerialization":209,"com.google.gson.JsonParserTest.testParseReader":426,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":669,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":613,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":39,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":74,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":224,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":424,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":364,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":382,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":132,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":169,"com.google.gson.functional.PrimitiveTest.testByteSerialization":333,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":384,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":49,"com.google.gson.ObjectTypeAdapterTest.testSerialize":272,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":176,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":519,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":545,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":445,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":281,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":173,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":239,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":96,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":521,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":631,"com.google.gson.functional.MapTest.testMapWithQuotes":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":104,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":551,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":58,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":649,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":345,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":347,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":147,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":443,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":409,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":88,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":512,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":109,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":327,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":660,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":175,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":105,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":110,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":579,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":354,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":668,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":640,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":125,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":168,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":77,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":20,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":529,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":145,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":624,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":401,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":537,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":66,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":507,"com.google.gson.functional.ObjectTest.testNestedSerialization":225,"com.google.gson.JsonObjectTest.testAddingStringProperties":393,"com.google.gson.internal.LinkedTreeMapTest.testClear":431,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":31,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":316,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":635,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":181,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":208,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":237,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":186,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":12,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":15,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":8,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":222,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":527,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":584,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":288,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":481,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":306,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":549,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":478,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":508,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":462,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":165,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":172,"com.google.gson.functional.CollectionTest.testSetSerialization":253,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":465,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":63,"com.google.gson.functional.StringTest.testStringValueSerialization":166,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":379,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":22,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":469,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":664,"com.google.gson.MixedStreamTest.testWriteInvalidState":302,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":639,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":370,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":552,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":361,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":555,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":108,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":240,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":429,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":231,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":387,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":458,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":260,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":449,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":351,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":50,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":413,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":4,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":359,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":525},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5694f3bb-3e65-11e6-b4bc-dfb65e0b22d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"56958ffc-3e65-11e6-b4bc-498d3cdf75cf","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56958ffd-3e65-11e6-b4bc-5b584a725c0d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5695b70e-3e65-11e6-b4bc-51642c76ded1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"5695b70f-3e65-11e6-b4bc-bfe07005e354","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5695b710-3e65-11e6-b4bc-c58ab46b6295","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5695de21-3e65-11e6-b4bc-01da8d1ef696","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    float float = value.floatValue();\n    checkValidFloatingPoint(floatValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5695de22-3e65-11e6-b4bc-09c893c0ee0c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276],"tindex":"56960533-3e65-11e6-b4bc-5dcfb4fcbb2a","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"56962c44-3e65-11e6-b4bc-31b5eb44a58d","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[],"tindex":"56962c45-3e65-11e6-b4bc-1f537f214912","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"56965356-3e65-11e6-b4bc-0f6cf65e03ab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[10,13,14,18,19,20,21,22,23,24,25,26,27,28,29,277,278,30,31,32,279,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,280,281,282,283,51,52,53,60,62,63,69,70,71,72,73,74,75,76,77,78,79,80,284,285,286,81,82,83,287,288,84,85,289,86,88,90,91,92,93,94,95,96,97,98,99,117,290,129,133,134,139,143,144,145,146,147,148,149,154,156,291,157,292,293,174,176,179,180,182,183,184,185,186,188,189,191,192,193,195,196,201,205,206,207,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,245,249,251,253,256,257,258,268,270,271,272],"tindex":"56965357-3e65-11e6-b4bc-3d6fe203a730","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"56967a68-3e65-11e6-b4bc-43ff13eddd5f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56967a69-3e65-11e6-b4bc-d3ec384b5363","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[294,295,296],"tindex":"5696a17a-3e65-11e6-b4bc-efc8dce77a55","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (!(from instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5696a17b-3e65-11e6-b4bc-ad4f84131c56","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5696a17c-3e65-11e6-b4bc-0ff3d798b66b","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"5696c88d-3e65-11e6-b4bc-4b1c3a13dc34","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5696c88e-3e65-11e6-b4bc-f9e791d135af","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"5696c88f-3e65-11e6-b4bc-27fb7c8de880","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[9,297,298,10,299,300,11,12,13,14,301,302,303,15,304,16,305,17,306,18,19,20,21,22,23,24,25,26,27,28,29,277,278,30,31,32,307,279,33,34,35,36,308,37,309,44,45,46,47,48,49,50,280,281,310,282,283,51,311,312,52,53,313,314,54,55,315,316,56,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,57,332,333,334,335,336,337,338,339,340,341,342,343,58,59,60,61,62,63,64,65,66,344,345,67,68,69,70,346,71,72,73,74,75,76,77,78,79,80,284,285,286,81,82,83,287,288,84,85,289,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,347,103,104,105,106,107,108,348,109,349,110,111,112,113,114,115,116,117,118,119,350,120,121,351,122,123,124,290,125,126,127,128,129,130,352,131,132,133,353,354,134,135,136,137,138,139,140,141,142,143,144,145,146,355,147,148,149,150,151,152,153,154,155,356,156,291,157,292,293,158,159,160,161,162,163,164,165,166,167,168,357,358,169,170,359,171,172,360,173,174,361,175,362,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,363,191,192,193,194,195,364,196,365,197,198,199,200,201,202,203,204,366,367,205,368,206,207,208,209,210,369,211,212,213,214,215,216,217,218,219,220,370,221,371,222,372,373,223,224,225,374,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,375,246,376,247,248,249,250,251,252,253,377,254,378,255,256,257,379,380,381,258,259,260,261,262,263,264,265,266,267,268,382,383,384,270,271],"tindex":"5696efa0-3e65-11e6-b4bc-7bbcf95c8f61","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"5696efa1-3e65-11e6-b4bc-09a52c1ebc92","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != (src[0])) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"src","lowerBound":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"569716b2-3e65-11e6-b4bc-6d1f48674705","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"569716b3-3e65-11e6-b4bc-0f1203fbbc01","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"569716b4-3e65-11e6-b4bc-93fec9735f4c","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a","b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"569716b5-3e65-11e6-b4bc-33902134eaa9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[385,386,16,387,388,389,390,391,392,393,305,394,395,277,278,279,396,397,398,49,50,280,281,282,283,311,399,400,60,61,62,66,284,285,286,287,288,289,86,89,401,402,108,133,144,145,156,291,157,292,293,403,404,405,406,407,408,183,184,185,409,194,410,411,412,413,414,415,416,417,418,419,213,420,421,236,422,237,423,424,425,426,427,268,382,428,429,430,431,432,433,434,435,436,437,438,439,274,275,276,440,441,442],"tindex":"569716b6-3e65-11e6-b4bc-69a2fe0755ee","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"56973dc7-3e65-11e6-b4bc-b3e638548950","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[437],"tindex":"56973dc8-3e65-11e6-b4bc-d9c93e867612","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[443,9,297,298,10,299,300,11,12,13,14,301,302,303,15,304,16,305,17,306,18,19,20,21,22,23,24,25,26,27,28,29,277,278,30,31,32,307,279,33,34,35,36,308,37,309,44,45,46,47,48,49,50,280,281,310,282,283,51,311,312,52,53,313,314,54,55,315,316,56,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,57,332,333,334,335,336,337,338,339,340,341,342,343,58,59,60,61,62,63,64,65,66,344,345,67,68,69,70,346,71,72,73,74,75,76,77,78,79,80,284,285,286,81,82,83,287,288,84,85,289,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,347,103,104,105,106,107,108,348,109,349,110,111,112,113,114,115,116,117,118,119,350,120,121,351,122,123,124,290,125,126,127,128,129,130,352,131,132,133,353,354,134,135,136,137,138,139,140,141,142,143,144,145,146,355,147,148,149,150,151,152,153,154,155,356,156,291,157,292,293,158,159,160,161,162,163,164,165,166,167,168,357,358,169,170,359,171,172,360,173,174,361,175,362,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,363,191,192,193,194,195,364,196,365,197,198,199,200,201,202,203,204,366,367,205,368,206,207,208,209,210,369,211,212,213,214,215,216,217,218,219,220,370,221,371,222,372,373,223,224,225,374,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,375,246,376,247,248,249,250,251,252,253,377,254,378,255,256,257,379,380,381,258,259,260,261,262,263,264,265,266,267,268,444,445,269,382,383,384,270,271,446,447,448,449,450,274,275,451,276],"tindex":"569764d9-3e65-11e6-b4bc-0d704f03e77f","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"569764da-3e65-11e6-b4bc-45faca52792e","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[428,429],"tindex":"569764db-3e65-11e6-b4bc-1d39563ba9e1","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"569764dc-3e65-11e6-b4bc-a9463c00498a","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound","to":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"56978bed-3e65-11e6-b4bc-8bba16ac07ab","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"56978bee-3e65-11e6-b4bc-51caa8bfdffd","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56978bef-3e65-11e6-b4bc-1dd523006860","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56978bf0-3e65-11e6-b4bc-5981527a14e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"56978bf1-3e65-11e6-b4bc-95e2e0fd9cc8","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"5697b302-3e65-11e6-b4bc-778b7ba3ee6b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5697b303-3e65-11e6-b4bc-e9261441f4b1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"5697b304-3e65-11e6-b4bc-033fc8179703","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5697b305-3e65-11e6-b4bc-41b930390e72","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[452],"tindex":"5697da16-3e65-11e6-b4bc-a1b7efa3dacb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[10,13,14,302,304,453,454,455,456,457,18,19,20,458,21,22,23,24,25,26,27,28,29,277,278,30,31,32,279,33,459,34,460,396,35,36,44,461,462,45,46,463,464,47,48,280,281,282,283,51,312,465,52,53,466,467,468,60,62,63,69,70,469,470,71,72,471,284,285,286,81,82,83,287,288,472,473,84,85,289,86,88,474,90,91,92,93,94,475,95,96,97,476,98,477,99,478,479,480,348,481,117,290,129,482,133,134,139,483,143,144,145,146,147,148,149,154,156,291,157,292,293,403,404,405,406,407,174,484,361,176,179,180,182,183,485,184,185,186,486,487,488,188,489,189,490,491,191,192,492,193,195,196,493,201,494,205,206,207,210,213,214,495,496,215,216,217,497,498,218,499,500,219,501,502,220,503,221,504,222,505,506,223,507,224,225,508,226,509,510,227,511,228,229,512,230,513,514,515,516,231,232,233,234,517,235,421,236,422,237,424,242,243,245,249,518,251,253,256,257,258,268,270,271,272],"tindex":"56980127-3e65-11e6-b4bc-19bf5b5d2b66","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"56980128-3e65-11e6-b4bc-91abb09c7188","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"typeAdapter","token":"typeAdapter","com.google.gson.stream.JsonToken.NUMBER":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56980129-3e65-11e6-b4bc-41b6bb75661f","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5698012a-3e65-11e6-b4bc-5728273d22a1","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"5698012b-3e65-11e6-b4bc-d9f3abaf4506","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"5698283c-3e65-11e6-b4bc-bb5032a83afb","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((value.peek()) == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"value","com.google.gson.stream.JsonToken.NULL":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"5698283d-3e65-11e6-b4bc-3d8efdd5b210","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[294,295,296,519],"tindex":"5698283e-3e65-11e6-b4bc-7bb0697e19d5","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"56984f4f-3e65-11e6-b4bc-931c23cd62a0","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"56984f50-3e65-11e6-b4bc-658afbb2fa92","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"toFind","value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"56984f51-3e65-11e6-b4bc-cf1483f8abfb","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[336],"tindex":"56984f52-3e65-11e6-b4bc-01c027bc17da","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[520,9,297,298,521,10,299,300,11,12,13,522,523,14,301,302,303,524,15,304,453,454,16,305,17,306,525,455,456,457,526,527,18,19,395,20,458,26,27,28,29,277,278,30,31,32,307,279,33,528,459,34,460,396,35,36,308,309,44,461,462,45,46,463,464,47,529,48,49,50,280,281,310,282,283,51,311,312,465,52,53,530,531,532,313,533,314,534,535,536,537,538,54,539,540,55,541,542,543,544,545,546,547,315,316,548,549,550,551,552,56,553,317,318,554,555,319,556,557,320,558,321,322,559,560,323,324,561,562,563,325,564,565,566,567,568,569,570,571,326,572,327,573,328,329,574,575,330,576,577,331,578,57,579,466,580,332,333,334,335,336,337,338,581,582,583,339,584,340,585,586,587,341,342,588,343,589,590,58,467,59,399,400,468,60,61,62,591,63,64,65,592,66,593,344,345,67,594,68,69,595,70,469,346,470,71,72,73,74,75,471,76,77,78,596,597,79,598,80,599,600,284,285,286,81,82,83,287,288,472,473,84,85,289,86,87,601,88,474,89,90,91,92,93,94,475,95,96,97,476,98,401,477,99,602,100,101,102,402,478,479,347,603,103,104,604,105,605,106,107,480,606,108,607,348,608,109,349,110,111,112,481,113,609,114,115,610,116,611,117,118,119,350,612,120,613,614,121,615,351,122,616,123,124,617,290,125,126,127,128,129,618,619,130,352,620,131,621,622,132,482,133,353,623,624,625,354,134,135,136,137,138,626,627,139,483,140,141,142,143,144,145,146,355,147,148,149,150,151,152,153,154,155,356,291,157,292,293,628,158,159,160,161,162,629,630,163,631,164,632,633,634,165,635,636,166,403,404,405,406,407,408,637,638,167,168,639,357,358,169,170,359,640,641,171,172,360,642,643,644,173,645,174,484,361,646,175,647,362,648,176,177,178,179,180,181,182,183,649,485,184,185,186,486,187,487,488,188,489,189,490,491,190,409,363,191,192,492,193,194,195,364,650,196,493,651,365,652,653,410,197,198,411,412,199,413,200,414,201,654,655,415,656,202,203,204,416,494,366,367,657,205,368,206,207,208,209,417,210,369,418,211,419,658,212,213,214,495,496,215,216,217,497,498,218,499,500,219,501,502,220,370,503,659,221,504,371,222,660,505,372,506,373,223,507,224,225,374,508,226,509,510,661,662,227,511,228,229,512,230,513,514,515,516,231,232,233,234,517,235,420,421,236,422,237,423,424,238,239,240,241,242,243,244,245,375,663,664,665,246,376,247,248,249,666,667,250,668,518,251,252,669,253,377,425,254,670,378,255,256,257,379,380,381,258,259,260,261,262,263,264,265,266,671,672,267,673,268,674,270,271,675],"tindex":"56987663-3e65-11e6-b4bc-8ddc04d74ac0","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:428","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"56987664-3e65-11e6-b4bc-49482264538c","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250502782/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_NONE":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":58,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
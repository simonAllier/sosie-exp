{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":30,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":310,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":416,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":114,"com.google.gson.stream.JsonWriterTest.testRepeatedName":413,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":123,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":191,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":131,"com.google.gson.MixedStreamTest.testWriteLenient":424,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":504,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":378,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":24,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":115,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":119,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":160,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":354,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":386,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":91,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":49,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":262,"com.google.gson.functional.ObjectTest.testSingletonLists":158,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":375,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":311,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":410,"com.google.gson.stream.JsonWriterTest.testStrings":418,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":230,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":173,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":425,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":326,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":434,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":109,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":500,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":297,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":18,"com.google.gson.functional.EnumTest.testEnumCaseMapping":353,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":287,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":309,"com.google.gson.functional.JsonTreeTest.testToJsonTree":240,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":436,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":41,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":362,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":323,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":496,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":3,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":344,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":233,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":170,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":480,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":456,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":4,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":295,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":216,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":180,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":420,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":385,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":256,"com.google.gson.JsonParserTest.testParseString":1,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":278,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":324,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":473,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":467,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":182,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":449,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":132,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":250,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":43,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":506,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":217,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":474,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":179,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":430,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":62,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":64,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":166,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":283,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":19,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":130,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":460,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":222,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":377,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":371,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":236,"com.google.gson.functional.CollectionTest.testSetDeserialization":118,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":92,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":169,"com.google.gson.functional.EnumTest.testEnumSet":348,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":392,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":331,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":174,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":97,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":276,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":67,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":231,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":292,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":390,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":270,"com.google.gson.functional.MapTest.testMapSerialization":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":199,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":79,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":150,"com.google.gson.functional.MapTest.testSerializeMaps":330,"com.google.gson.functional.MapTest.testComplexKeysSerialization":113,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":505,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":433,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":235,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":253,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":493,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":51,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":76,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":125,"com.google.gson.functional.MapTest.testStringKeyDeserialization":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":393,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":484,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":340,"com.google.gson.functional.PrettyPrintingTest.testMap":308,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":405,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":444,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":359,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":285,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":325,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":315,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":52,"com.google.gson.functional.CollectionTest.testQueueSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":368,"com.google.gson.functional.MapTest.testMapSerializationEmpty":443,"com.google.gson.functional.MapTest.testMapOfMapSerialization":334,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":465,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":197,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":470,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":491,"com.google.gson.functional.FieldNamingTest.testIdentity":151,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":35,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":208,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":183,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":42,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":129,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":157,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":452,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":501,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":277,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":313,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":490,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":136,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":468,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":275,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":451,"com.google.gson.functional.MapTest.testMapSubclassSerialization":329,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":483,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":28,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":106,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":57,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":259,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":438,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":133,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":229,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":96,"com.google.gson.functional.EnumTest.testEnumSubclass":351,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":471,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":172,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":426,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":458,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":219,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":248,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":138,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":137,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":37,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":274,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":6,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":128,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":466,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":381,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":159,"com.google.gson.MixedStreamTest.testWriteNulls":423,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":432,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":303,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":234,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":47,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":161,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":394,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":71,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":207,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":314,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":336,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":89,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":383,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":482,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":8,"com.google.gson.JsonParserTest.testParseMixedArray":503,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":388,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":55,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":204,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":508,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":462,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":373,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":477,"com.google.gson.functional.MapTest.testMapDeserialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":370,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":437,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":440,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":261,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":286,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":227,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":332,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":264,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":408,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":11,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":254,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":140,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":184,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":455,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":407,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":363,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":104,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":135,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":252,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":75,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":441,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":384,"com.google.gson.functional.PrimitiveTest.testShortSerialization":481,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":409,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":299,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":142,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":147,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":350,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":5,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":116,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":2,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":152,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":14,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":347,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":485,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":22,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":509,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":269,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":61,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":488,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":321,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":127,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":218,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":226,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":81,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":356,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":192,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":220,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":189,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":165,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":352,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":245,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":355,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":403,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":260,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":374,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":448,"com.google.gson.stream.JsonWriterTest.testNullStringValue":411,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":267,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":39,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":469,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":486,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":68,"com.google.gson.JsonPrimitiveTest.testEquals":282,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":263,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":349,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":203,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":9,"com.google.gson.functional.MapTest.testGeneralMapField":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":163,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":429,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":70,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":404,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":379,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":357,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":387,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":400,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":476,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":44,"com.google.gson.MixedStreamTest.testReadMixedStreamed":60,"com.google.gson.JsonObjectTest.testDeepCopy":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":463,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":271,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":346,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":422,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":154,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":298,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":144,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":17,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":328,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":395,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":487,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":78,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":85,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":412,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":372,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":209,"com.google.gson.functional.ObjectTest.testNestedDeserialization":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":397,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":318,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":457,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":200,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":36,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":296,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":206,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":124,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":95,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":479,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":244,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":27,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":134,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":446,"com.google.gson.functional.ObjectTest.testNullSerialization":454,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":247,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":15,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":111,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":459,"com.google.gson.functional.MapTest.testInterfaceTypeMap":110,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":406,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":224,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":121,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":320,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":280,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":358,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":294,"com.google.gson.MixedStreamTest.testWriteClosed":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":202,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":343,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":164,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":225,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":101,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":32,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":187,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":146,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":167,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":228,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":445,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":86,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":88,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":249,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":376,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":33,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":193,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":389,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":238,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":237,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":300,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":31,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":464,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":489,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":382,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":108,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":181,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":367,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":188,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":257,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":341,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":56,"com.google.gson.functional.MapTest.testRawMapSerialization":338,"com.google.gson.JsonParserTest.testParseReader":0,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":322,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":176,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":242,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":80,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":497,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":46,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":302,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":398,"com.google.gson.functional.PrimitiveTest.testByteSerialization":478,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":499,"com.google.gson.ObjectTypeAdapterTest.testSerialize":273,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":401,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":255,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":502,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":25,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":306,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":148,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":102,"com.google.gson.functional.MapTest.testMapWithQuotes":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":391,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":492,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":447,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":90,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":510,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":93,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":186,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":365,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":472,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":168,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":361,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":26,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":366,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":494,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":301,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":380,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":246,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":210,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":29,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":12,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":279,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":396,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":175,"com.google.gson.JsonObjectTest.testAddingStringProperties":54,"com.google.gson.functional.ObjectTest.testNestedSerialization":177,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":69,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":399,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":461,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":319,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":337,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":10,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":73,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":284,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":288,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":419,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":40,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":143,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":139,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":178,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":83,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":316,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":305,"com.google.gson.functional.CollectionTest.testSetSerialization":120,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":221,"com.google.gson.functional.StringTest.testStringValueSerialization":317,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":435,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":258,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":126,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":194,"com.google.gson.MixedStreamTest.testWriteInvalidState":58,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":453,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":72,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":364,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":45,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":149,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":232,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":48,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":211,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":507,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":450,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":402,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":415,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":431},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d6673aca-3f28-11e6-8285-47cea1d10ca0","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = true;\n    boolean boolean = reader.isLenient();\n    reader.setLenient(true);\n    try {\n        reader.peek();\n        isEmpty = false;\n        com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n        T T = typeAdapter.read(reader);\n        return object;\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return null;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } finally {\n        reader.setLenient(oldLenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"d667affb-3f28-11e6-8285-053beb7bb012","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT.equals(typeOfT)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d667d70c-3f28-11e6-8285-bdef5372b2e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d667d70d-3f28-11e6-8285-c79726feb0b0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"d667d70e-3f28-11e6-8285-bbf88343d518","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d667fe1f-3f28-11e6-8285-f719aff9b3a0","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d6682530-3f28-11e6-8285-27511af4c1c7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[55],"tindex":"d6682531-3f28-11e6-8285-17136b456a9a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d6684c42-3f28-11e6-8285-69fde3875b2b","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d6687353-3f28-11e6-8285-c1a545b0b3be","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,7,78,79,8,9,10,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,21,121,122,123,124,125,126,127,128,129,130,131,132,133,22,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,24,25,26,27,152,28,29,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,30,199,200,201,202,203,204,205,206,207,31,32,208,209,210,211,212,213,214,215,216,217,218,219,220,221,36,37,38,222,223,224,39,40,225,226,227,228,41,229,230,231,232,233,234,235,236,237,238,239,42,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,43,273,274,275,276,277,278,279,280,281],"tindex":"d6689a64-3f28-11e6-8285-51a473a8a95c","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d668c175-3f28-11e6-8285-19c2778a7348","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d668c176-3f28-11e6-8285-2f4acd0edfaa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d668e887-3f28-11e6-8285-d777365dafd6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d668e888-3f28-11e6-8285-4dd95f33e111","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d6690f99-3f28-11e6-8285-73f4dc7e67fe","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d6690f9a-3f28-11e6-8285-c15ec00fb51f","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d6690f9b-3f28-11e6-8285-8b4d22d2e9b5","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if ((firstCharacter == 't') || (c == 'T')) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"firstCharacter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d6690f9c-3f28-11e6-8285-f57babb0555b","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT.equals(typeOfT)) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[282,283],"tindex":"d66936ad-3f28-11e6-8285-4de56a426785","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj != null) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d66936ae-3f28-11e6-8285-4d35051275e2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66936af-3f28-11e6-8285-7faa72217c0b","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == cls) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[56,57,284,285,286,287,288,62,289,290,291,63,64,292,293,294,295,296,297,298,299,68,69,300,301,302,303,304,305,306,70,307,73,308,75,76,77,309,310,311,312,313,314,315,316,317,7,318,319,78,8,10,320,321,322,323,324,325,326,81,84,85,88,89,90,91,92,93,327,95,96,97,98,99,101,102,103,105,107,328,329,330,331,332,108,333,334,335,336,110,111,112,337,338,113,339,340,114,115,341,116,342,343,344,117,345,119,346,120,347,21,348,349,350,351,121,352,353,354,355,123,125,129,130,135,138,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,144,373,374,375,376,377,378,379,380,381,382,383,146,384,385,147,148,149,150,151,152,28,29,386,155,157,158,161,164,167,169,171,174,176,177,179,182,184,185,187,387,388,389,390,193,194,195,196,197,198,199,201,204,205,206,207,208,209,210,212,215,216,391,392,219,393,220,221,394,395,396,397,222,223,224,227,228,398,230,231,232,233,234,235,237,239,241,242,243,245,246,247,250,252,255,399,400,256,257,258,401,402,403,404,405,406,259,407,260,408,263,264,266,409,267,268,270,272,43,273,410,411,412,413,414,415,416,417,418,419,274,275,420,421,276,422],"tindex":"d6695dc0-3f28-11e6-8285-bdbd760392db","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"d6695dc1-3f28-11e6-8285-6954c89a6d3e","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound","to":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[56,57,423,58,424,284,59,285,425,426,287,427,288,62,63,64,428,292,293,294,295,296,297,298,299,68,69,300,301,429,430,302,303,431,304,305,432,306,70,72,307,433,73,434,308,75,76,435,436,437,77,309,310,311,312,313,314,315,316,317,7,318,319,78,8,10,320,438,81,84,85,88,89,439,90,91,92,93,327,95,96,97,98,99,101,102,103,105,107,328,440,329,330,331,332,108,333,334,335,441,336,110,442,111,112,337,338,113,443,339,340,114,115,341,116,444,342,445,343,344,117,345,119,346,120,446,347,21,348,349,350,351,121,352,353,354,355,123,125,127,129,130,135,138,356,357,358,447,359,360,361,362,363,364,142,365,448,366,367,368,369,370,371,372,144,373,374,449,375,376,450,377,378,379,145,380,381,382,383,146,384,451,385,147,148,149,150,151,24,25,452,26,27,152,28,29,386,155,157,158,161,164,167,453,169,454,171,455,456,174,176,177,457,179,182,184,185,187,458,459,387,388,460,461,389,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,390,477,478,479,480,481,482,483,484,485,486,487,488,193,194,195,196,197,198,489,30,199,201,204,205,206,207,31,32,208,209,210,212,490,213,215,216,391,392,219,393,220,221,394,395,396,491,492,397,36,37,38,222,223,224,39,40,227,228,41,398,230,493,494,231,232,233,234,235,237,238,239,42,240,241,242,243,245,246,247,250,252,255,399,400,256,257,258,401,402,403,404,405,406,259,407,495,260,408,496,263,264,266,409,267,497,268,270,272,43,274,275,46,498,499,420,421,276,500,501,422],"tindex":"d66984d2-3f28-11e6-8285-13c27f014b1d","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (!htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"d66984d3-3f28-11e6-8285-1b9b5c9716e3","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d669d2f4-3f28-11e6-8285-fffc08c7d70d","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d669d2f5-3f28-11e6-8285-2353bcadc78a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1246","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d669d2f6-3f28-11e6-8285-15cd04aeaa5d","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == length) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d669fa07-3f28-11e6-8285-2fe7205458c7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[56,57,423,58,424,284,59,285,425,426,502,286,287,427,288,62,503,504,505,506,507,508,289,290,509,291,63,64,428,292,293,294,295,296,297,298,299,68,69,300,301,429,430,302,303,431,304,305,432,306,70,72,307,433,73,434,308,75,76,435,436,437,77,309,310,311,312,313,314,315,316,317,7,318,319,78,8,10,320,438,81,84,85,88,89,439,90,91,92,93,327,95,96,97,98,99,101,102,103,105,107,328,440,329,330,331,332,108,333,334,335,441,336,110,442,111,112,337,338,113,443,339,340,114,115,341,116,444,342,445,343,344,117,345,119,346,120,446,347,21,348,349,350,351,121,352,353,354,355,123,125,127,129,130,135,138,356,357,358,447,359,360,361,362,363,364,142,365,448,366,367,368,369,370,371,372,144,373,374,449,375,376,450,377,378,379,145,380,381,382,383,146,384,451,385,147,148,149,150,151,24,25,452,26,27,152,28,29,386,155,157,158,161,164,167,453,169,454,171,455,456,174,176,177,457,179,182,184,185,187,458,459,387,388,460,461,389,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,390,477,478,479,480,481,482,483,484,485,486,487,488,193,194,195,196,197,198,489,30,199,201,204,205,206,207,31,32,208,209,210,212,490,213,215,216,391,392,219,393,220,221,394,395,396,491,492,397,36,37,38,222,223,224,39,40,227,228,41,398,230,493,494,231,232,233,234,235,237,238,239,42,240,241,242,243,245,246,247,250,252,255,399,400,256,257,258,401,402,403,404,405,406,259,407,495,260,408,496,263,264,266,409,267,497,268,270,272,43,510,274,275,46,498,499,420,421,276,500,501,422],"tindex":"d669fa08-3f28-11e6-8285-abe850cdc287","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d66a2119-3f28-11e6-8285-f9b731d48113","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a211a-3f28-11e6-8285-25127ff19305","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a211b-3f28-11e6-8285-43b219e3262b","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d66a211c-3f28-11e6-8285-cf5f35162284","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"d66a211d-3f28-11e6-8285-c5dbc0f45811","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a482e-3f28-11e6-8285-593b0b624e6c","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a482f-3f28-11e6-8285-9144157959e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a4830-3f28-11e6-8285-25fcc1380cac","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (openBracket == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"openBracket"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d66a6f41-3f28-11e6-8285-95bd86580ec8","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:948","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a6f42-3f28-11e6-8285-7354ba0ca962","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_NONE":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a9653-3f28-11e6-8285-a50ee6519b9c","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a9654-3f28-11e6-8285-b34d5a4252d0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d66a9655-3f28-11e6-8285-9f8dfb258dd1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467334732475/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":44,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
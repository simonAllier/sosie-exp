{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":290,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":250,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":494,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":315,"com.google.gson.functional.StringTest.testStringValueDeserialization":725,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":226,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":663,"com.google.gson.JsonPrimitiveTest.testDeepCopy":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":714,"com.google.gson.stream.JsonWriterTest.testRepeatedName":307,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":636,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":19,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":547,"com.google.gson.MixedStreamTest.testWriteLenient":160,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":168,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":219,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":261,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":205,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":37,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":42,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":529,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":668,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":446,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":469,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":102,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":643,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":507,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":522,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":187,"com.google.gson.functional.ObjectTest.testSingletonLists":381,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":483,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":495,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":631,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":296,"com.google.gson.stream.JsonWriterTest.testStrings":326,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":217,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":17,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":721,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":537,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":441,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":670,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":400,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":567,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":733,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":278,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":98,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":112,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":664,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":320,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":519,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":437,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":625,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":241,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":617,"com.google.gson.functional.EnumTest.testEnumCaseMapping":445,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":429,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":493,"com.google.gson.functional.JsonTreeTest.testToJsonTree":257,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":624,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":264,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":234,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":6,"com.google.gson.stream.JsonWriterTest.testNulls":304,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":575,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":260,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":109,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":694,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":712,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":447,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":389,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":731,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":269,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":535,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":78,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":200,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":637,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":460,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":179,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":240,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":365,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":540,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":195,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":490,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":58,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":675,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":674,"com.google.gson.JsonParserTest.testParseString":189,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":720,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":70,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":110,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":577,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":456,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":679,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":707,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":93,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":282,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":419,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":651,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":220,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":613,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":661,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":242,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":711,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":140,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":9,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":517,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":361,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":71,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":604,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":662,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":386,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":406,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":14,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":276,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":322,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":424,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":533,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":334,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":435,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":451,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":619,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":560,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":376,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":27,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":687,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":600,"com.google.gson.stream.JsonWriterTest.testEmptyArray":297,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":585,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":621,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":481,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":551,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":364,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":8,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":550,"com.google.gson.functional.CollectionTest.testSetDeserialization":516,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":103,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":88,"com.google.gson.functional.EnumTest.testEnumSet":328,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":701,"com.google.gson.JsonStreamParserTest.testIterator":291,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":654,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":211,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":736,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":709,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":26,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":665,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":553,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":319,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":671,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":238,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":74,"com.google.gson.functional.MapTest.testHashMapDeserialization":607,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":634,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":717,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":688,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":123,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":280,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":335,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":138,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":588,"com.google.gson.functional.MapTest.testSortedMap":618,"com.google.gson.functional.MapTest.testMapSerialization":53,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":124,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":244,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":659,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":696,"com.google.gson.functional.MapTest.testSerializeMaps":52,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":155,"com.google.gson.functional.MapTest.testComplexKeysSerialization":359,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":700,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":169,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":225,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":391,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":375,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":514,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":443,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":590,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":115,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":167,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":181,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":196,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":20,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":685,"com.google.gson.functional.MapTest.testStringKeyDeserialization":620,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":432,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":697,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":45,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":81,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":56,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":640,"com.google.gson.functional.PrettyPrintingTest.testMap":113,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":461,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":635,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":39,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":473,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":586,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":111,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":440,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":698,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":498,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":726,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":197,"com.google.gson.functional.CollectionTest.testQueueSerialization":341,"com.google.gson.functional.MapTest.testMapSerializationEmpty":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":416,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":323,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":655,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":325,"com.google.gson.functional.MapTest.testMapOfMapSerialization":353,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":455,"com.google.gson.JavaSerializationTest.testMapIsSerializable":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":713,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":595,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":299,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":67,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":49,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":172,"com.google.gson.functional.FieldNamingTest.testIdentity":156,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":496,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":212,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":126,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":310,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":542,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":21,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":86,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":207,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":256,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":302,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":626,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":12,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":576,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":227,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":497,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":65,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":719,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":710,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":489,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":605,"com.google.gson.functional.MapTest.testMapSubclassSerialization":348,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":457,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":120,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":509,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":702,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":159,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":399,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":491,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":649,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":221,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":683,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":705,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":501,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":25,"com.google.gson.functional.EnumTest.testEnumSubclass":330,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":68,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":442,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":536,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":62,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":362,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":667,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":213,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":627,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":97,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":1,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":311,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":652,"com.google.gson.stream.JsonWriterTest.testTwoNames":298,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":549,"com.google.gson.stream.JsonWriterTest.testNullName":305,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":230,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":293,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":693,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":656,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":684,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":64,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":313,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":505,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":486,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":528,"com.google.gson.MixedStreamTest.testWriteNulls":267,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":606,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":131,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":308,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":602,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":408,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":390,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":506,"com.google.gson.CommentsTest.testParseComments":735,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":194,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":214,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":523,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":136,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":666,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":243,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":355,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":425,"com.google.gson.MixedStreamTest.testReadInvalidState":734,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":99,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":488,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":245,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":295,"com.google.gson.JsonParserTest.testParseMixedArray":191,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":283,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":450,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":165,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":699,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":431,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":413,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":573,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":173,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":453,"com.google.gson.JsonArrayTest.testRemove":286,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":395,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":482,"com.google.gson.functional.MapTest.testMapDeserialization":612,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":118,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":51,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":162,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":521,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":61,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":350,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":371,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":369,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":515,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":141,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":564,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":94,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":459,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":336,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":462,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":474,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":508,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":36,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":96,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":114,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":354,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":263,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":623,"com.google.gson.functional.PrimitiveTest.testShortSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":216,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":669,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":170,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":467,"com.google.gson.JsonParserTest.testParseEmptyString":192,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":650,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":633,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":152,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":202,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":38,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":401,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":609,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":646,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":82,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":204,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":222,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":281,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":175,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":718,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":11,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":572,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":85,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":678,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":106,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":333,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":518,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":526,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":148,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":176,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":471,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":527,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":653,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":545,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":532,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":337,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":470,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":565,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":398,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":601,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":368,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":418,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":3,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":639,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":415,"com.google.gson.stream.JsonWriterTest.testNullStringValue":301,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":716,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":232,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":591,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":628,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":673,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":66,"com.google.gson.JsonArrayTest.testSet":284,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":83,"com.google.gson.stream.JsonWriterTest.testEmptyObject":318,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":346,"com.google.gson.JsonPrimitiveTest.testEquals":272,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":329,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":370,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":251,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":246,"com.google.gson.functional.MapTest.testGeneralMapField":54,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":531,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":681,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":236,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":277,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":363,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":421,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":258,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":367,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":379,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":73,"com.google.gson.MixedStreamTest.testReadMixedStreamed":571,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":738,"com.google.gson.JsonObjectTest.testDeepCopy":198,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":380,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":708,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":345,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":438,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":561,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":321,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":657,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":171,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":466,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":582,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":146,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":615,"com.google.gson.JsonArrayTest.testDeepCopy":285,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":492,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":608,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":215,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":128,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":150,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":306,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":647,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":417,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":436,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":603,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":271,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":127,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":704,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":622,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":218,"com.google.gson.functional.ObjectTest.testNestedDeserialization":546,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":235,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":385,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":554,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":229,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":680,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":135,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":193,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":503,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":616,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":727,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":24,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":77,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":510,"com.google.gson.JavaSerializationTest.testListIsSerializable":584,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":209,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":223,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":44,"com.google.gson.functional.ObjectTest.testNullSerialization":458,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":35,"com.google.gson.stream.JsonWriterTest.testDoubles":324,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":724,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":610,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":357,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":449,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":15,"com.google.gson.functional.MapTest.testInterfaceTypeMap":224,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":695,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":237,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":377,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":629,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":105,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":331,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":579,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":463,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":472,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":641,"com.google.gson.MixedStreamTest.testWriteClosed":428,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":342,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":555,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":382,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":722,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":29,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":60,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":254,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":95,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":287,"com.google.gson.stream.JsonWriterTest.testLongs":303,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":147,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":378,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":383,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":40,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":660,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":512,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":344,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":178,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":183,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":484,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":252,"com.google.gson.stream.JsonWriterTest.testNumbers":16,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":275,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":393,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":682,"com.google.gson.JsonNullTest.testEqualsAndHashcode":430,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":452,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":706,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":392,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":404,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":253,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":433,"com.google.gson.functional.CollectionTest.testQueueDeserialization":599,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":454,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":658,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":2,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":730,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":487,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":570,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":351,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":541,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":478,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":59,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":544,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":340,"com.google.gson.functional.MapTest.testRawMapSerialization":55,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":158,"com.google.gson.JsonParserTest.testParseReader":188,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":715,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":107,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":34,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":91,"com.google.gson.JsonPrimitiveTest.testExponential":274,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":249,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":448,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":184,"com.google.gson.functional.PrimitiveTest.testByteSerialization":76,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":186,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":201,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":407,"com.google.gson.ObjectTypeAdapterTest.testSerialize":13,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":265,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":638,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":161,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":206,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":132,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":30,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":581,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":728,"com.google.gson.functional.MapTest.testMapWithQuotes":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":144,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":644,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":729,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":210,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":5,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":703,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":50,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":122,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":143,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":101,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":312,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":228,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":22,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":543,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":164,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":476,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":737,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":412,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":259,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":149,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":477,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":672,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":444,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":596,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":691,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":23,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":338,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":402,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":434,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":723,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":121,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":574,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":587,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":203,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":630,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":578,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":48,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":104,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":538,"com.google.gson.functional.ObjectTest.testNestedSerialization":92,"com.google.gson.JsonObjectTest.testAddingStringProperties":199,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":347,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":63,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":366,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":732,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":403,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":358,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":247,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":142,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":190,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":427,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":439,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":327,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":89,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":689,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":677,"com.google.gson.JsonPrimitiveTest.testBoolean":268,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":233,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":566,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":163,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":642,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":563,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":568,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":108,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":499,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":410,"com.google.gson.functional.CollectionTest.testSetSerialization":43,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":47,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":116,"com.google.gson.functional.StringTest.testStringValueSerialization":500,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":157,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":394,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":504,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":592,"com.google.gson.MixedStreamTest.testWriteInvalidState":426,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":690,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":384,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":645,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":411,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":648,"com.google.gson.stream.JsonWriterTest.testBooleans":300,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":145,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":154,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":739,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":388,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":289,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":556,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":10,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":464,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":485,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":166,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":266,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":611,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":314,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":130,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":686},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[0,1,2,3,4],"tindex":"b02292a1-3e45-11e6-b6d7-eb57446b04c5","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[5,6,7,8],"tindex":"b022e0c2-3e45-11e6-b6d7-c382b604dbb0","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163],"tindex":"b02307d3-3e45-11e6-b6d7-4b10fa754061","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"b02307d4-3e45-11e6-b6d7-6fa195db50d7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[164,165,166,167],"tindex":"b0232ee5-3e45-11e6-b6d7-cb196d7a80bf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"b02355f6-3e45-11e6-b6d7-dd49170c934d","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[168,169,9,10,170,171,172,173,11,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,14,190,191,192,193,194,195,196,197,198,199,200,201,17,202,23,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,54,225,226,227,228,229,230,231,232,233,234,98,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,122,250,251,252,253,254,138,139,140,255,141,256,257,142,258,144,259,260,261,262,263,264,265,266,267,268,162,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291],"tindex":"b02355f7-3e45-11e6-b6d7-9b50dd5ac24f","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target == null) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[169,9,10,11,174,175,176,292,293,294,295,13,296,14,191,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,15,322,323,324,325,16,326,327,195,200,17,18,328,329,202,330,331,332,19,20,333,21,334,22,23,24,25,26,27,28,29,30,31,32,33,335,34,336,337,338,35,339,36,37,340,38,39,341,40,342,343,41,344,42,345,43,44,210,211,213,45,46,47,214,48,218,346,347,51,348,52,349,350,351,352,353,53,354,355,224,356,357,54,358,55,359,360,361,56,226,362,363,364,365,57,366,367,58,59,368,369,370,371,372,373,374,375,376,60,377,61,378,379,63,380,72,80,82,84,86,381,87,382,383,384,88,89,90,91,92,385,386,93,94,387,95,96,97,98,388,389,390,391,392,393,394,395,396,397,99,100,101,102,103,398,399,104,105,106,107,108,109,110,111,400,112,113,114,115,116,117,118,119,245,247,401,120,121,122,123,124,125,126,127,402,403,128,404,129,405,406,407,408,130,409,410,131,132,133,411,412,134,413,414,135,136,137,138,139,140,141,142,143,259,145,415,416,417,146,418,419,420,421,422,147,148,149,150,151,423,424,152,153,154,155,156,425,157,265,266,158,159,426,160,427,428,429,163],"tindex":"b0237d08-3e45-11e6-b6d7-6d02e5f83e7d","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[430],"tindex":"b023a419-3e45-11e6-b6d7-051c152da577","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[431,432],"tindex":"b023a41a-3e45-11e6-b6d7-7d66b6f42e6f","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b023a41b-3e45-11e6-b6d7-cfb296aec910","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b023a41c-3e45-11e6-b6d7-15b17e25cda1","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"b023a41d-3e45-11e6-b6d7-e1f01d7617df","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[165,433,434,435,436],"tindex":"b023cb2e-3e45-11e6-b6d7-9fb405a64386","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[170,172,292,437,12,438,184,185,186,293,294,14,195,200,439,440,441,442,201,17,443,444,18,328,329,202,330,331,332,445,446,19,20,333,21,334,22,23,24,25,26,27,28,29,30,31,32,33,335,34,336,337,338,35,339,36,37,340,38,39,341,40,342,343,41,344,42,345,43,44,204,205,206,207,208,209,210,211,213,45,46,47,214,215,48,49,50,218,346,347,51,348,52,349,350,351,352,353,53,354,355,224,356,357,54,358,55,359,360,361,56,226,362,227,363,364,365,57,366,367,58,59,368,369,447,370,371,372,373,374,448,375,229,230,231,376,60,377,232,233,61,378,234,62,449,379,450,451,63,452,453,380,454,455,64,456,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,457,81,82,83,84,85,86,381,87,382,383,384,88,458,89,459,460,90,91,92,385,386,93,94,387,95,96,97,98,235,388,389,390,391,392,393,394,395,396,397,99,100,101,102,103,398,236,461,237,399,462,463,238,464,239,240,465,241,466,467,105,112,113,114,115,116,117,118,119,245,247,401,120,121,122,123,468,250,124,125,126,127,402,403,128,404,129,405,406,407,408,130,409,410,131,132,133,411,412,134,413,414,135,136,253,254,469,137,470,138,139,140,255,141,256,257,142,471,258,472,143,473,144,259,260,474,145,475,476,415,477,478,416,479,480,481,417,146,482,418,419,483,484,485,420,261,421,422,262,486,487,488,147,263,489,490,491,148,149,150,151,492,423,424,4,152,153,154,155,156,493,494,495,496,497,425,498,499,500,157,265,266,158,159,267,426,160,427,428,429,163],"tindex":"b023f23f-3e45-11e6-b6d7-fb618adb52f0","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (lenient) {\n                {\n                    if (lenient) {\n                        {\n                            if (lenient) {\n                                {\n                                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"b023f240-3e45-11e6-b6d7-374a8cd460f7","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"b023f241-3e45-11e6-b6d7-77faf72167d0","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"b023f242-3e45-11e6-b6d7-e7d715210ab3","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[98],"tindex":"b0241953-3e45-11e6-b6d7-6f060fb6aac6","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b0241954-3e45-11e6-b6d7-d54464a46edc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"b0241955-3e45-11e6-b6d7-a3072b523e1d","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"rawType","type":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"b0241956-3e45-11e6-b6d7-6f2c5094899d","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"context","java.sql.Timestamp.class":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[258,259,260,261,262,263],"tindex":"b0241957-3e45-11e6-b6d7-af6516e49432","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)"},"failures":[],"tindex":"b0241958-3e45-11e6-b6d7-93c4c0c4700d","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[292,293,294,13,14,0,2,501,17,18,331,502,19,503,20,504,333,505,21,334,22,506,24,25,26,27,28,507,29,30,31,508,32,509,33,335,34,336,510,337,338,35,511,512,339,513,36,514,515,37,38,41,516,42,43,205,206,208,209,517,518,213,46,47,346,347,219,220,221,222,223,351,519,224,357,54,359,226,362,363,520,364,365,57,58,59,368,521,522,370,371,523,372,374,375,524,229,230,231,376,60,377,232,233,525,526,61,378,234,527,86,381,528,529,87,530,531,382,532,533,383,534,88,535,89,536,537,90,538,91,92,539,386,540,541,93,542,94,387,543,95,544,545,546,547,96,548,549,97,98,388,389,390,391,550,392,393,394,395,396,397,99,101,102,103,399,551,552,553,114,115,119,244,245,246,247,249,401,120,121,122,123,250,124,554,125,555,251,126,127,402,556,128,133,557,411,413,414,135,136,253,254,558,559,137,560,138,561,139,140,255,141,256,257,142,562,563,564,565,475,566,146,422,147,148,567,568,149,150,569,570,151,423,424,152,153,154,155,156,157,158,159,426,428,571,572,573,574,575,576,577,578,579,580],"tindex":"b0244069-3e45-11e6-b6d7-f990af869099","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (!serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[23,205,206,207,208,209,227,230,232,233,234,250,253,254,257],"tindex":"b024406a-3e45-11e6-b6d7-3348620f2353","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (!(src instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[],"tindex":"b024406b-3e45-11e6-b6d7-3b839bfbcfe5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"b024677c-3e45-11e6-b6d7-7f1932a4aa92","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"b024677d-3e45-11e6-b6d7-bdc9f916091b","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[581,292,437,12,438,184,185,186,293,294,14,439,582,583,584,440,441,442,585,201,501,17,586,587,588,18,328,329,202,330,589,590,331,502,332,445,446,19,503,20,504,333,505,21,334,22,506,23,24,25,26,27,28,507,29,30,31,508,32,203,509,33,335,34,336,510,337,338,35,511,512,339,513,36,514,515,37,340,38,39,591,592,593,341,40,342,343,41,594,595,344,596,516,42,345,597,43,44,598,204,599,205,206,207,208,209,210,517,211,600,212,518,213,45,46,601,47,214,215,216,48,217,49,50,218,346,347,219,220,221,222,223,602,603,604,605,51,606,607,608,348,52,609,610,349,611,350,612,351,613,614,615,616,352,353,53,617,519,354,355,618,224,356,357,54,358,55,619,359,360,620,361,225,621,56,226,362,227,363,520,364,365,57,366,367,58,59,368,521,522,369,228,447,370,371,523,372,373,374,448,622,375,524,229,230,231,376,60,377,232,233,525,526,61,378,234,623,624,625,62,626,449,627,628,629,630,631,379,632,633,450,634,635,636,637,638,639,640,451,63,641,642,643,644,645,452,646,453,380,647,648,454,649,650,455,651,64,456,652,653,65,66,654,655,656,67,657,658,659,660,661,662,663,664,68,665,69,666,70,71,667,668,72,669,670,73,671,74,672,527,673,75,76,77,78,79,80,457,674,675,676,81,677,82,678,679,680,83,84,681,85,682,683,86,381,528,529,87,530,531,382,532,533,383,534,684,88,535,89,536,459,537,460,90,538,91,92,385,539,386,540,541,685,93,542,94,387,543,95,544,545,546,547,96,548,549,97,98,235,388,389,390,391,550,392,393,394,395,396,397,99,100,101,102,103,398,236,461,237,399,462,463,238,464,239,240,465,241,466,467,686,551,552,553,687,112,113,114,115,116,117,118,119,243,244,245,246,247,248,249,401,120,121,122,123,468,250,124,688,554,125,555,251,689,126,127,252,402,556,403,128,404,129,690,405,406,407,408,130,691,692,409,410,131,693,694,695,132,696,133,557,411,697,412,698,134,699,413,414,135,136,253,254,469,558,559,137,560,700,701,470,702,138,703,561,139,140,255,141,256,257,142,562,704,471,258,472,7,563,564,143,705,473,144,706,259,707,260,474,565,708,145,709,475,710,476,415,477,478,416,566,479,711,480,481,712,417,713,146,482,418,419,714,483,715,716,484,717,485,420,718,261,421,719,422,262,486,487,488,147,720,721,263,489,264,490,722,491,148,567,568,149,150,569,570,151,723,724,492,423,424,4,152,153,154,155,156,725,493,494,495,496,497,726,727,425,728,498,729,730,731,499,732,733,500,157,158,734,159,426,160,427,428,571,572,429,163,735],"tindex":"b024677e-3e45-11e6-b6d7-89b06f32894f","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:346","type":"CtBinaryOperatorImpl","sourcecode":"context == nonempty"},"failures":[],"tindex":"b0248e8f-3e45-11e6-b6d7-9d8277624567","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == dateStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"dateStyle","nonempty":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[292,293,294,13,14,501,17,18,331,502,19,20,504,505,21,334,22,506,24,25,26,27,28,507,29,30,31,508,32,509,33,335,34,336,510,337,338,35,511,512,339,513,36,514,515,37,38,41,516,42,43,205,206,208,209,517,518,213,46,47,346,347,219,220,221,222,223,351,519,224,357,54,359,226,362,363,520,364,365,57,58,59,368,521,522,370,371,523,372,374,375,524,229,230,231,376,60,377,232,233,525,526,61,378,234,527,86,381,528,529,87,530,531,382,532,533,383,534,88,535,89,536,537,90,538,91,92,539,386,540,541,93,542,94,387,543,95,544,545,546,547,96,548,549,97,98,388,389,390,391,550,392,393,394,395,396,397,99,101,102,103,399,551,552,553,114,115,119,244,245,246,247,249,401,120,121,122,123,250,124,554,125,555,251,126,127,402,556,128,133,557,411,413,414,135,136,253,254,558,559,137,560,138,561,139,140,255,141,256,257,142,562,563,564,565,475,566,146,422,147,148,567,568,149,150,569,570,151,423,424,152,153,154,155,156,157,158,159,426,428,571,572],"tindex":"b0248e90-3e45-11e6-b6d7-4bc888815637","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (deserialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b024b5a1-3e45-11e6-b6d7-c76d1a43ce93","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b024b5a2-3e45-11e6-b6d7-e35c8a54af37","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b024dcb3-3e45-11e6-b6d7-235b88dae7fe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b024dcb4-3e45-11e6-b6d7-b51fc2b30714","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b024dcb5-3e45-11e6-b6d7-e9c095fac44f","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b024dcb6-3e45-11e6-b6d7-5d3d844aff8c","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"b024dcb7-3e45-11e6-b6d7-3f376730c439","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if ((o instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"b02503c8-3e45-11e6-b6d7-3b8b649e55f2","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if ((property.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"b02503c9-3e45-11e6-b6d7-a931f62c578f","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b02503ca-3e45-11e6-b6d7-eb868b76f562","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"b02503cb-3e45-11e6-b6d7-312e8ddb2982","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[736,431,432],"tindex":"b0252adc-3e45-11e6-b6d7-8199bc777425","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from != from) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"from","type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"b0252add-3e45-11e6-b6d7-01a9ae06aed0","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[32,33,99,101,103,413,414,253],"tindex":"b02551ee-3e45-11e6-b6d7-cfc0fb4bb42a","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:831","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[191,193,284,285],"tindex":"b02551ef-3e45-11e6-b6d7-b38cb89b533c","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_LONG":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[475],"tindex":"b02551f0-3e45-11e6-b6d7-0dd4a235137a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"b02551f1-3e45-11e6-b6d7-0174bf5470c9","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"other","value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"b02551f2-3e45-11e6-b6d7-375fcf27950e","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b0257903-3e45-11e6-b6d7-a3b2750a9440","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (!(src instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b0257904-3e45-11e6-b6d7-5fffada7a3c2","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:170","type":"CtBinaryOperatorImpl","sourcecode":"comparison < 0"},"failures":[],"tindex":"b0257905-3e45-11e6-b6d7-2df04418fce4","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"b0257906-3e45-11e6-b6d7-e53ff6209a3e","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b0257907-3e45-11e6-b6d7-9d90af8f4db4","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"b0257908-3e45-11e6-b6d7-c9277a32adf6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == raw) {\n        {\n            if (raw.isAssignableFrom(raw)) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b025a019-3e45-11e6-b6d7-7bdbe0e36a9e","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if ((key != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[301,343,351,224,357,226,368,369,370,371,448,375,376,377,378,394,410,412,475,422],"tindex":"b025a01a-3e45-11e6-b6d7-31d3e54a2efc","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b025a01b-3e45-11e6-b6d7-3f51d4925520","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[581,292,437,12,438,23,203,204,205,206,207,208,209,210,517,211,600,212,518,213,45,46,601,47,214,215,216,48,217,49,218,51,226,227,228,447,373,236,237,238,464,239,240,241,243,244,245,246,247,248,249,252,142,562,263],"tindex":"b025a01c-3e45-11e6-b6d7-9b29c706d5ad","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"b025c72d-3e45-11e6-b6d7-a511577f4b7c","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b025c72e-3e45-11e6-b6d7-7f2ca6a354e1","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"b025c72f-3e45-11e6-b6d7-19e79ceb35b6","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter instanceof java.lang.reflect.WildcardType) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"b025c730-3e45-11e6-b6d7-63e12513a28f","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"b025c731-3e45-11e6-b6d7-3f7f918e820c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (!(src instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (src == null) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[12,438,439,582,583,584,440,441,442,501,586,587,328,329,202,330,589,590,502,445,503,504,505,22,506,25,507,29,30,31,508,203,509,34,511,512,513,514,515,37,38,591,592,593,594,595,596,516,597,598,599,517,600,212,518,601,216,217,50,603,605,606,607,608,609,610,612,613,614,615,616,617,618,619,620,621,520,57,367,58,59,521,522,228,523,622,524,525,526,625,626,630,631,632,633,450,640,643,644,646,648,649,650,651,654,658,659,661,662,663,664,667,668,669,670,671,527,673,674,675,677,679,682,381,528,529,530,531,532,533,534,535,737,536,537,538,539,540,541,685,542,543,544,545,546,547,548,549,98,235,388,389,390,391,550,392,393,395,396,397,398,236,237,462,238,464,239,240,465,241,466,467,105,686,551,552,553,687,243,244,245,246,247,248,249,401,120,121,122,688,554,555,689,126,252,403,128,691,692,693,694,695,696,557,697,698,699,558,559,560,700,701,702,561,139,140,562,704,258,7,563,705,706,259,707,260,565,708,709,475,710,566,711,712,713,482,419,714,715,716,484,717,719,262,487,720,721,264,722,567,568,569,570,723,724,725,494,496,726,727,728,729,730,731,732,733,735],"tindex":"b025ee42-3e45-11e6-b6d7-9f8a7d1d2b79","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof java.lang.Class<?>) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[169,9,10,11,174,175,176,292,12,438,293,294,295,13,296,14,191,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,15,322,323,324,325,16,326,327,195,200,439,440,441,442,201,17,443,444,18,328,329,202,330,331,332,445,446,19,20,333,21,334,22,23,24,25,26,27,28,29,30,31,32,33,335,34,336,337,338,35,339,36,37,340,38,39,341,40,342,343,41,344,42,345,43,44,204,210,211,213,45,46,47,214,215,48,49,50,218,346,347,51,348,52,349,350,351,352,353,53,354,355,224,356,357,54,358,55,359,360,361,56,226,362,363,364,365,57,366,367,58,59,368,369,447,370,371,372,373,374,448,375,376,60,377,61,378,62,379,450,63,452,380,454,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,381,87,382,383,384,88,458,89,459,460,90,91,92,385,386,93,94,387,95,96,97,98,235,388,389,390,391,392,393,394,395,396,397,99,100,101,102,103,398,236,461,237,399,462,238,464,239,240,465,241,466,467,104,105,106,107,108,109,110,111,400,112,113,114,115,116,117,118,119,245,247,401,120,121,122,123,468,124,125,126,127,402,403,128,404,129,405,406,407,408,130,409,410,131,132,133,411,412,134,413,414,135,136,469,137,470,138,139,140,141,142,471,258,472,143,473,144,259,260,474,145,475,476,415,477,478,416,479,480,481,417,146,482,418,419,483,484,485,420,261,421,422,262,486,487,488,147,263,489,490,491,148,149,150,151,492,423,424,4,152,153,154,155,156,493,494,495,496,497,425,498,499,500,157,265,266,158,159,267,426,160,427,428,161,162,429,163],"tindex":"b025ee43-3e45-11e6-b6d7-4d16d2e1b481","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[67,70,71,77,81,83,160],"tindex":"b0261554-3e45-11e6-b6d7-0d5fa896716b","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[],"tindex":"b0261555-3e45-11e6-b6d7-d5bbfce0c4cb","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (lenient) {\n                {\n                    if (lenient) {\n                        {\n                            if (lenient) {\n                                {\n                                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"b0261556-3e45-11e6-b6d7-9588a0d17a7d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == raw) {\n        {\n            if (raw.isAssignableFrom(raw)) {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b0263c67-3e45-11e6-b6d7-3b0b67c975b3","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"b0263c68-3e45-11e6-b6d7-69682dcaa518","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b0263c69-3e45-11e6-b6d7-91005f655a4c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"b0263c6a-3e45-11e6-b6d7-bff6a104a278","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (lenient) {\n                {\n                    if (lenient) {\n                        {\n                            if (lenient) {\n                                {\n                                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[337,512,153],"tindex":"b0263c6b-3e45-11e6-b6d7-bd00572c9900","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[738,739],"tindex":"b0263c6c-3e45-11e6-b6d7-47a201be730e","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[403,128],"tindex":"b026637d-3e45-11e6-b6d7-ebcf9e9bde9f","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"b026637e-3e45-11e6-b6d7-67c8128e51ad","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[14,300,306,307,309,314,315,316,200,441,442,17,37,42,49,355,57,58,59,61,454,92,401,120,128,140,144],"tindex":"b026637f-3e45-11e6-b6d7-45e22a9fe886","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b0266380-3e45-11e6-b6d7-6dc9f08d2dc2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:383","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"b0266381-3e45-11e6-b6d7-ed8edb63f4f1","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum == minimum) || (p == minimum)) {\n        {\n            if (minimum == minimum) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n                    int -= int;\n                    if ((int) != (int)) {\n                        int -= int;\n                        java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n                    } else {\n                        int = 0;\n                    }\n                    int = 0;\n                    int int;\n                    while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                        int += total;\n                        if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                            (int)++;\n                            (int)++;\n                            minimum++;\n                        } \n                        if ((int) >= minimum) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"b0266382-3e45-11e6-b6d7-2576cdf97b46","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"b0268a93-3e45-11e6-b6d7-137368bdd9b2","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"b0268a94-3e45-11e6-b6d7-3f293253e617","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            if (lenient) {\n                {\n                    if (lenient) {\n                        {\n                            if (lenient) {\n                                {\n                                    com.google.gson.stream.JsonWriter.this.boolean = lenient;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"b0268a95-3e45-11e6-b6d7-af6eb6e83f02","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"b0268a96-3e45-11e6-b6d7-11f5343651f5","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1254","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME))"},"failures":[],"tindex":"b0268a97-3e45-11e6-b6d7-81405c865ea1","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum == minimum) || (p == minimum)) {\n        {\n            if (minimum == minimum) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n                    int -= int;\n                    if ((int) != (int)) {\n                        int -= int;\n                        java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n                    } else {\n                        int = 0;\n                    }\n                    int = 0;\n                    int int;\n                    while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                        int += total;\n                        if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                            (int)++;\n                            (int)++;\n                            minimum++;\n                        } \n                        if ((int) >= minimum) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"minimum","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[],"tindex":"b026b1a8-3e45-11e6-b6d7-5f3864f4b038","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b026b1a9-3e45-11e6-b6d7-61526bbb5e6e","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604183/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":89,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
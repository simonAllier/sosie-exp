{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":272,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":64,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":123,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":149,"com.google.gson.MixedStreamTest.testWriteLenient":4,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":184,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":200,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":124,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":134,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":147,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":208,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":87,"com.google.gson.functional.ObjectTest.testSingletonLists":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":180,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":209,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":65,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":313,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":8,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":72,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":55,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":371,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":34,"com.google.gson.functional.EnumTest.testEnumCaseMapping":146,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":12,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":63,"com.google.gson.functional.JsonTreeTest.testToJsonTree":325,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":60,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":311,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":163,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":380,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":351,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":318,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":256,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":369,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":32,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":288,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":368,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":194,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":337,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":248,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":381,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":242,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":46,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":179,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":361,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":19,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":121,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":249,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":42,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":225,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":15,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":27,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":153,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":304,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":174,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":287,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":88,"com.google.gson.functional.EnumTest.testEnumSet":140,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":216,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":290,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":105,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":221,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":93,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":370,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":29,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":316,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":252,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":28,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":326,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":359,"com.google.gson.functional.MapTest.testMapSerialization":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":273,"com.google.gson.functional.MapTest.testSerializeMaps":104,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":198,"com.google.gson.functional.MapTest.testComplexKeysSerialization":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":18,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":320,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":358,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":314,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":58,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":292,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":122,"com.google.gson.functional.PrettyPrintingTest.testMap":56,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":344,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":274,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":7,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":382,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":69,"com.google.gson.functional.MapTest.testMapSerializationEmpty":120,"com.google.gson.functional.CollectionTest.testQueueSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":171,"com.google.gson.functional.MapTest.testMapOfMapSerialization":109,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":240,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":245,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":298,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":66,"com.google.gson.functional.FieldNamingTest.testIdentity":199,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":281,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":152,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":202,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":210,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":324,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":372,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":67,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":285,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":243,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":193,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":268,"com.google.gson.functional.MapTest.testMapSubclassSerialization":103,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":259,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":206,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":1,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":79,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":346,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":92,"com.google.gson.functional.EnumTest.testEnumSubclass":143,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":246,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":9,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":230,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":284,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":291,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":155,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":302,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":363,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":188,"com.google.gson.MixedStreamTest.testWriteNulls":2,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":48,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":44,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":319,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":295,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":278,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":68,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":112,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":84,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":190,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":258,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":76,"com.google.gson.JsonParserTest.testParseMixedArray":16,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":233,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":375,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":275,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":21,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":237,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":61,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":102,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":11,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":106,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":309,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":353,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":350,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":323,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":219,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":328,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":347,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":164,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":154,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":333,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":111,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":192,"com.google.gson.functional.PrimitiveTest.testShortSerialization":257,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":355,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":36,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":166,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":195,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":142,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":126,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":205,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":261,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":264,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":377,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":151,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":228,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":293,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":145,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":329,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":342,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":178,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":360,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":356,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":307,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":244,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":262,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":37,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":141,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":352,"com.google.gson.functional.MapTest.testGeneralMapField":116,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":41,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":50,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":286,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":185,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":157,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":232,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":336,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":251,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":238,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":135,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":176,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":296,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":75,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":82,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":175,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":300,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":73,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":301,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":277,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":91,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":255,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":374,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":204,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":137,"com.google.gson.functional.ObjectTest.testNullSerialization":217,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":331,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":115,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":231,"com.google.gson.functional.MapTest.testInterfaceTypeMap":113,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":384,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":345,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":306,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":78,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":158,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":31,"com.google.gson.MixedStreamTest.testWriteClosed":6,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":130,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":213,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":96,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":280,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":191,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":214,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":310,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":129,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":83,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":181,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":265,"com.google.gson.stream.JsonWriterTest.testNumbers":385,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":236,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":322,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":39,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":321,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":279,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":189,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":170,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":338,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":125,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":118,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":378,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":222,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":327,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":357,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":365,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":43,"com.google.gson.functional.PrimitiveTest.testByteSerialization":254,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":312,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":367,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":340,"com.google.gson.ObjectTypeAdapterTest.testSerialize":383,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":334,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":10,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":201,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":49,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":196,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":97,"com.google.gson.functional.MapTest.testMapWithQuotes":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":289,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":299,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":159,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":86,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":362,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":89,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":247,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":162,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":169,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":203,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":315,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":187,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":330,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":283,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":297,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":376,"com.google.gson.functional.ObjectTest.testNestedSerialization":223,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":38,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":235,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":335,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":74,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":117,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":77,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":54,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":5,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":14,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":308,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":13,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":379,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":70,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":47,"com.google.gson.functional.CollectionTest.testSetSerialization":136,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":59,"com.google.gson.functional.StringTest.testStringValueSerialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":294,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":339,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":266,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":215,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":51,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":165,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":197,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":317,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":20,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":30,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":182,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":341,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":45},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8903c23-3f09-11e6-831c-3348bce1e79f","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"c890b154-3f09-11e6-831c-4fd9036854fd","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[19,20,24,102],"tindex":"c890d865-3f09-11e6-831c-19cfbbef44e5","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:857","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c890ff76-3f09-11e6-831c-017f710579dc","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_TRUE":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,12,13,14,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,273,274,275,276,277,278,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,304,305,306,309,310,312,313,314,315,316,317,318,319,320,321,323,326,327,328,374,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,363,364,368,369,370,371,372,373],"tindex":"c890ff77-3f09-11e6-831c-c9a4237cd74a","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"c8912688-3f09-11e6-831c-cb8828642c52","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8914d99-3f09-11e6-831c-4591c29fd79b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[375],"tindex":"c8914d9a-3f09-11e6-831c-4d7dee6d9e1e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8919bbb-3f09-11e6-831c-532e949b8316","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (closeBracket == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"closeBracket"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c8919bbc-3f09-11e6-831c-23f83153eaec","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c891c2cd-3f09-11e6-831c-b1ecf9f2235f","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl"},"failures":[375],"tindex":"c891c2ce-3f09-11e6-831c-037f346fbd4f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c89210ef-3f09-11e6-831c-55bbc8fa23f5","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[13,15,49,50,58,62,72,75,81,95,116,124,126,132,134,209,210,212,218,221,222,223,226,227,229,244,246,261,264,270,272,273,274,281,282,305,309,313,316,322,323,324,325,327,334,337,338,339],"tindex":"c8923800-3f09-11e6-831c-5f6162fc9f45","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"c8923801-3f09-11e6-831c-8db5432d4d06","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8925f12-3f09-11e6-831c-b11d9b81481a","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[74,75],"tindex":"c8925f13-3f09-11e6-831c-092c056247b1","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl"},"failures":[],"tindex":"c8925f14-3f09-11e6-831c-7f3c2049481c","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.get();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"c8925f15-3f09-11e6-831c-3dbac1f22d27","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType.getRawType().equals(keyType.getRawType())) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType","to":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8928626-3f09-11e6-831c-651b79f7ad89","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c8928627-3f09-11e6-831c-493e4747a9eb","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key != null) && ((key.peek()) != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,4,10,11,13,15,19,20,22,40,45,48,49,50,53,54,55,56,57,58,59,60,61,62,72,75,376,78,377,378,379,380,381,382,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,110,116,118,122,124,126,127,129,132,134,136,137,139,149,150,152,154,155,159,161,165,176,191,195,196,197,198,199,206,207,209,210,212,216,218,221,222,223,226,227,229,230,235,241,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,260,261,262,263,264,270,273,274,277,278,281,282,292,293,294,297,298,299,305,309,313,316,323,327,331,333,334,337,338,339,359,360,361,383,384,385,372],"tindex":"c8928628-3f09-11e6-831c-d53fdacbf63c","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c892ad39-3f09-11e6-831c-5fdac1a843c1","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c892ad3a-3f09-11e6-831c-4d4e5787143e","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321725537/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
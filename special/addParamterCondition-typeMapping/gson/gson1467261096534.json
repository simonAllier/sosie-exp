{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":11,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":407,"com.google.gson.functional.StringTest.testStringValueDeserialization":405,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":653,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":88,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":348,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":622,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":182,"com.google.gson.stream.JsonWriterTest.testRepeatedName":645,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":265,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":559,"com.google.gson.MixedStreamTest.testWriteLenient":110,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":423,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":357,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":13,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":571,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":523,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":588,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":230,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":390,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":467,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":395,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":191,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":302,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":474,"com.google.gson.functional.ObjectTest.testSingletonLists":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":349,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":470,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":175,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":408,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":685,"com.google.gson.stream.JsonWriterTest.testStrings":666,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":75,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":375,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":367,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":538,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":100,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":233,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":628,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":677,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":421,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":222,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":595,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":658,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":710,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":500,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":57,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":167,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":98,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":39,"com.google.gson.functional.EnumTest.testEnumCaseMapping":389,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":115,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":406,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":166,"com.google.gson.functional.JsonTreeTest.testToJsonTree":404,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":369,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":3,"com.google.gson.stream.JsonWriterTest.testNulls":642,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":714,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":674,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":444,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":341,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":708,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":85,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":51,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":581,"com.google.gson.functional.ObjectTest.testNullDeserialization":701,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":561,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":418,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":698,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":534,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":243,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":631,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":183,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":539,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":52,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":97,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":164,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":547,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":630,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":248,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":459,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":247,"com.google.gson.JsonParserTest.testParseString":46,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":366,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":227,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":675,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":206,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":322,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":440,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":550,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":347,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":219,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":424,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":494,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":694,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":338,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":33,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":687,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":63,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":512,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":228,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":220,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":434,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":546,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":147,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":529,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":610,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":661,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":40,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":187,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":272,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":621,"com.google.gson.metrics.PerformanceTest.testDummy":702,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":471,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":287,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":300,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":17,"com.google.gson.stream.JsonWriterTest.testEmptyArray":635,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":372,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":514,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":355,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":340,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":163,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":626,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":564,"com.google.gson.functional.CollectionTest.testSetDeserialization":587,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":396,"com.google.gson.functional.EnumTest.testEnumSet":380,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":533,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":607,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":211,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":328,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":490,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":540,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":224,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":120,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":235,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":657,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":94,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":379,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":236,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":624,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":180,"com.google.gson.functional.MapTest.testHashMapDeserialization":487,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":353,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":141,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":148,"com.google.gson.MixedStreamTest.testReadNulls":704,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":273,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":378,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":463,"com.google.gson.functional.MapTest.testSortedMap":503,"com.google.gson.functional.MapTest.testMapSerialization":499,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":140,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":699,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":217,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":447,"com.google.gson.functional.MapTest.testSerializeMaps":489,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":569,"com.google.gson.functional.MapTest.testComplexKeysSerialization":510,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":606,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":513,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":686,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":454,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":387,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":563,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":483,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":697,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":285,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":678,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":385,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":598,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":709,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":267,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":549,"com.google.gson.functional.MapTest.testStringKeyDeserialization":41,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":451,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":67,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":250,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":186,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":515,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":181,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":398,"com.google.gson.functional.PrettyPrintingTest.testMap":596,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":574,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":318,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":376,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":99,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":453,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":676,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":411,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":415,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":335,"com.google.gson.functional.MapTest.testMapSerializationEmpty":511,"com.google.gson.functional.CollectionTest.testQueueSerialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":212,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":662,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":664,"com.google.gson.functional.MapTest.testMapOfMapSerialization":498,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":203,"com.google.gson.JavaSerializationTest.testMapIsSerializable":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":343,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":584,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":637,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":131,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":76,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":409,"com.google.gson.functional.FieldNamingTest.testIdentity":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":18,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":123,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":648,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":551,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":31,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":60,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":271,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":520,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":640,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":169,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":58,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":61,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":410,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":209,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":359,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":330,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":368,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":485,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":246,"com.google.gson.functional.MapTest.testMapSubclassSerialization":488,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":28,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":308,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":609,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":108,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":149,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":399,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":317,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":425,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":374,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":298,"com.google.gson.functional.EnumTest.testEnumSubclass":383,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":223,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":101,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":536,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":168,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":160,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":66,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":171,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":519,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":649,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":207,"com.google.gson.stream.JsonWriterTest.testTwoNames":636,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":518,"com.google.gson.stream.JsonWriterTest.testNullName":643,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":20,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":443,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":614,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":54,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":213,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":532,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":205,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":270,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":651,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":362,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":522,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":486,"com.google.gson.MixedStreamTest.testWriteNulls":668,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":442,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":646,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":427,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":436,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":562,"com.google.gson.CommentsTest.testParseComments":611,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":71,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":478,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":524,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":226,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":449,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":89,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":413,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":502,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":705,"com.google.gson.MixedStreamTest.testReadInvalidState":107,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":307,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":364,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":42,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":684,"com.google.gson.JsonParserTest.testParseMixedArray":681,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":179,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":617,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":132,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":712,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":196,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":345,"com.google.gson.functional.MapTest.testMapDeserialization":37,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":339,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":601,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":87,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":473,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":683,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":292,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":492,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":477,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":475,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":12,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":286,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":384,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":315,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":537,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":552,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":275,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":400,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":324,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":306,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":284,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":516,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":501,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":597,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":79,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":73,"com.google.gson.functional.PrimitiveTest.testShortSerialization":244,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":232,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":605,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":202,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":696,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":231,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":329,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":566,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":382,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":53,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":573,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":50,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":391,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":35,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":195,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":252,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":32,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":691,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":356,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":484,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":114,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":689,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":259,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":671,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":269,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":65,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":291,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":553,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":311,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":692,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":238,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":208,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":557,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":528,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":388,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":277,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":325,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":69,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":346,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":479,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":185,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":466,"com.google.gson.stream.JsonWriterTest.testNullStringValue":639,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":351,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":22,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":239,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":210,"com.google.gson.JsonArrayTest.testSet":711,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":256,"com.google.gson.stream.JsonWriterTest.testEmptyObject":656,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":136,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":381,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":145,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":43,"com.google.gson.functional.MapTest.testGeneralMapField":507,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":526,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":433,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":258,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":80,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":161,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":358,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":505,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":312,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":458,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":234,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":48,"com.google.gson.MixedStreamTest.testReadMixedStreamed":113,"com.google.gson.JsonObjectTest.testDeepCopy":6,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":326,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":495,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":59,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":465,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":589,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":659,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":215,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":604,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":344,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":38,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":264,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":34,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":72,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":257,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":462,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":154,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":644,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":198,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":690,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":342,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":625,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":428,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":310,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":583,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":77,"com.google.gson.functional.ObjectTest.testNestedDeserialization":558,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":294,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":544,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":142,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":603,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":134,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":266,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":412,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":496,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":242,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":276,"com.google.gson.JavaSerializationTest.testListIsSerializable":104,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":426,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":592,"com.google.gson.functional.ObjectTest.testNullSerialization":680,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":279,"com.google.gson.stream.JsonWriterTest.testDoubles":663,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":263,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":36,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":506,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":445,"com.google.gson.functional.MapTest.testInterfaceTypeMap":504,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":660,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":81,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":289,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":693,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":173,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":386,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":670,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":283,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":401,"com.google.gson.MixedStreamTest.testReadClosed":703,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":96,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":189,"com.google.gson.MixedStreamTest.testWriteClosed":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":144,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":580,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":371,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":527,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":623,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":303,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":288,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":10,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":133,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":555,"com.google.gson.stream.JsonWriterTest.testLongs":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":365,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":293,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":530,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":579,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":155,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":218,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":281,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":585,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":352,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":8,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":127,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":260,"com.google.gson.stream.JsonWriterTest.testNumbers":665,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":194,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":320,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":430,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":565,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":9,"com.google.gson.functional.CollectionTest.testQueueDeserialization":594,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":200,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":216,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":417,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":139,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":363,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":493,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":548,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":334,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":460,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":556,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":572,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":106,"com.google.gson.functional.MapTest.testRawMapSerialization":509,"com.google.gson.JsonParserTest.testParseReader":45,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":350,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":672,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":274,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":542,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":92,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":481,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":47,"com.google.gson.functional.PrimitiveTest.testByteSerialization":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":373,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":435,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":613,"com.google.gson.ObjectTypeAdapterTest.testSerialize":629,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":632,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":184,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":682,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":14,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":446,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":567,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":55,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":304,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":414,"com.google.gson.functional.MapTest.testMapWithQuotes":497,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":319,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":416,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":62,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":464,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":262,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":316,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":394,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":650,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":84,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":295,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":554,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":707,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":602,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":331,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":700,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":452,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":321,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":15,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":333,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":237,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":679,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":586,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":438,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":361,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":431,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":278,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":125,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":158,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":620,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":29,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":713,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":26,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":174,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":616,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":74,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":669,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":541,"com.google.gson.JsonObjectTest.testAddingStringProperties":7,"com.google.gson.functional.ObjectTest.testNestedSerialization":543,"com.google.gson.internal.LinkedTreeMapTest.testClear":695,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":137,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":188,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":420,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":457,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":461,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":508,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":44,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":82,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":105,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":111,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":667,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":122,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":535,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":251,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":336,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":116,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":190,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":706,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":314,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":545,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":152,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":673,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":419,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":441,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":162,"com.google.gson.functional.CollectionTest.testSetSerialization":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":70,"com.google.gson.functional.StringTest.testStringValueSerialization":422,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":599,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":159,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":128,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":268,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":576,"com.google.gson.MixedStreamTest.testWriteInvalidState":109,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":432,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":634,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":193,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":199,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":450,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":146,"com.google.gson.stream.JsonWriterTest.testBooleans":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":327,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":49,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":568,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":560,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":1,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":126,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":95,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":688,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":354,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":633,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":491,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":652,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":117,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":437},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"88099e7d-3e7b-11e6-8670-ad42585c88c5","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"880a13ae-3e7b-11e6-8670-d373d6f92ba9","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"880a13af-3e7b-11e6-8670-658725dd1ff7","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if ((!create) && (!create)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"create","skipSerialize":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"880a61d0-3e7b-11e6-8670-87c788a41002","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"880a88e1-3e7b-11e6-8670-4940831b14a7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[55,56,57,58,59,8,13,14,60,15,16,61,62,63,64,17,18,65,66,67,68,69,70,71,72,73,74,75,76,77,78,26,79,80,81,82,83,84,85,86,87,88,89,90,42,43,44,91,92,93,94,95,96,97,98],"tindex":"880a88e2-3e7b-11e6-8670-bd66ac6cb55f","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[99,100,101,102,103,104,55,56,57,58,59,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,8,125,126,127,128,129,130,131,132,133,134,135,9,10,136,137,138,139,11,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,13,14,60,15,16,160,61,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,62,63,64,17,18,65,66,67,68,69,70,71,72,73,74,75,76,262,77,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,19,20,21,287,288,289,22,23,290,291,292,293,24,25,294,295,296,78,297,298,299,300,301,302,303,304,305,306,307,26,308,309,310,311,312,313,27,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,79,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,28,29,392,393,394,395,396,397,80,398,81,399,400,401,30,402,403,31,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,32,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,33,82,83,467,468,469,470,471,472,473,474,475,84,85,476,477,478,479,86,480,481,482,483,484,485,87,486,487,34,488,489,35,36,490,491,492,37,493,494,495,38,496,497,498,499,39,500,501,502,503,504,505,506,507,508,509,40,510,511,41,512,513,514,515,88,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,89,90,42,43,44,91,92,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,93,594,595,596,597,598,599,600,601,602,94,95,96,97,603,98,604,605,606,607,608,609,610,611,47,612,613,614,615],"tindex":"880aaff3-3e7b-11e6-8670-43732dcfb30c","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880afe14-3e7b-11e6-8670-8fd510c19848","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"880afe15-3e7b-11e6-8670-8b2244e51d67","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880b2526-3e7b-11e6-8670-67145fc6e6de","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"880b2527-3e7b-11e6-8670-014f3164b4fe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880b2528-3e7b-11e6-8670-61dc66219932","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"880b4c39-3e7b-11e6-8670-d92667dc0e28","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"880b4c3a-3e7b-11e6-8670-c12c49db9f25","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"880b4c3b-3e7b-11e6-8670-a59012f38214","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880b734c-3e7b-11e6-8670-6792e0a4157b","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[616],"tindex":"880b734d-3e7b-11e6-8670-f1a4756bc08a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"880b9a5e-3e7b-11e6-8670-13797535493f","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"880b9a5f-3e7b-11e6-8670-f11dc3cc542b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"880b9a60-3e7b-11e6-8670-7b7b040b95e6","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[],"tindex":"880b9a61-3e7b-11e6-8670-6999cf004753","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl","sourcecode":"!(hasNext())"},"failures":[],"tindex":"880b9a62-3e7b-11e6-8670-5b66c01b05a0","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == a) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:882","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NULL)"},"failures":[],"tindex":"880b9a63-3e7b-11e6-8670-1b34b62c3dce","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NULL":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"880bc174-3e7b-11e6-8670-d53962a36026","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880bc175-3e7b-11e6-8670-6d7bbb53f356","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"880bc176-3e7b-11e6-8670-e9977e50d179","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"880bc177-3e7b-11e6-8670-f98d613f67bf","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"880bc178-3e7b-11e6-8670-25df205a3aad","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl","sourcecode":"target instanceof java.lang.String"},"failures":[],"tindex":"880be889-3e7b-11e6-8670-6976e927a6fe","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.String) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[617,618,619,620,621,622,623,624,625,616],"tindex":"880be88a-3e7b-11e6-8670-6f47589f38df","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if ((!create) && (!create)) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"create","lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"880c0f9b-3e7b-11e6-8670-27a21c2d8ddd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((o.peek()) == o) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:366","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 0"},"failures":[],"tindex":"880c0f9c-3e7b-11e6-8670-47063d23d53b","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == 0) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[626,627,628],"tindex":"880c0f9d-3e7b-11e6-8670-59623bccee8e","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"880c0f9e-3e7b-11e6-8670-49c79f9ee738","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[329],"tindex":"880c0f9f-3e7b-11e6-8670-8d2c2d7594cb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[56,106,108,109,112,113,114,118,119,120,123,124,125,126,127,128,129,130,131,132,133,134,135,9,10,136,137,138,11,140,142,143,144,145,146,147,150,151,152,153,154,155,156,157,159,13,14,15,16,160,161,162,163,164,238,63,65,66,68,70,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,19,20,21,287,288,289,22,23,290,291,292,293,24,25,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,314,315,325,329,336,344,360,365,374,375,379,386,387,391,28,29,392,394,395,396,399,30,402,403,31,404,423,424,425,32,426,448,449,450,456,459,460,462,463,465,466,33,82,83,468,469,470,471,472,473,474,476,477,478,479,480,483,484,493,500,504,506,507,510,88,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,533,534,535,536,538,540,541,542,543,545,546,547,548,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,90,42,43,44,92,566,567,568,569,570,571,573,582,587,588,591,597,598,602,610,614,615,629],"tindex":"880c0fa0-3e7b-11e6-8670-23705ccc7501","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880c36b1-3e7b-11e6-8670-ab873d7d23b9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"880c36b2-3e7b-11e6-8670-7db8f157aca9","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[630,631,632,633,403,88,634],"tindex":"880c36b3-3e7b-11e6-8670-d32d51c41f12","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"880c36b4-3e7b-11e6-8670-4f47472c9f34","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"880c5dc5-3e7b-11e6-8670-bff6683f82f0","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"880c5dc6-3e7b-11e6-8670-5f91440fde22","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[5],"tindex":"880c5dc7-3e7b-11e6-8670-9b0f1e2d2e86","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1310","type":"CtBinaryOperatorImpl","sourcecode":"(limit) >= minimum"},"failures":[635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,99,100,101,56,58,59,105,106,108,668,109,110,111,112,630,631,115,116,123,124,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,143,146,147,148,669,670,671,672,673,674,675,676,677,149,150,153,154,157,159,632,633,160,161,163,164,168,176,179,188,194,197,200,205,209,210,214,223,225,227,228,231,234,236,240,241,242,243,244,245,250,252,256,257,259,62,64,66,67,68,70,71,72,74,76,262,77,264,265,267,269,271,272,273,274,275,277,278,279,282,284,287,288,289,292,293,25,294,295,78,297,298,299,300,301,303,304,305,307,309,311,312,313,316,318,319,321,323,324,327,329,331,332,333,334,335,337,339,340,342,344,345,346,347,349,352,354,355,357,358,360,361,362,363,364,365,79,368,370,373,375,678,679,379,380,381,382,383,386,388,389,390,391,28,29,392,393,394,395,396,397,80,398,81,399,400,30,403,406,407,408,409,410,413,415,419,422,430,431,433,434,435,436,437,440,441,442,446,448,450,452,454,456,457,458,459,460,461,462,463,466,33,82,467,470,472,475,85,476,477,479,86,480,481,483,87,488,489,490,492,493,497,498,499,501,502,504,505,506,507,508,509,510,511,512,515,88,516,519,520,521,524,527,530,634,533,680,535,537,539,540,542,543,544,546,550,552,553,555,560,561,562,563,565,42,44,566,567,568,569,570,571,572,573,574,578,579,580,581,582,585,588,589,591,592,93,595,596,597,598,599,600,601,602,94,95,96,97,603,98,604,605,608,610,681,682,683,614,615,684,629,685,686,687,688,689,690,691,692],"tindex":"880c5dc8-3e7b-11e6-8670-ff1bb20cadb8","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack >= topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"limit":"topOfStack","minimum":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"880c84d9-3e7b-11e6-8670-a3407ef4d82a","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"880c84da-3e7b-11e6-8670-ad74cc63e386","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"880c84db-3e7b-11e6-8670-398d69b67545","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((o.peek()) == o) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:383","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"880c84dc-3e7b-11e6-8670-35e5189d6d66","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[103,3,693,9,10,11,145,694,12,632,633,17,74,20,21,22,23,24,25,27,327,375,28,30,402,403,31,404,423,424,425,32,426,463,466,33,37,38,39,41,43,91,92,593,45,46,610,49,50,695,51,696,54,697,689,690,698,699],"tindex":"880c84dd-3e7b-11e6-8670-0df20bdbc45d","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"880cabee-3e7b-11e6-8670-c10f21c9566b","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"880cabef-3e7b-11e6-8670-239118ba18d5","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[277,281,567],"tindex":"880cabf0-3e7b-11e6-8670-a721ab446ac5","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:958","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"880cd301-3e7b-11e6-8670-1fa26699aa2c","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == timeStyle) {\n        {\n            if (dateStyle == dateStyle) {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:958","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"880cd302-3e7b-11e6-8670-5bf45dddbbf0","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"880cd303-3e7b-11e6-8670-8b20dd65811a","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"880cd304-3e7b-11e6-8670-6770481de9ff","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"880cd305-3e7b-11e6-8670-0da0eb0c4662","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[99,100,101,56,57,58,59,105,106,108,668,109,110,111,112,630,631,115,116,123,124,125,127,128,129,130,131,132,133,134,135,9,10,136,137,139,140,146,147,148,670,149,150,153,154,157,159,633,13,14,60,15,16,160,61,161,163,164,168,170,176,179,187,188,194,196,197,200,203,205,206,209,210,214,223,225,227,228,231,234,236,240,241,242,243,244,245,246,250,252,256,257,259,62,64,66,67,68,70,71,72,74,76,262,77,264,265,267,269,271,272,273,274,275,276,277,278,279,282,284,19,20,21,287,288,289,22,23,292,293,24,25,294,295,78,297,298,299,300,301,303,304,305,307,309,311,312,313,316,318,319,321,323,324,327,329,331,332,333,334,335,337,339,340,342,344,345,346,347,349,352,354,355,357,358,360,361,362,363,364,365,79,368,370,373,375,678,379,380,381,382,383,386,388,389,390,391,28,29,392,393,394,395,396,397,80,398,81,399,400,401,30,402,403,31,404,406,407,408,409,410,413,415,419,422,430,431,433,434,435,436,437,440,442,446,448,450,452,454,456,457,458,459,460,461,462,463,466,33,82,467,470,475,85,483,87,488,489,490,492,497,498,499,501,502,504,505,506,507,509,510,511,512,515,88,516,519,520,521,524,527,530,533,680,535,537,539,540,542,543,544,546,550,552,553,555,560,561,562,563,565,42,44,566,567,568,569,570,571,572,573,574,578,579,580,581,582,585,588,589,591,592,93,595,596,597,598,599,600,601,602,94,95,96,97,603,98,604,605,608,610,47,612,613,614,615,686],"tindex":"880cfa16-3e7b-11e6-8670-97f319fa6078","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (!serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"880cfa17-3e7b-11e6-8670-2f1edeec0644","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if ((target != target) && (token != target)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"target","token":"target","com.google.gson.stream.JsonToken.NUMBER":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880cfa18-3e7b-11e6-8670-312d10d047cf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[99,100,101,56,58,59,105,106,108,109,112,113,114,118,119,120,121,123,124,8,125,126,127,128,129,130,131,132,133,134,135,9,10,136,137,138,11,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,13,14,15,16,160,161,162,163,164,167,169,174,175,177,178,179,186,191,192,195,199,201,202,204,211,216,217,219,220,221,222,229,230,232,235,238,239,247,248,251,254,260,63,17,65,66,68,69,70,75,262,263,265,266,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,19,20,21,287,288,289,22,23,290,291,292,293,24,25,294,295,296,78,297,298,299,300,301,302,303,304,305,306,307,26,308,309,310,312,27,314,315,317,320,322,323,325,326,328,329,330,336,338,341,343,344,345,347,348,351,352,353,356,359,360,361,363,365,366,367,369,371,373,374,375,376,377,379,382,383,385,386,387,389,391,28,29,392,394,395,396,397,80,81,399,400,30,402,403,31,404,405,407,409,411,412,414,416,417,418,420,421,423,424,425,32,426,438,439,443,445,447,448,449,450,451,453,455,456,458,459,460,461,462,463,465,466,33,82,83,468,469,470,471,472,473,474,84,476,477,478,479,480,482,483,484,486,493,500,504,506,507,510,88,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,533,534,535,700,536,538,540,541,542,543,545,546,547,548,549,701,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,89,90,42,43,44,91,92,566,567,568,569,570,571,573,582,586,587,588,591,593,597,598,602,94,95,96,97,603,98,604,605,606,607,609,610,614,615,629],"tindex":"880d2129-3e7b-11e6-8670-51b21d14dbc7","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (!(value.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880d212a-3e7b-11e6-8670-d336b1ccfa23","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880d483b-3e7b-11e6-8670-39ffc2a9456c","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"880d483c-3e7b-11e6-8670-79eb23bc17f4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"880d483d-3e7b-11e6-8670-d9fe4b31f44f","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.util.Date.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"880d483e-3e7b-11e6-8670-e1d0c7d5adce","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"880d483f-3e7b-11e6-8670-c34dde94e93d","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"880d4840-3e7b-11e6-8670-2362b6775c39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return a.compareTo(b);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[64,77,295,78,297,298,299,301,303,304,305,307,321,388,29,392,394,396,442,463,466,33,82,87,490,492,499,501,505,508,510,511,512,515,572,578,579,581,585,589,592,93,602],"tindex":"880d6f51-3e7b-11e6-8670-9d1b89a7b4fa","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.Class<?>) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"880d6f52-3e7b-11e6-8670-17d5658b741f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == key) {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"key","typeOfT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[702,99,100,101,55,56,57,58,59,105,106,107,703,108,668,109,110,704,111,112,113,114,630,631,115,116,117,118,119,120,121,122,123,124,8,125,126,132,133,134,135,9,10,136,137,138,139,11,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,632,633,13,14,60,15,16,160,61,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,62,63,64,17,18,65,66,67,68,69,70,71,72,73,74,75,76,262,77,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,19,20,21,287,288,289,22,23,290,291,292,293,24,25,294,705,295,296,78,297,298,299,300,301,302,303,304,305,306,307,26,308,309,310,311,312,313,27,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,79,368,369,370,371,372,373,374,375,678,376,377,378,679,379,380,381,382,383,384,385,386,387,388,389,390,391,28,29,392,393,394,395,396,397,80,398,81,399,400,401,402,403,31,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,32,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,33,82,83,467,468,469,470,471,472,473,474,475,84,85,476,477,478,479,86,480,481,482,483,484,485,87,486,487,34,488,489,35,36,490,491,492,37,493,494,495,38,496,497,498,499,39,500,501,502,503,504,505,506,507,508,509,40,510,511,41,512,513,514,515,88,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,634,531,532,533,534,680,535,700,536,537,538,539,540,541,542,543,544,545,546,547,548,549,701,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,89,90,42,43,44,91,92,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,93,594,595,596,597,598,599,600,601,602,94,95,96,97,603,98,604,605,606,607,608,609,610,611,614,615,706],"tindex":"880d6f53-3e7b-11e6-8670-5dd90c7beffe","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"880d9664-3e7b-11e6-8670-2bd2e942f2d6","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[707,617,708,709],"tindex":"880d9665-3e7b-11e6-8670-bbe453c2d8a0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880dbd76-3e7b-11e6-8670-1b17e7a173c2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[],"tindex":"880dbd77-3e7b-11e6-8670-c71c25ec2c49","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:912","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"880dbd78-3e7b-11e6-8670-b3ea2df3e47b","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[56,106,108,123,124,125,127,128,129,130,131,132,133,134,135,9,10,136,137,138,11,140,143,146,147,670,671,672,674,675,677,150,153,154,157,159,13,14,15,16,160,163,164,66,68,70,265,267,271,272,273,274,275,277,278,279,282,284,19,20,21,287,288,289,22,23,292,293,24,25,295,297,298,299,300,301,303,304,305,307,309,344,360,365,375,379,386,391,28,29,392,394,395,396,399,30,402,403,31,404,448,456,459,460,462,463,466,33,82,470,472,476,477,479,480,483,493,504,506,507,88,516,519,520,521,524,527,530,533,535,540,542,543,546,550,552,553,555,560,561,562,563,565,42,44,566,567,568,569,570,571,573,582,588,591,597,598,602,610,614,615,629],"tindex":"880de489-3e7b-11e6-8670-5d58ddb12484","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"880de48a-3e7b-11e6-8670-bf3e5ebfb22f","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[710],"tindex":"880de48b-3e7b-11e6-8670-d3ab84e1a870","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl","sourcecode":"(context != nonempty) && (context != empty)"},"failures":[],"tindex":"880de48c-3e7b-11e6-8670-9757ea5cde57","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if ((i != i) && (context != i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","nonempty":"i","empty":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"880de48d-3e7b-11e6-8670-d9a328aeef95","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == key) {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"880de48e-3e7b-11e6-8670-2b6456273bb2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[115,116,167,236],"tindex":"880e0b9f-3e7b-11e6-8670-1516b1b4cfc8","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:469","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_ARRAY)"},"failures":[],"tindex":"880e0ba0-3e7b-11e6-8670-93e74e6fa909","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == counter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"offset","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"880e0ba1-3e7b-11e6-8670-f7dbcaadb2b4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"880e0ba2-3e7b-11e6-8670-23b3635964fd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[],"tindex":"880e0ba3-3e7b-11e6-8670-ef6c6c114236","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == a) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"a","o":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"880e0ba4-3e7b-11e6-8670-79358b2afe22","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if ((other instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"880e0ba5-3e7b-11e6-8670-ffbe947faa80","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[711],"tindex":"880e32b6-3e7b-11e6-8670-5de1b993f3fe","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"880e32b7-3e7b-11e6-8670-31d2f82a1e03","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"880e32b8-3e7b-11e6-8670-a50c1a72415e","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"880e32b9-3e7b-11e6-8670-31e0702f2c6a","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"880e32ba-3e7b-11e6-8670-75a8d2b51511","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:952","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"880e32bb-3e7b-11e6-8670-1390f7edb763","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == timeStyle) {\n        {\n            if (dateStyle == dateStyle) {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_LONG":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"880e59cc-3e7b-11e6-8670-e74367f6edaf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"880e59cd-3e7b-11e6-8670-e3390abe7ac9","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            if (!serializeNulls) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[712,713,714,149,150,151,152,153,154,155,156,157,158],"tindex":"880e59ce-3e7b-11e6-8670-e7f509e88a9c","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"880e59cf-3e7b-11e6-8670-6f8e7fda87df","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o.equals(o)) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"880e59d0-3e7b-11e6-8670-996945de9347","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467259285446/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
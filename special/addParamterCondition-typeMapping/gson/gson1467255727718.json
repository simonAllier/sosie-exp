{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":432,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":667,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":153,"com.google.gson.functional.StringTest.testStringValueDeserialization":665,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":214,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":640,"com.google.gson.stream.JsonWriterTest.testRepeatedName":145,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":515,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":173,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":422,"com.google.gson.MixedStreamTest.testWriteLenient":103,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":384,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":647,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":378,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":187,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":192,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":404,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":554,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":484,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":611,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":274,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":522,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":22,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":391,"com.google.gson.functional.ObjectTest.testSingletonLists":244,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":641,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":509,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":668,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":132,"com.google.gson.stream.JsonWriterTest.testStrings":166,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":491,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":170,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":654,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":412,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":475,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":285,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":451,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":680,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":262,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":286,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":548,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":158,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":2,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":68,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":468,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":502,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":594,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":67,"com.google.gson.functional.EnumTest.testEnumCaseMapping":483,"com.google.gson.GenericArrayTypeTest.testNotEquals":3,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":354,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":666,"com.google.gson.functional.JsonTreeTest.testToJsonTree":445,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":501,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":657,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":401,"com.google.gson.stream.JsonWriterTest.testNulls":142,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":357,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":625,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":282,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":93,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":465,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":637,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":498,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":37,"com.google.gson.functional.ObjectTest.testNullDeserialization":581,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":264,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":677,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":410,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":169,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":563,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":516,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":579,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":592,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":218,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":415,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":168,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":658,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":566,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":565,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":653,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":283,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":458,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":364,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":624,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":256,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":332,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":532,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":62,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":385,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":545,"com.google.gson.ParameterizedTypeTest.testNotEquals":108,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":634,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":98,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":121,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":382,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":107,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":77,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":111,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":494,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":546,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":255,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":307,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":133,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":161,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":342,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":408,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":73,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":177,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":361,"com.google.gson.metrics.PerformanceTest.testDummy":473,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":442,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":231,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":178,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":488,"com.google.gson.stream.JsonWriterTest.testEmptyArray":135,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":7,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":333,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":598,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":636,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":217,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":359,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":425,"com.google.gson.functional.CollectionTest.testSetDeserialization":41,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":85,"com.google.gson.functional.EnumTest.testEnumSet":9,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":249,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":613,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":538,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":47,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":685,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":628,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":251,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":20,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":127,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":550,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":428,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":157,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":557,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":171,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":589,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":558,"com.google.gson.functional.MapTest.testHashMapDeserialization":54,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":513,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":644,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":600,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":664,"com.google.gson.MixedStreamTest.testReadNulls":684,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":179,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":298,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":8,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":94,"com.google.gson.functional.MapTest.testSortedMap":70,"com.google.gson.functional.MapTest.testMapSerialization":66,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":299,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":429,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":543,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":607,"com.google.gson.functional.MapTest.testSerializeMaps":205,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":346,"com.google.gson.functional.MapTest.testComplexKeysSerialization":74,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":612,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":78,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":120,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":317,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":266,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":368,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":376,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":478,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":482,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":289,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":466,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":174,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":580,"com.google.gson.functional.MapTest.testStringKeyDeserialization":76,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":687,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":608,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":196,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":113,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":80,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":519,"com.google.gson.functional.PrettyPrintingTest.testMap":287,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":514,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":585,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":189,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":300,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":621,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":284,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":474,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":609,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":671,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":674,"com.google.gson.functional.CollectionTest.testQueueSerialization":35,"com.google.gson.functional.MapTest.testMapSerializationEmpty":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":328,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":162,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":539,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":164,"com.google.gson.functional.MapTest.testMapOfMapSerialization":208,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":363,"com.google.gson.JavaSerializationTest.testMapIsSerializable":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":638,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":39,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":137,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":109,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":272,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":492,"com.google.gson.functional.FieldNamingTest.testIdentity":347,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":669,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":48,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":148,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":301,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":417,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":176,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":243,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":444,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":487,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":140,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":504,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":469,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":457,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":496,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":670,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":423,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":648,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":629,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":656,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":53,"com.google.gson.functional.MapTest.testMapSubclassSerialization":204,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":365,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":29,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":296,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":615,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":276,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":351,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":530,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":660,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":620,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":367,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":19,"com.google.gson.functional.EnumTest.testEnumSubclass":12,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":549,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":411,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":476,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":503,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":215,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":553,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":373,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":505,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":261,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":149,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":689,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":534,"com.google.gson.stream.JsonWriterTest.testTwoNames":136,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":424,"com.google.gson.stream.JsonWriterTest.testNullName":143,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":395,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":128,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":605,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":82,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":540,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":151,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":371,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":533,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":650,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":403,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":495,"com.google.gson.MixedStreamTest.testWriteNulls":683,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":92,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":146,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":51,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":309,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":16,"com.google.gson.CommentsTest.testParseComments":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":199,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":245,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":321,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":437,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":552,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":597,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":209,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":348,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":583,"com.google.gson.MixedStreamTest.testReadInvalidState":682,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":652,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":105,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":130,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":293,"com.google.gson.JsonParserTest.testParseMixedArray":134,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":512,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":464,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":610,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":686,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":318,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":362,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":270,"com.google.gson.JsonArrayTest.testRemove":366,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":639,"com.google.gson.functional.MapTest.testMapDeserialization":61,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":635,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":292,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":390,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":60,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":227,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":225,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":377,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":13,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":448,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":257,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":578,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":587,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":626,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":186,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":69,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":288,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":655,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":500,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":49,"com.google.gson.functional.PrimitiveTest.testShortSerialization":564,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":228,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":555,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":596,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":531,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":116,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":511,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":343,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":11,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":188,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":295,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":56,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":526,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":45,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":241,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":387,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":125,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":646,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":123,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":456,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":573,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":569,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":279,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":175,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":383,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":126,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":617,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":402,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":446,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":197,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":535,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":420,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":407,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":182,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":614,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":275,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":688,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":489,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":224,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":331,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":691,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":518,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":327,"com.google.gson.stream.JsonWriterTest.testNullStringValue":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":642,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":32,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":506,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":560,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":537,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":114,"com.google.gson.stream.JsonWriterTest.testEmptyObject":156,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":201,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":10,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":435,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":430,"com.google.gson.functional.MapTest.testGeneralMapField":212,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":406,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":306,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":572,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":216,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":584,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":334,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":71,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":221,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":618,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":556,"com.google.gson.MixedStreamTest.testReadMixedStreamed":455,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":627,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":42,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":96,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":470,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":159,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":441,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":541,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":595,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":4,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":330,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":64,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":663,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":490,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":91,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":339,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":527,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":329,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":52,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":302,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":616,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":499,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":50,"com.google.gson.functional.ObjectTest.testNestedDeserialization":421,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":254,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":582,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":433,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":394,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":593,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":571,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":320,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":65,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":369,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":672,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":18,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":112,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":372,"com.google.gson.JavaSerializationTest.testListIsSerializable":6,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":381,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":388,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":44,"com.google.gson.functional.ObjectTest.testNullSerialization":576,"com.google.gson.stream.JsonWriterTest.testDoubles":163,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":184,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":662,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":211,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":360,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":160,"com.google.gson.functional.MapTest.testInterfaceTypeMap":210,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":606,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":586,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":507,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":172,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":278,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":460,"com.google.gson.MixedStreamTest.testReadClosed":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":375,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":619,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":591,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":520,"com.google.gson.MixedStreamTest.testWriteClosed":353,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":190,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":434,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":246,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":659,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":23,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":232,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":439,"com.google.gson.stream.JsonWriterTest.testLongs":141,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":259,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":336,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":235,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":247,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":36,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":453,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":544,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":374,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":643,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":601,"com.google.gson.stream.JsonWriterTest.testNumbers":165,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":268,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":574,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":525,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":623,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":267,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":304,"com.google.gson.functional.CollectionTest.testQueueDeserialization":46,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":438,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":529,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":542,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":676,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":690,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":599,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":651,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":206,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":416,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":632,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":223,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":419,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":31,"com.google.gson.functional.MapTest.testRawMapSerialization":213,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":350,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":280,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":180,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":252,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":431,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":462,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":308,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":477,"com.google.gson.functional.PrimitiveTest.testByteSerialization":562,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":117,"com.google.gson.ObjectTypeAdapterTest.testSerialize":131,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":517,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":379,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":313,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":24,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":467,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":673,"com.google.gson.functional.MapTest.testMapWithQuotes":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":622,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":675,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":194,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":95,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":356,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":493,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":297,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":325,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":84,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":150,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":497,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":15,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":418,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":463,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":88,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":551,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":630,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":316,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":100,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":338,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":631,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":559,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":481,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":485,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":603,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":17,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":649,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":183,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":303,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":661,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":480,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":28,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":508,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":459,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":200,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":277,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":413,"com.google.gson.functional.ObjectTest.testNestedSerialization":253,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":202,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":220,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":237,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":679,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":119,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":72,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":294,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":324,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":104,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":472,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":167,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":90,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":250,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":398,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":450,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":355,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":471,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":521,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":447,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":452,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":281,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":678,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":312,"com.google.gson.functional.CollectionTest.testSetSerialization":193,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":198,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":290,"com.google.gson.functional.StringTest.testStringValueSerialization":681,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":349,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":33,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":269,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":370,"com.google.gson.MixedStreamTest.testWriteInvalidState":352,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":602,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":248,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":524,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":315,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":528,"com.google.gson.stream.JsonWriterTest.testBooleans":138,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":326,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":345,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":263,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":436,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":122,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":590,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":645,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":118,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":59,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":152,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":86,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":310},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"tindex":"07f7c8e6-3e6f-11e6-bb0a-75b850d781f2","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"07f81707-3e6f-11e6-bb0a-1b5477b2880c","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[109,110,111,112,113,114,103],"tindex":"07f83e18-3e6f-11e6-bb0a-b11e984d4b81","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"07f83e19-3e6f-11e6-bb0a-957cdf14ff42","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07f83e1a-3e6f-11e6-bb0a-311590662ac4","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07f8652b-3e6f-11e6-bb0a-7154c97740ca","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[115,116],"tindex":"07f8652c-3e6f-11e6-bb0a-c11f358d22a9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"07f8652d-3e6f-11e6-bb0a-e9688a38d10b","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07f8652e-3e6f-11e6-bb0a-d5fefeadfec8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07f88c3f-3e6f-11e6-bb0a-4bd7b3e95cab","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"07f88c40-3e6f-11e6-bb0a-fb20dcd5fc83","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[117,118],"tindex":"07f8b351-3e6f-11e6-bb0a-19ae226ff048","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value != null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"07f8b352-3e6f-11e6-bb0a-131e45d405cf","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07f8b353-3e6f-11e6-bb0a-cb4eacdaedd8","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"07f8da64-3e6f-11e6-bb0a-3b070620a6e1","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != (src[0])) {\n                {\n                    if (src instanceof java.lang.reflect.TypeVariable) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"07f8da65-3e6f-11e6-bb0a-4fe097e0458a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[119,91],"tindex":"07f8da66-3e6f-11e6-bb0a-dde2dfb507dc","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"07f90177-3e6f-11e6-bb0a-2d1fd120e4d9","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"07f90178-3e6f-11e6-bb0a-1bd376a9c30c","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"07f90179-3e6f-11e6-bb0a-e5dba88fc137","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME)"},"failures":[120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,9,10,11,12,172,14,173,174,175,176,177,15,17,18,19,20,178,21,23,24,25,27,30,179,180,181,182,183,184,185,186,187,31,188,189,35,36,190,37,191,40,192,42,193,44,194,47,195,196,197,198,199,200,50,201,202,203,204,205,58,60,206,207,208,66,69,209,210,71,211,212,72,213,74,75,77,80,214,215,216,217,218,219,220,221,222,223,224,225,226,227,115,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,83,273,84,274,85,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,88,293,294,295,296,89,297,298,299,300,301,302,303,119,91,304,305,306,307,308,309,310,311,312,92,313,314,315,316,317,318,319,320,321,322,94,97,98,323,324,325,100,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,117,118,350,351,352,103,104,353,354,355],"tindex":"07f9288a-3e6f-11e6-bb0a-0759f75322ef","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"07f9288b-3e6f-11e6-bb0a-2969b2c8d6ac","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != (src[0])) {\n                {\n                    if (src instanceof java.lang.reflect.TypeVariable) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[356,357,358,359],"tindex":"07f9288c-3e6f-11e6-bb0a-d5115a47e90b","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[360,361,362,363,364,365,103],"tindex":"07f94f9d-3e6f-11e6-bb0a-17b4ec440ca2","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"07f94f9e-3e6f-11e6-bb0a-e7dc9da99c1b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != (src[0])) {\n                {\n                    if (src instanceof java.lang.reflect.TypeVariable) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"src","upperBound":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"07f976af-3e6f-11e6-bb0a-29a8910fb496","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != (src[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[366],"tindex":"07f976b0-3e6f-11e6-bb0a-9dbad7a072c7","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"07f976b1-3e6f-11e6-bb0a-15a24fc5c4b6","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"07f976b2-3e6f-11e6-bb0a-bf347209bc83","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((a.peek()) == a) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"a","com.google.gson.stream.JsonToken.NULL":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"07f976b3-3e6f-11e6-bb0a-5bfcfeb68fc7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[127,128,129,131,133,367,170,171,172,368,173,369,174,370,175,371,176,177,15,16,18,19,20,178,21,22,23,24,25,26,27,29,30,179,180,181,372,182,183,184,373,374,185,375,186,376,377,187,188,191,41,192,193,378,379,380,381,382,383,195,197,198,201,202,384,385,386,387,388,206,68,210,211,212,74,214,215,216,389,217,218,219,222,223,224,390,391,226,227,392,115,229,230,393,394,395,396,231,232,233,397,398,399,400,234,235,401,402,243,244,403,404,245,405,406,246,407,408,247,409,249,410,250,411,412,251,413,252,253,414,255,415,416,256,417,257,258,418,259,419,420,421,422,260,423,424,261,262,263,264,265,266,425,267,268,269,270,271,272,83,84,274,85,276,426,427,428,288,289,88,429,293,430,294,431,295,296,89,297,298,432,299,433,300,434,435,301,302,303,436,91,314,437,315,318,319,320,321,438,439,440,441,322,442,94,96,97,98,443,323,444,445,324,446,447,448,449,116,450,330,335,336,337,451,452,338,339,453,454,340,341,342,343,344,345,346,347,349,350,351,352,353,455,456,457,458,459,460,461],"tindex":"07f99dc4-3e6f-11e6-bb0a-dd8578f97680","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[37,206,210,211,214,224,225,226,227,462,230,394,395,396,231,233,397,398,235,401,269,312,316,444,116],"tindex":"07f99dc5-3e6f-11e6-bb0a-9bd18fec9aaa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,9,10,11,12,172,14,173,174,175,176,177,15,17,18,19,20,178,21,23,24,25,27,30,179,180,181,182,183,184,185,186,187,31,188,189,35,36,190,37,191,40,192,42,193,44,194,47,195,196,197,198,199,200,50,201,202,203,204,205,58,60,206,207,208,66,69,209,210,71,211,212,72,213,74,75,77,80,214,215,216,217,218,219,220,221,222,223,224,225,226,227,115,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,83,273,84,274,85,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,88,293,294,295,296,89,297,298,299,300,301,302,303,119,91,304,305,306,307,308,309,310,311,312,92,313,314,315,316,317,318,319,320,321,322,94,97,98,323,324,325,100,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,117,118,350,351,352,103,104,353,354,355],"tindex":"07f9c4d6-3e6f-11e6-bb0a-59a448a5a4a5","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"07f9c4d7-3e6f-11e6-bb0a-e7f20ef3b3ba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isBoolean()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07f9ebe8-3e6f-11e6-bb0a-69c328ba684a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"07f9ebe9-3e6f-11e6-bb0a-bf9f0b315239","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:854","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[463,464,465,466],"tindex":"07f9ebea-3e6f-11e6-bb0a-cfdbafd2d828","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[467,127,468,469,470,128,129,471,133,168,169,472,473,474,475,476,7,477,367,170,478,479,480,8,481,171,9,10,11,12,13,482,172,368,14,483,484,173,369,174,370,175,371,176,177,15,16,17,18,19,20,178,21,22,23,24,25,26,27,28,29,30,179,180,181,372,182,183,184,373,374,185,375,186,376,377,187,31,188,189,32,33,34,35,36,190,37,191,38,39,40,485,41,192,42,43,193,44,486,45,46,378,379,487,380,381,194,382,47,488,48,383,195,196,197,489,198,199,490,49,200,491,492,493,50,201,202,384,385,386,387,388,51,52,494,53,203,495,54,55,204,205,56,57,58,59,60,61,206,62,63,64,65,207,208,66,67,68,69,209,70,210,71,211,212,72,213,73,74,75,76,77,78,79,80,214,215,496,216,389,217,218,219,220,221,222,223,224,390,391,225,497,498,226,227,392,115,228,229,462,499,230,393,394,395,396,231,232,233,397,398,399,400,234,235,401,500,501,502,503,504,360,505,506,507,508,509,236,510,511,512,513,514,515,516,517,518,519,361,237,520,521,522,523,524,525,526,362,238,527,528,529,530,531,363,532,533,364,534,535,536,537,538,539,540,109,541,542,543,544,545,546,547,548,549,550,551,552,110,111,553,554,239,555,81,556,557,558,559,402,560,561,562,112,563,564,240,365,565,566,567,113,568,241,569,570,571,114,242,572,573,574,575,243,244,403,404,245,405,406,246,407,408,247,248,409,82,249,410,576,250,577,411,578,412,579,251,413,252,253,254,414,255,415,416,580,581,256,417,257,258,418,259,419,420,421,422,260,423,424,261,262,582,583,263,264,265,266,425,267,83,273,84,274,85,275,584,585,586,276,587,588,589,590,591,592,593,594,595,596,86,426,427,428,87,286,287,288,289,290,291,292,88,597,429,293,430,294,598,431,295,296,89,298,599,432,299,600,433,300,434,435,90,301,302,601,303,436,119,91,304,305,602,306,307,308,309,310,603,604,311,312,92,605,93,606,313,607,314,437,315,608,316,609,317,610,318,319,320,321,438,439,611,440,441,322,442,612,613,614,615,94,95,96,97,98,443,323,444,445,324,446,616,617,618,619,358,447,448,325,620,621,622,623,100,624,625,626,449,627,326,628,116,629,630,327,631,632,328,450,633,634,635,636,637,329,638,330,639,331,332,640,641,101,642,643,644,645,333,646,647,334,648,335,649,650,651,652,336,653,654,655,656,657,658,659,660,337,451,452,338,339,453,454,340,661,662,663,341,342,664,343,344,345,346,347,665,666,667,668,669,670,671,672,348,673,674,675,676,677,678,679,680,681,349,117,118,350,682,102,351,683,352,103,684,104,353,455,456,354,355,106],"tindex":"07f9ebeb-3e6f-11e6-bb0a-f16cf5a60e7f","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"07fa12fc-3e6f-11e6-bb0a-7b4b49b67fbf","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07fa12fd-3e6f-11e6-bb0a-63804920e7eb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"07fa3a0e-3e6f-11e6-bb0a-83267e9dd8f3","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"07fa3a0f-3e6f-11e6-bb0a-0fc49b5aaa20","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07fa3a10-3e6f-11e6-bb0a-e975556b1d52","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07fa3a11-3e6f-11e6-bb0a-c71c86e38c36","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[685,686,687],"tindex":"07fa6122-3e6f-11e6-bb0a-1589dbf0e34e","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"07fa6123-3e6f-11e6-bb0a-b901c2bc6ff1","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"07fa8834-3e6f-11e6-bb0a-03991d8eb98b","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"07fa8835-3e6f-11e6-bb0a-1b26805d66b6","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance == null) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[127,128,129,131,133,367,170,171,172,368,173,369,174,370,175,371,176,177,15,16,18,19,20,178,21,22,23,24,25,26,27,29,30,179,180,181,372,182,183,184,373,374,185,375,186,376,377,187,188,191,41,192,193,378,379,380,381,382,383,195,197,198,201,202,384,385,386,387,388,206,68,210,211,212,74,214,215,216,389,217,218,219,222,223,224,390,391,226,227,392,115,229,230,393,394,395,396,231,232,233,397,398,399,400,234,235,401,402,243,244,403,404,245,405,406,246,407,408,247,409,249,410,250,411,412,251,413,252,253,254,414,255,415,416,580,256,417,257,258,418,259,419,420,421,422,260,423,424,261,262,263,264,265,266,425,267,268,269,270,271,272,83,84,274,85,276,426,427,428,288,289,88,429,293,430,294,431,295,296,89,297,298,432,299,433,300,434,435,301,302,303,436,91,314,437,315,318,319,320,321,438,439,440,441,322,442,94,96,97,98,443,323,444,445,324,446,447,448,449,116,450,330,335,336,337,451,452,338,339,453,454,340,341,342,343,344,345,346,347,349,350,351,352,353,455,456],"tindex":"07fa8836-3e6f-11e6-bb0a-4f446dadb38c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (!(raw.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"07faaf47-3e6f-11e6-bb0a-970f9d033a8d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[131,9,11,12,173,174,370,371,176,177,179,180,181,372,182,183,184,373,374,376,377,187,189,36,191,485,41,193,486,378,379,380,381,382,195,201,202,68,74,395,232,397,399,400,234,401,236,409,249,257,258,263,264,265,266,425,267,268,269,270,271,272,83,273,84,274,85,276,426,292,431,297,318,319,320,321,438,439,98,323,447,448,116,450,330,334,336,341,342],"tindex":"07faaf48-3e6f-11e6-bb0a-ddcdeaeb5494","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"07fad659-3e6f-11e6-bb0a-6be761656139","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07fad65a-3e6f-11e6-bb0a-21c41c0aa02d","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o != null) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[657],"tindex":"07fad65b-3e6f-11e6-bb0a-8b2e51e236c3","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == obj) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(obj instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"07fafd6c-3e6f-11e6-bb0a-179405d8a914","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[616,628,651],"tindex":"07fafd6d-3e6f-11e6-bb0a-dd31568f08a0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07fafd6e-3e6f-11e6-bb0a-fbe7d0143e05","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"07fafd6f-3e6f-11e6-bb0a-390a242dacff","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != (src[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"src","upperBound":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"07fafd70-3e6f-11e6-bb0a-574a261ccc32","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.DANGLING_NAME)"},"failures":[],"tindex":"07fb2481-3e6f-11e6-bb0a-f36a87125236","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.DANGLING_NAME":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"07fb2482-3e6f-11e6-bb0a-51740e1c4078","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src != (src[0])) {\n                {\n                    if (src instanceof java.lang.reflect.TypeVariable) {\n                        {\n                            if (src == null) {\n                                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                            } \n                            return toJsonTree(src, src.getClass());\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[55],"tindex":"07fb2483-3e6f-11e6-bb0a-51596edefd02","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key.equals(key)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"07fb2484-3e6f-11e6-bb0a-2bb9021920a4","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[688,689,690,691,664],"tindex":"07fb2485-3e6f-11e6-bb0a-99fdc942fd05","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"07fb4b96-3e6f-11e6-bb0a-4105144e315a","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"07fb4b97-3e6f-11e6-bb0a-4fbeee6d4432","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[127,128,129,131,133,367,170,171,172,368,173,369,174,370,175,371,176,177,15,16,18,19,20,178,21,22,23,24,25,26,27,29,30,179,180,181,372,182,183,184,373,374,185,375,186,376,377,187,188,191,41,192,193,378,379,380,381,382,383,195,197,198,201,202,384,385,386,387,388,206,68,210,211,212,74,214,215,216,389,217,218,219,222,223,224,390,391,226,227,392,115,229,230,393,394,395,396,231,232,233,397,398,399,400,234,235,401,402,243,244,403,404,245,405,406,246,407,408,247,409,249,410,250,411,412,251,413,252,253,414,255,415,416,256,417,257,258,418,259,419,420,421,422,260,423,424,261,262,263,264,265,266,425,267,268,269,270,271,272,83,84,274,85,276,426,427,428,288,289,88,429,293,430,294,431,295,296,89,297,298,432,299,433,300,434,435,301,302,303,436,91,314,437,315,318,319,320,321,438,439,440,441,322,442,94,96,97,98,443,323,444,445,324,446,447,448,449,116,450,330,335,336,337,451,452,338,339,453,454,340,341,342,343,344,345,346,347,349,350,351,352,353,455,456],"tindex":"07fb4b98-3e6f-11e6-bb0a-29397dc8cf9f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:398","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"07fb4b99-3e6f-11e6-bb0a-83432f1a95e2","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if ((offset == offset) || (last == length)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset == length) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n                    java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:722","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE))"},"failures":[],"tindex":"07fb72aa-3e6f-11e6-bb0a-1d7564d20e99","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if ((offset == offset) || (last == length)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset == length) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n                    java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"offset","com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN":"offset","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07fb72ab-3e6f-11e6-bb0a-8f0e70b6e825","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"07fb72ac-3e6f-11e6-bb0a-7737b2831886","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"07fb99bd-3e6f-11e6-bb0a-5dba7bd108d1","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == obj) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(obj instanceof com.google.gson.JsonPrimitive)) {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"obj","context":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07fb99be-3e6f-11e6-bb0a-ede17f32d250","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07fb99bf-3e6f-11e6-bb0a-479341c5373f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"07fb99c0-3e6f-11e6-bb0a-5d8fd1d94f5f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != value) && (token != value)) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"value","token":"value","com.google.gson.stream.JsonToken.NUMBER":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"07fb99c1-3e6f-11e6-bb0a-c5fea0111a27","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[462,116,656],"tindex":"07fbc0d2-3e6f-11e6-bb0a-7bf5186641a9","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"07fbc0d3-3e6f-11e6-bb0a-a7df417840cb","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl","sourcecode":"(c >= '0') && (c <= '9')"},"failures":[],"tindex":"07fbc0d4-3e6f-11e6-bb0a-39175524f7cb","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= '0') && (c <= '9')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"07fbc0d5-3e6f-11e6-bb0a-c109e213515b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07fbc0d6-3e6f-11e6-bb0a-ff175a3b378f","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254463682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":81,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
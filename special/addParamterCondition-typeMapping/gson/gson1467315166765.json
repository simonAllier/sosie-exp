{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":20,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":432,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":91,"com.google.gson.functional.StringTest.testStringValueDeserialization":430,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":64,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":501,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":546,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":10,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":271,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":210,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":384,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":229,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":200,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":203,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":241,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":590,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":463,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":520,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":198,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":555,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":122,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":341,"com.google.gson.functional.ObjectTest.testSingletonLists":239,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":502,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":433,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":539,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":624,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":312,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":513,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":254,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":390,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":157,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":191,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":446,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":184,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":426,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":583,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":162,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":46,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":531,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":646,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":402,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":45,"com.google.gson.functional.EnumTest.testEnumCaseMapping":462,"com.google.gson.GenericArrayTypeTest.testNotEquals":163,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":392,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":431,"com.google.gson.functional.JsonTreeTest.testToJsonTree":323,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":530,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":516,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":310,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":378,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":481,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":6,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":495,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":541,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":641,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":137,"com.google.gson.functional.ObjectTest.testNullDeserialization":528,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":315,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":358,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":443,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":251,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":382,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":601,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":547,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":525,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":400,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":292,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":261,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":375,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":517,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":606,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":605,"com.google.gson.JsonParserTest.testParseString":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":512,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":7,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":587,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":480,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":612,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":263,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":500,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":566,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":38,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":211,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":580,"com.google.gson.ParameterizedTypeTest.testNotEquals":105,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":362,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":492,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":85,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":293,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":104,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":60,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":470,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":588,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":581,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":260,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":409,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":170,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":172,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":247,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":56,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":209,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":551,"com.google.gson.metrics.PerformanceTest.testDummy":395,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":237,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":301,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":199,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":107,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":367,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":62,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":68,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":361,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":494,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":318,"com.google.gson.functional.CollectionTest.testSetDeserialization":141,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":115,"com.google.gson.functional.EnumTest.testEnumSet":147,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":250,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":465,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":572,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":159,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":484,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":255,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":121,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":352,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":585,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":175,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":594,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":397,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":595,"com.google.gson.functional.MapTest.testHashMapDeserialization":27,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":544,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":67,"com.google.gson.MixedStreamTest.testReadNulls":388,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":396,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":620,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":95,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":80,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":81,"com.google.gson.functional.MapTest.testSortedMap":49,"com.google.gson.functional.MapTest.testMapSerialization":44,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":278,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":359,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":185,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":578,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":420,"com.google.gson.functional.MapTest.testSerializeMaps":30,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":94,"com.google.gson.functional.MapTest.testComplexKeysSerialization":57,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":464,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":61,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":424,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":317,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":333,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":628,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":461,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":183,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":379,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":527,"com.google.gson.functional.MapTest.testStringKeyDeserialization":59,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":421,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":368,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":608,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":63,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":550,"com.google.gson.functional.PrettyPrintingTest.testMap":23,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":545,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":636,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":457,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":477,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":629,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":8,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":389,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":423,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":436,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":440,"com.google.gson.functional.MapTest.testMapSerializationEmpty":58,"com.google.gson.functional.CollectionTest.testQueueSerialization":135,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":490,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":573,"com.google.gson.functional.MapTest.testMapOfMapSerialization":43,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":14,"com.google.gson.JavaSerializationTest.testMapIsSerializable":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":497,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":139,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":277,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":575,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":625,"com.google.gson.functional.FieldNamingTest.testIdentity":228,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":76,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":284,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":264,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":12,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":238,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":322,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":519,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":533,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":647,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":366,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":435,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":216,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":508,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":485,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":515,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":25,"com.google.gson.functional.MapTest.testMapSubclassSerialization":29,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":604,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":69,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":129,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":467,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":165,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":338,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":451,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":564,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":476,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":618,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":311,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":120,"com.google.gson.functional.EnumTest.testEnumSubclass":150,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":584,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":253,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":391,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":532,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":288,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":589,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":535,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":568,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":217,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":299,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":350,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":417,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":574,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":18,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":509,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":240,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":26,"com.google.gson.MixedStreamTest.testWriteNulls":387,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":108,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":65,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":411,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":117,"com.google.gson.CommentsTest.testParseComments":161,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":316,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":77,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":344,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":73,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":586,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":360,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":48,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":438,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":449,"com.google.gson.MixedStreamTest.testReadInvalidState":386,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":113,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":511,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":603,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":101,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":186,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":543,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":425,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":72,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":13,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":498,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":598,"com.google.gson.functional.MapTest.testMapDeserialization":36,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":493,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":429,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":456,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":340,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":35,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":308,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":343,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":640,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":98,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":151,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":220,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":265,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":524,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":638,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":482,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":126,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":215,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":332,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":24,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":47,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":514,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":529,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":160,"com.google.gson.functional.PrimitiveTest.testShortSerialization":602,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":592,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":565,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":66,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":542,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":93,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":149,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":201,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":233,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":31,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":559,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":145,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":610,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":213,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":506,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":169,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":355,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":616,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":611,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":3,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":469,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":294,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":307,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":190,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":472,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":272,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":569,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":269,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":246,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":327,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":466,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":634,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":622,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":339,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":499,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":549,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":487,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":503,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":132,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":536,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":597,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":571,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":614,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":176,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":148,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":342,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":21,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":187,"com.google.gson.functional.MapTest.testGeneralMapField":53,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":244,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":615,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":178,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":289,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":507,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":473,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":540,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":633,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":593,"com.google.gson.MixedStreamTest.testReadMixedStreamed":168,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":483,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":560,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":83,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":142,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":648,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":576,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":403,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":223,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":40,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":455,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":28,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":623,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":112,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":194,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":561,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":496,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":153,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":285,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":471,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":643,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":78,"com.google.gson.functional.ObjectTest.testNestedDeserialization":270,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":448,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":526,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":279,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":298,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":401,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":613,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":283,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":41,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":437,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":468,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":600,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":326,"com.google.gson.JavaSerializationTest.testListIsSerializable":103,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":214,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":232,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":144,"com.google.gson.functional.ObjectTest.testNullSerialization":522,"com.google.gson.stream.JsonWriterTest.testDoubles":92,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":328,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":454,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":32,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":52,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":534,"com.google.gson.functional.MapTest.testInterfaceTypeMap":50,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":418,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":637,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":303,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":537,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":2,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":206,"com.google.gson.MixedStreamTest.testReadClosed":99,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":331,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":474,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":399,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":553,"com.google.gson.MixedStreamTest.testWriteClosed":167,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":281,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":458,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":245,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":518,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":123,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":302,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":75,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":267,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":225,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":248,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":309,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":136,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":195,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":579,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":329,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":504,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":365,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":273,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":617,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":558,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":479,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":319,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":405,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":74,"com.google.gson.functional.CollectionTest.testQueueDeserialization":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":563,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":577,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":442,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":619,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":510,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":37,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":489,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":268,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":336,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":131,"com.google.gson.functional.MapTest.testRawMapSerialization":55,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":164,"com.google.gson.JsonParserTest.testParseReader":353,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":155,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":4,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":257,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":324,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":189,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":642,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":87,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":89,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":410,"com.google.gson.functional.PrimitiveTest.testByteSerialization":599,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":627,"com.google.gson.ObjectTypeAdapterTest.testSerialize":349,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":370,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":548,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":230,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":419,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":124,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":439,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":645,"com.google.gson.functional.MapTest.testMapWithQuotes":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":478,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":556,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":621,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":82,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":626,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":205,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":475,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":114,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":372,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":116,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":266,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":111,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":486,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":523,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":249,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":154,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":193,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":488,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":596,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":631,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":459,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":413,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":385,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":406,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":96,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":286,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":452,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":70,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":630,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":128,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":538,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":369,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":256,"com.google.gson.functional.ObjectTest.testNestedSerialization":258,"com.google.gson.JsonObjectTest.testAddingStringProperties":381,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":177,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":445,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":552,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":632,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":450,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":54,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":188,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":181,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":100,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":394,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":158,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":252,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":609,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":305,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":222,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":393,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":554,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":219,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":259,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":192,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":5,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":444,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":416,"com.google.gson.functional.CollectionTest.testSetSerialization":204,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":290,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":297,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":427,"com.google.gson.functional.StringTest.testStringValueSerialization":447,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":337,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":133,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":208,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":274,"com.google.gson.MixedStreamTest.testWriteInvalidState":166,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":407,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":521,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":557,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":180,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":562,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":364,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":227,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":314,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":376,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":398,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":505,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":371,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":34,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":90,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":106,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":412},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"6c6759e5-3ef9-11e6-8b5e-6b93cd5abff2","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isNumber()) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c67a806-3ef9-11e6-8b5e-198311d68500","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c67a807-3ef9-11e6-8b5e-2b1fd9167a37","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"6c67cf18-3ef9-11e6-8b5e-4989eb7a9a44","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c67f629-3ef9-11e6-8b5e-ed10c8cb58a3","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == (-2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[10,11,18,12,19,20,21],"tindex":"6c67f62a-3ef9-11e6-8b5e-59f5ae9fae5f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (deserialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"tindex":"6c681d3b-3ef9-11e6-8b5e-d98faa2a4c01","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c681d3c-3ef9-11e6-8b5e-91fe50a8583f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"value","context":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c68444d-3ef9-11e6-8b5e-612553ed9bff","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[90,91,92],"tindex":"6c68444e-3ef9-11e6-8b5e-9fdb55b5deb4","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c686b5f-3ef9-11e6-8b5e-2729a68a4683","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.Number) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c686b60-3ef9-11e6-8b5e-17f8730b7106","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.Class) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c686b61-3ef9-11e6-8b5e-edd517e14173","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i == i) || (peekStack == i)) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"i","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"i","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[93,94,95,96,97,98],"tindex":"6c689272-3ef9-11e6-8b5e-23449770ba85","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[99,0,100,101,102,22,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,9,122,123,124,125,126,127,128,129,130,25,27,28,31,32,33,34,35,36,38,39,40,41,44,45,46,47,49,51,54,56,57,58,59,60,61,62,63,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,65,153,154,155,70,156,157,158,159,76,160,78,79,80,81,82,83,84,85,161,87,88,162,163],"tindex":"6c689273-3ef9-11e6-8b5e-37bd9df2cef6","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,24,183,111,184,112,185,186,187,188,189,190,191,192,193,194,195,196,197,113,114,198,115,116,117,119,120,121,199,9,122,123,124,125,126,127,129,130,37,46,50,52,53,57,64,200,201,202,141,203,204,205,206,207,10,11,208,18,12,209,210,211,212,213,214,215,216,217,218,219,220,221,66,222,223,224,225,93,226,227,94,228,229,230,231,232,233,69,70,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,71,266,267,268,269,270,271,272,273,274,275,276,277,19,20,278,279,280,281,21,72,282,283,73,74,75,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,95,324,325,326,327,96,328,97,329,330,331,332,333,98,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,81,83,84,85,349,350,351,352],"tindex":"6c68b984-3ef9-11e6-8b5e-23a4dd6accbd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c68b985-3ef9-11e6-8b5e-b579b2f7c410","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"6c68e096-3ef9-11e6-8b5e-7d42ad068ebc","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c68e097-3ef9-11e6-8b5e-c1d6a7ae4c1e","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"a","this":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[353,354,170,355,356,357,358,359,184,360,185,186,187,188,361,189,362,118,128,61,64,205,210,211,212,213,214,363,364,229,230,231,232,20,21,74,75,365,366,367,295,368,296,369,298,299,300,304,305,310,312,320,321,322,323,370,371,372,373,81,84,85,87,374,375,376,377,378,379,380,381,382,383],"tindex":"6c68e098-3ef9-11e6-8b5e-53878cb88670","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonArray) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl"},"failures":[384,385],"tindex":"6c6907a9-3ef9-11e6-8b5e-750fdde0c1ba","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"style","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c6907aa-3ef9-11e6-8b5e-39777eb65b23","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"6c692ebb-3ef9-11e6-8b5e-eb1b615e41ab","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.util.Map.Entry)) {\n        return false;\n    } \n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n    if (node == null) {\n        return false;\n    } \n    removeInternal(node, true);\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[164,386,99,165,387,166,0,388,100,167,168,169,389,390,391,392,393,394,395,170,171,172,396,106,173,174,175,107,397,398,399,400,401,402,403,404,176,177,405,406,407,408,409,410,411,412,413,414,415,416,108,417,109,418,419,420,178,179,180,421,422,423,424,425,181,182,426,23,24,183,427,428,429,111,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,184,448,449,450,112,360,185,186,187,188,361,189,451,190,191,192,193,194,195,196,197,452,113,453,114,198,115,116,117,118,119,120,121,199,9,122,123,124,125,126,127,128,129,130,454,455,25,456,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,200,131,201,457,132,133,134,135,136,458,137,202,138,139,140,459,141,203,142,143,204,144,460,145,146,147,148,149,150,151,461,206,207,152,462,463,464,465,466,467,10,468,11,208,469,18,12,209,210,211,212,213,214,65,153,470,215,216,217,218,471,472,473,474,363,219,220,475,476,477,478,479,154,480,481,482,221,483,364,484,66,485,486,487,488,489,490,222,491,492,493,494,495,496,497,223,498,499,500,501,502,155,503,504,67,505,68,506,384,507,508,224,385,509,510,511,225,512,513,514,515,516,517,518,93,226,227,94,228,229,230,519,231,232,233,69,70,520,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,521,249,156,250,251,522,252,523,253,524,254,525,255,256,257,258,526,259,260,261,262,527,528,263,264,265,71,266,267,268,269,270,271,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,13,560,561,562,563,564,565,14,566,567,15,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,16,586,587,588,589,590,591,592,157,593,594,595,596,272,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,17,615,616,617,618,19,619,20,278,620,279,280,281,21,72,282,283,73,74,75,158,284,285,365,286,287,288,366,289,290,291,292,621,293,159,367,76,294,295,368,296,622,297,77,623,160,369,624,625,626,78,298,299,300,301,302,303,304,305,306,307,308,309,310,79,627,311,312,628,629,630,80,631,313,314,315,316,317,318,319,320,321,322,323,95,324,325,326,327,96,328,97,329,330,331,332,333,98,334,632,633,335,336,337,370,371,634,635,636,637,338,638,639,339,340,341,640,372,641,342,343,344,345,373,346,642,643,347,348,81,82,83,84,85,161,350,351,644,375,382,645,352,646,647,648],"tindex":"6c692ebc-3ef9-11e6-8b5e-5f2b96098905","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c697cdd-3ef9-11e6-8b5e-bd8f06252fb0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"6c697cde-3ef9-11e6-8b5e-27c8cbcfd76f","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c697cdf-3ef9-11e6-8b5e-314f13153e2d","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c697ce0-3ef9-11e6-8b5e-3f569ba9a9a4","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6c69a3f1-3ef9-11e6-8b5e-1970895ac1f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c69a3f2-3ef9-11e6-8b5e-c51c73e13206","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[],"tindex":"6c69a3f3-3ef9-11e6-8b5e-9d6a21c08088","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6c69cb04-3ef9-11e6-8b5e-8d94d89eefa4","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573464/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
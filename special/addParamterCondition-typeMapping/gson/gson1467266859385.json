{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":117,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":240,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":31,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":189,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":48,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":239,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":219,"com.google.gson.stream.JsonWriterTest.testRepeatedName":45,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":286,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":106,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":158,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":171,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":267,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":269,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":177,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":275,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":176,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":212,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":182,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":278,"com.google.gson.functional.ObjectTest.testSingletonLists":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":155,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":213,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":190,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":293,"com.google.gson.stream.JsonWriterTest.testStrings":50,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":294,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":79,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":255,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":16,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":17,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":135,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":296,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":99,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":2,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":113,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":287,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":273,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":184,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":214,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":154,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":218,"com.google.gson.functional.EnumTest.testEnumCaseMapping":175,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":60,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":188,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":9,"com.google.gson.stream.JsonWriterTest.testNullStringValue":43,"com.google.gson.functional.JsonTreeTest.testToJsonTree":7,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":220,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":141,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":81,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":299,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":73,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":170,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":216,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":272,"com.google.gson.functional.MapTest.testGeneralMapField":233,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":258,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":32,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":159,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":59,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":136,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":208,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":41,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":90,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":53,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":58,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":165,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":209,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":285,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":152,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":102,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":201,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":253,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":36,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":20,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":44,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":151,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":116,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":62,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":104,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":123,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":29,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":237,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":284,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":71,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":252,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":77,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":288,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":109,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":125,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":118,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":128,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":157,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":150,"com.google.gson.functional.MapTest.testInterfaceTypeMap":231,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":33,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":120,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":183,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":78,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":173,"com.google.gson.functional.EnumTest.testEnumSet":169,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":247,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":137,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":40,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":224,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":249,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":30,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":39,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":168,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":271,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":94,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":245,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":130,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":119,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":70,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":256,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":110,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":122,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":246,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":21,"com.google.gson.functional.MapTest.testMapSerialization":229,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":28,"com.google.gson.functional.MapTest.testSerializeMaps":223,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":265,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":23,"com.google.gson.functional.MapTest.testComplexKeysSerialization":236,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":156,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":64,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":260,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":93,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":221,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":4,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":197,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":162,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":281,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":300,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":107,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":226,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":98,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":210,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":268,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":55,"com.google.gson.functional.MapTest.testRawMapSerialization":235,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":238,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":185,"com.google.gson.functional.PrettyPrintingTest.testMap":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":80,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":111,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":250,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":138,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":83,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":147,"com.google.gson.functional.CollectionTest.testQueueSerialization":270,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":166,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":199,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":86,"com.google.gson.functional.MapTest.testMapOfMapSerialization":228,"com.google.gson.ObjectTypeAdapterTest.testSerialize":292,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":206,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":297,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":11,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":191,"com.google.gson.functional.FieldNamingTest.testIdentity":266,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":203,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":263,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":131,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":61,"com.google.gson.functional.MapTest.testMapWithQuotes":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":139,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":6,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":108,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":95,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":34,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":192,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":181,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":291,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":148,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":124,"com.google.gson.functional.MapTest.testMapSubclassSerialization":222,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":298,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":144,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":178,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":205,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":15,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":56,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":186,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":126,"com.google.gson.functional.EnumTest.testEnumSubclass":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":140,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":88,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":145,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":160,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":114,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":63,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":24,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":13,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":179,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":103,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":290,"com.google.gson.functional.ObjectTest.testNestedSerialization":251,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":74,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":207,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":35,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":46,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":234,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":161,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":211,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":54,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":57,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":51,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":200,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":248,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":101,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":244,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":72,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":193,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":230,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":18,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":180,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":195,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":163,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":202,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":37,"com.google.gson.functional.CollectionTest.testSetSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":100,"com.google.gson.functional.StringTest.testStringValueSerialization":196,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":85,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":65,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":92,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":25,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":69,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":153,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":149,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":264,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":257,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":289,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":121,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":225,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":217,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":215,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":5,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":283,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":132,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":254,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":112,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":187,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":142},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"f2f69735-3e88-11e6-b04e-e597120cf463","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f2f70c66-3e88-11e6-b04e-3feb6b2365e7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"f2f73377-3e88-11e6-b04e-39fc9b952539","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f2f73378-3e88-11e6-b04e-7bf90a165ba9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f2f75a89-3e88-11e6-b04e-75d65e19a6cb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"f2f75a8a-3e88-11e6-b04e-4b7a544a3dc8","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"f2f7819b-3e88-11e6-b04e-8b90a6dce40c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"o","value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"f2f7819c-3e88-11e6-b04e-7f2cc7a8ed51","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeOfT","typeOfT":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"f2f7a8ad-3e88-11e6-b04e-39f7ee0add6a","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"f2f7a8ae-3e88-11e6-b04e-71a69965e3cf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"f2f7cfbf-3e88-11e6-b04e-1ff7262d6ccb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"f2f7cfc0-3e88-11e6-b04e-134fb3cc8aca","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f2f7cfc1-3e88-11e6-b04e-27c78d8336ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"f2f7f6d2-3e88-11e6-b04e-47642d0d71c8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[25],"tindex":"f2f7f6d3-3e88-11e6-b04e-653710e0cb90","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[26,27,1,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"tindex":"f2f81de4-3e88-11e6-b04e-2dd3632e3a34","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"f2f81de5-3e88-11e6-b04e-0dbfa12d07d1","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[43,44,45,46,47,48,49,50,51,52,26,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,27,28,75,76,77,78,79,80,81,82,83,84,16,19,20,23,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,2,123,124,3,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,31,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,32,185,33,186,187,34,5,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,35,36,8,9,10,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,37,38,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,39,283,40,41,284,42,285,286,287,288,289,290,291,292,293,294,295,296],"tindex":"f2f844f6-3e88-11e6-b04e-ebc885404147","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[297],"tindex":"f2f844f7-3e88-11e6-b04e-712b4a27e0c8","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f2f86c08-3e88-11e6-b04e-6166c63f33e4","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f2f86c09-3e88-11e6-b04e-07cf9a484082","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"f2f86c0a-3e88-11e6-b04e-f974dab02e14","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && (((typeAdapter == typeAdapter) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter","value":"typeAdapter","java.lang.Object.class":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f2f86c0b-3e88-11e6-b04e-039dfa6219c3","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:541","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT)"},"failures":[],"tindex":"f2f86c0c-3e88-11e6-b04e-dbae4a9cb4cd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"h","com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1364","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[298,25,299,300],"tindex":"f2f8931d-3e88-11e6-b04e-89909495b33f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","l":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[],"tindex":"f2f8931e-3e88-11e6-b04e-a90bcb229117","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if ((!throwOnEof) && (!throwOnEof)) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266369000/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"throwOnEof","deserialize":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
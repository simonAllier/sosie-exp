{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":2,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":6,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":17,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":39,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":31,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":36,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":43,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":47,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":30,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":35,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":22,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":48,"com.google.gson.MixedStreamTest.testWriteNulls":16,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":46,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":49,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":23,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":37,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":19,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":7,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.ObjectTest.testNullSerialization":41,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":4,"com.google.gson.JsonParserTest.testParseMixedArray":42,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":40,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":34,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":5,"com.google.gson.functional.JsonTreeTest.testToJsonTree":14,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":10,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":12,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":27,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":38,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":29,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":32,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":45,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":28,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":20,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":18,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":33},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"237a9b48-3e67-11e6-a81a-89bc22e14ea7","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"src","context":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"237ae969-3e67-11e6-a81a-e93908f4192d","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"237ae96a-3e67-11e6-a81a-63a2324bd78b","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[16,17,18,19,20,3,4,5,6,7,21,22,23,24,25,13,26,27,28,29,30,31,32,33,34,35,15,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"tindex":"237b107b-3e67-11e6-a81a-b95748f8f05a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (!(value instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"237b107c-3e67-11e6-a81a-05b5dc0cd3a2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"237b378d-3e67-11e6-a81a-9f9803eb722c","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"237b5e9e-3e67-11e6-a81a-4b357f253672","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"newTop","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:47","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Collection.class.isAssignableFrom(rawType))"},"failures":[],"tindex":"237b5e9f-3e67-11e6-a81a-57b9a76c721a","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (!(type.isAssignableFrom(rawType))) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Collection.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"237b85b0-3e67-11e6-a81a-3ff640d8a7dc","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"237b85b1-3e67-11e6-a81a-d3bc8c9ed688","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"237b85b2-3e67-11e6-a81a-df9b2965d902","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type != null) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:833","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"237bacc3-3e67-11e6-a81a-13aad1ea0ec9","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == length) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"237bacc4-3e67-11e6-a81a-cb2d587cc2c5","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"237bacc5-3e67-11e6-a81a-d5f739471827","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"237bacc6-3e67-11e6-a81a-07eb1c99b8b3","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if ((toFind.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252062033/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":15,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":310,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":242,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":23,"com.google.gson.functional.StringTest.testStringValueDeserialization":631,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":130,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":480,"com.google.gson.stream.JsonWriterTest.testRepeatedName":20,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":403,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":219,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":593,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":342,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":105,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":659,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":331,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":46,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":48,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":569,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":435,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":119,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":265,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":196,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":410,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":537,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":626,"com.google.gson.functional.ObjectTest.testSingletonLists":182,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":103,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":243,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":398,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":653,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":551,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":33,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":490,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":581,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":381,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":437,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":8,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":639,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":175,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":431,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":305,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":509,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":55,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":392,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":203,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":322,"com.google.gson.functional.EnumTest.testEnumCaseMapping":648,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":241,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":365,"com.google.gson.functional.JsonTreeTest.testToJsonTree":341,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":391,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":492,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":357,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":277,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":470,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":544,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":524,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":477,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":229,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":300,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":606,"com.google.gson.functional.ObjectTest.testNullDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":155,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":292,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":637,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":577,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":79,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":286,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":404,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":187,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":301,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":201,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":275,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":584,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":279,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":312,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":445,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":444,"com.google.gson.JsonParserTest.testParseString":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":489,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":2,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":70,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":469,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":41,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":102,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":418,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":343,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":428,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":505,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":362,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":476,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":44,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":546,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":516,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":3,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":567,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":429,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":136,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":190,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":17,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":239,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":573,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":64,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":223,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":323,"com.google.gson.metrics.PerformanceTest.testDummy":367,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":496,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":597,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":153,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":337,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":517,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":104,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":386,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":274,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":545,"com.google.gson.functional.CollectionTest.testSetDeserialization":610,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":197,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":185,"com.google.gson.functional.EnumTest.testEnumSet":259,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":562,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":421,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":473,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":503,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":39,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":384,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":536,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":432,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":388,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":438,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":34,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":198,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":77,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":401,"com.google.gson.functional.MapTest.testHashMapDeserialization":501,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":484,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":240,"com.google.gson.MixedStreamTest.testReadNulls":375,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":457,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":84,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":250,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":350,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":559,"com.google.gson.functional.MapTest.testSortedMap":511,"com.google.gson.functional.MapTest.testMapSerialization":508,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":294,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":456,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":327,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":426,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":526,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":117,"com.google.gson.functional.MapTest.testSerializeMaps":121,"com.google.gson.functional.MapTest.testComplexKeysSerialization":514,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":561,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":325,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":157,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":647,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":235,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":307,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":643,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":556,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":646,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":35,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":283,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":220,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":586,"com.google.gson.functional.MapTest.testStringKeyDeserialization":324,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":528,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":161,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":5,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":407,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":518,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":148,"com.google.gson.functional.PrettyPrintingTest.testMap":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":402,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":214,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":89,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":557,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":380,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":529,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":247,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":632,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":95,"com.google.gson.functional.MapTest.testMapSerializationEmpty":515,"com.google.gson.functional.CollectionTest.testQueueSerialization":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":422,"com.google.gson.functional.MapTest.testMapOfMapSerialization":124,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":68,"com.google.gson.JavaSerializationTest.testMapIsSerializable":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":478,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":608,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":270,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":552,"com.google.gson.functional.FieldNamingTest.testIdentity":118,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":338,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":49,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":588,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":181,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":222,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":340,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":531,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":393,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":56,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":245,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":272,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":71,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":487,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":96,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":491,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":498,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":81,"com.google.gson.functional.MapTest.testMapSubclassSerialization":502,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":59,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":543,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":563,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":150,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":210,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":416,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":344,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":465,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":555,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":535,"com.google.gson.functional.EnumTest.testEnumSubclass":262,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":73,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":382,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":580,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":60,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":271,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":434,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":160,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":640,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":394,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":225,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":660,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":419,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":620,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":353,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":52,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":523,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":306,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":423,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":576,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":69,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":618,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":109,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":568,"com.google.gson.MixedStreamTest.testWriteNulls":373,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":500,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":522,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":347,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":156,"com.google.gson.CommentsTest.testParseComments":364,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":533,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":278,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":164,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":627,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":433,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":527,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":326,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":125,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":246,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":622,"com.google.gson.MixedStreamTest.testReadInvalidState":370,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":193,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":542,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":488,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":131,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":63,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":530,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":206,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":654,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":67,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":268,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":479,"com.google.gson.functional.MapTest.testMapDeserialization":320,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":97,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":180,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":499,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":625,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":45,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":504,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":231,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":228,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":363,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":644,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":32,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":463,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":42,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":186,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":541,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":224,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":258,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":510,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":655,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":390,"com.google.gson.functional.PrimitiveTest.testShortSerialization":443,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":550,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":233,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":436,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":417,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":303,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":51,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":400,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":114,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":261,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":302,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":601,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":58,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":298,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":317,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":413,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":82,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":614,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":486,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":630,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":295,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":379,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":452,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":448,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":221,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":548,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":600,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":87,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":297,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":440,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":162,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":420,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":591,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":572,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":264,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":254,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":471,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":549,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":232,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":661,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":92,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":351,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":482,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":355,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":602,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":395,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":441,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":72,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":6,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":236,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":230,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":260,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":311,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":328,"com.google.gson.functional.MapTest.testGeneralMapField":128,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":571,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":451,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":147,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":106,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":512,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":62,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":461,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":76,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":288,"com.google.gson.MixedStreamTest.testReadMixedStreamed":378,"com.google.gson.JsonObjectTest.testDeepCopy":284,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":472,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":506,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":57,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":596,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":611,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":424,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":204,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":657,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":100,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":321,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":120,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":316,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":165,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":27,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":11,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":19,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":414,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":99,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":566,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":460,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":607,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":553,"com.google.gson.functional.ObjectTest.testNestedDeserialization":592,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":189,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":621,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":458,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":352,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":450,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":208,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":507,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":616,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":633,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":534,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":4,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":253,"com.google.gson.JavaSerializationTest.testListIsSerializable":658,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":334,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":346,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":613,"com.google.gson.functional.ObjectTest.testNullSerialization":578,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":256,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":497,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":318,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":61,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":127,"com.google.gson.functional.MapTest.testInterfaceTypeMap":126,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":525,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":149,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":598,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":287,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":396,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":152,"com.google.gson.MixedStreamTest.testReadClosed":371,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":88,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":200,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":408,"com.google.gson.MixedStreamTest.testWriteClosed":377,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":216,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":459,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":493,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":599,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":538,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":211,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":349,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":43,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":111,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":212,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":215,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":12,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":427,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":641,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":217,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":483,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":360,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":266,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":453,"com.google.gson.JsonNullTest.testEqualsAndHashcode":16,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":66,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":467,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":348,"com.google.gson.functional.CollectionTest.testQueueDeserialization":615,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":26,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":425,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":455,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":110,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":122,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":94,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":172,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":590,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":213,"com.google.gson.functional.MapTest.testRawMapSerialization":129,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":369,"com.google.gson.JsonParserTest.testParseReader":290,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":481,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":188,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":251,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":330,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":628,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":308,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":137,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":173,"com.google.gson.functional.PrimitiveTest.testByteSerialization":442,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":656,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":314,"com.google.gson.ObjectTypeAdapterTest.testSerialize":652,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":168,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":405,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":332,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":142,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":115,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":539,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":634,"com.google.gson.functional.MapTest.testMapWithQuotes":123,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":466,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":595,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":167,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":192,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":464,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":195,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":361,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":532,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":589,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":91,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":579,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":144,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":468,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":93,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":333,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":439,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":560,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":609,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":108,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":255,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":226,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":594,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":24,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":276,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":558,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":336,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":650,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":582,"com.google.gson.functional.ObjectTest.testNestedSerialization":40,"com.google.gson.JsonObjectTest.testAddingStringProperties":285,"com.google.gson.internal.LinkedTreeMapTest.testClear":299,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":237,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":65,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":169,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":638,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":86,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":513,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":132,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":564,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":54,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":376,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":38,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":623,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":447,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":356,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":475,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":366,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":368,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":462,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":583,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":651,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":248,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":141,"com.google.gson.functional.CollectionTest.testSetSerialization":218,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":649,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":163,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":178,"com.google.gson.functional.StringTest.testStringValueSerialization":249,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":28,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":267,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":603,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":617,"com.google.gson.MixedStreamTest.testWriteInvalidState":374,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":519,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":574,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":412,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":143,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":415,"com.google.gson.stream.JsonWriterTest.testBooleans":18,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":313,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":116,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":289,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":154,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":280,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":624,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":485,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":315,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":319,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":22,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":139,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":385},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"419ad632-3f18-11e6-9166-b74a943dc1e3","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"419b9983-3f18-11e6-9166-9b637b77a51c","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419be7a4-3f18-11e6-9166-af691dd3b959","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419c0eb5-3f18-11e6-9166-df15705e8dde","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[7,8,9,10,11,12,13,14],"tindex":"419c0eb6-3f18-11e6-9166-4b5efed073bd","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[15],"tindex":"419c35c7-3f18-11e6-9166-71b318e80ac7","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"419c5cd8-3f18-11e6-9166-d35f735c1866","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"419c5cd9-3f18-11e6-9166-6d1e3626b6d3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:336","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419c5cda-3f18-11e6-9166-43aa6213dda3","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == 2) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[],"tindex":"419c83eb-3f18-11e6-9166-9f8e93995285","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419dbc6c-3f18-11e6-9166-6952196798a8","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"419de37d-3f18-11e6-9166-91609a2d98a9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(boolean))\n        return false;\n    \n    java.lang.Object java.lang.Object = field.get(value);\n    return fieldValue != value;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[16],"tindex":"419de37e-3f18-11e6-9166-4502ba847b21","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419e0a8f-3f18-11e6-9166-63a2ea9e6fb9","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10,44,45,46,47,48,49,50],"tindex":"419e31a0-3f18-11e6-9166-cd7e18c552fa","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419e31a1-3f18-11e6-9166-e3460773509d","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"419e58b2-3f18-11e6-9166-71841a4a718a","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[51],"tindex":"419e7fc3-3f18-11e6-9166-831b45d7ea15","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[52,53,17,54,55,56,57,58,59,60,61,62,63,64,65,66,67,25,26,68,69,70,71,72,1,73,74,2,3,75,76,77,78,4,79,80,81,5,82,6,83,84,85,86,27,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,28,119,29,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,30,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,32,168,169,170,171,172,173,33,174,175,176,177,35,178,179,180,181,182,37,183,184,185,38,186,187,39,188,40,189,190,41,42,191,43,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,7,10,11,14,211,45,212,46,213,214,215,216,47,217,48,218,219,220,221,222,223,224,225,49,50,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275],"tindex":"419e7fc4-3f18-11e6-9166-1b9f5621d476","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"419ecde5-3f18-11e6-9166-173781ee7990","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419ecde6-3f18-11e6-9166-8f9caf2689d3","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[276,277,7,8,9,10,11,12,13,14],"tindex":"419ef4f7-3f18-11e6-9166-6d948b92b073","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[278,279,280,281,282,283,15,284,285,286,287,288,289,290,291,17,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,59,24,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,130,326,327,131,328,132,329,330,331,332,333,334,335,336,337,338,160,161,162,166,339,32,340,341,33,342,343,344,345,346,347,192,348,349,350,351,44,352,353,354,355,356,357,358,359,360,361,233,362,363,272],"tindex":"419ef4f8-3f18-11e6-9166-e34a06189333","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl"},"failures":[283],"tindex":"419f6a29-3f18-11e6-9166-bfe44705cdfd","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"419fb84a-3f18-11e6-9166-43da82619f3e","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"419fdf5b-3f18-11e6-9166-b9f12c9108f1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[364,365,366,367,279,286,52,53,368,369,370,371,372,373,374,0,375,376,377,378,379,17,380,381,382,54,383,384,55,56,57,385,386,387,388,389,58,59,24,390,391,392,60,393,61,394,395,396,397,398,62,399,400,63,401,402,403,404,405,406,407,64,65,408,409,410,411,412,66,413,67,25,414,415,26,416,417,68,418,69,70,419,420,71,72,421,422,423,1,424,425,426,427,428,429,430,431,73,432,74,433,2,3,434,435,75,436,437,76,438,77,439,440,441,78,442,4,79,443,80,81,444,445,446,5,447,82,448,449,450,6,83,451,452,453,454,84,455,310,456,457,458,85,459,311,86,27,460,87,461,88,312,462,463,464,465,89,466,467,468,469,470,90,471,472,313,473,51,474,91,92,93,94,95,475,96,476,97,98,477,99,478,100,479,101,102,480,103,481,482,483,484,485,104,486,105,106,487,107,108,109,110,488,111,489,490,112,491,492,113,493,114,115,116,117,118,28,314,315,119,494,495,29,496,497,120,498,499,500,501,316,502,121,317,318,503,319,504,320,122,505,506,321,507,123,124,508,322,509,510,125,511,126,512,127,128,513,129,323,514,515,324,516,325,517,518,130,326,327,131,328,132,329,330,133,134,519,135,136,137,138,139,520,521,140,141,522,523,524,525,142,526,30,527,143,528,144,529,145,530,146,147,148,149,150,151,152,331,332,531,333,334,532,533,335,534,535,536,153,31,537,538,539,540,541,542,336,543,544,154,155,156,157,545,158,159,546,547,337,338,548,160,161,162,549,163,164,165,550,166,551,552,167,553,339,32,340,341,168,169,170,171,172,554,173,555,33,556,557,558,559,560,34,561,562,174,563,175,176,177,35,178,179,180,36,564,565,342,343,344,345,346,347,566,567,181,182,568,569,37,570,571,183,572,573,184,574,575,576,185,577,578,38,579,580,186,581,187,39,582,188,40,189,583,190,584,585,586,587,41,588,42,191,589,43,590,591,592,593,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,348,349,210,7,8,9,10,11,12,13,14,594,350,595,596,351,44,352,353,354,597,211,598,355,356,599,600,45,212,357,46,213,601,214,602,603,604,605,215,216,606,47,607,608,217,609,610,48,611,612,218,613,358,614,615,219,616,220,617,221,618,222,223,224,619,620,225,359,621,622,623,49,50,360,226,624,227,625,626,228,361,229,230,231,627,232,233,234,628,629,235,630,236,237,238,239,240,631,241,242,243,244,245,632,633,246,634,247,635,636,637,248,638,639,249,250,251,252,253,254,255,256,640,641,257,642,258,643,644,259,260,261,262,645,646,263,647,264,648,265,271,272,273,649,274,275],"tindex":"41a18d0c-3f18-11e6-9166-a32ca8ea7c60","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[365,366,65,25,75,80,82,83,86,28,121,128,133,134,135,136,137,138,139,140,141,522,142,30,143,144,145,331,532,534,535,536,538,539,540,170,175,35,178,179,180,181,37,38,39,188,355,222,359,227,228,230,231,235,246,266,267,268,269,270,650,651,274],"tindex":"41a1db2d-3f18-11e6-9166-0584b68cdb05","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array instanceof java.util.Iterator) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[364,365,366,52,53,652,653,369,370,372,374,0,376,377,378,379,17,380,381,382,654,276,277,308,655,656,54,383,384,55,56,57,657,309,658,659,660,661,385,386,387,388,389,58,59,24,390,391,392,60,393,61,394,395,396,397,398,62,399,400,63,401,402,403,404,405,406,407,64,65,408,409,410,411,412,66,413,67,25,414,415,26,416,417,68,418,69,70,419,420,71,72,421,422,423,1,424,425,426,427,428,429,430,431,73,432,74,433,2,3,434,435,75,436,437,76,438,77,439,440,441,78,442,4,79,443,80,81,444,445,446,5,447,82,448,449,450,6,83,451,452,453,454,84,455,310,456,457,458,85,459,311,86,27,460,87,461,88,462,463,465,89,467,468,470,90,471,472,473,51,474,91,92,93,94,95,475,96,476,97,98,477,99,478,100,479,101,102,103,481,482,483,484,104,486,105,106,487,107,108,109,110,488,111,489,490,112,113,493,114,115,116,117,118,28,119,494,495,29,496,497,120,498,499,500,501,316,502,121,317,318,503,319,504,320,122,505,506,321,507,123,124,508,322,509,510,125,511,126,512,127,128,513,129,323,514,515,324,516,325,517,518,130,326,327,131,328,132,329,330,133,134,519,135,136,137,138,139,520,521,140,141,522,523,524,525,142,526,30,527,143,528,144,529,145,530,146,147,148,149,150,151,152,331,332,531,333,334,532,533,335,534,535,536,153,31,537,538,539,540,541,542,336,543,544,154,155,156,157,545,158,159,546,547,337,338,548,160,161,162,549,163,164,165,550,166,551,552,167,553,339,32,340,341,168,169,170,171,172,554,173,555,33,557,558,559,34,561,562,174,563,175,176,177,35,178,179,180,36,564,565,342,343,344,345,346,347,566,567,181,182,568,569,37,570,571,183,572,573,184,575,576,185,577,38,580,186,581,187,39,582,188,40,189,583,190,584,585,586,41,588,42,191,589,43,590,591,592,593,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,348,349,210,7,8,9,10,11,12,13,14,594,350,595,596,351,44,352,353,354,597,211,598,355,356,599,600,45,212,357,46,213,601,214,602,603,604,605,215,216,606,47,607,608,217,609,610,48,611,612,218,613,358,614,615,219,616,220,617,221,618,222,223,224,619,620,225,359,621,623,49,50,360,226,624,227,625,626,228,361,229,230,231,627,232,233,234,628,629,235,630,236,237,238,239,240,631,241,242,243,244,245,632,633,246,634,247,635,636,637,248,638,639,249,250,251,252,253,254,255,256,640,641,257,642,258,643,644,259,260,261,262,645,646,263,647,264,648,265,266,267,268,269,270,271,272,273,649,274,275],"tindex":"41a2294e-3f18-11e6-9166-0127523423ed","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"41a2776f-3f18-11e6-9166-e1f1355a5020","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array instanceof java.util.Iterator) {\n                {\n                    if (array == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.beginArray();\n                    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                        com.google.gson.TypeAdapter<E>.write(out, value);\n                    }\n                    out.endArray();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327774241/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"41a29d80-3f18-11e6-9166-9584eadc3c6b","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":31,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":173,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":367,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":450,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":80,"com.google.gson.stream.JsonWriterTest.testRepeatedName":447,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":90,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":165,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":98,"com.google.gson.MixedStreamTest.testWriteLenient":261,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":415,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":120,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":81,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":85,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":134,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":392,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":423,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":66,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":246,"com.google.gson.functional.ObjectTest.testSingletonLists":132,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":412,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":368,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":15,"com.google.gson.stream.JsonWriterTest.testStrings":452,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":213,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":147,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":460,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":327,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":382,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":20,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":469,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":339,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":75,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":520,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":17,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":290,"com.google.gson.functional.EnumTest.testEnumCaseMapping":391,"com.google.gson.GenericArrayTypeTest.testNotEquals":340,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":347,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":366,"com.google.gson.functional.JsonTreeTest.testToJsonTree":224,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":471,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":211,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":399,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":379,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":272,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":518,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":216,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":144,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":455,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":505,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":24,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":355,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":193,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":154,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":454,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":422,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":380,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":499,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":493,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":156,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":478,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":99,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":285,"com.google.gson.ParameterizedTypeTest.testNotEquals":268,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":234,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":257,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":194,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":267,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":298,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":500,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":153,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":466,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":33,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":140,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":97,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":295,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":343,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":486,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":130,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":202,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":64,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":270,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":300,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":414,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":408,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":219,"com.google.gson.functional.CollectionTest.testSetDeserialization":84,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":58,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":143,"com.google.gson.functional.EnumTest.testEnumSet":317,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":65,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":329,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":281,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":148,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":63,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":38,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":214,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":352,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":427,"com.google.gson.functional.MapTest.testHashMapDeserialization":277,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":305,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":464,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":172,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":225,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":254,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":334,"com.google.gson.functional.MapTest.testSortedMap":292,"com.google.gson.functional.MapTest.testMapSerialization":289,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":174,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":50,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":118,"com.google.gson.functional.MapTest.testSerializeMaps":385,"com.google.gson.functional.MapTest.testComplexKeysSerialization":79,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":299,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":463,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":468,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":218,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":237,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":516,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":47,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":522,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":92,"com.google.gson.functional.MapTest.testStringKeyDeserialization":297,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":429,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":509,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":301,"com.google.gson.functional.PrettyPrintingTest.testMap":365,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":440,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":475,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":397,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":345,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":381,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":372,"com.google.gson.functional.MapTest.testMapSerializationEmpty":296,"com.google.gson.functional.CollectionTest.testQueueSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":405,"com.google.gson.functional.MapTest.testMapOfMapSerialization":387,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":491,"com.google.gson.JavaSerializationTest.testMapIsSerializable":265,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":310,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":171,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":515,"com.google.gson.functional.FieldNamingTest.testIdentity":119,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":330,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":185,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":157,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":96,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":131,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":223,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":457,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":521,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":370,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":458,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":104,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":494,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":259,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":480,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":276,"com.google.gson.functional.MapTest.testMapSubclassSerialization":384,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":508,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":72,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":125,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":0,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":28,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":243,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":100,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":212,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":62,"com.google.gson.functional.EnumTest.testEnumSubclass":319,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":497,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":146,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":461,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":484,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":189,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":232,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":106,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":105,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":200,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":258,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":326,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":95,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":492,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":418,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":133,"com.google.gson.MixedStreamTest.testWriteNulls":459,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":271,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":322,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":360,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":217,"com.google.gson.CommentsTest.testParseComments":336,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":135,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":430,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":42,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":182,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":371,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":388,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":22,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":55,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":420,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":507,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":263,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":13,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":51,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":425,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":341,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":10,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":179,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":488,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":410,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":503,"com.google.gson.functional.MapTest.testMapDeserialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":407,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":472,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":474,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":245,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":346,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":209,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":283,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":248,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":443,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":238,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":222,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":158,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":482,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":227,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":442,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":70,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":103,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":236,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":46,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":291,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":421,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":331,"com.google.gson.functional.PrimitiveTest.testShortSerialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":444,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":19,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":110,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":115,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":23,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":82,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":124,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":279,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":315,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":510,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":101,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":253,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":32,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":513,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":377,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":94,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":159,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":195,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":208,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":394,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":166,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":197,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":163,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":139,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":321,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":229,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":393,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":109,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":438,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":273,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":244,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":411,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":477,"com.google.gson.stream.JsonWriterTest.testNullStringValue":445,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":251,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":205,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":303,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":495,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":511,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":39,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":247,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":318,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":178,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":52,"com.google.gson.functional.MapTest.testGeneralMapField":78,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":137,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":465,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":41,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":190,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":416,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":395,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":424,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":435,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":502,"com.google.gson.MixedStreamTest.testReadMixedStreamed":31,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":286,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":255,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":312,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":456,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":128,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":18,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":264,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":112,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":287,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":383,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":431,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":512,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":49,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":5,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":446,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":350,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":409,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":323,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":186,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":309,"com.google.gson.functional.ObjectTest.testNestedDeserialization":164,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":332,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":21,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":483,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":175,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":199,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":356,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":181,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":91,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":288,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":61,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":504,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":228,"com.google.gson.JavaSerializationTest.testListIsSerializable":266,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":102,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":123,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":314,"com.google.gson.functional.ObjectTest.testNullSerialization":481,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":231,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":280,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":77,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":485,"com.google.gson.functional.MapTest.testInterfaceTypeMap":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":441,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":204,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":88,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":376,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":235,"com.google.gson.MixedStreamTest.testReadClosed":260,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":396,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":354,"com.google.gson.MixedStreamTest.testWriteClosed":30,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":177,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":390,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":138,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":207,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":67,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":184,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":161,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":114,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":141,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":210,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":307,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":6,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":233,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":413,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":167,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":426,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":220,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":183,"com.google.gson.functional.CollectionTest.testQueueDeserialization":316,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":342,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":490,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":514,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":419,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":74,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":155,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":404,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":162,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":241,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":302,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":27,"com.google.gson.functional.MapTest.testRawMapSerialization":389,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":325,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":378,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":150,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":226,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":54,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":337,"com.google.gson.functional.PrimitiveTest.testByteSerialization":16,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":359,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":433,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":519,"com.google.gson.ObjectTypeAdapterTest.testSerialize":14,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":436,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":239,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":121,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":363,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":68,"com.google.gson.functional.MapTest.testMapWithQuotes":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":398,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":428,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":335,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":25,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":476,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":56,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":59,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":160,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":498,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":142,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":324,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":4,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":403,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":274,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":230,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":187,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":9,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":11,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":126,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":275,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":432,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":149,"com.google.gson.functional.ObjectTest.testNestedSerialization":151,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":40,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":434,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":487,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":375,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":294,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":53,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":44,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":262,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":348,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":453,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":145,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":328,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":206,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":111,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":107,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":152,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":3,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":373,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":362,"com.google.gson.functional.CollectionTest.testSetSerialization":86,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":198,"com.google.gson.functional.StringTest.testStringValueSerialization":374,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":470,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":242,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":93,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":168,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":304,"com.google.gson.MixedStreamTest.testWriteInvalidState":29,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":43,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":401,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":215,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":188,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":353,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":479,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":437,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":282,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":449,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":269,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":467},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf0677e-3f45-11e6-a1bd-51e83549e35f","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"ecf0dcaf-3f45-11e6-a1bd-954a8fb42705","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            if (until != null) {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf0dcb0-3f45-11e6-a1bd-0b4b039962fc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf0dcb1-3f45-11e6-a1bd-bde8cb77e1ba","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf103c2-3f45-11e6-a1bd-6f78e25abf91","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[13,14,15],"tindex":"ecf103c3-3f45-11e6-a1bd-9f6ede92173a","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf12ad4-3f45-11e6-a1bd-f3635227247b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf151e5-3f45-11e6-a1bd-4738c29e48df","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[16],"tindex":"ecf151e6-3f45-11e6-a1bd-6f0ab2fd7520","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf151e7-3f45-11e6-a1bd-854b6cbe4343","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf178f8-3f45-11e6-a1bd-51275d083a0d","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (baseType == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"baseType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf1a009-3f45-11e6-a1bd-5d5aa71bdd36","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[17,18,19,20,21,22,23,24,25,26],"tindex":"ecf1a00a-3f45-11e6-a1bd-4bbec605c758","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonPrimitive) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,20,49,50,51,52,53,54,1,2,3,4,5,6,7,8,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,14,258,259,26],"tindex":"ecf1c71b-3f45-11e6-a1bd-d16689a56911","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if ((!serialize) && (!serialize)) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serialize","skipSerialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf1ee2c-3f45-11e6-a1bd-31574b5095dc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf1ee2d-3f45-11e6-a1bd-d7a3c12265cb","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"bound","type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf1ee2e-3f45-11e6-a1bd-63542642bfcc","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf1ee2f-3f45-11e6-a1bd-77daec9ba8e6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[260,261,262,263,264,265,266,267,268,269,270,271,272,273,48,49,55,56,58,59,60,274,61,62,63,65,66,67,68,69,70,71,275,72,73,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,75,291,292,293,294,295,79,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,84,312,313,314,315,316,317,318,23,319,320,321,322,323,324,325,126,326,327,328,329,330,331,332,333,334,254,335,255,256,257,336,337,338,339,340],"tindex":"ecf21440-3f45-11e6-a1bd-4be6a2299fa4","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[341,342,343,344],"tindex":"ecf21441-3f45-11e6-a1bd-9b4a80eeed5c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[27,28,262,345,346,347,348,33,349,350,351,34,35,352,353,354,355,356,17,18,19,39,40,357,358,359,360,361,362,363,41,364,44,365,46,47,48,366,367,368,369,370,371,372,373,374,20,21,375,49,51,53,376,377,378,379,380,381,382,1,4,5,8,55,56,57,58,59,274,61,62,63,64,65,67,68,69,71,73,383,384,385,281,283,74,386,387,289,388,76,77,78,294,389,79,298,301,80,81,302,82,306,390,308,83,311,85,312,86,315,87,317,318,23,319,88,321,391,392,393,90,92,96,97,103,106,394,395,396,397,398,324,399,400,401,402,403,404,405,406,407,408,409,112,410,411,412,413,414,415,416,417,418,419,420,114,421,422,115,116,117,118,119,124,125,126,423,129,131,132,135,138,141,143,145,148,150,151,153,156,158,159,161,424,425,426,427,167,168,169,170,171,172,174,176,179,180,181,182,185,186,187,189,192,193,428,329,196,429,197,198,430,431,432,332,202,203,204,209,210,433,213,214,215,216,217,218,220,222,225,226,227,229,230,231,234,236,239,434,435,240,241,242,436,437,438,439,440,441,243,442,244,443,247,248,250,444,251,252,254,256,257,14,15,445,446,447,448,449,450,451,452,453,258,259,454,455,26,456],"tindex":"ecf21442-3f45-11e6-a1bd-8709232bf2d9","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf23b53-3f45-11e6-a1bd-9dfe7e9e62fb","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf23b54-3f45-11e6-a1bd-2db9a4672049","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[274,120,121,457,122,123,173,183,184,458,200,205,206,211,224],"tindex":"ecf23b55-3f45-11e6-a1bd-5b31b019a3b8","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[27,28,459,29,261,262,30,345,460,461,347,462,348,33,463,34,35,464,352,353,354,355,356,17,18,19,39,40,357,358,465,466,359,360,467,361,271,363,41,43,364,468,44,469,365,46,47,470,471,472,48,366,367,368,369,370,371,372,373,374,20,21,375,49,51,53,376,0,1,4,5,8,55,473,56,57,58,59,274,61,62,63,64,65,67,68,69,71,73,383,474,384,385,281,283,386,387,289,291,388,76,293,77,78,389,79,296,298,301,80,81,302,82,475,306,307,390,308,83,311,85,312,86,314,315,87,317,318,23,319,88,321,391,392,393,90,92,94,96,97,103,106,394,395,396,476,397,398,324,399,400,401,110,402,477,403,404,405,406,407,408,409,112,410,411,478,412,413,479,414,415,416,113,417,418,419,420,114,421,480,422,115,116,117,118,119,120,121,457,122,123,124,125,126,423,129,131,132,135,138,141,143,481,145,482,24,148,150,151,483,153,156,158,159,161,484,485,424,425,486,487,426,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,427,503,16,504,505,506,507,508,509,510,511,512,513,167,168,169,170,171,514,174,179,180,181,182,183,184,185,186,187,189,458,190,192,193,428,329,196,429,197,198,430,431,432,515,25,332,199,200,201,202,203,204,205,206,209,210,211,433,213,516,214,215,216,217,218,220,221,222,223,224,225,226,227,228,229,230,231,234,236,239,434,435,240,241,242,437,438,439,440,441,243,442,517,443,518,252,254,256,257,258,259,337,338,519,454,455,26,520,521,456],"tindex":"ecf26266-3f45-11e6-a1bd-0ba541f8f573","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf26267-3f45-11e6-a1bd-237ed82bea8c","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[101,522],"tindex":"ecf28978-3f45-11e6-a1bd-f76b6054d450","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf28979-3f45-11e6-a1bd-6d49812367a1","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2897a-3f45-11e6-a1bd-f98a1bad2182","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2b08b-3f45-11e6-a1bd-c1633e3c2b24","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2b08c-3f45-11e6-a1bd-5fc442f3ca4c","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            if (until != null) {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf2b08d-3f45-11e6-a1bd-0f4bc582f105","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2d79e-3f45-11e6-a1bd-0be175090474","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf2d79f-3f45-11e6-a1bd-2d1ce6b58041","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf2d7a0-3f45-11e6-a1bd-d73f3945398b","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"ecf2feb1-3f45-11e6-a1bd-694ea8c52ee8","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2feb2-3f45-11e6-a1bd-7b5858f345de","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if ((name != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ecf2feb3-3f45-11e6-a1bd-8159fbbb29d9","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467347277334/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf2feb4-3f45-11e6-a1bd-2d3c4fb5a433","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ecf325c5-3f45-11e6-a1bd-a7271af508f5","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
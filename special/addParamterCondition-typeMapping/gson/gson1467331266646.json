{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":37,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":480,"com.google.gson.functional.StringTest.testStringValueDeserialization":650,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":53,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":588,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":529,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":256,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":225,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":78,"com.google.gson.MixedStreamTest.testWriteLenient":315,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":389,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":61,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":250,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":194,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":254,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":561,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":398,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":494,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":228,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":536,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":164,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":274,"com.google.gson.functional.ObjectTest.testSingletonLists":192,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":385,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":481,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":524,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":621,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":77,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":595,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":207,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":318,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":563,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":235,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":658,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":446,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":557,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":30,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":148,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":324,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":461,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":49,"com.google.gson.functional.EnumTest.testEnumCaseMapping":493,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":312,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":479,"com.google.gson.functional.JsonTreeTest.testToJsonTree":76,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":517,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":596,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":95,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":371,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":500,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":613,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":586,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":477,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":25,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":470,"com.google.gson.functional.ObjectTest.testNullDeserialization":635,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":173,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":17,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":656,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":204,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":530,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":453,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":26,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":459,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":311,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":214,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":2,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":397,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":182,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":568,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":567,"com.google.gson.JsonParserTest.testParseString":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":594,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":115,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":345,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":501,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":581,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":216,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":384,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":544,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":79,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":554,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":602,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":101,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":585,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":89,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":178,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":413,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":346,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":631,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":555,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":213,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":418,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":16,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":200,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":285,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":504,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":50,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":263,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":331,"com.google.gson.metrics.PerformanceTest.testDummy":508,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":146,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":243,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":162,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":67,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":607,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":622,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":388,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":380,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":310,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":176,"com.google.gson.functional.CollectionTest.testSetDeserialization":253,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":229,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":203,"com.google.gson.functional.EnumTest.testEnumSet":488,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":628,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":547,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":435,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":583,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":208,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":113,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":558,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":121,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":564,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":185,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":456,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":349,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":527,"com.google.gson.functional.MapTest.testHashMapDeserialization":601,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":591,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":478,"com.google.gson.MixedStreamTest.testReadNulls":512,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":577,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":286,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":87,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":625,"com.google.gson.functional.MapTest.testSortedMap":605,"com.google.gson.functional.MapTest.testMapSerialization":407,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":19,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":125,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":552,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":615,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":140,"com.google.gson.functional.MapTest.testSerializeMaps":402,"com.google.gson.functional.MapTest.testComplexKeysSerialization":152,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":627,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":52,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":320,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":426,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":175,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":301,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":280,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":298,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":444,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":660,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":6,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":187,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":258,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":634,"com.google.gson.functional.MapTest.testStringKeyDeserialization":51,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":616,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":70,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":357,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":414,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":533,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":429,"com.google.gson.functional.PrettyPrintingTest.testMap":447,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":528,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":368,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":623,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":317,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":502,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":617,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":485,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":651,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":377,"com.google.gson.functional.MapTest.testMapSerializationEmpty":412,"com.google.gson.functional.CollectionTest.testQueueSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":548,"com.google.gson.functional.MapTest.testMapOfMapSerialization":406,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":337,"com.google.gson.JavaSerializationTest.testMapIsSerializable":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":587,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":642,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":29,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":306,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":342,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":438,"com.google.gson.functional.FieldNamingTest.testIdentity":141,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":68,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":268,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":217,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":75,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":191,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":262,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":433,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":519,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":325,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":114,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":103,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":483,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":265,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":593,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":584,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":396,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":599,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":356,"com.google.gson.functional.MapTest.testMapSubclassSerialization":401,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":35,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":170,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":629,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":108,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":156,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":464,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":542,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":576,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":579,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":184,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":160,"com.google.gson.functional.EnumTest.testEnumSubclass":491,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":343,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":206,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":319,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":327,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":307,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":69,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":293,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":520,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":267,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":545,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":266,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":91,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":104,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":612,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":31,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":549,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":632,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":261,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":392,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":193,"com.google.gson.MixedStreamTest.testWriteNulls":314,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":600,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":423,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":83,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":420,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":174,"com.google.gson.CommentsTest.testParseComments":507,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":1,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":436,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":154,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":559,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":54,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":409,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":484,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":646,"com.google.gson.MixedStreamTest.testReadInvalidState":510,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":169,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":394,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":56,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":330,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":618,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":230,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":334,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":304,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":382,"com.google.gson.functional.MapTest.testMapDeserialization":47,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":379,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":450,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":400,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":273,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":248,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":276,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":476,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":299,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":74,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":659,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":131,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":218,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":452,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":288,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":431,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":372,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":168,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":264,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":297,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":186,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":408,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":516,"com.google.gson.functional.PrimitiveTest.testShortSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":620,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":100,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":562,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":543,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":28,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":526,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":137,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":490,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":27,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":251,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":23,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":122,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":44,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":539,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":358,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":474,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":81,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":592,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":20,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":361,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":571,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":497,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":260,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":179,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":219,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":247,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":22,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":364,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":123,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":546,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":223,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":199,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":492,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":290,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":132,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":619,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":272,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":532,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":590,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":93,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":638,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":521,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":566,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":341,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":359,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":282,"com.google.gson.JsonPrimitiveTest.testEquals":503,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":275,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":38,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":57,"com.google.gson.functional.MapTest.testGeneralMapField":151,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":197,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":574,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":153,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":428,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":390,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":410,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":365,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":442,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":348,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":12,"com.google.gson.MixedStreamTest.testReadMixedStreamed":111,"com.google.gson.JsonObjectTest.testDeepCopy":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":582,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":603,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":242,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":326,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":472,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":550,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":462,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":134,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":48,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":399,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":43,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":437,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":129,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":238,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":540,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":381,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":630,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":578,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":641,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":649,"com.google.gson.functional.ObjectTest.testNestedDeserialization":224,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":440,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":454,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":475,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":126,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":460,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":573,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":232,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":257,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":604,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":652,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":159,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":352,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":289,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":82,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":473,"com.google.gson.functional.ObjectTest.testNullSerialization":451,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":292,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":598,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":45,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":150,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":328,"com.google.gson.functional.MapTest.testInterfaceTypeMap":149,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":614,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":430,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":245,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":11,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":522,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":300,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":495,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":432,"com.google.gson.MixedStreamTest.testReadClosed":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":366,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":458,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":534,"com.google.gson.MixedStreamTest.testWriteClosed":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":128,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":469,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":198,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":597,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":165,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":244,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":86,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":221,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":136,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":249,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":468,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":553,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":241,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":294,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":471,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":386,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":98,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":302,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":575,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":333,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":580,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":177,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":415,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":85,"com.google.gson.functional.CollectionTest.testQueueDeserialization":645,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":336,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":551,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":655,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":362,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":393,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":147,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":376,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":183,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":222,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":465,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":107,"com.google.gson.functional.MapTest.testRawMapSerialization":411,"com.google.gson.JsonParserTest.testParseReader":14,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":589,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":498,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":210,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":287,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":60,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":648,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":33,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":322,"com.google.gson.functional.PrimitiveTest.testByteSerialization":351,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":419,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":443,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":41,"com.google.gson.ObjectTypeAdapterTest.testSerialize":106,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":181,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":531,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":62,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":424,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":138,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":166,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":513,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":653,"com.google.gson.functional.MapTest.testMapWithQuotes":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":369,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":537,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":654,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":434,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":637,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":439,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":84,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":367,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":227,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":99,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":157,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":220,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":188,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":373,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":633,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":202,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":370,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":375,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":565,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":626,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":643,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":609,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":391,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":416,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":291,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":270,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":636,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":36,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":624,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":66,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":523,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":116,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":72,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":496,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":209,"com.google.gson.JsonObjectTest.testAddingStringProperties":9,"com.google.gson.internal.LinkedTreeMapTest.testClear":24,"com.google.gson.functional.ObjectTest.testNestedSerialization":211,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":283,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":332,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":441,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":657,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":363,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":606,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":58,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":189,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":316,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":323,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":205,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":647,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":570,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":94,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":133,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":313,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":509,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":130,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":212,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":499,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":486,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":611,"com.google.gson.functional.CollectionTest.testSetSerialization":255,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":180,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":448,"com.google.gson.functional.StringTest.testStringValueSerialization":487,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":142,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":259,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":303,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":639,"com.google.gson.MixedStreamTest.testWriteInvalidState":109,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":608,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":506,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":538,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":155,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":541,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":40,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":13,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":172,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":3,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":457,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":387,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":42,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":46,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":421,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":514},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b121ab-3f1e-11e6-81fa-c7e40e769fad","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"e8b1bdec-3f1e-11e6-81fa-39e05ce2de79","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b1e4fd-3f1e-11e6-81fa-8b1b2e2a6d0c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"e8b20c0e-3f1e-11e6-81fa-93d690cc7c77","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b20c0f-3f1e-11e6-81fa-4b86c51872c4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"e8b23320-3f1e-11e6-81fa-d724cfa13f14","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b23321-3f1e-11e6-81fa-034250d75820","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"end","peekStack":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"tindex":"e8b25a32-3f1e-11e6-81fa-a9c7677cad09","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b2a853-3f1e-11e6-81fa-9143ea795927","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[104,105,106,107,108,109,110,111,112,16,113,114,115,116,117,118,119,120,121,122,35,36,123,124,37,125,126,127,128,38,129,130,131,132,0,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,53,55,56,57,58,60,153,154,155,156,61,62,63,64,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,69,71,180,73,74,75,76,181,182,183,184,77,185,186,187,188,189,190,78,79,80,81,82,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,84,226,227,228,229,230,231,232,233,85,86,234,235,236,237,238,239,240,241,87,242,88,89,90,91,92,243,244,245,93,94,246,247,248,249,95,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,97,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311],"tindex":"e8b2cf64-3f1e-11e6-81fa-19f0d348966a","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serialize","skipSerialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b31d85-3f1e-11e6-81fa-afa24b7551cb","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[312,313,2,10,104,105,107,108,314,109,315,316,110,16,317,318,319,320,33,321,322,323,113,324,325,326,122,35,36,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,125,363,129,364,365,366,367,368,369,370,371,372,40,0,373,374,375,376,377,378,379,380,381,134,382,383,384,385,386,387,388,389,390,135,391,392,393,394,136,395,396,397,137,138,139,140,141,142,42,398,145,399,400,401,402,403,404,405,406,407,408,409,149,410,150,151,411,152,412,413,414,53,56,58,415,416,417,418,419,420,421,422,423,424,153,155,425,426,427,428,429,430,156,431,432,61,62,433,63,64,157,65,159,160,161,162,163,165,166,167,169,171,172,173,174,175,177,434,435,69,70,71,180,436,437,72,438,439,440,73,74,75,76,181,441,442,182,183,443,77,444,185,445,446,447,186,187,448,449,450,188,189,191,192,195,198,201,203,451,205,452,453,208,210,211,454,213,216,218,219,221,84,226,455,227,228,229,456,457,458,459,460,461,462,463,230,231,232,233,85,86,464,234,237,238,241,87,88,89,90,91,92,243,244,245,93,94,248,249,95,250,465,251,466,467,468,469,470,252,471,254,472,255,473,474,256,258,260,262,263,264,267,97,475,268,269,270,476,477,280,282,283,284,285,478,479,480,481,482,483,484,485,486,487,286,287,288,289,290,291,292,295,297,488,489,490,491,300,492,493,494,302,303,304,305,306,495,307,103,308,310,311],"tindex":"e8b34496-3f1e-11e6-81fa-b1c516bec668","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[6,32,81],"tindex":"e8b392b7-3f1e-11e6-81fa-9b75d3d16454","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b3e0d8-3f1e-11e6-81fa-f336a9f6054c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b407e9-3f1e-11e6-81fa-c5729888fded","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"e8b42efa-3f1e-11e6-81fa-1bcc01e4fd13","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[315,334,337,339,344,360,163,256,258,262,496,495,497,498,499,500,501,502],"tindex":"e8b42efb-3f1e-11e6-81fa-51d9e2d91333","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b4560c-3f1e-11e6-81fa-c5ec6a729108","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((value != value) && (token != value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"value","token":"value","com.google.gson.stream.JsonToken.NUMBER":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[503,504],"tindex":"e8b4560d-3f1e-11e6-81fa-e7ef71242eed","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj != null) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b47d1e-3f1e-11e6-81fa-d90477cd886c","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b4a42f-3f1e-11e6-81fa-f9b40f8e75ff","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[505],"tindex":"e8b4a430-3f1e-11e6-81fa-bdeb35f21cb4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b4cb41-3f1e-11e6-81fa-fd8a1416c87f","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:170","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b4cb42-3f1e-11e6-81fa-733987bc01ac","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle < 0) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b4f253-3f1e-11e6-81fa-db8fca090303","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[104,105,106,107,108,109,110,111,112,16,113,119,120,121,122,35,36,123,124,37,125,126,127,128,38,129,130,131,132,0,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,53,55,56,57,58,60,153,154,155,156,61,62,63,64,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,69,71,180,73,74,75,76,181,182,183,184,77,185,186,187,188,189,190,78,79,80,81,82,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,84,226,227,228,229,230,231,232,233,85,86,234,235,236,237,238,239,240,241,87,242,88,89,90,91,92,243,244,245,93,94,246,247,248,249,95,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,97,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311],"tindex":"e8b51964-3f1e-11e6-81fa-abe0eb7fef3f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[2,10,41,42,53,74,506],"tindex":"e8b54075-3f1e-11e6-81fa-5fa0584ef06f","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"e8b54076-3f1e-11e6-81fa-49a88300e2ed","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"e8b56787-3f1e-11e6-81fa-2d2f9b6a758e","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[507,312,313,508,2,10,104,105,509,107,510,511,108,314,109,315,512,316,110,111,112,16,317,318,319,323,513,113,324,325,326,514,119,120,121,515,122,35,36,516,517,518,327,519,328,520,521,522,523,524,329,525,526,330,527,528,529,530,531,532,533,331,332,534,535,536,537,538,333,539,334,335,540,541,336,542,543,337,544,338,339,545,546,340,341,547,548,549,342,550,551,552,553,554,555,556,557,343,558,344,559,345,346,560,561,347,562,563,348,564,349,565,123,566,350,351,352,353,354,355,356,567,568,569,357,570,358,571,572,573,359,360,574,361,575,576,124,362,37,125,577,126,127,128,38,363,129,578,364,365,366,39,130,131,367,579,368,369,580,370,581,371,372,132,582,40,583,0,584,373,374,375,376,377,133,378,585,379,380,586,381,587,134,382,383,384,588,385,589,590,386,591,387,388,592,389,390,593,135,391,392,393,394,136,594,595,395,396,596,397,597,137,138,139,140,141,142,41,42,398,143,144,145,146,598,399,599,400,600,601,43,401,402,44,45,403,46,404,47,147,602,603,48,604,405,406,407,49,148,408,409,605,149,410,150,151,606,411,50,152,412,51,413,52,607,414,53,54,55,56,57,58,59,60,415,416,608,417,418,419,420,421,609,610,422,611,423,612,613,614,424,615,153,154,155,616,425,617,426,618,427,428,429,430,156,431,432,61,62,433,63,64,157,158,65,159,160,161,162,163,164,165,166,167,168,169,66,170,171,172,173,174,175,176,177,434,178,435,67,68,179,69,70,71,619,180,436,437,620,72,621,438,439,440,73,74,75,76,181,441,442,182,183,622,443,184,77,444,623,624,625,626,185,627,628,445,629,446,447,186,187,448,449,450,188,189,190,78,79,80,81,82,83,630,631,191,192,193,194,195,196,197,198,199,200,201,506,202,632,203,204,451,205,633,206,452,207,453,208,209,210,211,454,212,213,214,215,634,635,216,217,218,219,220,221,222,223,224,225,226,455,227,228,229,456,457,458,459,460,461,462,463,230,231,232,233,85,86,464,234,235,236,237,238,239,240,241,636,87,637,242,88,89,90,91,92,243,244,245,93,94,246,247,248,249,95,250,465,251,466,638,639,640,467,468,469,470,252,641,642,471,643,253,254,472,644,255,473,96,474,645,256,257,258,259,260,261,262,263,264,265,266,267,97,475,646,647,268,269,98,270,271,272,273,274,476,99,477,275,276,277,278,100,279,648,649,280,281,282,283,284,285,478,650,479,480,481,482,483,651,652,484,653,485,654,655,656,486,657,658,487,286,287,288,289,290,291,292,293,294,295,296,297,298,299,488,489,490,491,659,660,300,301,492,493,494,307,103,308,309,310,311],"tindex":"e8b58e98-3f1e-11e6-81fa-f9b7892368bd","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b5dcb9-3f1e-11e6-81fa-e9c75bfa99ff","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b5dcba-3f1e-11e6-81fa-8b189e9c7712","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b603cb-3f1e-11e6-81fa-1f6a005862ff","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b62adc-3f1e-11e6-81fa-b99b6ead81ae","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to != null) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[1,3,4,6,7,8,9,14,15,37,56,57,58,61,62,63,64,66,67,84,85,86,90,91,92,93,94,95,97,98],"tindex":"e8b62add-3f1e-11e6-81fa-41fb656e825f","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"e8b62ade-3f1e-11e6-81fa-55feebf1a437","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:583","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b651ef-3f1e-11e6-81fa-f9b5f8f21923","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum != minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.EMPTY_OBJECT":"minimum","context":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"e8b67900-3f1e-11e6-81fa-69fcf8e0f5e3","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"e8b67901-3f1e-11e6-81fa-6766a8cbbb58","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330454636/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":276,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":37,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":510,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":68,"com.google.gson.JsonPrimitiveTest.testDeepCopy":323,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":7,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":162,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":123,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":292,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":331,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":78,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":199,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":131,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":203,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":458,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":523,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":166,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":88,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":219,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":278,"com.google.gson.functional.ObjectTest.testSingletonLists":129,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":448,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":350,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":116,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":144,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":417,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":175,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":311,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":406,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":63,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":420,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":356,"com.google.gson.functional.EnumTest.testEnumCaseMapping":522,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":415,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":509,"com.google.gson.functional.JsonTreeTest.testToJsonTree":111,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":334,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":198,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":261,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":330,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":15,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":505,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":98,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":141,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":319,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":272,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":383,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":491,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":355,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":256,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":151,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":268,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":457,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":113,"com.google.gson.JsonParserTest.testParseString":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":375,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":3,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":153,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":315,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":447,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":124,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":362,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":240,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":185,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":294,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":103,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":470,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":376,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":150,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":473,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":27,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":137,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":230,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":326,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":425,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":61,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":189,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":87,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":451,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":443,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":101,"com.google.gson.functional.CollectionTest.testSetDeserialization":202,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":167,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":140,"com.google.gson.functional.EnumTest.testEnumSet":518,"com.google.gson.JsonStreamParserTest.testIterator":277,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":6,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":345,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":461,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":145,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":86,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":31,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":117,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":353,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":379,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":508,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":231,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":313,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":182,"com.google.gson.functional.MapTest.testMapSerialization":394,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":38,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":69,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":55,"com.google.gson.functional.MapTest.testSerializeMaps":393,"com.google.gson.functional.MapTest.testComplexKeysSerialization":67,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":293,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":337,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":100,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":246,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":225,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":265,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":243,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":485,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":119,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":264,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":289,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":402,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":386,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":396,"com.google.gson.functional.PrettyPrintingTest.testMap":407,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":480,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":412,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":434,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":17,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":416,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":515,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":440,"com.google.gson.functional.MapTest.testMapSerializationEmpty":469,"com.google.gson.functional.CollectionTest.testQueueSerialization":498,"com.google.gson.functional.MapTest.testMapOfMapSerialization":464,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":2,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":251,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":404,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":298,"com.google.gson.functional.FieldNamingTest.testIdentity":56,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":512,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":346,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":213,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":154,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":9,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":110,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":128,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":342,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":367,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":363,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":513,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":209,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":372,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":19,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":456,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":429,"com.google.gson.functional.MapTest.testMapSubclassSerialization":460,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":33,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":95,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":22,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":77,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":262,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":125,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":115,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":85,"com.google.gson.functional.EnumTest.testEnumSubclass":520,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":374,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":143,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":418,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":369,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":238,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":211,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":210,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":187,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":18,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":206,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":453,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":130,"com.google.gson.MixedStreamTest.testWriteNulls":273,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":399,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":475,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":99,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":267,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":347,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":75,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":171,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":338,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":466,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":514,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":164,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":455,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":70,"com.google.gson.JsonParserTest.testParseMixedArray":282,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":316,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":424,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":168,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":259,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":299,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":249,"com.google.gson.JsonArrayTest.testRemove":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":410,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":392,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":218,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":318,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":196,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":462,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":221,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":504,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":244,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":155,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":490,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":481,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":435,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":92,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":290,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":208,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":242,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":465,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":349,"com.google.gson.functional.PrimitiveTest.testShortSerialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":506,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":496,"com.google.gson.JsonParserTest.testParseEmptyString":283,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":47,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":52,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":361,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":200,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":32,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":387,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":126,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":314,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":302,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":226,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":26,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":300,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":389,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":12,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":503,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":104,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":156,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":195,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":303,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":432,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":35,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":106,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":160,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":136,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":521,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":235,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":46,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":479,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":217,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":437,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":224,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":192,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":257,"com.google.gson.JsonArrayTest.testSet":307,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":388,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":227,"com.google.gson.JsonPrimitiveTest.testEquals":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":220,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":519,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":42,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":71,"com.google.gson.functional.MapTest.testGeneralMapField":66,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":134,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":472,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":74,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":253,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":310,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":452,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":327,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":423,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":484,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":378,"com.google.gson.MixedStreamTest.testReadMixedStreamed":25,"com.google.gson.JsonObjectTest.testDeepCopy":270,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":285,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":427,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":183,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":421,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":502,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":297,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":495,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":49,"com.google.gson.JsonArrayTest.testDeepCopy":308,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":348,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":43,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":178,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":444,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":321,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":214,"com.google.gson.functional.ObjectTest.testNestedDeserialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":351,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":358,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":39,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":186,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":494,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":170,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":284,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":84,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":382,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":234,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":81,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":127,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":414,"com.google.gson.functional.ObjectTest.testNullSerialization":489,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":237,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":65,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":422,"com.google.gson.functional.MapTest.testInterfaceTypeMap":64,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":365,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":191,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":11,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":241,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":433,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":354,"com.google.gson.MixedStreamTest.testWriteClosed":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":41,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":499,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":135,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":194,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":89,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":173,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":158,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":169,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":51,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":138,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":197,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":413,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":179,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":239,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":501,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":286,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":291,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":449,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":359,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":247,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":325,"com.google.gson.stream.JsonWriterTest.testNumbers":366,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":426,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":102,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":471,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":430,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":454,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":62,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":439,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":114,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":159,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":497,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":21,"com.google.gson.functional.MapTest.testRawMapSerialization":395,"com.google.gson.JsonParserTest.testParseReader":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":13,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":147,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":232,"com.google.gson.JsonPrimitiveTest.testExponential":324,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":73,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":507,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":304,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":306,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":352,"com.google.gson.functional.PrimitiveTest.testByteSerialization":381,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":474,"com.google.gson.ObjectTypeAdapterTest.testSerialize":20,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":335,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":112,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":368,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":79,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":400,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":53,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":90,"com.google.gson.functional.MapTest.testMapWithQuotes":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":405,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":390,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":165,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":360,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":82,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":436,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":139,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":329,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":80,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":438,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":343,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":397,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":236,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":215,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":263,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":34,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":94,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":403,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":146,"com.google.gson.functional.ObjectTest.testNestedSerialization":148,"com.google.gson.JsonObjectTest.testAddingStringProperties":271,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":228,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":370,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":483,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":431,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":468,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":72,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":121,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":281,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":419,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":142,"com.google.gson.JsonPrimitiveTest.testBoolean":317,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":193,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":48,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":44,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":149,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":176,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":14,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":516,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":477,"com.google.gson.functional.CollectionTest.testSetSerialization":204,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":254,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":107,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":408,"com.google.gson.functional.StringTest.testStringValueSerialization":517,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":57,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":205,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":248,"com.google.gson.MixedStreamTest.testWriteInvalidState":23,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":488,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":76,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":391,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":54,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":97,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":258,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":216,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":275,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":295,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":450,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":336,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":398},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57927fa9-3f24-11e6-84c4-3f51af980ed1","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"57936a0a-3f24-11e6-84c4-ff457e8caf1c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if ((java.lang.String) != null) {\n        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n            object.add(java.lang.String, value);\n        } \n        java.lang.String = null;\n    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n        com.google.gson.JsonElement = value;\n    } else {\n        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n        if (element instanceof com.google.gson.JsonArray) {\n            ((com.google.gson.JsonArray)(element)).add(value);\n        } else {\n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"5793911b-3f24-11e6-84c4-45867268426c","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5793911c-3f24-11e6-84c4-b93495730475","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(typeOfT instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,6,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,7,8,205,206,9,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],"tindex":"5793b82d-3f24-11e6-84c4-4d603bea9491","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[257],"tindex":"5793df3e-3f24-11e6-84c4-cf1c96cd31ec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[258],"tindex":"5794064f-3f24-11e6-84c4-99eb6b5d5266","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[259,260,261,262,174,175,176,178,179,181,263],"tindex":"57940650-3f24-11e6-84c4-8945a08ce5ec","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            if (since != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57942d61-3f24-11e6-84c4-9fd494bc155d","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57942d62-3f24-11e6-84c4-696a87d4ce08","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57945473-3f24-11e6-84c4-0d66682b6e24","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            if (since != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"57947b84-3f24-11e6-84c4-3b3b0425a779","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[64,66,68,185],"tindex":"57947b85-3f24-11e6-84c4-9bcc1051bb3c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonArray) {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"5794a296-3f24-11e6-84c4-6b405f57198d","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5794a297-3f24-11e6-84c4-439c8c146fdf","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json != null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5794c9a8-3f24-11e6-84c4-079bc590c674","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[260,261,174,175,176,177,178,179,180,181],"tindex":"5794c9a9-3f24-11e6-84c4-d16db9eb0791","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5794c9aa-3f24-11e6-84c4-bbd7b753051b","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5794f0bb-3f24-11e6-84c4-2b0c1cafe1fe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"579517cc-3f24-11e6-84c4-491fd1aaa7af","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"579517cd-3f24-11e6-84c4-919f7cb1ffbd","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"579517ce-3f24-11e6-84c4-3dab096880dd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"579517cf-3f24-11e6-84c4-6bae7580b2a4","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[264,265,126],"tindex":"57953ee0-3f24-11e6-84c4-2f737c941658","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57958d01-3f24-11e6-84c4-53fc2c29d2a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"57958d02-3f24-11e6-84c4-01f511ac94a4","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[266,267,268,264,269,270,271,272,273,274,275,276,277,278,279,280,27,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,37,42,327,328,329,330,331,332,333,334,335,336,64,66,337,68,338,69,70,71,72,339,73,340,341,78,79,342,80,81,343,94,344,345,346,105,347,348,349,350,351,108,109,110,111,352,116,121,123,124,125,126,127,163,353,354,355,356,172,173,182,184,185,186,187,188,192,193,198,357,212,358,359,360,361,362,363],"tindex":"57958d03-3f24-11e6-84c4-752ebbd4970f","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (!(target instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5795b414-3f24-11e6-84c4-dd96d639de38","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5795b415-3f24-11e6-84c4-2d9b77776de7","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[52,55,231,236,238,244],"tindex":"5795b416-3f24-11e6-84c4-0d6d34c4b53d","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5795db27-3f24-11e6-84c4-27d04ec1f9a0","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5795db28-3f24-11e6-84c4-c94daa84ed9e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"57960239-3f24-11e6-84c4-ff1f29f8e4b9","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[364,20,21,22,0,27,294,295,300,365,366,367,368,318,33,34,369,370,371,372,257,373,374,4,375,376,377,378,379,380,381,382,383,384,385,386,387,388,5,389,36,38,40,43,390,328,391,49,51,52,53,54,55,56,57,60,392,393,394,66,395,396,397,398,399,400,74,401,82,343,84,85,86,87,6,89,90,91,93,96,402,106,107,403,404,405,109,112,113,114,116,117,406,407,118,119,408,409,410,120,121,128,132,140,142,145,147,148,153,155,158,163,164,411,165,166,167,170,171,174,177,178,181,182,184,185,190,196,199,200,412,413,201,203,204,414,7,8,9,208,211,212,213,214,232,237,242,10,11,12,13,14,15,16,17],"tindex":"5796294a-3f24-11e6-84c4-79e6ed96976d","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[264,265,126],"tindex":"5796505b-3f24-11e6-84c4-d138ddbb1e16","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5796776c-3f24-11e6-84c4-9b10f8d29385","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[415,364,268,272,18,19,27,416,417,418,419,28,420,367,421,32,33,34,369,422,423,424,425,370,426,1,427,428,2,371,3,372,257,373,374,4,375,376,377,378,379,380,381,382,383,384,385,429,386,387,388,5,389,36,430,38,40,431,43,432,327,433,390,434,328,329,330,435,391,47,436,437,438,439,440,441,442,443,444,49,445,446,447,448,449,450,451,331,452,50,332,453,454,455,51,333,456,457,52,53,54,55,56,57,335,336,458,60,459,392,460,393,461,462,62,463,464,394,465,466,64,467,65,66,468,395,67,469,470,396,68,70,72,471,397,472,473,474,475,398,476,477,399,400,74,76,478,401,479,340,480,341,77,481,482,82,343,84,85,86,87,6,89,90,91,93,96,97,98,99,100,102,344,345,105,402,106,107,347,348,403,404,405,351,109,112,483,484,113,114,352,116,485,486,117,487,406,407,118,119,408,409,410,120,121,128,129,132,135,138,488,140,489,142,490,491,145,147,148,492,150,153,155,156,158,163,164,411,165,166,167,353,493,354,355,494,356,495,496,168,169,170,171,262,174,177,178,181,182,184,185,189,190,191,196,197,199,497,200,412,498,413,499,500,201,501,203,502,204,414,357,7,8,503,9,207,208,211,212,358,213,214,215,217,504,505,220,221,223,506,224,507,225,227,228,229,230,508,509,510,511,512,513,514,515,516,517,231,232,233,234,235,236,237,240,242,518,519,361,520,245,521,522,523,247,248,249,250,251,11,252,363,253,255,256],"tindex":"57969e7d-3f24-11e6-84c4-919ddb3e5cdb","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5796c58e-3f24-11e6-84c4-597a4fc68dc0","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5796c58f-3f24-11e6-84c4-130d56bc6704","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5796eca0-3f24-11e6-84c4-b9f69009684f","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"579713b1-3f24-11e6-84c4-a1f347a01d7e","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332812542/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
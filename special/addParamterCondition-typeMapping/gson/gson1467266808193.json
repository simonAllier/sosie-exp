{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":77,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":174,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":274,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":112,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":135,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":183,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":224,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":45,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":270,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":229,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":230,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":122,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":181,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":233,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":268,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":127,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":257,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":244,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":159,"com.google.gson.functional.ObjectTest.testSingletonLists":179,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":138,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":155,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":118,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":166,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":6,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":272,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":194,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":89,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":206,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":36,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":37,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":54,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":58,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":210,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":186,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":93,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":111,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":231,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":157,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":168,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":163,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":261,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":279,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":149,"com.google.gson.functional.JsonTreeTest.testToJsonTree":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":164,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":86,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":92,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":108,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":25,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":269,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":221,"com.google.gson.functional.MapTest.testGeneralMapField":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":184,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":214,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":50,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":140,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":191,"com.google.gson.MixedStreamTest.testReadMixedStreamed":5,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":266,"com.google.gson.JsonObjectTest.testDeepCopy":248,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":201,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":255,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":144,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":154,"com.google.gson.JsonParserTest.testParseString":265,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":114,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":260,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":256,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":203,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":146,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":136,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":40,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":75,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":11,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":150,"com.google.gson.functional.ObjectTest.testNestedDeserialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":21,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":200,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":187,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":238,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":65,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":262,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":96,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":156,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":99,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":252,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":72,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":170,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":7,"com.google.gson.functional.MapTest.testInterfaceTypeMap":169,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":52,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":217,"com.google.gson.functional.CollectionTest.testSetDeserialization":232,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":128,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":120,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":76,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":100,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":195,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":9,"com.google.gson.MixedStreamTest.testWriteClosed":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":32,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":119,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":88,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":185,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":102,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":24,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":208,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":66,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":188,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":41,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":29,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":219,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":227,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":43,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":74,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":250,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":14,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":216,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":165,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":131,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":275,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":78,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":23,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":278,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":42,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":236,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":246,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":61,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":167,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":202,"com.google.gson.functional.MapTest.testStringKeyDeserialization":263,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":145,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":209,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.JsonParserTest.testParseReader":264,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":67,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":197,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":223,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":247,"com.google.gson.ObjectTypeAdapterTest.testSerialize":241,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":143,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":46,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":18,"com.google.gson.functional.FieldNamingTest.testIdentity":228,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":225,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":103,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":253,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":10,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":204,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":133,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":178,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":130,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":175,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":126,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":240,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":17,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":94,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":207,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":237,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":107,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":123,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":189,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":129,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":115,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":117,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":97,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":193,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":49,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":71,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":12,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":124,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":177,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":277,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":176,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":254,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":81,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":196,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":239,"com.google.gson.functional.ObjectTest.testNestedSerialization":198,"com.google.gson.JsonObjectTest.testAddingStringProperties":249,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":271,"com.google.gson.internal.LinkedTreeMapTest.testClear":273,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":26,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":63,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":222,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":151,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":180,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":192,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":215,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":242,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":162,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":182,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":87,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":22,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":109,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":199,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":38,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":106,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":220,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":51,"com.google.gson.functional.CollectionTest.testSetSerialization":234,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":44,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":15,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":62,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":19,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":16,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":142,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.MapTest.testMapDeserialization":259,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":226,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":213,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":158,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":161,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":79,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":251,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":104,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":105},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"d471c919-3e88-11e6-a6fa-b3430a40665c","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"tindex":"d4723e4a-3e88-11e6-a6fa-b7c264b22aee","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[242,243,244,245,246,247,248,249,250,23,24,28,251,45,46,47,48,252,253,80,81,82,86,87,92,93,254,255,123,124,130,150,256,257,258,259,260,261,262,263,220,221,222,264,265,266,267,268,269,270,271],"tindex":"d4723e4b-3e88-11e6-a6fa-dbc56a675fa6","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d472655c-3e88-11e6-a6fa-8d89c5b1f90a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"d472655d-3e88-11e6-a6fa-ef1f51e5cd44","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"d4728c6e-3e88-11e6-a6fa-71dc66da02a9","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d4728c6f-3e88-11e6-a6fa-9b8fb950e55a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d472b380-3e88-11e6-a6fa-43aaa5843a86","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"d472b381-3e88-11e6-a6fa-61e9317ecd75","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"d472b382-3e88-11e6-a6fa-61d889b69f2d","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d472da93-3e88-11e6-a6fa-6bb20d2a56ee","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"d472da94-3e88-11e6-a6fa-a10feaef67fd","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[],"tindex":"d472da95-3e88-11e6-a6fa-8fb646fa1263","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"d47301a6-3e88-11e6-a6fa-7bc518471311","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[246,28,33,93,118,131,132,133,134,137,138,272,238,267,268,273,269,274,271,275],"tindex":"d47301a7-3e88-11e6-a6fa-c53ba460a886","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[276,277,278,279,280],"tindex":"d47328b8-3e88-11e6-a6fa-ad086ca6dbc6","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d47328b9-3e88-11e6-a6fa-b946eddd8a2e","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d47328ba-3e88-11e6-a6fa-1f4bf9035104","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"d4734fcb-3e88-11e6-a6fa-59d9ffc759d5","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d4734fcc-3e88-11e6-a6fa-29df876bf075","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a != null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d4734fcd-3e88-11e6-a6fa-190b9937f46e","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"d47376de-3e88-11e6-a6fa-b19b638b7d46","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"d47376df-3e88-11e6-a6fa-872e1a18c48f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266368882/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":23,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
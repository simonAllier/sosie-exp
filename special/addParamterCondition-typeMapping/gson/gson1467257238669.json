{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":188,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":486,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":286,"com.google.gson.functional.StringTest.testStringValueDeserialization":670,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":83,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":659,"com.google.gson.stream.JsonWriterTest.testRepeatedName":278,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":575,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":11,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":150,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":72,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":248,"com.google.gson.MixedStreamTest.testWriteLenient":497,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":473,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":61,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":55,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":59,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":119,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":607,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":317,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":445,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":169,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":582,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":41,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":94,"com.google.gson.functional.ObjectTest.testSingletonLists":117,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":469,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":487,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":570,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":267,"com.google.gson.stream.JsonWriterTest.testStrings":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":538,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":26,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":666,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":132,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":306,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":609,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":230,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":424,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":678,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":155,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":425,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":603,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":291,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":78,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":260,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":564,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":413,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":554,"com.google.gson.functional.EnumTest.testEnumCaseMapping":316,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":485,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":501,"com.google.gson.functional.JsonTreeTest.testToJsonTree":219,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":563,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":667,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":114,"com.google.gson.stream.JsonWriterTest.testNulls":276,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":511,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":454,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":421,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":638,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":657,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":357,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":504,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":324,"com.google.gson.functional.ObjectTest.testNullDeserialization":626,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":157,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":676,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":129,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":303,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":576,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":398,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":411,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":88,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":139,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":302,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":649,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":90,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":614,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":613,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":665,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":378,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":422,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":372,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":652,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":141,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":468,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":590,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":73,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":550,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":600,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":656,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":215,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":250,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":65,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":351,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":379,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":541,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":601,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":138,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":435,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":24,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":125,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":238,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":294,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":35,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":364,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":556,"com.google.gson.metrics.PerformanceTest.testDummy":519,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":211,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":105,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":39,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":628,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":534,"com.google.gson.stream.JsonWriterTest.testEmptyArray":269,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":520,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":472,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":630,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":464,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":160,"com.google.gson.functional.CollectionTest.testSetDeserialization":58,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":170,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":128,"com.google.gson.functional.EnumTest.testEnumSet":311,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":645,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":331,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":654,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":14,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":20,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":604,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":174,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":290,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":610,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":27,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":408,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":382,"com.google.gson.functional.MapTest.testHashMapDeserialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":573,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":662,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":484,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":631,"com.google.gson.MixedStreamTest.testReadNulls":681,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":187,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":212,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":523,"com.google.gson.functional.MapTest.testSortedMap":555,"com.google.gson.functional.MapTest.testMapSerialization":346,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":189,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":598,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":640,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":9,"com.google.gson.functional.MapTest.testSerializeMaps":341,"com.google.gson.functional.MapTest.testComplexKeysSerialization":82,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":644,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":249,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":558,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":444,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":29,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":159,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":100,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":506,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":6,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":309,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":525,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":176,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":31,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":625,"com.google.gson.functional.MapTest.testStringKeyDeserialization":557,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":332,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":390,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":352,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":579,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":404,"com.google.gson.functional.PrettyPrintingTest.testMap":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":574,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":320,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":451,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":521,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":305,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":423,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":642,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":491,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":671,"com.google.gson.functional.CollectionTest.testQueueSerialization":321,"com.google.gson.functional.MapTest.testMapSerializationEmpty":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":461,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":295,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":594,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":297,"com.google.gson.functional.MapTest.testMapOfMapSerialization":345,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":658,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":530,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":271,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":166,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":375,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":336,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":254,"com.google.gson.functional.FieldNamingTest.testIdentity":240,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":488,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":535,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":194,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":281,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":142,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":12,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":116,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":218,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":329,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":274,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":565,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":261,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":353,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":489,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":152,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":664,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":655,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":480,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":542,"com.google.gson.functional.MapTest.testMapSubclassSerialization":340,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":389,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":45,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":184,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":646,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":171,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":243,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":482,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":588,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":650,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":25,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":38,"com.google.gson.functional.EnumTest.testEnumSubclass":314,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":376,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":131,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":307,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":360,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":84,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":566,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":154,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":282,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":591,"com.google.gson.stream.JsonWriterTest.testTwoNames":270,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":153,"com.google.gson.stream.JsonWriterTest.testNullName":10,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":103,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":21,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":595,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":623,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":34,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":284,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":371,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":476,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":118,"com.google.gson.MixedStreamTest.testWriteNulls":496,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":543,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":441,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":279,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":539,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":437,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":158,"com.google.gson.CommentsTest.testParseComments":682,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":97,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":120,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":333,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":200,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":205,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":605,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":629,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":347,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":490,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":515,"com.google.gson.MixedStreamTest.testReadInvalidState":679,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":167,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":44,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":478,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":179,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":266,"com.google.gson.JsonParserTest.testParseMixedArray":268,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":363,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":643,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":202,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":509,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":255,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":367,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":164,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":466,"com.google.gson.functional.MapTest.testMapDeserialization":549,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":463,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":429,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":339,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":93,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":500,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":112,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":343,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":96,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":54,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":217,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":223,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":143,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":397,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":406,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":455,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":53,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":151,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":17,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":175,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":479,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":562,"com.google.gson.functional.PrimitiveTest.testShortSerialization":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":537,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":358,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":608,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":252,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":589,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":505,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":19,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":572,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":239,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":313,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":56,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":183,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":546,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":585,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":328,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":391,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":75,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":258,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":663,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":247,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":617,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":418,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":66,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":111,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":144,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":229,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":447,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":115,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":221,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":592,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":148,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":124,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":315,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":2,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":446,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":224,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":536,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":92,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":578,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":458,"com.google.gson.stream.JsonWriterTest.testNullStringValue":273,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":661,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":108,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":526,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":567,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":612,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":374,"com.google.gson.JsonArrayTest.testSet":513,"com.google.gson.stream.JsonWriterTest.testEmptyObject":289,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":392,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":70,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":95,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":312,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":193,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":180,"com.google.gson.functional.MapTest.testGeneralMapField":81,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":122,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":434,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":620,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":85,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":474,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":348,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":355,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":448,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":381,"com.google.gson.MixedStreamTest.testReadMixedStreamed":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":368,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":653,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":213,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":262,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":326,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":292,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":596,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":253,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":414,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":226,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":552,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":483,"com.google.gson.JsonArrayTest.testDeepCopy":514,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":545,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":334,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":393,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":198,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":233,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":277,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":586,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":465,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":540,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":195,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":648,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":561,"com.google.gson.functional.ObjectTest.testNestedDeserialization":149,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":338,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":399,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":400,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":190,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":102,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":619,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":204,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":30,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":512,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":553,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":672,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":49,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":76,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":327,"com.google.gson.functional.ObjectTest.testNullSerialization":396,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":50,"com.google.gson.stream.JsonWriterTest.testDoubles":296,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":669,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":547,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":80,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":361,"com.google.gson.functional.MapTest.testInterfaceTypeMap":79,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":293,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":639,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":405,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":107,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":568,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":28,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":407,"com.google.gson.MixedStreamTest.testReadClosed":680,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":449,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":410,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":580,"com.google.gson.MixedStreamTest.testWriteClosed":245,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":192,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":323,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":110,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":668,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":42,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":106,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":207,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":146,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":203,"com.google.gson.stream.JsonWriterTest.testLongs":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":113,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":126,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":322,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":599,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":236,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":5,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":470,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":633,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":162,"com.google.gson.stream.JsonWriterTest.testNumbers":299,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":621,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":366,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":651,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":161,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":432,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":206,"com.google.gson.functional.CollectionTest.testQueueDeserialization":533,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":369,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":597,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":675,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":430,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":477,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":77,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":140,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":460,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":91,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":147,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":319,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":242,"com.google.gson.functional.MapTest.testRawMapSerialization":349,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":660,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":419,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":48,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":135,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":182,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":359,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":263,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":265,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":308,"com.google.gson.functional.PrimitiveTest.testByteSerialization":384,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":436,"com.google.gson.ObjectTypeAdapterTest.testSerialize":23,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":494,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":577,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":499,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":62,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":442,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":15,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":517,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":673,"com.google.gson.functional.MapTest.testMapWithQuotes":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":452,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":583,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":674,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":330,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":647,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":337,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":186,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":450,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":168,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":283,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":560,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":13,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":145,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":457,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":624,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":127,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":453,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":611,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":310,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":531,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":635,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":318,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":475,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":3,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":196,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":508,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":185,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":510,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":522,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":516,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":569,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":335,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":416,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":134,"com.google.gson.functional.ObjectTest.testNestedSerialization":136,"com.google.gson.internal.LinkedTreeMapTest.testClear":503,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":71,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":354,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":365,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":677,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":431,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":18,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":181,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":220,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":304,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":498,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":301,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":130,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":632,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":616,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":225,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":502,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":518,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":581,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":222,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":231,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":420,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":492,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":440,"com.google.gson.functional.CollectionTest.testSetSerialization":60,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":69,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":427,"com.google.gson.functional.StringTest.testStringValueSerialization":493,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":241,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":32,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":163,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":527,"com.google.gson.MixedStreamTest.testWriteInvalidState":244,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":634,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":395,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":584,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":201,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":587,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":237,"com.google.gson.stream.JsonWriterTest.testBooleans":272,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":456,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":8,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":156,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":197,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":251,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":409,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":471,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":495,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":548,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":285,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":438,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":627},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0],"tindex":"8c909c1b-3e72-11e6-88f2-d7984eb53e31","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[1,2,3,4,5,6,7,8,9],"tindex":"8c91114c-3e72-11e6-88f2-57dd1fc6f5ad","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8c91385d-3e72-11e6-88f2-c9376d458c05","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8c91385e-3e72-11e6-88f2-2f76d030ab79","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[10],"tindex":"8c91385f-3e72-11e6-88f2-a5c0299dd686","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[11,12,13,14,15,16,17,18,19],"tindex":"8c915f70-3e72-11e6-88f2-278b700348ad","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[20,21,22,23,24,25,26,27,28,29,11,30,31,32,33,34,12,35,13,36,37,38,14,39,40,41,42,15,16,43,44,45,46,47,48,1,49,2,3,50,4,5,51,52,53,6,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,19,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,7,8,9,240,241,242,243,244,245,246,247],"tindex":"8c915f71-3e72-11e6-88f2-ef12a6757b89","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"8c918682-3e72-11e6-88f2-819e615d2b76","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"8c918683-3e72-11e6-88f2-d7c16fa2a8ef","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c91ad94-3e72-11e6-88f2-f788047d2eeb","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"8c91ad95-3e72-11e6-88f2-5be5e4454d7d","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1186","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[248,249,250,251,252,253,254,255,256,257,258,259,20,260,261,262,263,264,265,21,22,266,23,267,24,268,269,270,271,272,273,274,275,276,10,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,26,309,310,27,311,312,313,314,28,315,316,317,11,31,33,12,35,13,318,37,38,14,39,40,42,15,16,44,46,47,48,1,49,2,3,50,51,53,55,319,56,320,321,322,323,324,57,325,59,326,60,327,328,61,62,329,63,64,330,331,67,332,68,69,333,334,335,336,337,338,70,71,339,340,341,342,343,77,344,345,346,17,347,79,348,80,81,18,349,82,350,351,352,83,84,353,85,87,88,89,354,355,90,91,92,356,357,95,96,98,358,99,359,100,102,103,104,105,106,107,108,109,112,113,114,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,116,117,120,123,126,395,128,396,130,397,398,133,135,136,399,138,141,143,144,146,151,154,155,400,156,157,158,159,161,162,163,164,165,166,167,401,168,169,170,402,403,404,405,171,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,175,176,427,428,429,177,179,181,183,184,185,186,187,430,188,189,191,194,195,196,431,198,432,433,434,435,436,437,438,439,440,441,442,199,201,443,444,202,203,204,205,206,207,445,210,446,212,214,215,216,217,218,219,220,447,448,449,450,451,452,453,454,455,456,19,457,458,459,460,461,462,463,464,465,226,466,467,468,469,470,471,472,473,474,227,475,476,477,478,228,479,480,481,482,229,232,233,236,483,237,238,484,239,7,8,9,240,485,486,487,488,489,490,491,492,493,241,494,495,242,243,496,244,497,498,245,499,500,501,502],"tindex":"8c91d4a6-3e72-11e6-88f2-9340da4eca50","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"newTop"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c91d4a7-3e72-11e6-88f2-61d4dfdb33f9","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[47,54,239],"tindex":"8c91fbb8-3e72-11e6-88f2-4b2dbd33867c","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8c91fbb9-3e72-11e6-88f2-953b6e993c6b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[503,504,505,506,24,26,507,74,75,155,188,193,216,217,218,219],"tindex":"8c91fbba-3e72-11e6-88f2-4d25afaf4a4b","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c9222cb-3e72-11e6-88f2-97f20cb7ecf0","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:145","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[],"tindex":"8c9222cc-3e72-11e6-88f2-35cab337d14e","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8c9249dd-3e72-11e6-88f2-4b4f651da6d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[482,229,230,231,233,234,236,508,509,510,511],"tindex":"8c9270ee-3e72-11e6-88f2-4b28613cf6c2","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:346","type":"CtBinaryOperatorImpl","sourcecode":"context == nonempty"},"failures":[268,512,513,514],"tindex":"8c9270ef-3e72-11e6-88f2-df74e98bf8fe","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","nonempty":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[250,252],"tindex":"8c9270f0-3e72-11e6-88f2-f3bf98ac0598","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"8c9270f1-3e72-11e6-88f2-fda319b4d252","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            if ((key != null) && ((key.peek()) != key)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c9270f2-3e72-11e6-88f2-59402fbc78bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[359,396],"tindex":"8c929803-3e72-11e6-88f2-790f574fe377","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"8c929804-3e72-11e6-88f2-a5997287cc49","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"8c929805-3e72-11e6-88f2-4b446c2d04ee","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"8c929806-3e72-11e6-88f2-0f53110a49a1","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"8c92bf17-3e72-11e6-88f2-43043b26ab46","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            if ((key != null) && ((key.peek()) != key)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8c92bf18-3e72-11e6-88f2-9904a4139700","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[20,260,261,262,263,264,265,21,22,24,302,303,304,305,306,307,308,26,309,310,27,311,312,313,314,28,315,316,317,11,31,33,12,35,13,318,37,38,14,39,40,42,15,16,44,46,47,48,1,2,3,50,51,53,55,319,56,320,321,322,323,324,57,325,59,326,60,327,328,61,62,329,63,64,330,331,67,332,68,69,333,334,335,336,337,338,70,71,339,340,341,342,343,77,344,345,346,17,347,79,348,80,81,18,349,82,350,351,352,83,84,353,85,87,88,89,354,355,90,91,92,356,357,95,96,98,358,99,359,100,102,103,104,105,106,107,108,109,112,113,114,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,116,117,120,123,126,395,128,396,130,397,398,133,135,136,399,138,141,143,144,146,151,154,155,400,156,157,158,159,161,162,163,164,165,166,167,401,168,169,170,402,403,404,405,171,406,407,408,409,410,411,412,413,414,415,417,425,426,175,176,427,428,429,177,179,181,183,184,185,186,187,430,188,189,191,194,195,196,431,198,432,433,434,435,436,437,438,439,440,441,442,199,201,443,444,202,203,204,205,206,207,445,210,446,212,214,215,216,217,218,219,220,447,448,449,450,451,452,453,454,455,456,19,457,458,459,460,461,462,463,464,465,226,466,467,468,469,470,471,472,473,474,227,475,476,477,478,228,479,480,481,482,229,232,233,236,483,237,238,484,239,7,8,9,240,485,486,487,488,489,490,491,492,493,241,494,495,242,243,496,244,497,498,245,501,502],"tindex":"8c92e629-3e72-11e6-88f2-254a26bf0433","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c92e62a-3e72-11e6-88f2-45c3fd8d2844","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[20,313,337,398,155,400,515,413,414,415],"tindex":"8c93344b-3e72-11e6-88f2-fd12752a95e9","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter.equals(typeAdapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter","to":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"8c93344c-3e72-11e6-88f2-bf9c7e17b46f","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if (json == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8c935b5d-3e72-11e6-88f2-2b9d031ed67b","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"8c935b5e-3e72-11e6-88f2-850112e1d11f","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8c935b5f-3e72-11e6-88f2-6784fb5378af","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[20,21,22,23,24,25,26,27,28,29,11,31,32,34,12,35,13,36,37,38,14,39,40,41,42,15,16,43,44,516,45,46,47,48,1,49,2,3,50,4,5,51,52,53,6,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,19,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,7,8,9,240,241,242,243,244,245,246,247],"tindex":"8c938270-3e72-11e6-88f2-b3fbb6c62135","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[252,254,20,260,261,262,263,264,265,21,22,24,302,303,304,305,306,307,308,26,309,310,27,311,312,313,314,28,315,316,317,11,31,33,12,35,13,318,37,38,14,39,40,42,15,16,44,46,47,48,1,2,3,50,51,53,55,319,56,320,321,322,323,324,57,325,59,326,60,327,328,61,62,329,63,64,330,331,67,332,68,69,333,334,335,336,337,338,70,71,339,340,341,342,343,77,344,345,346,17,347,79,348,80,81,18,349,82,350,351,352,83,84,353,85,87,88,89,354,355,90,91,92,356,357,95,96,98,358,99,359,100,102,103,104,105,106,107,108,109,112,113,114,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,116,117,120,123,126,395,128,396,130,397,398,133,135,136,399,138,141,143,144,146,151,154,155,400,156,157,158,159,161,162,163,164,165,166,167,401,168,169,170,402,403,404,405,171,406,407,408,409,410,411,412,413,414,415,417,425,426,175,176,427,428,429,177,179,181,183,184,185,186,187,430,188,189,191,194,195,196,431,198,432,433,434,435,436,437,438,439,440,441,442,199,201,443,444,202,203,204,205,206,207,445,210,446,212,214,215,216,217,218,219,220,447,448,449,450,451,452,453,454,455,456,19,457,458,459,460,461,462,463,464,465,226,466,467,468,469,470,471,472,473,474,227,475,476,477,478,228,479,480,481,482,229,232,233,236,483,237,238,484,239,7,8,9,240,485,486,487,488,489,490,491,492,493,241,494,495,242,243,496,244,497,498,245,501,502],"tindex":"8c938271-3e72-11e6-88f2-c95ea64ae241","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8c93a982-3e72-11e6-88f2-4115c3ab2a43","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8c93a983-3e72-11e6-88f2-43e3ced6a40d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[20,262,263,21,22,24,308,26,27,318,40,47,1,2,3,51,55,319,321,323,324,57,325,59,326,70,71,340,341,342,343,77,344,345,79,80,81,349,82,351,83,89,354,355,90,91,356,102,103,104,105,107,108,109,112,113,114,362,363,366,117,120,123,126,130,133,136,141,146,151,154,155,162,163,164,165,166,171,419,424,176,177,179,181,184,185,187,188,189,194,195,431,198,432,433,436,437,439,440,442,199,443,202,203,206,445,210,446,214,215,216,217,219,220,461,472,474,232,237,238,485,486,487,488,489,490,491,492,493,241,242,243,498],"tindex":"8c93d094-3e72-11e6-88f2-67c7f6dc923d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"8c93d095-3e72-11e6-88f2-716bfa462335","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    try {\n        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n        } \n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[517,20,260,261,262,21,22,518,24,302,303,304,519,305,306,307,520,308,25,26,309,521,522,523,310,27,311,312,313,314,524,525,28,29,315,316,317,11,30,31,32,33,34,12,35,13,36,318,37,38,14,39,40,41,42,15,16,43,44,516,45,46,47,48,1,49,2,3,50,4,5,51,52,53,6,54,55,319,56,320,526,527,528,321,322,323,324,57,529,530,325,531,58,59,326,532,60,327,507,328,533,61,62,329,63,64,330,65,331,534,535,66,67,332,68,536,69,333,334,537,335,538,336,337,338,70,71,72,73,74,75,76,539,540,541,542,339,543,544,545,340,341,546,547,342,548,343,549,77,550,551,552,553,344,345,346,554,78,17,347,555,79,348,80,81,18,349,556,82,350,557,351,558,559,352,83,84,353,85,86,87,88,89,354,355,90,91,92,93,94,356,560,357,95,96,97,98,358,99,359,561,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,562,563,564,360,565,361,566,567,568,569,570,362,571,572,363,573,574,575,576,577,578,579,364,365,580,581,582,583,584,366,585,367,368,586,587,369,588,589,370,590,371,372,591,592,373,374,593,594,595,375,596,597,598,599,600,601,602,603,376,604,377,605,378,379,606,607,380,608,609,381,610,382,611,115,612,383,384,385,386,387,388,389,613,614,615,390,616,391,617,618,619,392,393,620,394,621,622,116,117,118,119,120,121,122,123,124,125,126,395,127,623,128,129,396,130,624,131,397,132,398,133,134,135,136,399,137,138,139,140,625,626,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,400,515,156,157,158,159,160,161,167,401,168,169,170,402,403,404,405,171,406,407,408,409,410,411,412,413,414,415,627,172,173,174,628,425,426,175,176,427,428,429,177,629,178,179,180,181,630,182,183,184,185,187,430,188,189,631,190,191,192,193,632,194,195,633,196,197,431,198,432,433,634,434,435,436,437,438,635,636,439,440,441,637,638,639,442,640,199,200,201,641,443,642,444,643,202,203,204,205,206,207,445,208,209,210,211,644,645,446,646,212,647,213,214,215,216,217,218,219,220,221,648,447,448,449,649,222,223,450,650,451,452,651,453,652,454,455,224,653,456,654,19,655,457,458,459,460,461,225,462,656,463,464,657,465,658,226,466,467,468,659,469,660,661,470,662,471,472,663,473,474,664,227,475,476,477,478,228,665,666,479,480,667,481,668,482,229,230,231,232,233,234,235,236,508,669,483,237,238,484,239,7,8,9,240,670,485,486,487,488,489,671,672,490,673,491,674,675,676,492,677,678,493,241,494,495,242,679,680,243,496,244,497,681,498,245,246,247,501,502,682],"tindex":"8c93d096-3e72-11e6-88f2-f596f80c0af9","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8c93f7a7-3e72-11e6-88f2-7d1a7cb11657","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1236","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"8c93f7a8-3e72-11e6-88f2-1f56e47cdb01","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502134/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_NONE":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":55,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":606,"com.google.gson.functional.StringTest.testStringValueDeserialization":604,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":70,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":570,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":297,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":122,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":419,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":17,"com.google.gson.MixedStreamTest.testWriteLenient":631,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":579,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":66,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":157,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":174,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":380,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":345,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":121,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":520,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":435,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":306,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":8,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":649,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":138,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":260,"com.google.gson.functional.ObjectTest.testSingletonLists":378,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":571,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":290,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":607,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":197,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":51,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":589,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":397,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":100,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":348,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":37,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":620,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":54,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":337,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":457,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":643,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":229,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":89,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":449,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":228,"com.google.gson.functional.EnumTest.testEnumCaseMapping":120,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":605,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":637,"com.google.gson.functional.JsonTreeTest.testToJsonTree":60,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":281,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":592,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":76,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":45,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":650,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":545,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":504,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":263,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":47,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":167,"com.google.gson.functional.ObjectTest.testNullDeserialization":409,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":427,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":617,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":392,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":96,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":358,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":298,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":398,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":5,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":641,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":447,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":252,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":406,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":95,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":593,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":256,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":363,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":362,"com.google.gson.JsonParserTest.testParseString":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":588,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":342,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":21,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":369,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":410,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":500,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":569,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":203,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":221,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":334,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":560,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":81,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":0,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":183,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":243,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":207,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":343,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":335,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":405,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":494,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":50,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":386,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":600,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":129,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":239,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":302,"com.google.gson.metrics.PerformanceTest.testDummy":98,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":524,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":273,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":136,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":456,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":185,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":102,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":245,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":577,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":562,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":430,"com.google.gson.functional.CollectionTest.testSetDeserialization":173,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":436,"com.google.gson.functional.EnumTest.testEnumSet":111,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":391,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":526,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":326,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":184,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":550,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":399,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":88,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":339,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":455,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":350,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":110,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":444,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":351,"com.google.gson.functional.MapTest.testHashMapDeserialization":210,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":295,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":575,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":478,"com.google.gson.MixedStreamTest.testReadNulls":632,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":27,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":475,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":79,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":108,"com.google.gson.functional.MapTest.testSortedMap":232,"com.google.gson.functional.MapTest.testMapSerialization":227,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":477,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":332,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":466,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":507,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":32,"com.google.gson.functional.MapTest.testSerializeMaps":213,"com.google.gson.functional.MapTest.testComplexKeysSerialization":240,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":525,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":61,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":244,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":514,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":429,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":271,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":49,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":156,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":105,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":116,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":460,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":651,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":124,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":408,"com.google.gson.functional.MapTest.testStringKeyDeserialization":242,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":189,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":365,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":246,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":301,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":439,"com.google.gson.functional.PrettyPrintingTest.testMap":458,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":160,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":541,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":99,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":513,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":610,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":614,"com.google.gson.functional.CollectionTest.testQueueSerialization":164,"com.google.gson.functional.MapTest.testMapSerializationEmpty":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":557,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":652,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":327,"com.google.gson.functional.MapTest.testMapOfMapSerialization":226,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":565,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":170,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":198,"com.google.gson.functional.FieldNamingTest.testIdentity":603,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":608,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":186,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":483,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":411,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":59,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":128,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":181,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":377,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":284,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":90,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":248,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":609,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":324,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":581,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":591,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":208,"com.google.gson.functional.MapTest.testMapSubclassSerialization":212,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":361,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":145,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":473,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":528,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":35,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":441,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":628,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":540,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":104,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":134,"com.google.gson.functional.EnumTest.testEnumSubclass":114,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":338,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":101,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":395,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":283,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":6,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":247,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":29,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":286,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":423,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":83,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":322,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":422,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":72,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":92,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":503,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":644,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":328,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":390,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":127,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":584,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":379,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":209,"com.google.gson.MixedStreamTest.testWriteNulls":629,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":502,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":205,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":496,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":428,"com.google.gson.CommentsTest.testParseComments":639,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":647,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":266,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":381,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":341,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":509,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":519,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":465,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":231,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":612,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":425,"com.google.gson.MixedStreamTest.testReadInvalidState":626,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":432,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":143,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":586,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":467,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":7,"com.google.gson.JsonParserTest.testParseMixedArray":14,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":294,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":515,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":43,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":516,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":2,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":311,"com.google.gson.JsonArrayTest.testRemove":24,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":567,"com.google.gson.functional.MapTest.testMapDeserialization":219,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":561,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":463,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":19,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":11,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":259,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":218,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":278,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":265,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":261,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":30,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":654,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":58,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":539,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":396,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":412,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":442,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":546,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":142,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":155,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":420,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":230,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":195,"com.google.gson.functional.PrimitiveTest.testShortSerialization":359,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":268,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":317,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":48,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":551,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":31,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":113,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":642,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":159,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":472,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":640,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":214,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":310,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":367,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":53,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":578,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":62,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":636,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":374,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":368,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":187,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":277,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":413,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":36,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":534,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":353,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":532,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":190,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":323,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":417,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":385,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":119,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":150,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":527,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":547,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":437,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":191,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":258,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":568,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":85,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":300,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":554,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":573,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":74,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":287,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":354,"com.google.gson.JsonArrayTest.testSet":22,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":325,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":371,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":201,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":112,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":264,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":56,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":468,"com.google.gson.functional.MapTest.testGeneralMapField":236,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":383,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":12,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":373,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":249,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":438,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":580,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":234,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":255,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":535,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":349,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":33,"com.google.gson.MixedStreamTest.testReadMixedStreamed":635,"com.google.gson.JsonObjectTest.testDeepCopy":16,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":3,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":222,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":548,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":91,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":175,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":530,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":330,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":450,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":566,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":223,"com.google.gson.JsonArrayTest.testDeepCopy":23,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":598,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":194,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":372,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":489,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":313,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":564,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":206,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":484,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":533,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":270,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":200,"com.google.gson.functional.ObjectTest.testNestedDeserialization":418,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":403,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":424,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":479,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":448,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":370,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":518,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":15,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":123,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":224,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":611,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":133,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":149,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":69,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":204,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":178,"com.google.gson.functional.ObjectTest.testNullSerialization":26,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":151,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":597,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":235,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":285,"com.google.gson.functional.MapTest.testInterfaceTypeMap":233,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":440,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":288,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":154,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":443,"com.google.gson.MixedStreamTest.testReadClosed":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":536,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":446,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":304,"com.google.gson.MixedStreamTest.testWriteClosed":634,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":166,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":481,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":276,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":384,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":594,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":139,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":78,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":415,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":587,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":279,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":387,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":165,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":40,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":333,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":41,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":152,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":171,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":4,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":574,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":485,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":375,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":309,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":431,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":490,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":77,"com.google.gson.functional.CollectionTest.testQueueDeserialization":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":315,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":331,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":84,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":616,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":585,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":596,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":220,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":556,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":257,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":416,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":158,"com.google.gson.functional.MapTest.testRawMapSerialization":238,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":625,"com.google.gson.JsonParserTest.testParseReader":645,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":572,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":147,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":401,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":471,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":25,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":65,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":103,"com.google.gson.functional.PrimitiveTest.testByteSerialization":356,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":495,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":623,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":253,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":299,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":67,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":506,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":601,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":140,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":613,"com.google.gson.functional.MapTest.testMapWithQuotes":225,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":542,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":182,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":529,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":199,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":655,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":20,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":434,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":262,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":130,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":414,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":464,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":340,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":553,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":389,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":544,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":555,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":595,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":352,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":109,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":172,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":132,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":583,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":28,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":486,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":42,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":44,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":474,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":144,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":289,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":196,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":400,"com.google.gson.internal.LinkedTreeMapTest.testClear":46,"com.google.gson.functional.ObjectTest.testNestedSerialization":402,"com.google.gson.JsonObjectTest.testAddingStringProperties":653,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":202,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":254,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":303,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":619,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":488,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":237,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":469,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":531,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":97,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":633,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":393,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":482,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":366,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":75,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":558,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":94,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":305,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":638,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":538,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":38,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":618,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":501,"com.google.gson.functional.CollectionTest.testSetSerialization":177,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":250,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":192,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":461,"com.google.gson.functional.StringTest.testStringValueSerialization":621,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":622,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":125,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":162,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":492,"com.google.gson.MixedStreamTest.testWriteInvalidState":630,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":388,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":308,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":314,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":510,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":549,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":34,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":602,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":426,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":648,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":487,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":445,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":576,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":624,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":217,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":452,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":497},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f984263a-3e7d-11e6-a25c-8156ab88287f","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"f9849b6b-3e7d-11e6-a25c-71bddb331a62","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (!(element instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f9849b6c-3e7d-11e6-a25c-1d40bd7cc247","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f984c27d-3e7d-11e6-a25c-571b6ef4bc8d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[25,26],"tindex":"f984c27e-3e7d-11e6-a25c-b1bc236d2dff","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[27,28,29,30,31,32],"tindex":"f984e98f-3e7d-11e6-a25c-01f3edafa613","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f9850fa0-3e7d-11e6-a25c-87a5d781767a","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = true;\n    boolean boolean = reader.isLenient();\n    reader.setLenient(true);\n    try {\n        reader.peek();\n        isEmpty = false;\n        com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n        T T = typeAdapter.read(reader);\n        return object;\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return null;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } finally {\n        reader.setLenient(oldLenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[33,34],"tindex":"f9850fa1-3e7d-11e6-a25c-1d179ae39b97","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f9850fa2-3e7d-11e6-a25c-23cac51b742d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f98536b3-3e7d-11e6-a25c-b913228f2056","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:469","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_ARRAY)"},"failures":[],"tindex":"f98536b4-3e7d-11e6-a25c-5918ab35926d","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"modifier","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f98536b5-3e7d-11e6-a25c-91362a377f69","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"f98536b6-3e7d-11e6-a25c-1f55a390cc33","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f98536b7-3e7d-11e6-a25c-e55accb18c02","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f9855dc8-3e7d-11e6-a25c-eb003373c2cd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"f9855dc9-3e7d-11e6-a25c-8f90ff309a16","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"f9855dca-3e7d-11e6-a25c-bb24aed35b09","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[35,36,37,38,39,40,41,42,43,44,45],"tindex":"f9855dcb-3e7d-11e6-a25c-7753a6eb9494","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"f9855dcc-3e7d-11e6-a25c-71b8b5af8d2b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    if (node != null) {\n        removeInternal(node, true);\n    } \n    return node;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"f98584dd-3e7d-11e6-a25c-f9df51b4c356","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f98584de-3e7d-11e6-a25c-43b6181a3406","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"f98584df-3e7d-11e6-a25c-d74b5e2bb42c","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            if (name != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:261","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[46,47,48,49,50,51,52,18,53,54,55,56,57,58,59,60],"tindex":"f98584e0-3e7d-11e6-a25c-09e71c0376f3","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,54,55,77,78,79,80,81,57,58,59,60],"tindex":"f985abf1-3e7d-11e6-a25c-2f69d6435c61","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"f985abf2-3e7d-11e6-a25c-67fdaac00015","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"f985d303-3e7d-11e6-a25c-bb5ead63e550","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"f985d304-3e7d-11e6-a25c-177c99599d5b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key.equals(key)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","to":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:915","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"f985d305-3e7d-11e6-a25c-6bc404d17b3c","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i == i) || (p == i)) {\n        {\n            if ((i == i) || (p == i)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:915","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"f9862126-3e7d-11e6-a25c-fdd3dd613281","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i == i) || (p == i)) {\n        {\n            if ((i == i) || (p == i)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[82,83,84,85,86],"tindex":"f9862127-3e7d-11e6-a25c-7df9987bbb48","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"f9862128-3e7d-11e6-a25c-5f7fb353a8ac","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n        E E = ((E)(java.lang.reflect.Array.get(array, i)));\n        com.google.gson.TypeAdapter<E>.write(out, value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[87,88,89,90,91,92,93,94,50,95,96,97,98,99,100,101,102,103,104,51,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,27,147,148,149,150,28,151,29,152,153,154,155,156,30,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,52,179,180,66,67,181,68,69,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,17,203,18,53,204,205,206,207,208,19,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,70,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,25,270,271,272,71,72,73,273,274,275,74,75,276,277,278,279,76,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,26,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,54,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,55,477,478,479,480,481,56,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,77,78,520,521,522,523,524,525,526,527,528,79,529,530,80,81,57,58,59,60,531,532,533,534,535,536,537,538,539,20,540,541,542,543,544,21,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,35,36,37,38,595,39,40,596,41,42,597,598,599,600,86,31,601,602,32,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639],"tindex":"f9864839-3e7d-11e6-a25c-8f3e887ac273","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[263],"tindex":"f986483a-3e7d-11e6-a25c-67f360f39076","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f9866f4b-3e7d-11e6-a25c-35b3786cbfa3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[1,62],"tindex":"f9866f4c-3e7d-11e6-a25c-29d448cb4d00","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f9866f4d-3e7d-11e6-a25c-85189de17223","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f9866f4e-3e7d-11e6-a25c-4337e5ff5778","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f9866f4f-3e7d-11e6-a25c-6d65d67b2541","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"f9869660-3e7d-11e6-a25c-d795adf9ffbd","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl","sourcecode":"!(hasNext())"},"failures":[],"tindex":"f9869661-3e7d-11e6-a25c-a9957fbebca7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[640,47,641,642,643,644,65,33,34,645,646,647,648,649,650,651,652,16,653,144,66,67,68,69,185,186,53,211,214,215,219,223,228,239,242,71,72,73,74,75,76,54,654,467,468,469,473,474,655,55,485,77,78,81,59,537],"tindex":"f9869662-3e7d-11e6-a25c-d96615a070db","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.sql.Timestamp.class":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[49],"tindex":"f9869663-3e7d-11e6-a25c-3519a69ab69b","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261452901/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":58,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":122,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":20,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":262,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":121,"com.google.gson.stream.JsonWriterTest.testRepeatedName":259,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":47,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":201,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":205,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":146,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":227,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":36,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":151,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":152,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":88,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":154,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":226,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":218,"com.google.gson.functional.ObjectTest.testSingletonLists":125,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":208,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":110,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":85,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":220,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":166,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":234,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":26,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":184,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":137,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":181,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":193,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":30,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":31,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":174,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":179,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":45,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":242,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":229,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":70,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":54,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":200,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":250,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":111,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":221,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":114,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":253,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":107,"com.google.gson.functional.JsonTreeTest.testToJsonTree":100,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":115,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":65,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":28,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":17,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":173,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":247,"com.google.gson.functional.MapTest.testGeneralMapField":120,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":228,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":140,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":41,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":101,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":232,"com.google.gson.MixedStreamTest.testReadMixedStreamed":165,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":43,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":237,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":263,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":212,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":103,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":215,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":168,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":82,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":135,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":105,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":206,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":33,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":258,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":57,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":4,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":108,"com.google.gson.functional.ObjectTest.testNestedDeserialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":59,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":13,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":134,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":24,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":159,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":230,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":50,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":182,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":72,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":216,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":62,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":75,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":39,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":209,"com.google.gson.functional.ObjectTest.testNullSerialization":256,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":56,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":119,"com.google.gson.functional.MapTest.testInterfaceTypeMap":118,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":167,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":42,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":64,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":245,"com.google.gson.functional.CollectionTest.testSetDeserialization":249,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":94,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":25,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":87,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":189,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":76,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":131,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":169,"com.google.gson.MixedStreamTest.testWriteClosed":164,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":172,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":127,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":192,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":77,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":16,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":12,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":138,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":51,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":84,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":68,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":128,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":176,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":21,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":246,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":149,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":34,"com.google.gson.functional.MapTest.testComplexKeysSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":188,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":6,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":142,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":204,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":116,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":97,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":143,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":15,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":264,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":252,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":157,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":177,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":48,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":117,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":238,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":104,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":241,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":27,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":52,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":22,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":248,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":255,"com.google.gson.ObjectTypeAdapterTest.testSerialize":162,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":102,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":37,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":10,"com.google.gson.functional.FieldNamingTest.testIdentity":150,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":78,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":3,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":239,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":49,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":99,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":124,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":96,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":223,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":92,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":161,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":9,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":71,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":240,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":158,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":89,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":197,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":231,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":95,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":83,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":203,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":73,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":233,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":40,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":32,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":38,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":187,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":55,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":5,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":90,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":123,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":251,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":224,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":60,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":160,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":235,"com.google.gson.functional.ObjectTest.testNestedSerialization":133,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":18,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":185,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":260,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":145,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":109,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":225,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":141,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":194,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":219,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":66,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":214,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":14,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":198,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":236,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":175,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":80,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":144,"com.google.gson.functional.CollectionTest.testSetSerialization":155,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":46,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":35,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":7,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":183,"com.google.gson.MixedStreamTest.testWriteInvalidState":163,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":11,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":8,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":211,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":23,"com.google.gson.stream.JsonWriterTest.testBooleans":257,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":148,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":217,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":67,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":113,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":170,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":191,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":79,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":136,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":53,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":61,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":261,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":196},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"f84dffa2-3e6c-11e6-8255-f56d4817a9db","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[],"tindex":"f84e4dc3-3e6c-11e6-8255-77c2fcca6f1e","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"toFind","value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162],"tindex":"f84e74d4-3e6c-11e6-8255-b50964f82363","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,163,164,165,166,167,168,169,3,4,5,170,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,171,22,172,173,23,24,31,174,175,32,33,176,177,34,35,36,37,38,39,40,41,178,42,43,179,180,181,44,45,46,47,182,48,183,184,185,49,50,51,52,53,186,54,55,56,187,188,57,189,58,190,191,59,60,61,62,63,64,65,66,192,193,67,68,69,70,71,194,72,73,74,75,76,195,77,78,79,196,80,197,81,198,199,200,201,202,82,83,84,203,85,86,87,204,88,89,90,91,92,93,94,95,96,97,98,99,100,205,206,207,208,209,101,210,211,102,103,104,105,106,212,107,108,109,213,214,215,110,216,111,217,218,112,113,219,114,115,116,220,117,221,118,119,120,222,121,122,223,224,123,124,125,225,226,126,227,228,127,229,230,128,231,129,232,130,233,234,131,235,132,133,236,134,237,238,135,239,136,137,240,138,241,242,243,244,139,140,141,142,245,143,246,144,247,145,248,146,147,148,149,150,151,152,153,249,154,155,156,157,158,159,160,161,162],"tindex":"f84e74d5-3e6c-11e6-8255-679885aae53c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[250,251,252,253,254],"tindex":"f84e9be6-3e6c-11e6-8255-ab2eb49e4800","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"f84e9be7-3e6c-11e6-8255-abbe11ad7299","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"f84e9be8-3e6c-11e6-8255-0143fb6789bc","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[255,256],"tindex":"f84ec2f9-3e6c-11e6-8255-eb1ed5c49cc6","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[],"tindex":"f84eea0a-3e6c-11e6-8255-235877f7966f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"f84f111b-3e6c-11e6-8255-65856dd81a6b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f84f111c-3e6c-11e6-8255-714cfd623c91","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f84f111d-3e6c-11e6-8255-5de8b77feb56","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f84f5f3e-3e6c-11e6-8255-8563ba8ccacf","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f84f5f3f-3e6c-11e6-8255-2111413f68e3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[257,258,259,260,261,262,3,4,32,35,263,264,67,76,85,86,90,98,101,105,108,110,126,130,131,133,135,136,138,151,153,154,157,158,159],"tindex":"f84f5f40-3e6c-11e6-8255-0d230fe84451","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"f84f8651-3e6c-11e6-8255-973a3fe70fd9","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f84f8652-3e6c-11e6-8255-8f7da9811ab8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"f84f8653-3e6c-11e6-8255-c3eb683f4e64","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (java.lang.Character.isLetter(quote)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"f84fad64-3e6c-11e6-8255-fbdaf987f629","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type != type) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2028'"},"failures":[],"tindex":"f84ffb85-3e6c-11e6-8255-01b2422e0852","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f8502296-3e6c-11e6-8255-8d0582736f5e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"f8502297-3e6c-11e6-8255-b379481991f4","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467254418717/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":22,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
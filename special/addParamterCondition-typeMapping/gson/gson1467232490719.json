{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":71,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":596,"com.google.gson.functional.StringTest.testStringValueDeserialization":594,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":242,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":557,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":295,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":119,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":416,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":49,"com.google.gson.MixedStreamTest.testWriteLenient":618,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":566,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":180,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":157,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":173,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":378,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":343,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":118,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":509,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":432,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":256,"com.google.gson.functional.ObjectTest.testSingletonLists":376,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":558,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":288,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":597,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":198,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":45,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":576,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":394,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":98,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":346,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":2,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":610,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":63,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":335,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":454,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":226,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":88,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":280,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":446,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":56,"com.google.gson.functional.EnumTest.testEnumCaseMapping":117,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":595,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":624,"com.google.gson.functional.JsonTreeTest.testToJsonTree":81,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":279,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":579,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":62,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":10,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":534,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":494,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":550,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":259,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":30,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":167,"com.google.gson.functional.ObjectTest.testNullDeserialization":406,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":424,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":36,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":607,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":389,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":14,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":296,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":395,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":444,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":248,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":403,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":94,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":580,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":252,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":361,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":360,"com.google.gson.JsonParserTest.testParseString":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":575,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":340,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":319,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":533,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":407,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":490,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":556,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":50,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":220,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":332,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":64,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":547,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":77,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":186,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":238,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":206,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":341,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":333,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":402,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":484,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":41,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":384,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":587,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":630,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":126,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":235,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":300,"com.google.gson.metrics.PerformanceTest.testDummy":96,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":512,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":271,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":133,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":47,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":100,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":240,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":564,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":549,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":427,"com.google.gson.functional.CollectionTest.testSetDeserialization":172,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":433,"com.google.gson.functional.EnumTest.testEnumSet":108,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":388,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":514,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":324,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":187,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":11,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":538,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":396,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":337,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":452,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":348,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":15,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":441,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":349,"com.google.gson.functional.MapTest.testHashMapDeserialization":210,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":293,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":562,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":470,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":588,"com.google.gson.MixedStreamTest.testReadNulls":619,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":143,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":467,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":75,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":106,"com.google.gson.functional.MapTest.testSortedMap":228,"com.google.gson.functional.MapTest.testMapSerialization":225,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":330,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":462,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":497,"com.google.gson.functional.MapTest.testSerializeMaps":213,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":592,"com.google.gson.functional.MapTest.testComplexKeysSerialization":236,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":513,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":239,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":503,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":115,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":426,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":268,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":155,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":103,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":113,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":457,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":121,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":405,"com.google.gson.functional.MapTest.testStringKeyDeserialization":57,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":13,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":500,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":191,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":363,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":241,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":294,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":436,"com.google.gson.functional.PrettyPrintingTest.testMap":455,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":160,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":104,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":529,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":97,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":502,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":600,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":604,"com.google.gson.functional.CollectionTest.testQueueSerialization":164,"com.google.gson.functional.MapTest.testMapSerializationEmpty":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":325,"com.google.gson.functional.MapTest.testMapOfMapSerialization":224,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":316,"com.google.gson.JavaSerializationTest.testMapIsSerializable":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":552,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":169,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":327,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":639,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":199,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":632,"com.google.gson.functional.FieldNamingTest.testIdentity":593,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":598,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":188,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":22,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":408,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":80,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":125,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":182,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":375,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":282,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":89,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":244,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":599,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":322,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":568,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":578,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":638,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":207,"com.google.gson.functional.MapTest.testMapSubclassSerialization":212,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":359,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":69,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":141,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":516,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":0,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":314,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":438,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":615,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":528,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":102,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":131,"com.google.gson.functional.EnumTest.testEnumSubclass":111,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":336,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":99,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":392,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":281,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":243,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":342,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":150,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":284,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":420,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":320,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":419,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":58,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":91,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":493,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":32,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":326,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":387,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":124,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":571,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":377,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":209,"com.google.gson.MixedStreamTest.testWriteNulls":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":492,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":204,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":486,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":128,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":425,"com.google.gson.CommentsTest.testParseComments":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":262,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":379,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":339,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":498,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":508,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":461,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":18,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":602,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":422,"com.google.gson.MixedStreamTest.testReadInvalidState":613,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":429,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":139,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":573,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":463,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":292,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":504,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":12,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":505,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":309,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":554,"com.google.gson.functional.MapTest.testMapDeserialization":54,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":548,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":460,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":255,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":218,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":261,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":257,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":156,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":79,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":526,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":393,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":439,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":535,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":154,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":417,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":227,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":456,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":577,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":197,"com.google.gson.functional.PrimitiveTest.testShortSerialization":357,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":264,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":345,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":448,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":631,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":315,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":31,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":27,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":291,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":589,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":110,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":159,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":28,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":465,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":214,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":308,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":365,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":52,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":565,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":34,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":623,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":372,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":366,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":189,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":275,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":410,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":522,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":351,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":192,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":321,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":414,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":383,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":147,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":515,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":254,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":298,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":541,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":560,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":60,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":285,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":352,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":323,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":369,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":202,"com.google.gson.JsonPrimitiveTest.testEquals":629,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":260,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":72,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":66,"com.google.gson.functional.MapTest.testGeneralMapField":232,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":381,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":483,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":371,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":24,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":567,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":230,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":251,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":523,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":347,"com.google.gson.MixedStreamTest.testReadMixedStreamed":622,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":221,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":537,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":90,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":174,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":518,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":447,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":553,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":55,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":585,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":370,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":479,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":311,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":551,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":205,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":628,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":23,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":521,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":201,"com.google.gson.functional.ObjectTest.testNestedDeserialization":415,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":400,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":421,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":471,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":445,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":368,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":507,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":120,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":222,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":601,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":130,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":355,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":146,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":53,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":184,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":177,"com.google.gson.functional.ObjectTest.testNullSerialization":390,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":149,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":584,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":231,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":283,"com.google.gson.functional.MapTest.testInterfaceTypeMap":229,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":495,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":437,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":273,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":286,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":114,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":640,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":440,"com.google.gson.MixedStreamTest.testReadClosed":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":524,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":302,"com.google.gson.MixedStreamTest.testWriteClosed":621,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":166,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":473,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":274,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":135,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":272,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":74,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":412,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":574,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":19,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":277,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":165,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":331,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":151,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":561,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":475,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":373,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":636,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":307,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":531,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":428,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":480,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":73,"com.google.gson.functional.CollectionTest.testQueueDeserialization":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":313,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":329,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":606,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":572,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":583,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":219,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":543,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":253,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":413,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":158,"com.google.gson.functional.MapTest.testRawMapSerialization":234,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":612,"com.google.gson.JsonParserTest.testParseReader":39,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":559,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":144,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":398,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":68,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":266,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":633,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":101,"com.google.gson.functional.PrimitiveTest.testByteSerialization":354,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":485,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":635,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":84,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":249,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":297,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":181,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":496,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":590,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":136,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":603,"com.google.gson.functional.MapTest.testMapWithQuotes":223,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":530,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":605,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":185,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":517,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":200,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":527,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":431,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":258,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":127,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":411,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":338,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":540,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":386,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":532,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":542,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":582,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":350,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":107,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":171,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":488,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":129,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":570,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":148,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":476,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":7,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":9,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":466,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":105,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":140,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":48,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":397,"com.google.gson.internal.LinkedTreeMapTest.testClear":29,"com.google.gson.functional.ObjectTest.testNestedSerialization":399,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":203,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":250,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":301,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":609,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":478,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":233,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":464,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":519,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":95,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":620,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":20,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":474,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":364,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":61,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":545,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":93,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":303,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":625,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":525,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":3,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":608,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":491,"com.google.gson.functional.CollectionTest.testSetSerialization":176,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":194,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":458,"com.google.gson.functional.StringTest.testStringValueSerialization":611,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":26,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":122,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":162,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":627,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":482,"com.google.gson.MixedStreamTest.testWriteInvalidState":617,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":385,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":306,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":312,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":499,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":83,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":38,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":591,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":423,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":477,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":442,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":563,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":85,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":217,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":449,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":487},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"eda2d15c-3e38-11e6-ab2b-05cc5efab007","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"o","type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[],"tindex":"eda31f7d-3e38-11e6-ab2b-c740e4ccbf38","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"eda31f7e-3e38-11e6-ab2b-03160b76d563","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"eda3468f-3e38-11e6-ab2b-c714cddf7fd1","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[1,2,3,4,5,6],"tindex":"eda34690-3e38-11e6-ab2b-5702d940bffc","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"eda34691-3e38-11e6-ab2b-03f6737d075f","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[11,12,13],"tindex":"eda34692-3e38-11e6-ab2b-85a000990bb5","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"eda36da3-3e38-11e6-ab2b-df5629f3e136","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"eda36da4-3e38-11e6-ab2b-072486a50540","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"eda394b5-3e38-11e6-ab2b-7d26279a1494","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"eda394b6-3e38-11e6-ab2b-3397e4690817","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda394b7-3e38-11e6-ab2b-9bfe6f0baeab","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"eda394b8-3e38-11e6-ab2b-51f9590f26e1","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter.peek()) == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"typeAdapter","com.google.gson.stream.JsonToken.NULL":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"eda3bbc9-3e38-11e6-ab2b-a5d8aecaa683","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Number) {\n        {\n            if (o == o) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.lang.Class<?>) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[27],"tindex":"eda3bbca-3e38-11e6-ab2b-b97641c771f2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"eda3e2db-3e38-11e6-ab2b-a9a565df13d8","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda3e2dc-3e38-11e6-ab2b-65e0e49a6db1","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"eda3e2dd-3e38-11e6-ab2b-5393d127a5ba","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"eda3e2de-3e38-11e6-ab2b-7fa6a5541566","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda3e2df-3e38-11e6-ab2b-6d8b5cbdf962","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    return toJsonTree(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"eda409f0-3e38-11e6-ab2b-1b1f9d1cc77b","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"eda409f1-3e38-11e6-ab2b-3958eac1fba1","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion > (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda409f2-3e38-11e6-ab2b-7be62eda2811","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"eda409f3-3e38-11e6-ab2b-4fd593cb866c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"eda409f4-3e38-11e6-ab2b-6166f40932f4","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"eda43105-3e38-11e6-ab2b-fda3ec0c6226","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isString()) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"eda43106-3e38-11e6-ab2b-e96a402c6682","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == timeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"eda43107-3e38-11e6-ab2b-a1f653deefb6","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"eda43108-3e38-11e6-ab2b-41d4fdbde35b","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        {\n            if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    result.double = ignoreVersionsAfter;\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"tindex":"eda43109-3e38-11e6-ab2b-a3e00ec0b62f","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:53","type":"CtInvocationImpl","sourcecode":"com.google.gson.TypeAdapter.class.isAssignableFrom(value)"},"failures":[],"tindex":"eda4581a-3e38-11e6-ab2b-f9efb3a12338","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.TypeAdapter.class":"context","value":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"eda4581b-3e38-11e6-ab2b-8fba5c6facf6","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        {\n            if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n                    result.double = ignoreVersionsAfter;\n                    return result;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"eda47f2c-3e38-11e6-ab2b-a3fc1f2223aa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (key.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (findByObject(key)) != null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"eda47f2d-3e38-11e6-ab2b-71ee9067dab2","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"eda47f2e-3e38-11e6-ab2b-6ba489f37ba0","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"eda47f2f-3e38-11e6-ab2b-bfd6eb509a52","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"eda47f30-3e38-11e6-ab2b-c122803adeeb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda47f31-3e38-11e6-ab2b-53df8b536e8a","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (jsonElement == null) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"eda4a642-3e38-11e6-ab2b-798487552943","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"eda4a643-3e38-11e6-ab2b-553fbf79e1b2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda4a644-3e38-11e6-ab2b-ff68666b49bf","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"eda4a645-3e38-11e6-ab2b-e31ec386ca45","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[86,87,88,89,90,91,92,93,41,94,14,95,96,97,98,99,100,101,102,45,103,104,105,106,107,15,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,16,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,17,168,169,170,171,172,173,174,175,176,177,46,178,179,180,181,182,183,184,185,186,187,47,188,189,190,191,192,193,194,195,196,197,48,198,199,200,201,202,203,49,50,51,52,53,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,54,219,220,221,55,222,223,224,225,56,226,227,18,228,229,230,231,232,233,234,235,236,237,57,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,58,59,271,272,273,60,61,274,275,276,277,62,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,19,385,386,387,388,389,390,20,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,63,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,21,461,462,463,66,464,67,68,465,69,466,467,468,71,469,470,471,472,473,72,474,22,23,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,24,498,499,500,501,502,503,504,505,506,507,508,73,74,509,510,511,25,512,513,514,515,516,75,517,518,76,77,78,79,80,81,519,520,521,522,523,524,82,525,526,527,528,529,530,531,532,533,534,535,536,537,83,538,27,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,0,1,2,3,582,4,5,583,6,7,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,26,84,85,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626],"tindex":"eda4a646-3e38-11e6-ab2b-8946b1cab2c5","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda4cd57-3e38-11e6-ab2b-e9f03ecc83fe","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda4f468-3e38-11e6-ab2b-a7a0a512deff","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"eda4f469-3e38-11e6-ab2b-b3b1b5ebecd5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"eda4f46a-3e38-11e6-ab2b-4b7630fc2442","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[167,219,229,231,242,254,257,260,261,266,268,270,58,59,271,273,60,61,277,62,627,491,501,80,27],"tindex":"eda4f46b-3e38-11e6-ab2b-0f91d230ddb3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda4f46c-3e38-11e6-ab2b-21570d41e7c6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda4f46d-3e38-11e6-ab2b-8f1996e0e7a8","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[78,81,579,628,629,630],"tindex":"eda51b7e-3e38-11e6-ab2b-e51d7f5eaace","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"eda51b7f-3e38-11e6-ab2b-272f52e3c2cf","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[349,624],"tindex":"eda51b80-3e38-11e6-ab2b-bb67c9cc897f","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"eda51b81-3e38-11e6-ab2b-c7b628ddb880","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Number) {\n        {\n            if (o == o) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.lang.Class<?>) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.util.Date.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"eda51b82-3e38-11e6-ab2b-2d2350403ae3","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Number) {\n        {\n            if (o == o) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (o instanceof java.lang.Class<?>) {\n                        {\n                            return containsKey(o);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"eda54293-3e38-11e6-ab2b-6bc8f1b599a0","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"eda54294-3e38-11e6-ab2b-fd65a10ed84d","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"eda54295-3e38-11e6-ab2b-4dfa64c01df1","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[631,632,87,88,89,90,633,634,635,91,92,41,94,14,95,97,98,99,101,45,103,107,15,108,109,110,111,114,116,117,118,119,121,123,125,126,127,129,130,131,132,133,16,135,136,137,139,142,143,144,145,147,148,149,152,154,157,158,159,160,164,165,166,167,17,170,173,174,176,177,178,180,181,182,183,184,185,187,190,191,192,194,195,196,48,199,200,201,202,203,208,212,213,216,218,219,223,224,225,227,18,229,230,231,232,233,234,236,237,238,241,242,243,244,245,247,248,249,250,251,252,253,254,257,259,260,261,263,264,265,266,268,270,58,59,271,272,273,60,61,276,277,62,281,283,289,292,300,301,307,309,310,313,316,318,319,322,323,327,336,338,340,341,344,347,349,353,354,355,356,357,358,359,363,365,369,370,372,375,376,379,382,19,385,388,390,20,393,395,396,398,399,400,402,407,409,410,412,417,420,63,421,423,424,425,426,428,636,627,637,638,639,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,640,454,455,456,457,458,459,460,21,463,464,465,69,466,70,467,468,71,469,472,22,23,476,478,479,480,481,483,484,485,486,487,490,491,492,496,24,499,501,503,505,506,507,508,73,74,509,25,515,75,76,77,78,79,80,81,519,522,523,524,527,529,530,532,534,535,83,27,540,541,542,543,544,546,548,549,551,553,554,555,556,558,561,563,564,566,567,569,570,571,572,573,574,577,578,580,0,1,582,4,6,585,586,587,588,589,590,591,592,593,595,596,597,598,599,602,604,608,611,26,84,85,612,615,616,617,618,620,621,624,625],"tindex":"eda54296-3e38-11e6-ab2b-b30af91a05ca","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda569a7-3e38-11e6-ab2b-47718d52a379","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda569a8-3e38-11e6-ab2b-edfbbbe22ef1","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"eda569a9-3e38-11e6-ab2b-7d42e8291929","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"target","value":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[],"tindex":"eda569aa-3e38-11e6-ab2b-d7ce157560e0","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"eda569ab-3e38-11e6-ab2b-1981f52b7403","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"eda590bc-3e38-11e6-ab2b-09b9472a23f1","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (jsonElement == null) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"eda590bd-3e38-11e6-ab2b-eb7aa9468a9d","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[],"tindex":"eda5b7ce-3e38-11e6-ab2b-01ee77549920","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"eda5b7cf-3e38-11e6-ab2b-8132a3e845fe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (key.isBoolean()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (findByObject(key)) != null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"eda5b7d0-3e38-11e6-ab2b-7dbc565af77b","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"eda5b7d1-3e38-11e6-ab2b-4f69d979bdb1","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231435707/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":70,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
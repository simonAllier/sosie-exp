{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":43,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":612,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":83,"com.google.gson.functional.StringTest.testStringValueDeserialization":610,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":185,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":577,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":351,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":249,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":464,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":21,"com.google.gson.MixedStreamTest.testWriteLenient":221,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":586,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":68,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":141,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":281,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":399,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":248,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":535,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":479,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":360,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":259,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":319,"com.google.gson.functional.ObjectTest.testSingletonLists":197,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":578,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":345,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":613,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":233,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":295,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":17,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":594,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":446,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":236,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":196,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":111,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":626,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":35,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":391,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":493,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":171,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":225,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":337,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":102,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":28,"com.google.gson.functional.EnumTest.testEnumCaseMapping":247,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":611,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":636,"com.google.gson.functional.JsonTreeTest.testToJsonTree":53,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":336,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":596,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":34,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":556,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":212,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":570,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":322,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":2,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":471,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":8,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":623,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":442,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":411,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":640,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":352,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":447,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":101,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":188,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":454,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":639,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":597,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":316,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":416,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":415,"com.google.gson.JsonParserTest.testParseString":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":593,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":396,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":375,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":555,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":457,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":519,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":576,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":22,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":305,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":388,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":36,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":567,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":49,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":286,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":181,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":299,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":389,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":199,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":513,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":13,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":438,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":604,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":76,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":133,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":356,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":539,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":330,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":257,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":207,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":19,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":125,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":183,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":584,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":569,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":474,"com.google.gson.functional.CollectionTest.testSetDeserialization":152,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":480,"com.google.gson.functional.EnumTest.testEnumSet":243,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":441,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":541,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":380,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":157,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":93,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":560,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":448,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":393,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":492,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":403,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":99,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":242,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":404,"com.google.gson.functional.MapTest.testHashMapDeserialization":301,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":349,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":582,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":503,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":605,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":103,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":264,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":47,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":126,"com.google.gson.functional.MapTest.testSortedMap":173,"com.google.gson.functional.MapTest.testMapSerialization":170,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":9,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":386,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":500,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":524,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":120,"com.google.gson.functional.MapTest.testSerializeMaps":303,"com.google.gson.functional.MapTest.testComplexKeysSerialization":179,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":540,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":182,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":638,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":531,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":473,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":192,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":274,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":641,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":244,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":63,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":495,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":251,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":456,"com.google.gson.functional.MapTest.testStringKeyDeserialization":29,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":95,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":528,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":289,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":418,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":184,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":355,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":350,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":482,"com.google.gson.functional.PrettyPrintingTest.testMap":494,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":277,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":240,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":552,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":235,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":530,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":616,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":620,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":64,"com.google.gson.functional.CollectionTest.testQueueSerialization":145,"com.google.gson.functional.MapTest.testMapSerializationEmpty":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":564,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":381,"com.google.gson.functional.MapTest.testMapOfMapSerialization":307,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":372,"com.google.gson.JavaSerializationTest.testMapIsSerializable":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":572,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":149,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":205,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":383,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":296,"com.google.gson.functional.FieldNamingTest.testIdentity":609,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":614,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":72,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":505,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":458,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":52,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":254,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":284,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":430,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":339,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":226,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":310,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":615,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":378,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":587,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":562,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":595,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":163,"com.google.gson.functional.MapTest.testMapSubclassSerialization":302,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":414,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":41,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":262,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":543,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":370,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":483,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":599,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":631,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":23,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":551,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":239,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":136,"com.google.gson.functional.EnumTest.testEnumSubclass":129,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":392,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":237,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":444,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":338,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":186,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":231,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":398,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":288,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":119,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":341,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":468,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":376,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":467,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":30,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":229,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":521,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":198,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":382,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":253,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":590,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":431,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":300,"com.google.gson.MixedStreamTest.testWriteNulls":644,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":211,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":161,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":515,"com.google.gson.CommentsTest.testParseComments":223,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":472,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":60,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":323,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":433,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":395,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":526,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":499,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":308,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":618,"com.google.gson.MixedStreamTest.testReadInvalidState":630,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":476,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":261,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":591,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":78,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":348,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":91,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":532,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":94,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":213,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":365,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":203,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":574,"com.google.gson.functional.MapTest.testMapDeserialization":26,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":568,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":498,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":164,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":318,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":304,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":191,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":37,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":275,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":51,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":549,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":445,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":459,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":266,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":557,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":260,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":273,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":465,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":172,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":208,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":335,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":158,"com.google.gson.functional.PrimitiveTest.testShortSerialization":412,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":325,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":401,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":489,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":371,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":3,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":561,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":606,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":128,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":58,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":276,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":0,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":501,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":74,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":364,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":420,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":24,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":585,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":6,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":635,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":427,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":421,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":252,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":287,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":332,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":545,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":406,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":377,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":462,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":437,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":131,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":268,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":542,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":558,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":481,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":291,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":189,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":354,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":580,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":32,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":342,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":407,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":379,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":424,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":160,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":127,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":190,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":44,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":38,"com.google.gson.functional.MapTest.testGeneralMapField":177,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":435,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":512,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":426,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":97,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":311,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":220,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":175,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":195,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":546,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":402,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":59,"com.google.gson.MixedStreamTest.testReadMixedStreamed":634,"com.google.gson.JsonObjectTest.testDeepCopy":65,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":168,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":559,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":216,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":227,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":282,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":84,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":384,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":488,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":123,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":573,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":27,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":602,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":294,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":425,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":108,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":367,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":571,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":162,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":506,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":544,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":159,"com.google.gson.functional.ObjectTest.testNestedDeserialization":463,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":452,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":469,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":105,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":77,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":487,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":423,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":534,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":169,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":250,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":617,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":135,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":410,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":267,"com.google.gson.JavaSerializationTest.testListIsSerializable":124,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":25,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":71,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":154,"com.google.gson.functional.ObjectTest.testNullSerialization":642,"com.google.gson.stream.JsonWriterTest.testDoubles":85,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":269,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":601,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":75,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":340,"com.google.gson.functional.MapTest.testInterfaceTypeMap":174,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":522,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":98,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":331,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":15,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":343,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":245,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":643,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":547,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":100,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":358,"com.google.gson.MixedStreamTest.testWriteClosed":633,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":106,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":279,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":194,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":598,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":138,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":193,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":46,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":461,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":592,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":334,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":439,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":146,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":115,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":387,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":270,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":581,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":81,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":201,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":428,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":363,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":554,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":475,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":509,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":45,"com.google.gson.functional.CollectionTest.testQueueDeserialization":156,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":369,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":385,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":622,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":90,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":116,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":167,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":89,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":200,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":317,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":142,"com.google.gson.functional.MapTest.testRawMapSerialization":309,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":629,"com.google.gson.JsonParserTest.testParseReader":11,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":579,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":265,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":450,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":40,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":327,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":121,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":228,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":238,"com.google.gson.functional.PrimitiveTest.testByteSerialization":409,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":514,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":56,"com.google.gson.ObjectTypeAdapterTest.testSerialize":232,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":353,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":69,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":523,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":607,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":139,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":224,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":619,"com.google.gson.functional.MapTest.testMapWithQuotes":306,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":553,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":621,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":285,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":215,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":297,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":550,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":478,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":321,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":134,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":460,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":87,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":394,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":440,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":219,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":88,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":113,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":405,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":151,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":517,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":256,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":589,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":118,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":507,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":600,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":80,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":67,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":344,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":20,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":449,"com.google.gson.internal.LinkedTreeMapTest.testClear":1,"com.google.gson.JsonObjectTest.testAddingStringProperties":66,"com.google.gson.functional.ObjectTest.testNestedSerialization":451,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":298,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":314,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":357,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":625,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":107,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":178,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":79,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":217,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":222,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":234,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":210,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":443,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":419,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":33,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":359,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":637,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":548,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":112,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":624,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":520,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":187,"com.google.gson.functional.CollectionTest.testSetSerialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":292,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":496,"com.google.gson.functional.StringTest.testStringValueSerialization":627,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":628,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":132,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":144,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":202,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":511,"com.google.gson.MixedStreamTest.testWriteInvalidState":632,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":362,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":368,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":527,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":55,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":10,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":608,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":470,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":61,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":486,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":583,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":57,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":166,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":82,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":206,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":516},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"72420f39-3e7b-11e6-98df-0fd2bb2b008b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7242846a-3e7b-11e6-98df-0719e0e68a4e","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"tindex":"7242846b-3e7b-11e6-98df-730281afc707","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7242ab7c-3e7b-11e6-98df-e71a0c8a5bd6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[0,2,58,4,59,10,11,12,60,61,62,14,63,64,65,66,67,68,69,70,71,19,72,73,74,75,26,27,28,76,29,77,30,31,32,33,34,35,37,78,38,79,41,80,42,43,81,45,46,49,54],"tindex":"7242d28d-3e7b-11e6-98df-c35ef513187b","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"7242d28e-3e7b-11e6-98df-5107d91e0f2c","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:828","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BUFFERED)"},"failures":[],"tindex":"7242d28f-3e7b-11e6-98df-171f36adafff","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"7242f9a0-3e7b-11e6-98df-bd1cfae9838e","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if ((property.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"7242f9a1-3e7b-11e6-98df-2da2ce19acb3","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    if (node != null) {\n        removeInternal(node, true);\n    } \n    return node;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"7242f9a2-3e7b-11e6-98df-0915a3a5a2df","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[82,83,84,85],"tindex":"724320b3-3e7b-11e6-98df-a7959ae1052d","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"724320b4-3e7b-11e6-98df-47afae99da51","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:694","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"724320b5-3e7b-11e6-98df-afe72555d422","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == dateStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"dateStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[86,87,88,89,90],"tindex":"724320b6-3e7b-11e6-98df-835e6f3bc77e","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"724347c7-3e7b-11e6-98df-c7582af60afb","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == key) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[91,92],"tindex":"724347c8-3e7b-11e6-98df-19f24f7a0e5a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node == node) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"replacement","node":"node","left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl","sourcecode":"com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)"},"failures":[93,94,95],"tindex":"72436ed9-3e7b-11e6-98df-adb17e0f4cf7","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, from, typeVarMap)) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from","typeVarMap":"typeVarMap","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"72436eda-3e7b-11e6-98df-9f9487345699","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if ((token instanceof java.lang.reflect.ParameterizedType) && (!(token.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"token","type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"724395eb-3e7b-11e6-98df-932aab3d54ad","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"724395ec-3e7b-11e6-98df-1bffba1a370a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"724395ed-3e7b-11e6-98df-37e202eacabb","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"724395ee-3e7b-11e6-98df-6b4157f42651","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"724395ef-3e7b-11e6-98df-f7059bb2a1b8","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.get();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[],"tindex":"7243bc00-3e7b-11e6-98df-4f5dfe4a45ba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node == node) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"replacement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"7243bc01-3e7b-11e6-98df-590e9410df23","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7243bc02-3e7b-11e6-98df-7388e9bb6d59","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"7243bc03-3e7b-11e6-98df-8338cb894258","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        type = value.getClass();\n    } \n    return type;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"7243e314-3e7b-11e6-98df-c194bdd403ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"7243e315-3e7b-11e6-98df-b7e504730d8f","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7243e316-3e7b-11e6-98df-17279d3f0878","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"7243e317-3e7b-11e6-98df-9be36fa1ddc0","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[5],"tindex":"7243e318-3e7b-11e6-98df-ed815678f5d8","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[96,97,98,99,100,101,102,78,79,42,103,43,104,105,106,107,108,109],"tindex":"72440a29-3e7b-11e6-98df-f7c855b86ea7","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[],"tindex":"7244313a-3e7b-11e6-98df-4d22b9443d6c","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl","sourcecode":"(context != nonempty) && (context != empty)"},"failures":[],"tindex":"7244313b-3e7b-11e6-98df-0b5aa4234d40","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i != i) && (context != i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","nonempty":"i","empty":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7244313c-3e7b-11e6-98df-c75d204388df","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[110,111,112,113,114,115,116,117],"tindex":"7244313d-3e7b-11e6-98df-0335dcb14d7e","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"7244313e-3e7b-11e6-98df-e3a5b4e1c8ee","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"7244584f-3e7b-11e6-98df-23e910062c58","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[118,119,120],"tindex":"72445850-3e7b-11e6-98df-f7b1fca41a80","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[121,122,123,16,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,18,155,156,157,72,158,159,160,161,162,163,164,73,74,75,165,166,26,167,168,27,169,170,28,171,172,173,174,175,176,177,178,76,179,180,29,181,182,183,184,185,186,187,188,189,190,191,192,30,193,194,195,196,197,198,199,86,200,201,202,203,204,205,206,207,208,209,41,80,210,108,211,212,213,214,45,46,47,215,216,48,49,217,218,219,220,221,222,223],"tindex":"72445851-3e7b-11e6-98df-b5b3e4fa6324","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (clazz.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"72445852-3e7b-11e6-98df-8fe08333faf9","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"72445853-3e7b-11e6-98df-2b4aeb655cb2","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"72447f64-3e7b-11e6-98df-65afbd207483","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            if (skipPast == skipPast) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72447f65-3e7b-11e6-98df-4b57f774902e","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[224,96,225,226,227,121,122,228,229,230,231,93,94,95,232,233,13,234,123,16,124,235,236,237,125,238,239,17,240,241,126,242,243,127,128,129,130,244,245,246,131,247,248,249,250,251,132,252,253,254,133,134,255,256,135,136,137,257,258,259,138,139,140,260,261,67,262,263,264,265,266,267,268,118,269,119,270,271,272,273,274,275,141,142,276,277,143,144,278,145,146,279,147,280,148,149,150,151,152,281,282,153,283,154,18,155,156,68,69,284,70,71,285,286,157,19,72,287,288,289,290,291,292,293,294,158,20,295,296,297,159,160,298,21,22,23,24,25,161,162,299,163,164,300,301,73,302,303,74,75,165,166,304,26,167,305,168,27,169,306,307,170,28,171,172,308,173,174,175,176,177,178,309,76,179,180,29,181,182,183,184,185,186,310,311,187,312,188,313,314,315,316,317,189,318,319,320,321,322,190,191,323,324,325,326,327,328,192,329,77,30,31,330,193,331,32,33,194,332,333,334,34,335,336,337,338,339,340,341,342,343,344,345,195,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,196,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,197,431,432,433,434,435,436,437,438,439,440,198,441,442,443,444,445,446,447,448,449,450,451,452,453,199,454,455,456,457,458,459,86,460,461,200,462,463,464,465,466,467,468,35,469,470,471,472,473,474,475,201,202,203,204,205,476,477,478,479,480,481,97,482,98,483,484,485,99,486,100,101,487,102,488,489,206,490,491,492,207,493,494,208,495,496,497,498,209,499,500,78,38,79,39,40,501,41,80,42,103,502,43,104,503,105,504,106,44,210,505,506,81,507,508,107,108,509,510,511,512,513,514,515,516,517,518,519,520,211,521,212,522,523,524,525,526,527,528,529,530,531,532,213,533,534,214,45,46,535,536,537,538,539,540,541,542,543,47,215,216,48,49,50,51,52,53,217,218,544,545,546,547,54,548,549,550,551,552,553,554,219,555,556,557,558,559,55,560,561,562,87,563,88,89,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,220,587,588,589,590,90,591,592,593,594,109,595,596,597,598,599,110,111,112,113,114,115,116,117,600,601,602,603,604,605,606,607,608,120,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,221,222,633,634,635,636,637,223],"tindex":"72447f66-3e7b-11e6-98df-a179cfb3c48c","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type == null) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"7244a677-3e7b-11e6-98df-c1af4be5e47d","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"7244a678-3e7b-11e6-98df-496a5a0a2b18","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.util.Date.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[638,96,225,226,227,121,122,228,229,230,13,639,640,234,235,236,237,238,17,641,242,243,127,128,129,245,131,247,248,249,251,252,254,133,134,256,135,136,137,257,258,138,139,140,261,263,264,265,266,267,268,118,269,271,273,141,142,276,277,145,146,279,147,280,150,281,282,283,154,155,68,69,284,70,71,285,157,288,289,290,292,293,294,20,296,297,159,160,298,164,302,303,165,304,306,307,170,172,308,174,175,176,177,309,179,180,181,184,185,186,310,311,312,188,313,314,315,316,317,320,322,192,77,30,31,330,193,331,32,33,333,334,34,338,340,195,348,356,357,363,365,366,369,372,374,375,378,379,383,392,394,396,397,400,402,404,408,409,410,411,412,413,414,418,420,424,425,427,430,197,433,436,439,441,642,443,445,447,448,450,451,452,199,457,459,86,461,465,468,35,469,470,471,472,473,475,201,202,203,204,205,476,477,478,479,480,481,97,482,98,483,484,485,99,486,100,101,487,102,488,489,643,493,494,208,495,496,497,498,209,78,79,501,41,80,42,502,104,505,506,507,107,108,509,510,512,513,514,515,516,519,211,523,525,527,529,531,213,533,534,214,45,46,535,538,542,47,48,49,50,51,52,53,217,545,546,547,550,552,553,219,556,557,55,561,87,563,88,89,564,566,568,569,571,573,574,575,576,578,581,583,584,586,220,588,589,590,90,591,592,109,595,597,599,110,113,114,117,602,603,604,605,606,607,608,120,609,611,612,613,614,615,618,620,624,627,628,57,629,631,644,632,221,222,633,636,637],"tindex":"7244a679-3e7b-11e6-98df-ed7d3ff4a065","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"7244cd8a-3e7b-11e6-98df-31112084a6bb","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"7244cd8b-3e7b-11e6-98df-179e9a70e0e9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if ((java.lang.String) != null) {\n        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n            object.add(java.lang.String, value);\n        } \n        java.lang.String = null;\n    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n        com.google.gson.JsonElement = value;\n    } else {\n        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n        if (element instanceof com.google.gson.JsonArray) {\n            ((com.google.gson.JsonArray)(element)).add(value);\n        } else {\n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:556","type":"CtBinaryOperatorImpl","sourcecode":"(dateStyle != (java.text.DateFormat.DEFAULT)) && (timeStyle != (java.text.DateFormat.DEFAULT))"},"failures":[],"tindex":"7244cd8c-3e7b-11e6-98df-099327ab7848","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum != minimum) && (minimum != (java.text.DateFormat.java.text.DateFormat.int))) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dateStyle":"minimum","timeStyle":"minimum","java.text.DateFormat.DEFAULT":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"7244f49d-3e7b-11e6-98df-edf16088775c","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193432/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":53,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
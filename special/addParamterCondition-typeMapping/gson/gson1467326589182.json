{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":40,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":276,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":9,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":149,"com.google.gson.stream.JsonWriterTest.testRepeatedName":6,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":253,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":376,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":352,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":113,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":44,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":25,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":26,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":358,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":130,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":299,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":219,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":341,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":391,"com.google.gson.functional.ObjectTest.testSingletonLists":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":110,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":131,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":277,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":66,"com.google.gson.stream.JsonWriterTest.testStrings":77,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":21,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":366,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":311,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":377,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":59,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":226,"com.google.gson.functional.EnumTest.testEnumCaseMapping":298,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":61,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":275,"com.google.gson.functional.JsonTreeTest.testToJsonTree":349,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":176,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":308,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":178,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":364,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":224,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":314,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":369,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":121,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":19,"com.google.gson.JsonParserTest.testParseString":39,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":10,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":309,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":154,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":213,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":353,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":290,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":23,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":345,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":147,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":212,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":1,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":274,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":362,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":256,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":334,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":239,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":105,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":319,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":344,"com.google.gson.functional.CollectionTest.testSetDeserialization":384,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":220,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":208,"com.google.gson.functional.EnumTest.testEnumSet":292,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":183,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":28,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":135,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":210,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":169,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":321,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":221,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":284,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":237,"com.google.gson.functional.MapTest.testMapSerialization":140,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":88,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":336,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":125,"com.google.gson.functional.MapTest.testSerializeMaps":134,"com.google.gson.functional.MapTest.testComplexKeysSerialization":146,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":180,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":400,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":398,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":34,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":200,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":254,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":30,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":185,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":161,"com.google.gson.functional.PrettyPrintingTest.testMap":198,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":94,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":70,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":310,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":281,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":102,"com.google.gson.functional.CollectionTest.testQueueSerialization":245,"com.google.gson.functional.MapTest.testMapOfMapSerialization":139,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":17,"com.google.gson.functional.FieldNamingTest.testIdentity":126,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":278,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":260,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":371,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":203,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":255,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":348,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":279,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":387,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":103,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":303,"com.google.gson.functional.MapTest.testMapSubclassSerialization":133,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":12,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":343,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":68,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":163,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":354,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":350,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":168,"com.google.gson.functional.EnumTest.testEnumSubclass":295,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":3,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":365,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":312,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":184,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":395,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":258,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":388,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":54,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":63,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":386,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":116,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":357,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":179,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":340,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":188,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":392,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":232,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":338,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":16,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":280,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":217,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":118,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":41,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":84,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":29,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":229,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":104,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":81,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":390,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":24,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":266,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":264,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":399,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":327,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":286,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":342,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":257,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":291,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":120,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":268,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":329,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":122,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":294,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":244,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":11,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":252,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":355,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":393,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":71,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":318,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":306,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":346,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":383,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":91,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":233,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":322,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":351,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":186,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":374,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":361,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":297,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":287,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":328,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":159,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":109,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":238,"com.google.gson.stream.JsonWriterTest.testNullStringValue":75,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":269,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":56,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":271,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":265,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":293,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":325,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":42,"com.google.gson.functional.MapTest.testGeneralMapField":143,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":360,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":157,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":160,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":114,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":92,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":194,"com.google.gson.MixedStreamTest.testReadMixedStreamed":317,"com.google.gson.JsonObjectTest.testDeepCopy":36,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":80,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":250,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":381,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":227,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":107,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":189,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":14,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":235,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":5,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":106,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":191,"com.google.gson.functional.ObjectTest.testNestedDeserialization":375,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":323,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":225,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":231,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":394,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":356,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":289,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":142,"com.google.gson.functional.MapTest.testInterfaceTypeMap":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":162,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":241,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":305,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":93,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":223,"com.google.gson.MixedStreamTest.testWriteClosed":316,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":246,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":324,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":206,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":382,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":172,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":240,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":52,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":216,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":119,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":242,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":379,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":236,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":396,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":111,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":60,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":300,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":85,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":347,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":150,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":181,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":117,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":380,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":137,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":370,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":101,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":20,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":373,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":243,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":67,"com.google.gson.functional.MapTest.testRawMapSerialization":145,"com.google.gson.JsonParserTest.testParseReader":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":307,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":211,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":285,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":337,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":403,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":152,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":195,"com.google.gson.ObjectTypeAdapterTest.testSerialize":65,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":128,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":18,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":45,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":156,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":123,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":173,"com.google.gson.functional.MapTest.testMapWithQuotes":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":15,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":182,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":50,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":218,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":165,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":372,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":99,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":158,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":95,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":100,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":115,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":151,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":288,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":262,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":48,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":190,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":367,"com.google.gson.functional.ObjectTest.testNestedSerialization":22,"com.google.gson.JsonObjectTest.testAddingStringProperties":37,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":272,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":193,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":144,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":43,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":202,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":69,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":74,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":78,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":57,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":326,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":368,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":378,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":282,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":155,"com.google.gson.functional.CollectionTest.testSetSerialization":251,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":187,"com.google.gson.functional.StringTest.testStringValueSerialization":283,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":127,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":301,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":385,"com.google.gson.MixedStreamTest.testWriteInvalidState":315,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":339,"com.google.gson.stream.JsonWriterTest.testBooleans":4,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":98,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":177,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":32,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":389,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":222,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":174,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":129,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":8},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b3648b-3f14-11e6-9621-892f10eb83b0","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b427dc-3f14-11e6-9621-31b048bc30de","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == (closeBracket.length())) {\n        {\n            if (empty == (-2)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = peek();\n                    if ((context != nonempty) && (context != empty)) {\n                        throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n                    } \n                    (int)--;\n                    if (context == nonempty) {\n                        newline();\n                    } \n                    java.io.Writer.write(closeBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b44eed-3f14-11e6-9621-67794f3e29a7","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"toResolve","java.sql.Timestamp.class":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"04b49d0e-3f14-11e6-9621-539d5dfab40c","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (!(value.isInterface())) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b4c41f-3f14-11e6-9621-4f2dc12ece0d","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b4eb30-3f14-11e6-9621-370a58c3bd8f","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b51241-3f14-11e6-9621-8dac9e6a11dc","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"tindex":"04b53952-3f14-11e6-9621-47f4d385b6a3","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b53953-3f14-11e6-9621-015a1ecade4a","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"from","java.util.Date.class":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b56064-3f14-11e6-9621-ebf11144cb7a","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[27],"tindex":"04b58775-3f14-11e6-9621-e5ebab63fe49","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if ((node != null) && (replacement != null)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[28,29,30],"tindex":"04b5ae86-3f14-11e6-9621-67e6e6eef27d","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b5fca7-3f14-11e6-9621-99895d4e2c40","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b5fca8-3f14-11e6-9621-4758a5b4a2ad","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"04b623b9-3f14-11e6-9621-e1d2825d7e96","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[61,62,0,63,64,65,66,67,68,69,1,70,71,72,73,74,75,5,6,7,8,9,76,77,78,79,80,81,11,12,82,83,84,85,86,87,88,89,90,14,91,92,93,94,15,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,16,141,142,143,144,145,146,147,148,149,41,43,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,18,193,194,19,20,195,21,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,22,212,213,214,215,216,50,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,23,239,240,241,24,242,25,243,244,245,246,247,248,249,26,250,251,252,253,254,255,256,257,258,59,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314],"tindex":"04b64aca-3f14-11e6-9621-69a2dc7fc2f9","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:151","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b698eb-3f14-11e6-9621-1f644a678b64","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == (closeBracket.length())) {\n        {\n            if (empty == (-2)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = peek();\n                    if ((context != nonempty) && (context != empty)) {\n                        throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n                    } \n                    (int)--;\n                    if (context == nonempty) {\n                        newline();\n                    } \n                    java.io.Writer.write(closeBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"closeBracket","index":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b6bffc-3f14-11e6-9621-152207b4f2a5","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[63,64,65,67,68,315,316,317,318,1,79,319,320,321,11,12,82,322,87,40,88,323,89,324,325,14,326,327,328,329,330,107,331,119,122,123,124,125,126,127,332,333,131,334,137,335,141,142,143,146,149,336,41,42,43,337,157,338,339,163,44,45,46,47,165,340,167,168,169,170,171,341,172,173,174,342,175,343,176,177,178,179,180,344,181,345,346,184,186,187,347,192,348,349,18,19,20,350,21,196,199,200,201,202,351,352,353,354,355,356,203,204,357,358,205,359,360,206,361,362,207,363,208,364,209,365,366,210,367,211,22,368,212,369,370,213,371,214,215,372,216,373,374,375,376,50,217,218,219,220,229,230,231,232,51,52,233,377,378,234,235,379,380,236,237,381,238,23,53,54,55,239,240,241,56,57,382,383,24,242,58,25,244,248,384,26,251,253,254,385,386,255,256,257,387,388,258,59,260,261,262,389,263,390,391,265,266,392,267,269,270,393,271,272,273,274,284,285,286,394,287,288,289,395,396,290,397,291,398,399,296,400,300,301,302,303,304,312,401,402,313,314],"tindex":"04b70e1d-3f14-11e6-9621-71574553aa06","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b7834e-3f14-11e6-9621-35218d448e1b","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[149,348,53,54,55,56,57,58],"tindex":"04b7834f-3f14-11e6-9621-212b9c47bcf2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b7aa60-3f14-11e6-9621-9dc47946b7bf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b7aa61-3f14-11e6-9621-2d75d8a47eb3","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[32,33,34,35,37,403,348],"tindex":"04b7d172-3f14-11e6-9621-85437ed8128c","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"04b7d173-3f14-11e6-9621-f5836c380150","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"04b81f94-3f14-11e6-9621-3f9d1a401d6f","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"04b81f95-3f14-11e6-9621-9381a17c55b4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"04b846a6-3f14-11e6-9621-1715120fff10","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"04b846a7-3f14-11e6-9621-edd856627b76","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325988227/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":149,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":372,"com.google.gson.functional.StringTest.testStringValueDeserialization":370,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":93,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":495,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":547,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":96,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":137,"com.google.gson.MixedStreamTest.testWriteLenient":26,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":457,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":113,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":125,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":252,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":255,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":509,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":591,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":130,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":452,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":238,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":556,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":83,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":635,"com.google.gson.functional.ObjectTest.testSingletonLists":268,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":496,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":373,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":540,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":637,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":173,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":310,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":118,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":519,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":29,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":594,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":74,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":235,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":386,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":60,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":52,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":585,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":411,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":221,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":46,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":410,"com.google.gson.functional.EnumTest.testEnumCaseMapping":451,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":31,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":371,"com.google.gson.functional.JsonTreeTest.testToJsonTree":21,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":532,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":19,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":106,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":250,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":233,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":492,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":542,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":202,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":433,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":312,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":383,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":516,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":601,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":548,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":136,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":44,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":298,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":523,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":506,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":319,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":606,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":117,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":141,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":234,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":18,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":611,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":278,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":494,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":568,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":403,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":458,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":582,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":215,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":159,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":421,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":142,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":464,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":583,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":277,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":350,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":16,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":34,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":226,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":513,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":103,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":417,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":552,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":134,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":302,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":244,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":161,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":423,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":624,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":501,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":491,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":297,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":629,"com.google.gson.functional.CollectionTest.testSetDeserialization":438,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":239,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":272,"com.google.gson.functional.EnumTest.testEnumSet":444,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":575,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":245,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":160,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":343,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":481,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":274,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":220,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":243,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":587,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":39,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":596,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":41,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":311,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":143,"com.google.gson.functional.MapTest.testHashMapDeserialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":545,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":499,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":35,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":151,"com.google.gson.MixedStreamTest.testReadNulls":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":181,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":211,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":628,"com.google.gson.functional.MapTest.testSortedMap":414,"com.google.gson.functional.MapTest.testMapSerialization":409,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":150,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":15,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":580,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":6,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":362,"com.google.gson.functional.MapTest.testSerializeMaps":88,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":123,"com.google.gson.functional.MapTest.testComplexKeysSerialization":418,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":453,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":8,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":422,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":368,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":313,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":449,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":191,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":448,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":23,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":55,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":98,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":525,"com.google.gson.functional.MapTest.testStringKeyDeserialization":420,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":345,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":165,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":145,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":424,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":551,"com.google.gson.functional.PrettyPrintingTest.testMap":53,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":546,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":426,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":153,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":474,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":28,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":367,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":376,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":380,"com.google.gson.functional.MapTest.testMapSerializationEmpty":419,"com.google.gson.functional.CollectionTest.testQueueSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":576,"com.google.gson.functional.MapTest.testMapOfMapSerialization":408,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":567,"com.google.gson.JavaSerializationTest.testMapIsSerializable":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":493,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":435,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":140,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":286,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":174,"com.google.gson.functional.FieldNamingTest.testIdentity":124,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":162,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":293,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":526,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":102,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":127,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":267,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":316,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":534,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":222,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":157,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":375,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":465,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":503,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":482,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":505,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":393,"com.google.gson.functional.MapTest.testMapSubclassSerialization":396,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":604,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":265,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":390,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":456,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":72,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":565,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":473,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":617,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":626,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":242,"com.google.gson.functional.EnumTest.testEnumSubclass":446,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":586,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":30,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":517,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":533,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":296,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":639,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":164,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":12,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":187,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":536,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":260,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":326,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":2,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":571,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":466,"com.google.gson.stream.JsonWriterTest.testNullName":331,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":300,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":216,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":358,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":515,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":577,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":101,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":504,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":508,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":87,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":357,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":462,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":352,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":180,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":389,"com.google.gson.CommentsTest.testParseComments":638,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":169,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":269,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":636,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":290,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":363,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":589,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":65,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":378,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":413,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":62,"com.google.gson.MixedStreamTest.testReadInvalidState":333,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":603,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":67,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":544,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":329,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":369,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":4,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":344,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":287,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":560,"com.google.gson.JsonArrayTest.testRemove":22,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":109,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":600,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":355,"com.google.gson.functional.MapTest.testMapDeserialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":490,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":58,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":86,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":199,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":307,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":401,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":204,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":192,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":315,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":471,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":279,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":518,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":182,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":633,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":477,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":84,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":190,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":259,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":54,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":412,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":119,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":531,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":171,"com.google.gson.functional.PrimitiveTest.testShortSerialization":602,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":593,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":48,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":566,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":24,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":543,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":120,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":95,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":253,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":264,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":397,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":559,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":609,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":112,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":210,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":338,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":615,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":610,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":231,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":163,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":280,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":623,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":468,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":598,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":166,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":572,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":529,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":512,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":450,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":184,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":455,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":478,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":632,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":167,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":198,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":110,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":328,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":550,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":498,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":305,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":427,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":537,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":599,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":574,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":146,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":227,"com.google.gson.JsonPrimitiveTest.testEquals":14,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":203,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":445,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":155,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":68,"com.google.gson.functional.MapTest.testGeneralMapField":91,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":511,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":349,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":614,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":195,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":229,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":502,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":104,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":541,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":631,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":595,"com.google.gson.MixedStreamTest.testReadMixedStreamed":337,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":479,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":561,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":213,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":223,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":439,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":578,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":47,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":339,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":261,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":405,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":392,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":395,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":170,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":613,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":64,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":108,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":463,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":13,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":294,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":467,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":7,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":176,"com.google.gson.functional.ObjectTest.testNestedDeserialization":530,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":61,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":521,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":152,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":45,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":289,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":97,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":377,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":406,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":241,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":144,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":183,"com.google.gson.JavaSerializationTest.testListIsSerializable":341,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":129,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":461,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":441,"com.google.gson.functional.ObjectTest.testNullSerialization":324,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":186,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":391,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":398,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":251,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":535,"com.google.gson.functional.MapTest.testInterfaceTypeMap":90,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":197,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":538,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":230,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":258,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":469,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":43,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":554,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":10,"com.google.gson.MixedStreamTest.testWriteClosed":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":154,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":432,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":507,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":622,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":246,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":303,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":292,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":288,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":263,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":271,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":308,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":431,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":1,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":581,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":188,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":111,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":156,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":282,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":616,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":139,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":476,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":314,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":346,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":291,"com.google.gson.functional.CollectionTest.testQueueDeserialization":443,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":564,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":579,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":327,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":382,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":148,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":115,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":89,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":485,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":320,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":528,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":425,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":224,"com.google.gson.functional.MapTest.testRawMapSerialization":416,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":497,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":232,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":275,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":317,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":71,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":207,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":640,"com.google.gson.functional.PrimitiveTest.testByteSerialization":332,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":625,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":642,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":194,"com.google.gson.ObjectTypeAdapterTest.testSerialize":323,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":193,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":549,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":3,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":126,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":0,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":9,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":361,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":121,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":247,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":379,"com.google.gson.functional.MapTest.testMapWithQuotes":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":475,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":557,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":381,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":158,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":212,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":175,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":472,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":237,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":201,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":240,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":527,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":107,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":588,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":366,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":105,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":76,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":597,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":178,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":437,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":354,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":114,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":185,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":295,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":11,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":81,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":266,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":627,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":85,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":539,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":330,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":172,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":520,"com.google.gson.functional.ObjectTest.testNestedSerialization":276,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":228,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":385,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":553,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":630,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":92,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":69,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":50,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":27,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":342,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":273,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":618,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":608,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":306,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":487,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":32,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":218,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":470,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":522,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":75,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":384,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":49,"com.google.gson.functional.CollectionTest.testSetSerialization":256,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":621,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":168,"com.google.gson.functional.StringTest.testStringValueSerialization":387,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":321,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":99,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":283,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":428,"com.google.gson.MixedStreamTest.testWriteInvalidState":334,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":348,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":135,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":558,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":364,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":563,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":480,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":122,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":179,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":619,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":42,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":500,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":400,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":36,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":353},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a3290f-3f2b-11e6-9904-c9fcf68c6e3e","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    float float = value.floatValue();\n    checkValidFloatingPoint(floatValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a39d40-3f2b-11e6-9904-fb1fe2fded10","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a39d41-3f2b-11e6-9904-1fe636cbc722","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((root != null) && (root != null)) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"09a3c452-3f2b-11e6-9904-a7522788d34a","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.Number) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"obj","value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a3eb63-3f2b-11e6-9904-1d5321992181","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a41274-3f2b-11e6-9904-9d853d6b16ba","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a41275-3f2b-11e6-9904-31ae081d5b9c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a46096-3f2b-11e6-9904-0dcbd0994878","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[],"tindex":"09a46097-3f2b-11e6-9904-7f4a937ae62a","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isAssignableFrom(subclass)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"subclass","classOfPrimitive":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a46098-3f2b-11e6-9904-d9b0577a485e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a487a9-3f2b-11e6-9904-09a561355bcc","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a487aa-3f2b-11e6-9904-55480cc23d1b","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[24,25],"tindex":"09a4d5cb-3f2b-11e6-9904-d9276e04113d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a4d5cc-3f2b-11e6-9904-a9f86c79dd18","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:159","type":"CtInvocationImpl"},"failures":[],"tindex":"09a4d5cd-3f2b-11e6-9904-018a5de9a4a0","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Queue.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a4fcde-3f2b-11e6-9904-e77fa913ff35","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,25,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223],"tindex":"09a4fcdf-3f2b-11e6-9904-b94bd944736e","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == 0) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a523f0-3f2b-11e6-9904-1f70a0a8d632","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((typeOfSrc instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a523f1-3f2b-11e6-9904-7bd41ae2b81a","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl"},"failures":[224,225,226,33,34,227,228,229,50,54,55,59,60,64,67,69,230,231,232,233,234,235,73,76,77,80,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,89,90,251,91,93,252,253,254,255,256,257,258,96,98,102,103,259,260,261,262,263,120,121,122,123,124,125,126,128,129,264,265,266,133,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,147,149,150,153,287,288,289,290,291,292,293,294,295,296,297,298,164,166,168,299,300,301,302,303,304,305,306,307,308,309,310,311,179,312,180,313,314,20,315,316,21,181,317,182,184,185,186,318,190,193,319,320,321,322,198,203,204,25,206,209,211,214,215,323,216,217,220],"tindex":"09a523f2-3f2b-11e6-9904-5d0a0f95129d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[73,74,75,76,77,78,79,80],"tindex":"09a54b03-3f2b-11e6-9904-97dc41a744c4","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"09a54b04-3f2b-11e6-9904-8559f1cddf05","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.util.Map.Entry)) {\n        return false;\n    } \n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n    if (node == null) {\n        return false;\n    } \n    removeInternal(node, true);\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a54b05-3f2b-11e6-9904-75fdc110fa06","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"condition","lenient":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a54b06-3f2b-11e6-9904-1356a5bdbd70","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((root != null) && (root != null)) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                        stackTop = n;\n                    }\n                    com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a57217-3f2b-11e6-9904-6d955a4855ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[],"tindex":"09a57218-3f2b-11e6-9904-6d14de780576","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a57219-3f2b-11e6-9904-3b0f3d16384b","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5721a-3f2b-11e6-9904-2fd5db5b02e3","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[324,207],"tindex":"09a5721b-3f2b-11e6-9904-a74ec940c56d","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5721c-3f2b-11e6-9904-3f1da0917cae","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a5992d-3f2b-11e6-9904-318c7c52dc1c","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"rawType","java.sql.Timestamp.class":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5992e-3f2b-11e6-9904-19a262c164c8","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5992f-3f2b-11e6-9904-ab424e41307c","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[325,326,327,328,35],"tindex":"09a59930-3f2b-11e6-9904-851be7017f7b","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a59931-3f2b-11e6-9904-adca842300dc","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        toJson(src, src.getClass(), writer);\n    } else {\n        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a5c042-3f2b-11e6-9904-8125421d7d21","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl"},"failures":[329,330],"tindex":"09a5c043-3f2b-11e6-9904-57c3716f28ab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[331],"tindex":"09a5c044-3f2b-11e6-9904-ed4a07595002","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"09a5c045-3f2b-11e6-9904-537374da8bc1","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5e756-3f2b-11e6-9904-c1a16ff2b01f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5e757-3f2b-11e6-9904-635dce6e0233","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"09a5e758-3f2b-11e6-9904-ff2856b0c3ce","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return containsKey(o);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"09a5e759-3f2b-11e6-9904-7b28168ec5fb","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[332],"tindex":"09a5e75a-3f2b-11e6-9904-959d223b3b19","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a60e6b-3f2b-11e6-9904-e170bbbc4458","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[224,333,225,334,26,335,27,336,337,338,28,29,30,339,340,341,31,32,342,343,344,345,226,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,227,228,346,347,348,349,350,351,352,353,354,355,356,49,357,358,359,360,361,362,229,363,364,365,366,367,368,369,50,51,52,53,54,55,56,57,58,59,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,236,388,237,238,239,240,389,82,241,242,243,244,245,83,246,247,248,84,249,85,390,250,391,392,393,86,87,394,395,396,88,397,398,399,400,401,402,89,403,404,405,406,407,408,409,410,411,412,413,414,90,415,251,91,92,416,417,418,419,420,421,422,423,424,93,252,425,253,426,427,428,429,430,431,432,433,254,434,435,436,437,438,255,439,440,256,441,442,94,443,257,444,445,95,446,447,448,258,449,450,451,452,453,454,455,456,96,97,98,99,100,101,102,103,457,458,459,460,461,462,463,464,259,465,466,260,467,468,104,469,17,470,471,472,473,474,475,476,105,18,106,477,478,479,480,481,24,482,107,483,484,485,486,487,488,489,490,491,492,108,493,261,109,110,494,495,496,497,498,111,499,500,501,112,113,502,503,262,114,504,115,116,263,117,118,119,505,19,506,507,120,121,122,123,124,125,126,127,128,129,264,265,266,130,131,132,133,134,267,268,508,509,269,510,511,270,512,513,271,514,515,272,516,273,517,518,519,136,274,520,275,276,521,522,277,523,524,525,278,526,279,280,527,281,528,529,530,137,531,532,138,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,139,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,140,578,579,580,581,582,583,584,585,586,587,588,589,141,142,590,591,592,593,594,595,596,143,597,598,599,600,332,144,601,602,603,604,605,606,607,145,608,609,610,611,612,146,613,614,615,616,617,282,283,284,285,286,147,148,149,150,151,152,153,154,155,287,288,289,290,291,292,618,293,294,156,295,619,296,157,620,621,297,298,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,299,300,301,302,303,304,305,306,622,623,307,308,309,624,625,626,310,177,627,628,311,179,312,180,313,629,314,20,315,316,21,181,317,182,183,184,185,186,187,188,318,189,190,191,192,193,630,631,319,320,321,632,195,196,197,322,633,634,198,199,635,200,201,202,203,204,636,25,205,206,207,208,209,210,211,212,213,214,215,323,637,638,216,217,639,640,641,642,219,220,221,222,223],"tindex":"09a60e6c-3f2b-11e6-9904-4bef20b0fdb4","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[140,142,144],"tindex":"09a6357d-3f2b-11e6-9904-55cb33944a9c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a6357e-3f2b-11e6-9904-3d09813d3d03","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:879","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a6357f-3f2b-11e6-9904-6bf124fed840","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == counter) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"counter","com.google.gson.stream.JsonReader.PEEKED_NONE":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a63580-3f2b-11e6-9904-75f9dff19ecc","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"09a63581-3f2b-11e6-9904-bd67ad81a760","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"09a63582-3f2b-11e6-9904-2701078d5ebf","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467335540011/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":52,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":12,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":222,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":162,"com.google.gson.stream.JsonWriterTest.testRepeatedName":214,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":100,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":418,"com.google.gson.MixedStreamTest.testWriteLenient":57,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":346,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":401,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":14,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":190,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":193,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":400,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":137,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":377,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":393,"com.google.gson.functional.ObjectTest.testSingletonLists":166,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":151,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":336,"com.google.gson.stream.JsonWriterTest.testStrings":235,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":131,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":408,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":87,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":359,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":26,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":329,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":227,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":396,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":40,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":242,"com.google.gson.functional.JsonTreeTest.testToJsonTree":142,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":332,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":25,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":4,"com.google.gson.stream.JsonWriterTest.testNulls":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":127,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":85,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":52,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":181,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":406,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":241,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":53,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":96,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":411,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":240,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":28,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":145,"com.google.gson.JsonParserTest.testParseString":47,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":223,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":86,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":176,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":271,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":347,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":110,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":34,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":338,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":365,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":316,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":175,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":285,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":81,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":198,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":230,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":404,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":41,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":103,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":112,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":18,"com.google.gson.stream.JsonWriterTest.testEmptyArray":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":272,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":352,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":419,"com.google.gson.functional.CollectionTest.testSetDeserialization":422,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":138,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":170,"com.google.gson.functional.EnumTest.testEnumSet":274,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":257,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":423,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":304,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":172,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":120,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":354,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":226,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":104,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":148,"com.google.gson.functional.MapTest.testMapSerialization":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":78,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":420,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":188,"com.google.gson.functional.MapTest.testSerializeMaps":303,"com.google.gson.functional.MapTest.testComplexKeysSerialization":314,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":337,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":295,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":183,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":385,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":373,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":5,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":196,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":101,"com.google.gson.functional.MapTest.testStringKeyDeserialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":317,"com.google.gson.functional.PrettyPrintingTest.testMap":330,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":321,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":79,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":246,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":268,"com.google.gson.functional.MapTest.testMapSerializationEmpty":315,"com.google.gson.functional.CollectionTest.testQueueSerialization":322,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":231,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":233,"com.google.gson.functional.MapTest.testMapOfMapSerialization":307,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":206,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":70,"com.google.gson.functional.FieldNamingTest.testIdentity":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":19,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":63,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":217,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":413,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":32,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":102,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":165,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":209,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":397,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":200,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":69,"com.google.gson.functional.MapTest.testMapSubclassSerialization":302,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":29,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":379,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":62,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":139,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":348,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":384,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":119,"com.google.gson.functional.EnumTest.testEnumSubclass":277,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":407,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":93,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":97,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":202,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":164,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":218,"com.google.gson.stream.JsonWriterTest.testTwoNames":205,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":398,"com.google.gson.stream.JsonWriterTest.testNullName":212,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":21,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":199,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":55,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":220,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":369,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":216,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":399,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":291,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":215,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":182,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":376,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":1,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":167,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":259,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":394,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":74,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":386,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":281,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":310,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":135,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":126,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":253,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":43,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":335,"com.google.gson.JsonParserTest.testParseMixedArray":334,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":424,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":71,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":59,"com.google.gson.JsonArrayTest.testRemove":0,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":68,"com.google.gson.functional.MapTest.testMapDeserialization":38,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":333,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":301,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":392,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":115,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":154,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":299,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":203,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":381,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":106,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":111,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":163,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":195,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":309,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":300,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":344,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":185,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":276,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":54,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":191,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":51,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":134,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":254,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":33,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":342,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":395,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":340,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":351,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":83,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":262,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":366,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":375,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":88,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":343,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":364,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":98,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":416,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":403,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":107,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":382,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":152,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":270,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":267,"com.google.gson.stream.JsonWriterTest.testNullStringValue":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":156,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":23,"com.google.gson.stream.JsonWriterTest.testEmptyObject":225,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":75,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":153,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":275,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":358,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":44,"com.google.gson.functional.MapTest.testGeneralMapField":161,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":402,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":284,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":94,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":273,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":311,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":249,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":297,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":49,"com.google.gson.MixedStreamTest.testReadMixedStreamed":350,"com.google.gson.JsonObjectTest.testDeepCopy":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":251,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":327,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":387,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":228,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":390,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":128,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":39,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":255,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":147,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":90,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":213,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":269,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":64,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":261,"com.google.gson.functional.ObjectTest.testNestedDeserialization":417,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":319,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":356,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":20,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":73,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":367,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":370,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":17,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":349,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":328,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":109,"com.google.gson.stream.JsonWriterTest.testDoubles":232,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":37,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":58,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":160,"com.google.gson.functional.MapTest.testInterfaceTypeMap":159,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":229,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":114,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":82,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":372,"com.google.gson.MixedStreamTest.testWriteClosed":239,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":324,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":357,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":168,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":374,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":123,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":113,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":11,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":72,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":179,"com.google.gson.stream.JsonWriterTest.testLongs":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":130,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":116,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":169,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":323,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":361,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":91,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":371,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":326,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":9,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":66,"com.google.gson.stream.JsonWriterTest.testNumbers":234,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":140,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":184,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":282,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":10,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":428,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":158,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":412,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":427,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":146,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":415,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":320,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":61,"com.google.gson.functional.MapTest.testRawMapSerialization":313,"com.google.gson.JsonParserTest.testParseReader":46,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":84,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":105,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":173,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":421,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":345,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":48,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":286,"com.google.gson.ObjectTypeAdapterTest.testSerialize":201,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":247,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":144,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":15,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":292,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":124,"com.google.gson.functional.MapTest.testMapWithQuotes":306,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":256,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":264,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":136,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":219,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":117,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":414,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":425,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":294,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":265,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":426,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":263,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":108,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":65,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":30,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":27,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":260,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":409,"com.google.gson.JsonObjectTest.testAddingStringProperties":8,"com.google.gson.functional.ObjectTest.testNestedSerialization":174,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":76,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":250,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":296,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":312,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":45,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":150,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":238,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":236,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":24,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":383,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":380,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":410,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":360,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":245,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":290,"com.google.gson.functional.CollectionTest.testSetSerialization":194,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":99,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":331,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":92,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":67,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":368,"com.google.gson.MixedStreamTest.testWriteInvalidState":237,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":318,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":293,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":80,"com.google.gson.stream.JsonWriterTest.testBooleans":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":266,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":50,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":187,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":180,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":2,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":355,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":339,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":125,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":248,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":221,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":288},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"ce4f9949-3e69-11e6-9ef0-dd1d9f859508","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"ce500e7a-3e69-11e6-9ef0-079ec0b3bc87","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"ce50358b-3e69-11e6-9ef0-ff1da2609d62","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"ce50358c-3e69-11e6-9ef0-83deb0dbb644","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT.equals(typeOfT)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[0],"tindex":"ce505c9d-3e69-11e6-9ef0-7144cfd1a630","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"tindex":"ce5083ae-3e69-11e6-9ef0-4146ce054b72","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"ce50aabf-3e69-11e6-9ef0-d9a8fd252087","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"ce50f8e0-3e69-11e6-9ef0-4ff764ccd371","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"ce50f8e1-3e69-11e6-9ef0-d3c25f9e7c3b","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[56],"tindex":"ce516e12-3e69-11e6-9ef0-695bb23f812c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"ce51bc33-3e69-11e6-9ef0-6395116de040","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[57,58,59],"tindex":"ce51e344-3e69-11e6-9ef0-c17189afb204","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if (value <= value) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"ce520a55-3e69-11e6-9ef0-1ddfa3f61be2","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ce520a56-3e69-11e6-9ef0-19a52b14e09e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce520a57-3e69-11e6-9ef0-378c1087d825","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce520a58-3e69-11e6-9ef0-d9384761df26","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,10,11,75,76,77,12,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,14,15,16,17,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,20,21,22,112,113,114,23,24,115,116,25,26,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,29,30,135,136,137,138,139,31,140,141,32,142,143,144,145,146,147,148,149,34,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,43,45,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201],"tindex":"ce523169-3e69-11e6-9ef0-817666ea9133","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonObject) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce52587a-3e69-11e6-9ef0-31de3f4f0f78","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"ce52587b-3e69-11e6-9ef0-b3eaa93ec85d","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[104,108,202,203,185,188],"tindex":"ce52587c-3e69-11e6-9ef0-11a9ef1fffa0","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"ce527f8d-3e69-11e6-9ef0-8526bc3c540b","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (clazz == clazz) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:789","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,60,61,62,237,57,238,239,240,241,242,243,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,244,82,83,84,245,85,86,246,87,88,89,90,91,92,247,248,93,94,95,96,249,250,251,252,253,254,255,256,257,97,258,98,99,259,260,261,100,101,262,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,26,117,263,118,119,120,121,122,123,124,125,126,127,264,265,266,267,268,269,128,270,271,272,273,129,130,131,132,274,275,276,277,133,278,134,29,30,135,279,136,137,138,280,139,31,141,281,282,283,284,285,286,287,288,289,290,291,292,143,293,294,295,144,296,297,145,146,298,147,148,149,34,150,151,152,299,153,154,155,300,156,157,301,302,303,304,305,158,306,307,308,309,310,159,311,160,161,312,313,314,315,316,317,162,163,164,165,166,167,168,169,318,170,171,172,173,174,319,175,176,177,178,179,180,181,182,183,184,43,45,185,186,187,188,189,190,320,191,321,322,323,324,325,192,326,193,327,194,328,329,330,195,196,331,332,333,197,198,334,199,200,335,201,336,337,338,339,340,341,342,343],"tindex":"ce527f8e-3e69-11e6-9ef0-67fac39477bb","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[221,222,62,26,303,329,330,195,196,331,332,333,197],"tindex":"ce52a69f-3e69-11e6-9ef0-6fedd595fc89","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"ce52a6a0-3e69-11e6-9ef0-45a3a980589e","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[67,20,21,22,112,114,23,24,116,25,344,32,290,294,152,299,153,154,345,157,158,159,160,162,325],"tindex":"ce52a6a1-3e69-11e6-9ef0-0b99f3b2991e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"ce52cdb2-3e69-11e6-9ef0-2992f93e7626","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"ce52cdb3-3e69-11e6-9ef0-cd7b7d2db3e5","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if (value <= value) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[258,98,260,346,347,348,349],"tindex":"ce52cdb4-3e69-11e6-9ef0-63f521c6aff4","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if ((property.length()) == 0) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"ce52cdb5-3e69-11e6-9ef0-6f2b4c1c886b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"ce52cdb6-3e69-11e6-9ef0-391bff039ad1","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonArray) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce52f4c7-3e69-11e6-9ef0-c17e79ea0764","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce52f4c8-3e69-11e6-9ef0-d7668b7c8402","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[60,61,62,237,239,350,351,352,353,354,63,64,65,355,66,67,68,69,70,71,72,73,74,10,11,75,76,77,12,78,356,79,357,358,80,81,88,359,360,89,90,361,362,91,92,14,15,16,17,93,94,363,95,96,364,365,366,97,98,99,100,367,101,368,262,369,102,103,104,105,106,370,107,108,109,202,371,110,372,111,373,203,20,21,22,112,113,114,23,24,374,375,115,116,25,26,117,376,118,119,120,121,122,377,123,124,125,378,126,379,127,380,381,382,344,383,128,129,130,384,131,132,133,385,134,29,30,135,136,137,138,139,31,140,141,32,142,346,347,348,33,349,143,386,293,144,145,146,147,148,387,149,34,150,388,389,390,151,391,152,392,393,153,154,394,155,156,157,395,158,396,159,160,161,314,162,163,397,398,164,165,166,399,400,167,401,402,168,403,404,169,405,170,406,171,407,408,172,409,173,174,410,175,411,412,176,413,177,178,414,179,415,416,417,418,180,181,182,183,419,184,420,43,44,45,421,185,186,187,188,189,190,191,192,422,193,194,195,196,197,198,199,200,201],"tindex":"ce52f4c9-3e69-11e6-9ef0-db697363b186","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1354","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"ce531bda-3e69-11e6-9ef0-f7c25dc021f5","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"ce531bdb-3e69-11e6-9ef0-c14e6776cbc8","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"ce531bdc-3e69-11e6-9ef0-9b8dec7bf6b8","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src instanceof com.google.gson.InstanceCreator<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.get();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[60,61,62,237,239,350,351,352,353,354,63,64,65,355,66,67,68,69,70,71,72,73,74,10,11,75,76,77,12,78,356,79,357,358,80,81,88,359,360,89,90,361,362,91,92,14,15,16,17,93,94,363,95,96,364,365,366,97,98,99,100,101,368,369,102,103,370,20,21,22,112,113,114,23,24,374,375,115,116,25,26,117,376,118,119,120,121,122,377,123,124,125,378,126,379,127,380,381,382,344,383,128,129,130,384,131,132,133,385,134,29,30,135,136,137,138,139,31,140,141,32,142,346,347,348,33,349,143,386,293,144,145,146,147,148,387,149,34,150,388,389,390,151,391,152,392,393,153,154,394,155,156,157,395,158,396,159,160,161,314,162,163,397,398,164,165,166,399,400,167,401,402,168,403,404,169,405,170,406,171,407,408,172,409,173,174,410,175,411,412,176,413,177,178,414,179,415,416,417,418,180,181,182,183,419,184,420,43,44,45,421,189,190,191,192,422,193,194,195,196,197,198,199,200,201],"tindex":"ce5342ed-3e69-11e6-9ef0-7f2564792ad5","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"ce5342ee-3e69-11e6-9ef0-7917b598c6dd","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"o","lowerBound":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"ce5342ef-3e69-11e6-9ef0-eb925c5dae95","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"ce536a00-3e69-11e6-9ef0-c371d07a37ca","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[],"tindex":"ce536a01-3e69-11e6-9ef0-0b903c0aee0d","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:581","type":"CtBinaryOperatorImpl","sourcecode":"context == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"ce536a02-3e69-11e6-9ef0-17b30fffb815","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == '\\n') {\n        {\n            if (style == style) {\n                {\n                    com.google.gson.GsonBuilder.this.int = style;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"style","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[423,424],"tindex":"ce539113-3e69-11e6-9ef0-9ded992934d9","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1354","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"ce539114-3e69-11e6-9ef0-cd9081aac7ff","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == '\\n') {\n        {\n            if (style == style) {\n                {\n                    com.google.gson.GsonBuilder.this.int = style;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"ce539115-3e69-11e6-9ef0-2bb4b8085f01","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[425,426,427,428,178],"tindex":"ce539116-3e69-11e6-9ef0-23f272094796","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"ce53b827-3e69-11e6-9ef0-a30d64c9f84d","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((src instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"ce53b828-3e69-11e6-9ef0-bf8885e370ec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"ce53b829-3e69-11e6-9ef0-af2413e28325","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce53b82a-3e69-11e6-9ef0-0b8fc4eb3629","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"ce53b82b-3e69-11e6-9ef0-8189c61b7dc6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[79,357,100,101,369,102],"tindex":"ce53df3c-3e69-11e6-9ef0-070379081e94","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"ce53df3d-3e69-11e6-9ef0-d5c11c482386","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"ce54064e-3e69-11e6-9ef0-73dace8e7fb6","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter.isString()) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"ce54064f-3e69-11e6-9ef0-55200dc23e56","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 'f') || (c == 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"ce540650-3e69-11e6-9ef0-7b38b49e0ffe","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"ce540651-3e69-11e6-9ef0-cf46c8b1dbb6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"ce542d62-3e69-11e6-9ef0-c101e3d1c0af","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"ce542d63-3e69-11e6-9ef0-bf8d38e12225","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"ce542d64-3e69-11e6-9ef0-557202f4ae34","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"ce542d65-3e69-11e6-9ef0-d9bcd5401367","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[],"tindex":"ce542d66-3e69-11e6-9ef0-ab62cc859f03","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.Number) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467252370635/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":62,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":249,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":343,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":111,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":31,"com.google.gson.MixedStreamTest.testWriteLenient":358,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":317,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":71,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":56,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":66,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":30,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":278,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":215,"com.google.gson.functional.ObjectTest.testSingletonLists":179,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":313,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":344,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":370,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":19,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":16,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":233,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":389,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":3,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":229,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":388,"com.google.gson.functional.EnumTest.testEnumCaseMapping":29,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":342,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":361,"com.google.gson.functional.JsonTreeTest.testToJsonTree":287,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":238,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":142,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":367,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":124,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":63,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":203,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":169,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":188,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":227,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":116,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":12,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":327,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":120,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":161,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":368,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":155,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":194,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":312,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":384,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":54,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":405,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":109,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":162,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":193,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":260,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":335,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":35,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":147,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":135,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":41,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":372,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":307,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":115,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":216,"com.google.gson.functional.EnumTest.testEnumSet":23,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":184,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":77,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":93,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":189,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":40,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":22,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":224,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":165,"com.google.gson.functional.MapTest.testHashMapDeserialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":397,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":336,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":48,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":247,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":281,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":373,"com.google.gson.functional.MapTest.testSortedMap":390,"com.google.gson.functional.MapTest.testMapSerialization":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":250,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":340,"com.google.gson.functional.MapTest.testComplexKeysSerialization":107,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":393,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":404,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":205,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":131,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":20,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":236,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":32,"com.google.gson.functional.MapTest.testStringKeyDeserialization":392,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":79,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":173,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":110,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":219,"com.google.gson.functional.PrettyPrintingTest.testMap":234,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":293,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":369,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":348,"com.google.gson.functional.CollectionTest.testQueueSerialization":60,"com.google.gson.functional.MapTest.testMapSerializationEmpty":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":304,"com.google.gson.functional.MapTest.testMapOfMapSerialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":153,"com.google.gson.JavaSerializationTest.testMapIsSerializable":371,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":158,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":85,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":1,"com.google.gson.functional.FieldNamingTest.testIdentity":341,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":374,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":252,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":34,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":73,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":178,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":286,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":4,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":113,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":346,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":156,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":10,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":326,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":376,"com.google.gson.functional.MapTest.testMapSubclassSerialization":91,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":172,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":244,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":221,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":328,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":355,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":39,"com.google.gson.functional.EnumTest.testEnumSubclass":26,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":159,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":17,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":143,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":112,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":78,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":199,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":399,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":133,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":9,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":321,"com.google.gson.MixedStreamTest.testWriteNulls":356,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":377,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":266,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":375,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":262,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":204,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":82,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":180,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":275,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":100,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":347,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":212,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":46,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":323,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":241,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":146,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":402,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":272,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":407,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":150,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":209,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":310,"com.google.gson.functional.MapTest.testMapDeserialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":306,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":239,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":94,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":126,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":123,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":285,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":187,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":50,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":222,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":297,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":55,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":99,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":235,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":325,"com.google.gson.functional.PrimitiveTest.testShortSerialization":170,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":128,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":231,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":299,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":337,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":25,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":58,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":243,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":380,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":409,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":408,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":177,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":364,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":289,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":329,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":410,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":80,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":51,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":280,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":64,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":217,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":398,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":122,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":311,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":401,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":301,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":129,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":138,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":157,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":175,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":88,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":125,"com.google.gson.functional.MapTest.testGeneralMapField":104,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":259,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":114,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":218,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":318,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":102,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":119,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":290,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":164,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":151,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":385,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":5,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":396,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":309,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":386,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":333,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":176,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":256,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":308,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":87,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":192,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":132,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":228,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":274,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":387,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":168,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":75,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":69,"com.google.gson.functional.ObjectTest.testNullSerialization":185,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":53,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":381,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":103,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":144,"com.google.gson.functional.MapTest.testInterfaceTypeMap":101,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":220,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":137,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":291,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":226,"com.google.gson.MixedStreamTest.testWriteClosed":360,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":62,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":43,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":277,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":324,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":141,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":182,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":61,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":332,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":314,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":207,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":149,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":284,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":206,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":257,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":276,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":152,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":400,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":322,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":303,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":121,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":57,"com.google.gson.functional.MapTest.testRawMapSerialization":106,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":354,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":365,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":49,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":190,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":130,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":6,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":8,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":18,"com.google.gson.functional.PrimitiveTest.testByteSerialization":167,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":261,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":352,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":117,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":72,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":267,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":44,"com.google.gson.functional.MapTest.testMapWithQuotes":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":294,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":76,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":395,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":86,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":292,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":36,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":300,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":295,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":302,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":330,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":21,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":37,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":52,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":254,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":245,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":363,"com.google.gson.functional.ObjectTest.testNestedSerialization":191,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":89,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":148,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":255,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":105,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":242,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":288,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":14,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":359,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":139,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":362,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":366,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":349,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":265,"com.google.gson.functional.CollectionTest.testSetSerialization":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":81,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":237,"com.google.gson.functional.StringTest.testStringValueSerialization":350,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":351,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":208,"com.google.gson.MixedStreamTest.testWriteInvalidState":357,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":183,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":269,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":298,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":339,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":202,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":225,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":406,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":315,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":353,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":382,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":263},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"a0612181-3e73-11e6-b8be-fdd522d002db","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a06196b2-3e73-11e6-b8be-85f397543e69","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"a06196b3-3e73-11e6-b8be-2730af90f932","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a061bdc4-3e73-11e6-b8be-b5627ece0f25","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"a061e4d5-3e73-11e6-b8be-c387154475e9","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a061e4d6-3e73-11e6-b8be-5b166127430a","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[31,32,34,42,150,153,155,160,176,363,232,364,365,366,367,368,369,358],"tindex":"a0620be7-3e73-11e6-b8be-0f7e25e52db2","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a0620be8-3e73-11e6-b8be-a384e92f9445","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[6,7,8,370,371,372,373,374,82,87,375,376,377,378,379,91,92,380,381,93,382,94,383,95,384,385,386,387,96,97,98,388,389,99,100,390,101,102,103,104,105,106,391,107,108,392,109,393,394,110,111,196,234,235,244,245,272,275,276,277,281,395,396,282,283,299,397,316],"tindex":"a0620be9-3e73-11e6-b8be-cfa66fe11caf","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[398,399,400,401,336],"tindex":"a06232fa-3e73-11e6-b8be-35a64147b225","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"a06232fb-3e73-11e6-b8be-1787e68c1dab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME)"},"failures":[],"tindex":"a062811c-3e73-11e6-b8be-17a89f44b8b2","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"a062811d-3e73-11e6-b8be-979d11491524","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[402],"tindex":"a062811e-3e73-11e6-b8be-595a012a96de","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a062a82f-3e73-11e6-b8be-a1f98f5c3560","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[403,404,405,406,0,1,407,408,409,410,6,37,71,72,73,74,75,101,104,111,132,133,134,138,139,142,200,249,276,277,281,282,283,284,285,286,287],"tindex":"a062a830-3e73-11e6-b8be-8d98e492e2be","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonObject) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"a062cf41-3e73-11e6-b8be-2707ff4e9a23","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404434/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":17,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
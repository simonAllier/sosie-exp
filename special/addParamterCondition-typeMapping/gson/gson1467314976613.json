{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":158,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":15,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":57,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":194,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":186,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":68,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":171,"com.google.gson.stream.JsonWriterTest.testRepeatedName":183,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":76,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":89,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":69,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":70,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":72,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":94,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":35,"com.google.gson.functional.ObjectTest.testSingletonLists":99,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":97,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":178,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":143,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":5,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":23,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":111,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":7,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":28,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":133,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":18,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":154,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":165,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":85,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":170,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":175,"com.google.gson.stream.JsonWriterTest.testNullStringValue":181,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":172,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":48,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":25,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":10,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":168,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":196,"com.google.gson.functional.MapTest.testGeneralMapField":62,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":146,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":12,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":60,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":192,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":198,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":130,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":191,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":160,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":84,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":109,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":19,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":31,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":182,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":83,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":157,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":126,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":176,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":137,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":66,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":123,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":108,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":9,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":79,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":39,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":138,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":42,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":86,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":61,"com.google.gson.functional.MapTest.testInterfaceTypeMap":59,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":129,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":140,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":36,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":22,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":75,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":103,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":43,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":51,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":105,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":41,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":193,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":144,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":101,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":44,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":139,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":112,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":195,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":151,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":88,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":102,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":142,"com.google.gson.functional.MapTest.testMapSerialization":56,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":119,"com.google.gson.functional.MapTest.testSerializeMaps":50,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":92,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":32,"com.google.gson.functional.MapTest.testComplexKeysSerialization":65,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":113,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":148,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":173,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":149,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":16,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":77,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":53,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":132,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":161,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":2,"com.google.gson.functional.MapTest.testRawMapSerialization":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":67,"com.google.gson.functional.PrettyPrintingTest.testMap":14,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":24,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":106,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":120,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":27,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":188,"com.google.gson.functional.MapTest.testMapOfMapSerialization":55,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":163,"com.google.gson.ObjectTypeAdapterTest.testSerialize":177,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":159,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":180,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":117,"com.google.gson.functional.FieldNamingTest.testIdentity":93,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":45,"com.google.gson.functional.MapTest.testMapWithQuotes":54,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":125,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":78,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":98,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":0,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":74,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":34,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":190,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":116,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":37,"com.google.gson.functional.MapTest.testMapSubclassSerialization":49,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":17,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":95,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":3,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":87,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":40,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":128,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":30,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":155,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":127,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":81,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":96,"com.google.gson.stream.JsonWriterTest.testTwoNames":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":136,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":189,"com.google.gson.functional.ObjectTest.testNestedSerialization":107,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":11,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":63,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":184,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":21,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":13,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":147,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":135,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":124,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":58,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":47,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":20,"com.google.gson.functional.CollectionTest.testSetSerialization":73,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":134,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":162,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":114,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":121,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":115,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":82,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":91,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":145,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":52,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":141,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":169,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":150,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":46,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":110,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":153,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":164,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":185},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[0,1],"tindex":"fb1074c7-3ef8-11e6-b092-6b2e7b698239","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"fb10c2e8-3ef8-11e6-b092-b3bfa2327ed9","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fb10c2e9-3ef8-11e6-b092-6dc3401d091f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"fb10e9fa-3ef8-11e6-b092-d7d5fd3d2cb2","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb10e9fb-3ef8-11e6-b092-7dca51ff331d","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193],"tindex":"fb10e9fc-3ef8-11e6-b092-4341294b4a07","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[118,194,119,195,196],"tindex":"fb11110d-3ef8-11e6-b092-43c5963b5f0f","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (!deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11110e-3ef8-11e6-b092-1b696c362998","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11381f-3ef8-11e6-b092-efe9efff24b9","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == root) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root","node":"root","left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fb115f30-3ef8-11e6-b092-1d806f4b877d","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb115f31-3ef8-11e6-b092-2f75f48e352a","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"toFind","com.google.gson.stream.JsonToken.NULL":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb115f32-3ef8-11e6-b092-4f324d37b566","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if ((instance != null) && ((instance.peek()) != instance)) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"instance","obj":"instance","reader":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[10,197,79,198],"tindex":"fb115f33-3ef8-11e6-b092-cdc5ea162cd6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"fb118644-3ef8-11e6-b092-c5b4e99596ff","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fb11ad55-3ef8-11e6-b092-45ce5d65f476","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11ad56-3ef8-11e6-b092-d5ec82d6590a","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11ad57-3ef8-11e6-b092-df46d81a8a91","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:556","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11d468-3ef8-11e6-b092-03f0ea73d6ed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if ((targetSize != targetSize) && (targetSize != (java.text.DateFormat.java.text.DateFormat.int))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dateStyle":"targetSize","timeStyle":"targetSize","java.text.DateFormat.DEFAULT":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11d469-3ef8-11e6-b092-3b89a07db1bd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:581","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11fb7a-3ef8-11e6-b092-95fc51cdb771","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            if ((targetSize != targetSize) && (targetSize != (java.text.DateFormat.java.text.DateFormat.int))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n                    int = treeCapacity - targetSize;\n                    int = 0;\n                    int = 0;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"targetSize","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fb11fb7b-3ef8-11e6-b092-f54dedb9cd29","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467314573436/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
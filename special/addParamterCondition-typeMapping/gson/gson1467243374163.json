{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":345,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":181,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":693,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":367,"com.google.gson.functional.StringTest.testStringValueDeserialization":691,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":77,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":582,"com.google.gson.JsonPrimitiveTest.testDeepCopy":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":670,"com.google.gson.stream.JsonWriterTest.testRepeatedName":359,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":545,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":12,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":144,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":66,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":247,"com.google.gson.MixedStreamTest.testWriteLenient":466,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":315,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":55,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":49,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":591,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":492,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":644,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":162,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":553,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":262,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":27,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":88,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":269,"com.google.gson.functional.ObjectTest.testSingletonLists":111,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":671,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":539,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":694,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":348,"com.google.gson.stream.JsonWriterTest.testStrings":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":295,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":8,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":682,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":126,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":483,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":593,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":223,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":436,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":706,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":333,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":437,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":583,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":372,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":72,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":471,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":531,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":306,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":521,"com.google.gson.functional.EnumTest.testEnumCaseMapping":491,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":468,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":692,"com.google.gson.functional.JsonTreeTest.testToJsonTree":212,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":530,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":318,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.stream.JsonWriterTest.testNulls":356,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":314,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":433,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":638,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":667,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":714,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":526,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":391,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":150,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":703,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":123,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":324,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":282,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":602,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":546,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":620,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":261,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":305,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":82,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":133,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":277,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":684,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":84,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":606,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":605,"com.google.gson.JsonParserTest.testParseString":271,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":681,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":434,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":588,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":567,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":656,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":135,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":337,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":462,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":565,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":67,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":517,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":580,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":307,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":664,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":208,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":249,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":59,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":411,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":508,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":581,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":132,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":446,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":119,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":231,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":331,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":375,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":19,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":523,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":550,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":25,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":630,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":502,"com.google.gson.stream.JsonWriterTest.testEmptyArray":349,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":485,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":525,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":463,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":666,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":81,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":153,"com.google.gson.functional.CollectionTest.testSetDeserialization":52,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":163,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":122,"com.google.gson.functional.EnumTest.testEnumSet":382,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":646,"com.google.gson.JsonStreamParserTest.testIterator":346,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":572,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":290,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":245,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":400,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":127,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":24,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":585,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":167,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":371,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":595,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":303,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":596,"com.google.gson.functional.MapTest.testHashMapDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":543,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":675,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":632,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":690,"com.google.gson.MixedStreamTest.testReadNulls":709,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":35,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":180,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":335,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":205,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":488,"com.google.gson.functional.MapTest.testSortedMap":522,"com.google.gson.functional.MapTest.testMapSerialization":404,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":182,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":578,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":640,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":235,"com.google.gson.functional.MapTest.testSerializeMaps":399,"com.google.gson.functional.MapTest.testComplexKeysSerialization":76,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":645,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":248,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":297,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":455,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":11,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":152,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":47,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":490,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":169,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":263,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":278,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":715,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":621,"com.google.gson.functional.MapTest.testStringKeyDeserialization":524,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":477,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":395,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":608,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":412,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":549,"com.google.gson.functional.PrettyPrintingTest.testMap":438,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":544,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":622,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":387,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":184,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":654,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":435,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":482,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":642,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":697,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":700,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":279,"com.google.gson.functional.CollectionTest.testQueueSerialization":388,"com.google.gson.functional.MapTest.testMapSerializationEmpty":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":459,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":573,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":378,"com.google.gson.functional.MapTest.testMapOfMapSerialization":403,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":564,"com.google.gson.JavaSerializationTest.testMapIsSerializable":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":668,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":497,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":351,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":575,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":504,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":253,"com.google.gson.functional.FieldNamingTest.testIdentity":236,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":695,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":291,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":187,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":362,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":136,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":18,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":110,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":211,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":288,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":354,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":533,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":472,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":298,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":696,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":146,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":678,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":659,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":683,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":509,"com.google.gson.functional.MapTest.testMapSubclassSerialization":398,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":604,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":33,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":177,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":648,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":164,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":562,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":686,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":653,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":7,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":23,"com.google.gson.functional.EnumTest.testEnumSubclass":384,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":584,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":125,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":484,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":532,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":78,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":474,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":535,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":363,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":568,"com.google.gson.stream.JsonWriterTest.testTwoNames":350,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":147,"com.google.gson.stream.JsonWriterTest.testNullName":357,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":3,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":574,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":618,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":17,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":365,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":566,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":679,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":112,"com.google.gson.MixedStreamTest.testWriteNulls":321,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":510,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":452,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":360,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":506,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":448,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":21,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":151,"com.google.gson.CommentsTest.testParseComments":710,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":292,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":193,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":198,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":587,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":308,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":406,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":465,"com.google.gson.MixedStreamTest.testReadInvalidState":708,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":160,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":680,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":172,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":347,"com.google.gson.JsonParserTest.testParseMixedArray":273,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":338,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":542,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":713,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":643,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":476,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":254,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":558,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":157,"com.google.gson.JsonArrayTest.testRemove":341,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":669,"com.google.gson.functional.MapTest.testMapDeserialization":516,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":665,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":441,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":397,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":87,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":323,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":401,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":90,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":415,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":48,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":210,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":216,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":137,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":619,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":623,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":657,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":31,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":264,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":46,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":168,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":405,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":317,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":529,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":294,"com.google.gson.functional.PrimitiveTest.testShortSerialization":603,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":416,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":592,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":251,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":628,"com.google.gson.JsonParserTest.testParseEmptyString":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":563,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":541,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":232,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":284,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":50,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":176,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":513,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":557,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":287,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":422,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":69,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":336,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":257,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":677,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":615,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":610,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":430,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":60,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":138,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":222,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":258,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":650,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":109,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":569,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":142,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":118,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":39,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":647,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":217,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":503,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":86,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":461,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":458,"com.google.gson.stream.JsonWriterTest.testNullStringValue":353,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":673,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":102,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":536,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":598,"com.google.gson.JsonArrayTest.testSet":339,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":571,"com.google.gson.stream.JsonWriterTest.testEmptyObject":370,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":613,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":64,"com.google.gson.JsonPrimitiveTest.testEquals":327,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":89,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":383,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":186,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":173,"com.google.gson.functional.MapTest.testGeneralMapField":75,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":116,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":445,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":614,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":79,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":301,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":464,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":311,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":414,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":417,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":594,"com.google.gson.MixedStreamTest.testReadMixedStreamed":242,"com.google.gson.JsonObjectTest.testDeepCopy":280,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":259,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":419,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":658,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":206,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":393,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":473,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":373,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":576,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":252,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":627,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":479,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":219,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":519,"com.google.gson.JsonArrayTest.testDeepCopy":340,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":689,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":423,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":191,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":226,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":559,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":460,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":507,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":326,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":244,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":496,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":528,"com.google.gson.functional.ObjectTest.testNestedDeserialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":296,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":300,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":425,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":183,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":626,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":197,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":13,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":275,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":520,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":698,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":22,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":601,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":38,"com.google.gson.JavaSerializationTest.testListIsSerializable":481,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":58,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":70,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":394,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":41,"com.google.gson.stream.JsonWriterTest.testDoubles":377,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":688,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":514,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":74,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":534,"com.google.gson.functional.MapTest.testInterfaceTypeMap":73,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":374,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":639,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":302,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":537,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":10,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":429,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":651,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":551,"com.google.gson.MixedStreamTest.testWriteClosed":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":185,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":390,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":685,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":200,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":140,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":196,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":342,"com.google.gson.stream.JsonWriterTest.testLongs":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":120,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":389,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":227,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":711,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":579,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":229,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":43,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":392,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":260,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":265,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":674,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":310,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":155,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":330,"com.google.gson.stream.JsonWriterTest.testNumbers":379,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":616,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":556,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":655,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":154,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":443,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":199,"com.google.gson.functional.CollectionTest.testQueueDeserialization":501,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":561,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":577,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":702,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":631,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":246,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":71,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":134,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":662,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":85,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":141,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":386,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":238,"com.google.gson.functional.MapTest.testRawMapSerialization":409,"com.google.gson.JsonParserTest.testParseReader":270,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":672,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":431,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":36,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":129,"com.google.gson.JsonPrimitiveTest.testExponential":329,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":175,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":527,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":266,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":268,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":283,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":447,"com.google.gson.functional.PrimitiveTest.testByteSerialization":600,"com.google.gson.ObjectTypeAdapterTest.testSerialize":5,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":319,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":547,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":56,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":453,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":233,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":470,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":699,"com.google.gson.functional.MapTest.testMapWithQuotes":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":312,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":554,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":701,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":289,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":649,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":505,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":179,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":456,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":161,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":364,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":299,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":20,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":139,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":712,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":170,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":660,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":121,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":313,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":57,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":661,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":597,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":498,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":635,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":316,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":444,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":40,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":189,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":687,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":178,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":487,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":286,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":538,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":396,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":428,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":128,"com.google.gson.functional.ObjectTest.testNestedSerialization":130,"com.google.gson.JsonObjectTest.testAddingStringProperties":281,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":65,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":413,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":418,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":705,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":442,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":408,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":174,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":213,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":272,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":467,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":478,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":381,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":124,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":633,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":609,"com.google.gson.JsonPrimitiveTest.testBoolean":322,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":103,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":218,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":469,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":552,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":215,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":224,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":432,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":704,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":451,"com.google.gson.functional.CollectionTest.testSetSerialization":54,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":63,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":439,"com.google.gson.functional.StringTest.testStringValueSerialization":707,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":237,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":15,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":156,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":494,"com.google.gson.MixedStreamTest.testWriteInvalidState":240,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":634,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":424,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":555,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":194,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":560,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":230,"com.google.gson.stream.JsonWriterTest.testBooleans":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":457,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":149,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":190,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":344,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":250,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":625,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":676,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":320,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":515,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":366,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":449,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":629},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[0],"tindex":"44ad3087-3e52-11e6-9ade-edb4f4b36832","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc.equals(src)) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src","to":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"44ad7ea8-3e52-11e6-9ade-315bf821d162","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"44ad7ea9-3e52-11e6-9ade-b32800ddec9b","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,0,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,1,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"44ad7eaa-3e52-11e6-9ade-eb73dd630b9c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"44ada5bb-3e52-11e6-9ade-530d893d9ead","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[244,245,246],"tindex":"44ada5bc-3e52-11e6-9ade-3deb412f69c9","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if ((json.length()) == 0) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"44adcccd-3e52-11e6-9ade-7386975e4c8f","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"44adccce-3e52-11e6-9ade-4fa739885375","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,6,272,273,274,275,276,277,278,279,280,281,282,283,8,284,285,286,287,55,56,288,57,58,289,290,291,61,292,293,294,295,296,66,67,68,69,70,73,75,297,77,298,299,96,97,98,102,103,108,0,300,301,302,303,304,305,306,307,308,171,172,173,174,309,175,179,181,186,310,199,200,205,207,208,209,210,211,212,213,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346],"tindex":"44adcccf-3e52-11e6-9ade-97167908931d","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof com.google.gson.JsonPrimitive) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"44adf3e0-3e52-11e6-9ade-8102debd9b60","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"44adf3e1-3e52-11e6-9ade-a38f83f67381","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[222,223,224,226,227,229],"tindex":"44ae1af2-3e52-11e6-9ade-f940024da949","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"44ae1af3-3e52-11e6-9ade-bb4ce79c6036","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"44ae1af4-3e52-11e6-9ade-3b1263ffa13b","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[248,249,250,255,256,257,258,2,3,4,347,5,348,6,273,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,277,282,8,9,382,383,284,384,10,385,12,14,16,18,19,20,285,22,23,24,25,26,28,29,30,32,34,35,36,37,39,40,41,44,46,49,386,50,387,388,389,390,391,51,392,53,393,54,394,289,290,61,395,62,63,292,396,296,64,65,397,398,399,400,401,71,402,403,404,405,406,73,407,74,75,408,409,76,410,411,412,77,78,79,81,82,83,413,414,84,85,86,415,89,90,92,416,93,94,99,100,101,106,107,417,418,419,420,421,422,423,110,111,114,117,120,424,122,124,127,129,130,425,132,135,137,138,140,145,148,0,149,150,151,152,154,155,156,157,158,159,160,426,161,162,163,427,164,428,429,430,431,432,433,434,435,436,437,438,168,169,439,440,441,170,172,174,176,177,178,179,180,182,184,187,188,189,442,191,443,444,445,446,447,448,449,450,451,452,453,192,194,454,455,195,196,197,198,203,205,207,208,210,213,456,313,457,458,459,460,219,461,462,463,464,220,221,222,225,226,229,230,231,232,233,234,235,236,465,237,319,320,238,239,240,466,467,241,468,469],"tindex":"44ae4205-3e52-11e6-9ade-7f0af2278857","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[37,39,40,42,43,47,233,234,235],"tindex":"44ae9026-3e52-11e6-9ade-59d58348593e","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:336","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[],"tindex":"44aeb737-3e52-11e6-9ade-6108a18ed582","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == 2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[248,255,256,258,273,277,282,285,55,56,57,58,61,395,62,396,77,416,424,0,205,207,208,210,319,320],"tindex":"44aeb738-3e52-11e6-9ade-69bc680c9a08","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"44aeb739-3e52-11e6-9ade-55e4bb8b835f","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"44aeb73a-3e52-11e6-9ade-2d937301478c","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[470,2,471,472,473,266,267,268,3,4,474,475,476,477,5,348,6,478,479,480,481,482,483,484,485,283,7,8,486,487,488,9,382,383,284,384,489,490,10,11,385,491,492,12,13,14,15,16,17,18,19,20,21,285,22,23,24,25,26,27,28,29,30,31,32,286,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,386,50,387,493,494,495,388,389,390,391,51,496,497,392,498,52,53,393,499,54,394,500,287,501,55,56,288,57,58,289,59,290,502,291,60,61,395,62,503,63,292,293,294,396,295,504,505,296,64,65,66,67,68,69,70,506,507,508,509,397,510,511,512,398,399,513,514,400,515,401,516,71,517,518,519,520,402,403,404,521,72,405,406,522,73,407,74,75,408,409,523,76,410,524,411,297,525,412,77,78,298,79,80,81,82,83,413,414,84,85,86,87,88,415,299,526,89,90,91,92,416,93,527,528,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,529,530,531,532,533,534,535,536,537,538,539,417,540,541,542,543,544,545,546,547,548,549,550,418,551,552,553,554,555,556,557,558,419,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,420,592,593,594,595,596,597,109,598,599,600,601,602,603,421,604,605,606,607,608,609,422,610,611,612,613,423,614,615,616,617,110,111,112,113,114,115,116,117,118,119,120,121,618,122,123,124,125,619,126,620,127,128,129,130,425,131,132,133,134,621,135,136,137,138,139,140,141,142,143,144,145,146,147,148,0,300,149,150,151,152,153,154,155,156,157,158,159,160,426,161,162,163,427,301,622,302,164,623,624,303,625,304,305,626,306,627,628,629,165,166,167,630,437,438,168,169,439,440,441,170,308,171,172,173,174,309,175,176,177,178,179,180,631,181,182,632,183,184,185,186,633,187,188,310,189,190,442,191,443,444,634,445,446,447,448,449,635,636,450,451,452,637,638,639,453,640,192,193,194,641,454,642,455,643,195,196,197,198,199,200,644,201,202,203,204,645,646,647,648,205,649,206,207,208,209,210,211,212,213,214,244,650,311,651,652,215,216,456,653,654,312,655,313,656,314,657,217,658,457,245,1,659,660,458,661,662,459,218,663,664,665,666,667,460,668,219,669,461,462,670,671,672,673,674,675,676,463,677,315,464,678,220,316,679,246,680,221,681,682,317,683,318,684,685,686,222,223,224,225,226,227,228,229,687,688,689,230,231,690,232,233,234,235,236,691,692,693,694,695,696,697,698,465,699,700,701,702,703,704,705,706,707,237,238,708,239,240,466,709,467,241,242,243,468,469,710],"tindex":"44aede4b-3e52-11e6-9ade-67477c20e34e","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[2,301,302,303,304,305,306,172,174,179,180,181,182,183,185,442,191,317],"tindex":"44af055c-3e52-11e6-9ade-194273e12d0a","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"44af055d-3e52-11e6-9ade-45c846c33750","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[470,2,471,472,473,474,482,483,484,12,13,14,15,16,17,18,19,55,56,288,57,58,289,59,290,502,291,60,61,395,62,503,63,292,293,294,396,295,504,296,510,77,298,299,526,416,144,149,151,301,622,302,303,625,304,305,626,306,628,429,430,711,165,166,167,630,308,171,172,173,174,309,175,310,213,214,669,674,677,680,317],"tindex":"44af055e-3e52-11e6-9ade-37b3c95b6d22","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[2,3,4,5,6,7,8,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,286,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,0,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,1,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"44af2c6f-3e52-11e6-9ade-ad397fc0059c","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"44af2c70-3e52-11e6-9ade-798903a015e7","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44af5381-3e52-11e6-9ade-99b611cd8859","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44af5382-3e52-11e6-9ade-d1d22694883e","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"44af5383-3e52-11e6-9ade-535c093a15c0","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"44af5384-3e52-11e6-9ade-3b71e05b2417","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json.isString()) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[353,391,71,73,74,77,86,415,89,90,527,94,99,101,107,156,451,454,1,220],"tindex":"44af5385-3e52-11e6-9ade-730349f9c3d7","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[470,2,471,472,473,266,267,268,3,4,6,478,479,480,481,482,483,484,485,283,7,8,486,487,488,9,382,383,284,384,489,490,10,11,385,491,492,12,13,14,15,16,17,18,19,20,21,285,22,23,24,25,26,27,28,29,30,31,32,286,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,386,50,387,493,494,495,388,389,390,391,51,496,497,392,498,52,53,393,499,54,394,500,287,501,55,56,288,57,58,289,59,290,502,291,60,61,395,62,503,63,292,293,294,396,295,504,505,296,64,65,66,67,68,69,70,506,507,508,509,397,510,511,512,398,399,513,514,400,515,401,516,71,517,518,519,520,402,403,404,521,72,405,406,522,73,407,74,75,408,409,523,76,410,524,411,297,525,412,77,78,298,79,80,81,82,83,413,414,84,85,86,87,88,415,299,526,89,90,91,92,416,93,527,528,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,529,530,531,532,533,534,535,536,537,538,539,417,540,541,542,543,544,545,546,547,548,549,550,418,551,552,553,554,555,556,557,558,419,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,420,592,593,594,595,596,597,109,598,599,600,601,602,603,421,604,605,606,607,608,609,422,610,611,612,613,423,614,615,616,617,110,111,112,113,114,115,116,117,118,119,120,121,618,122,123,124,125,619,126,620,127,128,129,130,425,131,132,133,134,621,135,136,137,138,139,140,141,142,143,144,145,146,147,148,0,300,149,150,151,152,153,154,155,156,157,158,159,160,426,161,162,163,427,301,622,302,164,623,624,303,625,304,305,626,306,627,628,629,165,166,167,630,437,438,168,169,439,440,441,170,308,171,172,173,174,309,175,176,177,178,179,180,631,181,182,632,183,184,185,186,633,187,188,310,189,190,442,191,443,444,634,445,446,447,448,449,635,636,450,451,452,637,638,639,453,640,192,193,194,641,454,642,455,643,195,196,197,198,199,200,644,201,202,203,204,645,646,647,648,205,649,206,207,208,209,210,211,212,213,214,244,650,311,651,652,215,216,456,653,654,312,655,313,656,314,657,217,658,457,245,1,659,660,458,661,662,459,218,663,664,665,666,667,460,668,219,669,461,462,670,671,672,673,674,675,676,463,677,315,464,678,220,316,679,246,680,221,681,682,317,683,318,684,685,686,222,223,224,225,226,227,228,229,687,688,689,230,231,690,232,233,234,235,236,691,692,693,694,695,696,697,698,465,699,700,701,702,703,704,705,706,707,237,238,708,239,240,466,467,241,242,243,468,469,710],"tindex":"44af7a96-3e52-11e6-9ade-cb602391900f","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"44afa1a7-3e52-11e6-9ade-b77056046918","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44afa1a8-3e52-11e6-9ade-77c5ab363e5d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44afa1a9-3e52-11e6-9ade-e766c527b204","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44afa1aa-3e52-11e6-9ade-8bccf59898f0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl","sourcecode":"((last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT))) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT))"},"failures":[],"tindex":"44afa1ab-3e52-11e6-9ade-6dd2f19af090","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (((timeStyle == dateStyle) || (last == timeStyle)) || (last == dateStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"timeStyle","last":"timeStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"dateStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"44afc8bc-3e52-11e6-9ade-797b7436a06f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"44afc8bd-3e52-11e6-9ade-61828e536063","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[631,183,184,185],"tindex":"44afc8be-3e52-11e6-9ade-2b6ed84d2f29","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"44afc8bf-3e52-11e6-9ade-e9f4ba289ee3","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"44afefd0-3e52-11e6-9ade-c9678c55dba7","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"44afefd1-3e52-11e6-9ade-235a8d5e8176","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"44afefd2-3e52-11e6-9ade-812f9edd574d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"44afefd3-3e52-11e6-9ade-f9624fbc573b","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"44b016e4-3e52-11e6-9ade-f78e25e1b7db","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[347,5,348],"tindex":"44b016e5-3e52-11e6-9ade-0d20be7192c0","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[35,40,42,48,232,235],"tindex":"44b016e6-3e52-11e6-9ade-fb8dadfea51d","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[311,313,314,315,316,317,332,333,334,336,337],"tindex":"44b016e7-3e52-11e6-9ade-21e5c4076df8","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"44b03df8-3e52-11e6-9ade-5ba7554f5697","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if ((java.lang.String) != null) {\n        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n            object.add(java.lang.String, value);\n        } \n        java.lang.String = null;\n    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n        com.google.gson.JsonElement = value;\n    } else {\n        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n        if (element instanceof com.google.gson.JsonArray) {\n            ((com.google.gson.JsonArray)(element)).add(value);\n        } else {\n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,0,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,1,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"44b03df9-3e52-11e6-9ade-875282a14799","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[366,367,373,377],"tindex":"44b0650a-3e52-11e6-9ade-c1e0710b2164","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"44b0650b-3e52-11e6-9ade-237a61e4ea0e","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"44b0650c-3e52-11e6-9ade-6b0f5a45eb62","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            if (subclass.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"44b08c1d-3e52-11e6-9ade-89fc971feeff","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if ((modifier == modifier) || (p == modifier)) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"modifier","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"44b08c1e-3e52-11e6-9ade-353042e57c7c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[712,713,714,715],"tindex":"44b08c1f-3e52-11e6-9ade-8f14f064d55d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","node":"node","left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"44b0b330-3e52-11e6-9ade-b133807a398b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"44b0da41-3e52-11e6-9ade-87391d5d72b5","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"44b0da42-3e52-11e6-9ade-cf58ad4d5503","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:119","type":"CtUnaryOperatorImpl","sourcecode":"!(java.util.Map.class.isAssignableFrom(rawType))"},"failures":[],"tindex":"44b0da43-3e52-11e6-9ade-45e1445704d8","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (!(type.isAssignableFrom(rawType))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Map.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"44b10154-3e52-11e6-9ade-8b6fa507a02e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"44b10155-3e52-11e6-9ade-c7e1d67236ce","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if ((message != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"44b10156-3e52-11e6-9ade-e19d51c9c422","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            if (subclass.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"44b10157-3e52-11e6-9ade-098dfc664f7a","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242335936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":65,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":67,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":120,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":147,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":140,"com.google.gson.functional.MapTest.testMapSerialization":116,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":17,"com.google.gson.functional.PrimitiveTest.testShortSerialization":49,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":164,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":4,"com.google.gson.functional.MapTest.testSerializeMaps":115,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":135,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":30,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":62,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":42,"com.google.gson.MixedStreamTest.testWriteLenient":10,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":104,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":132,"com.google.gson.stream.JsonWriterTest.testNumbers":6,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":137,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":138,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":142,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":160,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":95,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":148,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":52,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":63,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":56,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":107,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":51,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":8,"com.google.gson.functional.MapTest.testRawMapSerialization":118,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":88,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":158,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":55,"com.google.gson.functional.PrettyPrintingTest.testMap":146,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":22,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":65,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":127,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":18,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":21,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":26,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":57,"com.google.gson.functional.PrimitiveTest.testByteSerialization":46,"com.google.gson.ObjectTypeAdapterTest.testSerialize":156,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":70,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":105,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":145,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":154,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":141,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":60,"com.google.gson.functional.FieldNamingTest.testIdentity":136,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":102,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":133,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":79,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":84,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":161,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":110,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":122,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":150,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":61,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":97,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":83,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":24,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":35,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":94,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":53,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":71,"com.google.gson.functional.MapTest.testGeneralMapField":117,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":103,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":152,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":39,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":90,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":48,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":43,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":1,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":74,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":38,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":32,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":28,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":93,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":106,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":72,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":99,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":25,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":86,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":162,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":91,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":121,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":54,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":129,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":108,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":29,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":168,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":59,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":167,"com.google.gson.functional.ObjectTest.testNestedSerialization":128,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":13,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":33,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":111,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":3,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":34,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":169,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":112,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":101,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":41,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":125,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":14,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":123,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":15,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":163,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":73,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":11,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":47,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":23,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":76,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":81,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":50,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":144,"com.google.gson.functional.CollectionTest.testSetSerialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":58,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":66,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":149,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":31,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":159,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":5,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":96,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":20,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":124,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":85,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":2,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":134,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":151,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":0,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":126,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":75,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":114,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":155,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":69,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":89,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":44,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":165,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":166,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":78,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":98,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":157,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":80,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":130,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":131,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":16,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":100,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":109},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"53cd754c-3e48-11e6-b66f-d187067c1108","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass","toResolve":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"53cdea7d-3e48-11e6-b66f-71a39f0f02a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[0],"tindex":"53ce118e-3e48-11e6-b66f-43ce962a1351","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if ((property.length()) == 0) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"53ce389f-3e48-11e6-b66f-eb5c65be3bc2","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"53ce5fb0-3e48-11e6-b66f-43124d6aa02a","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"53ce5fb1-3e48-11e6-b66f-fb4f45d9c26a","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if ((src.peek()) == src) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src","com.google.gson.stream.JsonToken.NULL":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"53ce86c2-3e48-11e6-b66f-abcd566b2449","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[1,2],"tindex":"53ce86c3-3e48-11e6-b66f-ff99a8108900","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"53ceadd4-3e48-11e6-b66f-b1c5ce3c78fb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"53ced4e5-3e48-11e6-b66f-edb911973652","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"53ced4e6-3e48-11e6-b66f-edab3d5e687d","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[3,4],"tindex":"53cefbf7-3e48-11e6-b66f-79e9be03fe74","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"53cefbf8-3e48-11e6-b66f-bd64f0d2a895","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"53cf2309-3e48-11e6-b66f-0163152f2667","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,3,157,158],"tindex":"53cf230a-3e48-11e6-b66f-d973fb0895d0","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[159,160,161,162,163,164,165,166,167,168],"tindex":"53cf4a1b-3e48-11e6-b66f-c9e7d810bdca","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"53cf712c-3e48-11e6-b66f-e7df6cb514f9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"53cf983d-3e48-11e6-b66f-77b528264128","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[169,108],"tindex":"53cf983e-3e48-11e6-b66f-178e3c0eb839","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"53cf983f-3e48-11e6-b66f-4937edd86a4a","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"53cf9840-3e48-11e6-b66f-6b7ab5f18111","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681979/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":149,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":589,"com.google.gson.functional.StringTest.testStringValueDeserialization":587,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":31,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":556,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":346,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":207,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":455,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":255,"com.google.gson.MixedStreamTest.testWriteLenient":609,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":54,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":14,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":101,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":105,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":426,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":394,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":206,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":519,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":134,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":355,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":64,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":306,"com.google.gson.functional.ObjectTest.testSingletonLists":424,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":557,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":339,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":252,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":86,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":571,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":440,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":74,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":397,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":577,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":603,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":35,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":137,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":386,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":281,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":180,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":41,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":280,"com.google.gson.functional.EnumTest.testEnumCaseMapping":205,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":588,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":615,"com.google.gson.functional.JsonTreeTest.testToJsonTree":166,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":330,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":573,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":67,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":507,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":552,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":32,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":235,"com.google.gson.functional.ObjectTest.testNullDeserialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":459,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":600,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":435,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":119,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":347,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":40,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":301,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":446,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":9,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":574,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":114,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":409,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":570,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":391,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":370,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":539,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":126,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":78,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":368,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":256,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":274,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":383,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":549,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":44,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":1,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":246,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":293,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":261,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":392,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":384,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":445,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":499,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":85,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":431,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":585,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":212,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":289,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":351,"com.google.gson.metrics.PerformanceTest.testDummy":186,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":522,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":321,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":94,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":476,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":247,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":189,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":295,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":562,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":551,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":462,"com.google.gson.functional.CollectionTest.testSetDeserialization":240,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":135,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":122,"com.google.gson.functional.EnumTest.testEnumSet":197,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":524,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":375,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":19,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":543,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":124,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":93,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":388,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":475,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":399,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":38,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":87,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":118,"com.google.gson.functional.MapTest.testHashMapDeserialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":344,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":561,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":486,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":586,"com.google.gson.MixedStreamTest.testReadNulls":610,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":216,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":42,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":195,"com.google.gson.functional.MapTest.testSortedMap":284,"com.google.gson.functional.MapTest.testMapSerialization":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":150,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":381,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":478,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":509,"com.google.gson.functional.MapTest.testSerializeMaps":108,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":174,"com.google.gson.functional.MapTest.testComplexKeysSerialization":290,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":523,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":0,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":294,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":159,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":203,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":461,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":316,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":226,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":192,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":201,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":62,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":140,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":88,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":448,"com.google.gson.functional.MapTest.testStringKeyDeserialization":292,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":21,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":411,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":112,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":350,"com.google.gson.functional.PrettyPrintingTest.testMap":138,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":345,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":466,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":102,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":193,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":537,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":187,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":514,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":593,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":597,"com.google.gson.functional.CollectionTest.testQueueSerialization":233,"com.google.gson.functional.MapTest.testMapSerializationEmpty":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":376,"com.google.gson.functional.MapTest.testMapOfMapSerialization":279,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":553,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":237,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":27,"com.google.gson.functional.FieldNamingTest.testIdentity":175,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":591,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":248,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":151,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":450,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":89,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":165,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":245,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":423,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":333,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":297,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":592,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":373,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":565,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":572,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":262,"com.google.gson.functional.MapTest.testMapSubclassSerialization":266,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":407,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":145,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":526,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":178,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":365,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":467,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":576,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":536,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":191,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":92,"com.google.gson.functional.EnumTest.testEnumSubclass":199,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":387,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":188,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":332,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":296,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":393,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":20,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":222,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":335,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":130,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":371,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":457,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":319,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":182,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":506,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":377,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":434,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":211,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":567,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":425,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":263,"com.google.gson.MixedStreamTest.testWriteNulls":607,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":156,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":259,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":501,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":460,"com.google.gson.CommentsTest.testParseComments":617,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":24,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":121,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":311,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":390,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":510,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":477,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":283,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":595,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":81,"com.google.gson.MixedStreamTest.testReadInvalidState":605,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":568,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":479,"com.google.gson.JsonParserTest.testParseMixedArray":8,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":343,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":515,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":516,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":555,"com.google.gson.functional.MapTest.testMapDeserialization":272,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":550,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":143,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":30,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":60,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":305,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":117,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":271,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":310,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":307,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":227,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":45,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":535,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":127,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":468,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":540,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":100,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":129,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":251,"com.google.gson.functional.PrimitiveTest.testShortSerialization":406,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":396,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":366,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":544,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":171,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":11,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":229,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":484,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":267,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":359,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":413,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":63,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":5,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":563,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":3,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":420,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":414,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":210,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":249,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":326,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":6,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":531,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":401,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":529,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":372,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":453,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":430,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":204,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":220,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":525,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":541,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":464,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":250,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":77,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":349,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":75,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":559,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":230,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":336,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":402,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":374,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":417,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":253,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":198,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":309,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":490,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":480,"com.google.gson.functional.MapTest.testGeneralMapField":110,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":428,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":498,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":419,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":158,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":564,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":47,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":303,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":340,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":398,"com.google.gson.MixedStreamTest.testReadMixedStreamed":613,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":275,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":542,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":181,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":528,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":521,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":379,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":82,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":554,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":276,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":583,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":418,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":153,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":169,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":362,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":76,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":260,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":152,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":530,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":315,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":29,"com.google.gson.functional.ObjectTest.testNestedDeserialization":454,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":36,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":443,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":487,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":318,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":416,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":160,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":208,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":277,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":594,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":91,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":405,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":219,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":17,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":258,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":107,"com.google.gson.functional.ObjectTest.testNullSerialization":436,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":99,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":582,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":268,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":287,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":334,"com.google.gson.functional.MapTest.testInterfaceTypeMap":285,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":508,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":37,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":322,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":337,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":469,"com.google.gson.MixedStreamTest.testReadClosed":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":532,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":353,"com.google.gson.MixedStreamTest.testWriteClosed":612,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":234,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":489,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":325,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":575,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":96,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":116,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":162,"com.google.gson.stream.JsonWriterTest.testLongs":73,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":569,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":327,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":432,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":103,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":382,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":170,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":223,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":560,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":492,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":421,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":358,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":538,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":463,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":496,"com.google.gson.functional.CollectionTest.testQueueDeserialization":244,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":518,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":364,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":380,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":599,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":580,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":273,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":71,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":115,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":452,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":228,"com.google.gson.functional.MapTest.testRawMapSerialization":111,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":177,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":558,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":136,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":217,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":442,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":483,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":314,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":190,"com.google.gson.functional.PrimitiveTest.testByteSerialization":404,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":500,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":57,"com.google.gson.ObjectTypeAdapterTest.testSerialize":84,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":113,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":348,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":59,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":15,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":157,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":172,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":97,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":179,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":596,"com.google.gson.functional.MapTest.testMapWithQuotes":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":49,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":356,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":598,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":18,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":527,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":28,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":147,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":48,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":133,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":308,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":90,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":451,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":389,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":437,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":433,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":50,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":70,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":168,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":400,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":196,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":239,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":502,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":55,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":154,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":221,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":493,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":581,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":146,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":194,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":214,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":26,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":441,"com.google.gson.functional.ObjectTest.testNestedSerialization":125,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":254,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":302,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":352,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":602,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":495,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":288,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":481,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":46,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":185,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":611,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":123,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":491,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":412,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":324,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":547,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":184,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":354,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":616,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":534,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":578,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":601,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":505,"com.google.gson.functional.CollectionTest.testSetSerialization":106,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":299,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":23,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":141,"com.google.gson.functional.StringTest.testStringValueSerialization":604,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":176,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":209,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":231,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":497,"com.google.gson.MixedStreamTest.testWriteInvalidState":608,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":34,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":357,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":363,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":511,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":52,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":173,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":458,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":494,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":470,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":53,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":58,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":270,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":155,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":472},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"6c53951e-3e88-11e6-9d80-b775b8427cdb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c53e33f-3e88-11e6-9d80-8b1980abf5b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:667","type":"CtBinaryOperatorImpl","sourcecode":"(p + i) == l"},"failures":[],"tindex":"6c53e340-3e88-11e6-9d80-3ba6d32c4f43","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i + i) == i) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","i":"i","l":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"6c540a51-3e88-11e6-9d80-b36f938129f0","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6c540a52-3e88-11e6-9d80-c9a8ee831227","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (type instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                        public T construct() {\n                                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                                if (elementType instanceof java.lang.Class) {\n                                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                                } else {\n                                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                                }\n                                            } else {\n                                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                            }\n                                        }\n                                    };\n                                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6c545873-3e88-11e6-9d80-01c6663afcef","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c545874-3e88-11e6-9d80-6d2631b012fb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"6c547f85-3e88-11e6-9d80-b7ad0b9a2029","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c547f86-3e88-11e6-9d80-4b1dda275b70","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"6c54a697-3e88-11e6-9d80-1901b55a9c7d","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"bound","type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c54a698-3e88-11e6-9d80-d365372bd94b","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6c54cda9-3e88-11e6-9d80-fd45965a3f8d","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"6c54cdaa-3e88-11e6-9d80-173d6ce7d0b4","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"6c54cdab-3e88-11e6-9d80-0b13df066dd5","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6c54f4bc-3e88-11e6-9d80-8fbb983c1fe6","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (type instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                        public T construct() {\n                                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                                if (elementType instanceof java.lang.Class) {\n                                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                                } else {\n                                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                                }\n                                            } else {\n                                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                            }\n                                        }\n                                    };\n                                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6c5542dd-3e88-11e6-9d80-f557a5f4545c","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"6c5542de-3e88-11e6-9d80-391130d663c9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[61,62,63],"tindex":"6c5569ef-3e88-11e6-9d80-9fcddf1bde3b","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c559100-3e88-11e6-9d80-4dd74edfbb5b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[35],"tindex":"6c559101-3e88-11e6-9d80-590772c5ccaa","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c559102-3e88-11e6-9d80-719b96f3d7cf","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6c559103-3e88-11e6-9d80-2513f20296bd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c559104-3e88-11e6-9d80-3df400f9d7fd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6c55b815-3e88-11e6-9d80-5542b31863b6","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6c55b816-3e88-11e6-9d80-2be9283b37c1","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (type instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (type instanceof java.lang.reflect.GenericArrayType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                                        public T construct() {\n                                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                                if (elementType instanceof java.lang.Class) {\n                                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                                } else {\n                                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                                }\n                                            } else {\n                                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                            }\n                                        }\n                                    };\n                                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                                        }\n                                    };\n                                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                                        }\n                                    };\n                                } else {\n                                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                                        public T construct() {\n                                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                                        }\n                                    };\n                                }\n                            } \n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c55df27-3e88-11e6-9d80-0db847a48f9d","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[64,65,66,67],"tindex":"6c55df28-3e88-11e6-9d80-fbd576f0d279","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c55df29-3e88-11e6-9d80-2f4f28d11c0d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[68,69,70,71,72],"tindex":"6c56063a-3e88-11e6-9d80-c94722ff7890","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c56063b-3e88-11e6-9d80-dde94aecfc41","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6c56063c-3e88-11e6-9d80-9d2e0273410d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[73,74,75,76,77,78],"tindex":"6c562d4d-3e88-11e6-9d80-4f3fecb9f9a2","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"6c562d4e-3e88-11e6-9d80-0fe2d974e4f3","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[79,11,28,80,35,36,81,41,82,83],"tindex":"6c562d4f-3e88-11e6-9d80-535eb70fa2bd","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Number) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"typeAdapter","value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"6c565460-3e88-11e6-9d80-275cab7caf0f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6c565461-3e88-11e6-9d80-95d144db167e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c565462-3e88-11e6-9d80-055f702c3b5f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[84,85,86,87,88,89,90,12,91,92,93,94,95,96,97,98,66,67,99,100,101,102,103,104,105,106,107,22,23,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,42,43,44,164,45,165,166,46,167,168,169,170,171,172,173,174,175,176,177,178],"tindex":"6c567b73-3e88-11e6-9d80-9fddb04c2a20","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6c567b74-3e88-11e6-9d80-ed6444fabed1","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[],"tindex":"6c567b75-3e88-11e6-9d80-ff616e54053b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:879","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"6c56a286-3e88-11e6-9d80-63e09e819b03","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == start) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_NONE":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[179,79,180,7,181,182,183,184,85,9,10,185,186,187,74,188,189,190,191,86,192,193,194,195,196,87,197,198,11,199,200,201,202,203,204,205,206,207,208,88,209,210,211,89,212,90,213,12,91,92,93,94,95,64,96,97,98,65,66,214,215,67,216,217,218,219,220,221,99,222,223,224,225,100,226,227,101,228,229,102,230,231,232,233,103,234,235,104,236,237,238,239,240,105,241,242,106,107,243,13,244,14,15,245,16,17,18,246,19,247,248,249,20,21,22,250,23,24,25,251,26,252,27,28,29,253,254,255,256,257,63,258,259,260,261,262,30,263,264,265,266,108,267,268,269,270,271,272,273,274,275,276,277,278,279,109,280,281,282,283,284,285,286,287,110,288,111,289,290,291,292,293,294,295,112,31,296,297,298,299,300,301,113,302,303,114,115,304,305,306,307,308,32,309,310,311,312,33,313,314,315,316,317,318,319,320,321,116,322,323,324,325,326,117,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,118,400,401,402,403,404,405,119,406,120,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,121,427,428,429,430,431,432,34,433,434,122,435,436,123,437,438,439,440,80,124,441,442,125,443,444,445,446,447,448,449,126,450,127,68,451,128,452,453,454,455,129,456,457,130,35,36,81,458,459,460,461,462,463,131,132,133,134,135,464,465,466,37,467,468,469,38,470,39,40,471,41,82,83,472,473,474,475,476,137,138,139,140,141,142,143,144,477,478,479,480,481,482,483,484,145,146,148,485,149,150,486,487,488,489,490,491,151,152,492,493,494,495,153,496,154,497,498,499,500,501,155,502,503,504,505,156,506,507,508,157,509,158,510,511,512,513,514,159,515,516,517,160,161,518,162,519,520,521,163,522,523,524,525,526,42,527,528,43,44,164,45,165,166,46,529,530,531,47,532,533,534,535,48,536,537,49,538,50,539,51,540,541,542,52,543,544,545,69,75,70,71,546,547,548,549,550,551,552,76,553,554,555,77,78,556,557,558,559,560,561,53,562,563,54,564,565,566,55,567,72,568,569,570,571,56,572,573,574,575,576,167,577,578,168,169,579,580,170,581,582,583,584,585,586,171,172,173,174,175,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,176,57,58,177,605,606,178,607,608,609,610,611,612,613,614,615,616,617],"tindex":"6c56c997-3e88-11e6-9d80-0f684257cdd4","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[544],"tindex":"6c56c998-3e88-11e6-9d80-25b5f4f9d7e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6c56f0a9-3e88-11e6-9d80-593fdee8a8e8","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934259/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":44,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":105,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":43,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":19,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":61,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":20,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":104,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.MapTest.testComplexKeysSerialization":102,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":124,"com.google.gson.MixedStreamTest.testWriteLenient":136,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":8,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":29,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":118,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":57,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":125,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":88,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":69,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":15,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":127,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":95,"com.google.gson.functional.ObjectTest.testSingletonLists":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":89,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":62,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":82,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":119,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.MapTest.testRawMapSerialization":101,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":23,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":24,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":48,"com.google.gson.functional.CollectionTest.testQueueSerialization":120,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":131,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":51,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":71,"com.google.gson.functional.MapTest.testMapOfMapSerialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":140,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":45,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":32,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":129,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":123,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":12,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":63,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":75,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":6,"com.google.gson.functional.MapTest.testMapWithQuotes":96,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":60,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":134,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":85,"com.google.gson.functional.JsonTreeTest.testToJsonTree":59,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":40,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":44,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":64,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":133,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":16,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":11,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":122,"com.google.gson.functional.MapTest.testMapSubclassSerialization":91,"com.google.gson.functional.MapTest.testGeneralMapField":100,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":142,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":76,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":50,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":54,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":77,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":27,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":56,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":80,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":2,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":25,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":126,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":81,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":70,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":33,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":55,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":106,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":141,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":73,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":114,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":84,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":36,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":132,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":34,"com.google.gson.functional.ObjectTest.testNestedSerialization":113,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":7,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":17,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":79,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":86,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":83,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":117,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":87,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":35,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":103,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":5,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":72,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":111,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":108,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":22,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":41,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":130,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":138,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":65,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":38,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":67,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":74,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":116,"com.google.gson.functional.StringTest.testStringValueSerialization":68,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":26,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":49,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":99,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":137,"com.google.gson.functional.MapTest.testInterfaceTypeMap":98,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":39,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":13,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":47,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":139,"com.google.gson.JsonArrayTest.testRemove":0,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":10,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":21,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":93,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":112,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":1,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":42,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":94,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":53,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":121,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":90,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":109,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":135,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":58,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":31,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":14,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":115,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":18,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":37},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:826","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)"},"failures":[0],"tindex":"74031707-3e89-11e6-9a65-ff2f6de6c2e8","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266870515/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133],"tindex":"74038c38-3e89-11e6-9a65-cfee47cd9d25","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266870515/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:105","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"74038c39-3e89-11e6-9a65-316c81d21b8b","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"7403b34a-3e89-11e6-9a65-0b9178cc326a","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[134,135],"tindex":"7403b34b-3e89-11e6-9a65-813a1db7de43","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266870515/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"7403b34c-3e89-11e6-9a65-c90b52cf4e5a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[136,137,138,139,140,141,142],"tindex":"7403da5d-3e89-11e6-9a65-6520c403f762","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266870515/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"7403da5e-3e89-11e6-9a65-d1dabeba4e39","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context","b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"7403da5f-3e89-11e6-9a65-978e27f3e568","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467266870515/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":9,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":304,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":129,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":96,"com.google.gson.stream.JsonWriterTest.testRepeatedName":136,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":227,"com.google.gson.MixedStreamTest.testWriteLenient":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":274,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":102,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":377,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":291,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":330,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":294,"com.google.gson.functional.ObjectTest.testSingletonLists":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":270,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":331,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":305,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":127,"com.google.gson.stream.JsonWriterTest.testStrings":142,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":285,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":145,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":19,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":178,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":242,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":381,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":80,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":392,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":79,"com.google.gson.functional.EnumTest.testEnumCaseMapping":290,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":156,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":303,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":385,"com.google.gson.stream.JsonWriterTest.testNulls":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":175,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":333,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":362,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":208,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":354,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":390,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":18,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":154,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":283,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":327,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":138,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":176,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":200,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":414,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":317,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":269,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":236,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":401,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":92,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":201,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":99,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":421,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":168,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":396,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":88,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":411,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":417,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":238,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":245,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":37,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":264,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":409,"com.google.gson.functional.CollectionTest.testSetDeserialization":112,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":49,"com.google.gson.functional.EnumTest.testEnumSet":39,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":350,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":246,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":20,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":121,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":70,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":355,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":30,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":147,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":288,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":387,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":204,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":163,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":230,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":38,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":55,"com.google.gson.functional.MapTest.testSortedMap":82,"com.google.gson.functional.MapTest.testMapSerialization":78,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":165,"com.google.gson.functional.MapTest.testSerializeMaps":125,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":371,"com.google.gson.functional.MapTest.testComplexKeysSerialization":89,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":93,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":323,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":364,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":65,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":286,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":383,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":228,"com.google.gson.functional.MapTest.testStringKeyDeserialization":91,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":218,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":211,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":95,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":297,"com.google.gson.functional.PrettyPrintingTest.testMap":382,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":374,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":251,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":144,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":177,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":309,"com.google.gson.functional.MapTest.testMapSerializationEmpty":90,"com.google.gson.functional.CollectionTest.testQueueSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":261,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":139,"com.google.gson.functional.MapTest.testMapOfMapSerialization":341,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":413,"com.google.gson.JavaSerializationTest.testMapIsSerializable":1,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":110,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":10,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":224,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":306,"com.google.gson.functional.FieldNamingTest.testIdentity":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":21,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":158,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":229,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":346,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":148,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":307,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":407,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":195,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":400,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":282,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":66,"com.google.gson.functional.MapTest.testMapSubclassSerialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":415,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":45,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":152,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":299,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":29,"com.google.gson.functional.EnumTest.testEnumSubclass":42,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":198,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":187,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":217,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":345,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":24,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":399,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":98,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":194,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":277,"com.google.gson.MixedStreamTest.testWriteNulls":153,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":52,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":50,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":315,"com.google.gson.CommentsTest.testParseComments":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":221,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":347,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":13,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":308,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":342,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":47,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":279,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":366,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":189,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":122,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":11,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":412,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":8,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":267,"com.google.gson.functional.MapTest.testMapDeserialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":263,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":386,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":338,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":398,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":72,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":240,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":64,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":332,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":43,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":302,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":353,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":359,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":237,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":344,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":81,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":116,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":281,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":22,"com.google.gson.functional.PrimitiveTest.testShortSerialization":209,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":394,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":256,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":368,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":41,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":373,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":292,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":68,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":212,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":380,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":403,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":215,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":172,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":416,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":100,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":247,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":404,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":61,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":219,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":233,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":395,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":376,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":295,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":268,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":334,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":258,"com.google.gson.stream.JsonWriterTest.testNullStringValue":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":336,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":104,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":196,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":213,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":161,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":63,"com.google.gson.functional.MapTest.testGeneralMapField":86,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":296,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":320,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":275,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":84,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":248,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":326,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":203,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":192,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":57,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":149,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":378,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":393,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":266,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":76,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":226,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":222,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":54,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":182,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":265,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":51,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":159,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":23,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":243,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":422,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":391,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":160,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":77,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":28,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":207,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":418,"com.google.gson.JavaSerializationTest.testListIsSerializable":2,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":114,"com.google.gson.functional.ObjectTest.testNullSerialization":351,"com.google.gson.stream.JsonWriterTest.testDoubles":130,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":235,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":69,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":85,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":410,"com.google.gson.functional.MapTest.testInterfaceTypeMap":83,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":298,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":239,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":171,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":289,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":249,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":389,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":375,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":26,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":348,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":31,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":25,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":15,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":12,"com.google.gson.stream.JsonWriterTest.testLongs":133,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":280,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":241,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":349,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":107,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":183,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":271,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":6,"com.google.gson.stream.JsonWriterTest.testNumbers":141,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":191,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":312,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":365,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":14,"com.google.gson.functional.CollectionTest.testQueueDeserialization":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":193,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":278,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":260,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":101,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":328,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":103,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":151,"com.google.gson.functional.MapTest.testRawMapSerialization":343,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":113,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":173,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":231,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":356,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":337,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":119,"com.google.gson.functional.PrimitiveTest.testByteSerialization":206,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":284,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":314,"com.google.gson.ObjectTypeAdapterTest.testSerialize":126,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":185,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":324,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":397,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":319,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":369,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":32,"com.google.gson.functional.MapTest.testMapWithQuotes":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":216,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":56,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":225,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":250,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":27,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":117,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":257,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":36,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":259,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":287,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":276,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":313,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":234,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":406,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":46,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":223,"com.google.gson.functional.ObjectTest.testNestedSerialization":357,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":162,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":190,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":325,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":329,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":87,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":367,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":60,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":4,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":150,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":143,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":5,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":352,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":157,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":174,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":310,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":318,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":17,"com.google.gson.functional.CollectionTest.testSetSerialization":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":220,"com.google.gson.functional.StringTest.testStringValueSerialization":311,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":384,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":184,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":7,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":105,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":321,"com.google.gson.stream.JsonWriterTest.testBooleans":131,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":167,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":255,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":370,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":361,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":388,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":402,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":272,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":186,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":71,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":128,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":316},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"0e866cbb-3e38-11e6-929f-0dc758933aed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"0e86badc-3e38-11e6-929f-8b5ff5d53fb2","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"0e86e1ed-3e38-11e6-929f-e5c008ba4d95","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if ((o instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"0e86e1ee-3e38-11e6-929f-8f92f8d9aa21","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[121,122,123],"tindex":"0e87300f-3e38-11e6-929f-67e390278cb5","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[124,125,103,126,127],"tindex":"0e875720-3e38-11e6-929f-0d63cc0930b5","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"0e875721-3e38-11e6-929f-dd9528279015","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"0e875722-3e38-11e6-929f-8b7c4cfb3637","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((timeStyle == timeStyle) || (p == timeStyle)) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[128,129,130],"tindex":"0e877e33-3e38-11e6-929f-4d2babc268eb","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[131,132,133,134,135,136,137,128,129,138,139,130,140,141,142,143,144,145,146,147,148,149,150,151,152,153,3,4,154,155,156,157,158,159,6,7,8,9,10,11,12,160,13,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,20,217,218,219,220,221,222,223,224,225,23,226,227,228,229,230,231,232,233,234,235,236,237,238,25,239,240,241,242,243,27,244,28,29,30,245,246,31,32,33,34,35,247,248,249,250,251,252,36,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,39,40,41,42,289,44,290,291,292,45,46,47,293,48,294,49,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,124,314,315,316,317,318,52,319,320,321,322,323,324,325,326,327,328,329,54,55,58,59,60,330,331,62,332,333,63,64,334,335,336,337,65,338,339,125,70,72,74,340,341,78,342,83,85,86,87,343,89,92,95,96,344,345,346,97,347,348,349,350,351,352,353,354,355,356,357,358,359,100,360,361,362,363,364,365,366,367,368,369,370,371,372,102,103,373,374,106,107,375,108,376,111,377,378,379,114,380,381,382,116,383,384,385,386,117,387,388,389,390,391,392,393,394,395,396,397,398,399,400,126,127,401,402,403,404],"tindex":"0e877e34-3e38-11e6-929f-c7545950d51e","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"0e87a545-3e38-11e6-929f-95f0fedc49a4","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"0e87a546-3e38-11e6-929f-f7046f7dae16","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[405,148,149,150,158,159,406,6,7,8,9,10,11,12,160,13,161,162,163,166,167,168,169,179,180,181,182,183,184,16,407,408,409,18,187,410,188,189,411,190,191,412,192,193,413,194,414,195,196,197,198,199,200,201,202,203,204,205,207,208,210,415,211,212,213,214,216,217,218,219,220,221,222,223,225,226,227,228,416,229,417,230,231,232,418,233,234,235,236,237,25,240,241,245,247,249,251,254,257,258,259,260,261,262,263,264,265,266,268,269,270,273,274,275,419,276,277,278,279,280,281,283,284,285,39,40,41,42,289,44,291,292,45,47,293,48,294,49,295,296,297,298,299,300,420,301,302,303,304,305,306,307,308,309,310,311,312,313,124,421,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,54,330,331,62,332,333,63,64,334,335,336,65,125,74,340,341,342,83,85,86,343,96,344,345,346,97,347,348,349,350,352,353,354,355,356,357,422,99,358,359,100,360,361,362,363,364,365,366,367,368,369,370,371,372,102,103,374,107,375,376,111,377,379,381,382,116,383,384,385,386,387,388,389,390,391,392,393,394,395,396,399,400],"tindex":"0e87cc57-3e38-11e6-929f-2797c2e615ab","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"0e87cc58-3e38-11e6-929f-8d1c872d6d13","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"0e87cc59-3e38-11e6-929f-b99b978b1d7f","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (!(java.lang.Character.isUpperCase(quote))) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl","sourcecode":"com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)"},"failures":[],"tindex":"0e87f36a-3e38-11e6-929f-13fa93dc59fb","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, to, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from","typeVarMap":"typeVarMap","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"0e87f36b-3e38-11e6-929f-130d2a787005","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467231781008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":17,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
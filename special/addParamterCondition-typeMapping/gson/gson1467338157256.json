{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":10,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":481,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":364,"com.google.gson.functional.StringTest.testStringValueDeserialization":643,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":278,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":576,"com.google.gson.stream.JsonWriterTest.testRepeatedName":361,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":549,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":321,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":69,"com.google.gson.MixedStreamTest.testWriteLenient":118,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":293,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":416,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":533,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":283,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":80,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":51,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":242,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":581,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":423,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":489,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":301,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":556,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":27,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":90,"com.google.gson.functional.ObjectTest.testSingletonLists":49,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":414,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":482,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":544,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":526,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":629,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":45,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":612,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":59,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":357,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":132,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":71,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":495,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":651,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":87,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":456,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":577,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":121,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":150,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":371,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":538,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":470,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":149,"com.google.gson.functional.EnumTest.testEnumCaseMapping":510,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":111,"com.google.gson.GenericArrayTypeTest.testNotEquals":122,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":480,"com.google.gson.functional.JsonTreeTest.testToJsonTree":226,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":537,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":459,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":319,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":530,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":502,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":493,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":164,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":514,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":604,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":477,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":194,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":34,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":649,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":57,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":356,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":392,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":550,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":462,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":468,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":354,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":62,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":422,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":42,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":587,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":586,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":611,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":260,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":388,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":494,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":385,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":591,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":235,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":413,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":564,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":47,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":144,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":574,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":108,"com.google.gson.ParameterizedTypeTest.testNotEquals":126,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":603,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":77,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":516,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":39,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":125,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":159,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":114,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":635,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":575,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":299,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":432,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":2,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":55,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":340,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":654,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":155,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":326,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":378,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":19,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":314,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":287,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":131,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":627,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":161,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":415,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":617,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":410,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":353,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":37,"com.google.gson.functional.CollectionTest.testSetDeserialization":82,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":185,"com.google.gson.functional.EnumTest.testEnumSet":204,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":298,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":633,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":567,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":172,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":601,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":167,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":578,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":5,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":583,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":227,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":465,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":112,"com.google.gson.functional.MapTest.testHashMapDeserialization":136,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":547,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":607,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":479,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":596,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":215,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":341,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":186,"com.google.gson.functional.MapTest.testSortedMap":152,"com.google.gson.functional.MapTest.testMapSerialization":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":216,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":20,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":572,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":623,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":273,"com.google.gson.functional.MapTest.testSerializeMaps":425,"com.google.gson.functional.MapTest.testComplexKeysSerialization":156,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":632,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":160,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":439,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":36,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":99,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":336,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":97,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":247,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":652,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":228,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":355,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":515,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":323,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":636,"com.google.gson.functional.MapTest.testStringKeyDeserialization":158,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":624,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":447,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":395,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":162,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":553,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":442,"com.google.gson.functional.PrettyPrintingTest.testMap":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":548,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":474,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":401,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":630,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":496,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":525,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":625,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":486,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":644,"com.google.gson.functional.MapTest.testMapSerializationEmpty":157,"com.google.gson.functional.CollectionTest.testQueueSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":407,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":568,"com.google.gson.functional.MapTest.testMapOfMapSerialization":427,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":383,"com.google.gson.JavaSerializationTest.testMapIsSerializable":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":605,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":196,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":103,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":369,"com.google.gson.functional.FieldNamingTest.testIdentity":274,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":483,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":173,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":88,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":225,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":229,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":246,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":325,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":539,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":372,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":259,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":484,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":490,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":85,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":609,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":602,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":408,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":135,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":394,"com.google.gson.functional.MapTest.testMapSubclassSerialization":508,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":7,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":32,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":634,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":282,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":473,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":562,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":294,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":598,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":44,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":26,"com.google.gson.functional.EnumTest.testEnumSubclass":207,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":212,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":58,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":374,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":351,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":288,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":94,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":540,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":328,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":534,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":565,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":86,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":312,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":251,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":621,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":182,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":569,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":84,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":384,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":419,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":50,"com.google.gson.MixedStreamTest.testWriteNulls":244,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":615,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":163,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":180,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":434,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":25,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":35,"com.google.gson.CommentsTest.testParseComments":116,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":230,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":448,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":280,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":579,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":616,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":368,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":485,"com.google.gson.MixedStreamTest.testReadInvalidState":527,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":183,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":169,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":610,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":120,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":21,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":377,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":513,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":626,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":302,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":528,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":381,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":101,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":504,"com.google.gson.functional.MapTest.testMapDeserialization":143,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":409,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":460,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":507,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":89,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":522,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":142,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":240,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":333,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":476,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":98,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":208,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":264,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":236,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":461,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":444,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":402,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":31,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":327,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":151,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":291,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":421,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":536,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":174,"com.google.gson.functional.PrimitiveTest.testShortSerialization":498,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":478,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":582,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":472,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":563,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":266,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":546,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":270,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":206,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":6,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":138,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":559,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":201,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":213,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":48,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":608,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":518,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":590,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":491,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":40,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":79,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":300,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":399,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":9,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":289,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":566,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":67,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":54,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":344,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":455,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":265,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":440,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":628,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":331,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":412,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":535,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":552,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":606,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":189,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":541,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":585,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":211,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":396,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":337,"com.google.gson.JsonPrimitiveTest.testEquals":653,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":332,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":13,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":22,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":53,"com.google.gson.functional.MapTest.testGeneralMapField":220,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":431,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":593,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":222,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":352,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":441,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":417,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":153,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":376,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":500,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":390,"com.google.gson.MixedStreamTest.testReadMixedStreamed":0,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":655,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":145,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":600,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":75,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":198,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":373,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":570,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":471,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":127,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":267,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":146,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":424,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":449,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":14,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":309,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":360,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":411,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":181,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":106,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":243,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":597,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":642,"com.google.gson.functional.ObjectTest.testNestedDeserialization":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":175,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":463,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":509,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":11,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":592,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":304,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":147,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":322,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":645,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":166,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":115,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":343,"com.google.gson.JavaSerializationTest.testListIsSerializable":129,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":286,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":295,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":200,"com.google.gson.functional.ObjectTest.testNullSerialization":249,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":346,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":614,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":277,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":375,"com.google.gson.functional.MapTest.testInterfaceTypeMap":276,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":519,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":622,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":443,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":104,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":349,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":96,"com.google.gson.MixedStreamTest.testReadClosed":117,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":400,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":554,"com.google.gson.MixedStreamTest.testWriteClosed":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":12,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":475,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":78,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":613,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":307,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":237,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":269,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":318,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":193,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":73,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":573,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":310,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":95,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":505,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":640,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":100,"com.google.gson.stream.JsonWriterTest.testNumbers":520,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":594,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":380,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":599,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":38,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":429,"com.google.gson.functional.CollectionTest.testQueueDeserialization":202,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":306,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":366,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":571,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":648,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":499,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":420,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":406,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":43,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":66,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":188,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":254,"com.google.gson.functional.MapTest.testRawMapSerialization":428,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":134,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":492,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":93,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":233,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":23,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":250,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":123,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":433,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":454,"com.google.gson.functional.PrimitiveTest.testByteSerialization":497,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":531,"com.google.gson.ObjectTypeAdapterTest.testSerialize":253,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":551,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":521,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":284,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":221,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":532,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":646,"com.google.gson.functional.MapTest.testMapWithQuotes":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":367,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":557,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":647,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":187,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":451,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":501,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":184,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":641,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":24,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":65,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":512,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":178,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":403,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":56,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":133,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":238,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":584,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":248,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":638,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":619,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":418,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":430,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":345,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":329,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":637,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":8,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":529,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":631,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":170,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":543,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":261,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":523,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":60,"com.google.gson.functional.ObjectTest.testNestedSerialization":234,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":338,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":379,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":452,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":650,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":398,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":154,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":279,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":292,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":119,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":370,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":203,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":231,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":589,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":317,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":16,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":210,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":15,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":61,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":72,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":524,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":487,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":437,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":110,"com.google.gson.functional.CollectionTest.testSetSerialization":320,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":290,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":458,"com.google.gson.functional.StringTest.testStringValueSerialization":488,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":218,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":83,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":190,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":350,"com.google.gson.MixedStreamTest.testWriteInvalidState":256,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":618,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":558,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":281,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":561,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":339,"com.google.gson.stream.JsonWriterTest.testBooleans":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":503,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":272,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":656,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":33,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":330,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":107,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":466,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":517,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":506,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":141,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":363,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":130,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":435},"transformations":[{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d11477-3f2e-11e6-85a9-4de90bf5b74b","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d1d7c8-3f2e-11e6-85a9-770c6f1af5f7","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == counter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"counter","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d1fed9-3f2e-11e6-85a9-dd2fad9185df","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d1feda-3f2e-11e6-85a9-bfda11c2b65e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"f3d3104b-3f2e-11e6-85a9-71b7493caac1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3375c-3f2e-11e6-85a9-030bdfc73fb2","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"f3d3375d-3f2e-11e6-85a9-15144af8844a","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[111,112],"tindex":"f3d35e6e-3f2e-11e6-85a9-57f86711c579","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d35e6f-3f2e-11e6-85a9-490cfa3c46e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d35e70-3f2e-11e6-85a9-0bd4ef626f1e","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d35e71-3f2e-11e6-85a9-89fffc2fad1b","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d38582-3f2e-11e6-85a9-db5644d0a2e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[113,114,115],"tindex":"f3d38583-3f2e-11e6-85a9-c987b7455708","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,8,132,14,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,24,25,165,166,26,167,168,27,28,29,30,31,169,170,32,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,75,76,77,188,189,190,191,192,193,194,195,196,197,82,198,199,200,201,202,203,204,205,206,207,208,209],"tindex":"f3d38584-3f2e-11e6-85a9-91b04d1c9835","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (subclass.isAssignableFrom(subclass)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3ac95-3f2e-11e6-85a9-1709dd357d33","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3d3a6-3f2e-11e6-85a9-416bccbd71f0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d3d3a7-3f2e-11e6-85a9-535fa96f5b8a","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3d3a8-3f2e-11e6-85a9-dffcf1998c18","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d3d3a9-3f2e-11e6-85a9-c7d26841d6c5","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:591","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d3faba-3f2e-11e6-85a9-099ff63cf6f0","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset != offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3fabb-3f2e-11e6-85a9-5f20e291164f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d3fabc-3f2e-11e6-85a9-b9eb37aed32a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d421cd-3f2e-11e6-85a9-3173663b7314","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d55a4e-3f2e-11e6-85a9-8f553182b79d","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[210,2,211,212,213,214,215,10,216,217,14,218,219,220,221,222,168,223,224,225,226,41,42,43,45,227,228,178,229,230,231,232,233,234,235,236,237,238,239,240,80,81,241,242,87,88,243,93],"tindex":"f3d5815f-3f2e-11e6-85a9-ad55ae3d6010","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d58160-3f2e-11e6-85a9-fb9b12bb58d6","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d5a871-3f2e-11e6-85a9-a1fad966c398","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"f3d5a872-3f2e-11e6-85a9-e366985b2698","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d5a873-3f2e-11e6-85a9-4da5188e8516","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d5cf84-3f2e-11e6-85a9-33979e037619","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (key instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d5cf85-3f2e-11e6-85a9-3f733d915b9c","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT != null) {\n                {\n                    if (typeOfT != typeOfT) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (typeOfT == typeOfT) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            } else {\n                                {\n                                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                                    return object;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeOfT","typeOfT":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"f3d5f696-3f2e-11e6-85a9-bbf63605f81b","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o.isJsonNull()) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[244,245,246,247,248,249,250],"tindex":"f3d5f697-3f2e-11e6-85a9-b5560f1d4fde","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[251,252,253,254,255,256,257,0,1,2,258,259,260,261,262,263,3,4,5,6,7,8,9,215,10,216,11,217,12,13,14,15,264,265,266,16,267,268,269,270,271,272,273,274,218,17,18,219,19,275,150,276,277,220,156,278,20,21,22,279,23,222,280,281,282,283,284,285,286,24,25,166,26,167,287,168,27,28,29,30,31,169,32,171,33,34,35,36,37,38,39,40,288,289,290,223,224,225,226,41,42,43,44,45,227,291,228,178,292,46,293,47,294,48,295,229,49,50,51,230,52,53,296,54,55,297,56,298,57,231,58,59,232,60,233,234,61,299,62,63,235,64,236,300,65,237,66,67,68,69,70,183,184,301,185,302,303,304,305,306,307,308,71,72,238,309,73,74,310,186,75,76,77,311,312,313,314,239,315,316,317,78,79,240,318,319,80,81,241,82,242,320,321,322,323,83,324,84,325,326,327,85,86,328,87,88,243,329,330,331,89,90,332,333,91,334,335,336,92,337,338,339,340,341,93,342,343,344,345,346,94,95,347,96,348,97,98,349,99,100,350,101,102,103,351,352,110,353,354],"tindex":"f3d61da8-3f2e-11e6-85a9-dfb44cb94b02","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d644b9-3f2e-11e6-85a9-2d0e3ba656b2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[355,48],"tindex":"f3d66bca-3f2e-11e6-85a9-31a7a519ecfa","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonArray) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl"},"failures":[356,2,357,358,359,360,361,362,363,364,365,6,7,366,14,367,368,369,41,42,43,45,234,77,240,80,242],"tindex":"f3d66bcb-3f2e-11e6-85a9-d171db76493d","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d66bcc-3f2e-11e6-85a9-a50ee117b28b","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d692dd-3f2e-11e6-85a9-d1d9a8069012","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if ((h == h) || (peekStack == h)) {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"h","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"h","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[251,252,2,370,371,372,373,6,7,374,375,376,377,378,379,380,381,382,366,383,384,385,386,211,113,212,387,388,114,389,390,112,391,115,392,393,394,395,213,396,397,215,217,398,14,399,400,401,402,403,404,405,406,407,408,409,410,411,267,412,413,414,415,416,417,268,418,419,420,269,421,422,270,271,272,273,274,218,423,219,424,425,275,426,427,368,276,277,220,428,278,21,279,429,430,431,432,433,434,435,436,437,221,222,281,438,439,440,441,442,443,282,444,445,287,33,34,35,36,38,446,288,447,289,290,448,449,450,451,224,41,452,453,42,43,454,45,455,456,457,291,228,458,459,460,229,49,230,296,297,298,231,461,462,232,233,234,463,299,235,236,300,237,70,183,464,184,301,185,465,466,467,468,469,470,471,472,302,303,304,305,473,308,238,309,310,239,240,318,80,188,474,193,475,241,197,242,320,321,323,324,325,326,327,328,88,243,329,331,476,477,332,333,334,478,335,336,337,338,339,340,479,480,481,482,483,484,485,486,487,488,341,93,342,343,344,345,346,347,348,204,205,206,207,349,209,489,100,350,101,102,103,351,490,352,353,354],"tindex":"f3d7cb5e-3f2e-11e6-85a9-13b6489e2f32","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d7f26f-3f2e-11e6-85a9-1561b8f4b1ae","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[251,252,253,254,255,256,257,0,1,2,258,3,4,5,6,7,8,9,215,10,216,11,217,12,13,14,15,264,265,266,16,267,268,269,274,218,17,18,219,19,275,150,276,277,220,156,278,20,21,22,279,23,222,280,281,282,283,284,285,286,24,25,166,26,167,287,168,27,28,29,30,31,169,32,171,33,34,35,36,37,38,39,40,288,289,290,223,224,225,226,41,42,43,44,45,227,291,228,178,292,46,293,47,294,48,295,229,49,50,51,230,52,53,296,54,55,297,56,298,57,231,58,59,232,60,233,234,61,299,62,63,235,64,236,300,65,237,66,67,68,69,70,183,184,301,185,302,303,304,305,306,307,308,71,72,238,309,73,74,310,186,75,76,77,311,312,313,314,239,315,316,317,78,79,240,318,319,80,81,241,82,242,320,321,323,83,84,325,326,327,85,86,328,87,88,243,329,330,331,89,90,332,333,91,334,335,336,92,337,338,339,340,343,349,99,100,350,101,102,103,351,352,110,353,354],"tindex":"f3d81980-3f2e-11e6-85a9-a1c74df6ad6f","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[251,252,253,254,255,2,258,6,7,8,215,10,216,217,14,267,268,269,270,271,272,273,274,218,219,275,276,277,220,278,21,279,222,282,283,284,285,286,24,166,26,167,287,168,28,29,30,169,171,33,34,35,36,38,288,289,290,223,224,225,226,41,42,43,45,227,291,228,178,292,229,49,230,296,297,298,231,232,233,234,299,235,236,300,237,70,183,184,301,185,302,303,304,305,306,307,308,238,309,310,186,76,77,311,312,313,314,239,315,316,317,240,318,319,80,81,241,242,320,321,323,325,326,327,328,87,88,243,329,331,332,333,334,335,336,337,338,339,340,341,93,342,344,345,346,347,348,349,100,350,101,102,103,104,491,492,493,494,495,351,352,353,354],"tindex":"f3d81981-3f2e-11e6-85a9-6357dedad2ff","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != null) && (((value == value) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value instanceof java.lang.reflect.TypeVariable) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d84092-3f2e-11e6-85a9-8dc97b96f5f5","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (key instanceof com.google.gson.JsonPrimitive) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d84093-3f2e-11e6-85a9-dd52237ed23c","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d867a4-3f2e-11e6-85a9-6bd29ca81567","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d867a5-3f2e-11e6-85a9-0d16b574f763","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d867a6-3f2e-11e6-85a9-9307d820f039","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d88eb7-3f2e-11e6-85a9-f7a57eee970c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d88eb8-3f2e-11e6-85a9-a3726302502c","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d88eb9-3f2e-11e6-85a9-250278296f27","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d8b5ca-3f2e-11e6-85a9-97bf4c5e44f0","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[111,210,251,252,2,496,357,358,370,258,371,372,373,6,7,8,374,375,376,377,378,379,380,381,382,366,383,384,385,386,211,113,212,387,388,114,389,390,112,391,497,115,392,498,393,394,395,213,396,397,214,215,499,216,217,398,14,399,500,400,501,401,367,133,502,402,503,266,403,404,405,406,407,408,409,410,411,267,504,412,413,414,505,506,415,416,417,268,418,419,420,269,421,245,422,270,271,272,273,274,218,423,219,424,507,508,425,140,142,275,426,427,148,151,368,276,153,277,220,154,428,156,157,159,162,278,21,279,429,430,431,432,433,434,435,436,437,163,221,222,281,438,439,440,441,442,443,282,444,445,24,165,166,26,167,287,168,28,29,30,169,33,34,35,36,38,446,172,288,447,289,290,448,449,450,369,451,175,224,41,452,453,42,43,454,45,455,456,457,291,228,458,459,460,178,292,229,49,230,296,297,298,231,461,462,232,233,234,463,299,235,236,300,237,70,183,464,184,301,185,465,466,467,468,469,470,471,472,302,303,304,305,473,308,238,309,310,186,76,77,314,239,315,240,318,80,188,81,474,192,193,475,194,241,197,242,198,320,200,201,321,323,324,325,326,327,328,87,509,88,243,329,331,476,477,332,333,334,478,335,250,336,337,338,339,340,479,480,481,482,483,484,485,486,487,488,341,93,342,343,344,345,346,347,348,204,205,206,207,349,209,510,489,100,350,101,102,103,104,351,490,352,353,354],"tindex":"f3d8b5cb-3f2e-11e6-85a9-7d22924a3611","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Class<?>) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[511],"tindex":"f3d8dcdc-3f2e-11e6-85a9-f39e1f2ce3c0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d9a02d-3f2e-11e6-85a9-8d982df97cb4","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT != null) {\n                {\n                    if (typeOfT != typeOfT) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (typeOfT == typeOfT) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            } else {\n                                {\n                                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                                    return object;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d9c73e-3f2e-11e6-85a9-9ff3fc65b462","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d9c73f-3f2e-11e6-85a9-17d11e5c4fe3","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3d9c740-3f2e-11e6-85a9-f77a6c1ed505","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d9c741-3f2e-11e6-85a9-9b34cdaf4a99","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3d9ee52-3f2e-11e6-85a9-a32c2d2b8478","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3da1563-3f2e-11e6-85a9-99911f5778a6","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT != null) {\n                {\n                    if (typeOfT != typeOfT) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (typeOfT == typeOfT) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            } else {\n                                {\n                                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                                    return object;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3da3c74-3f2e-11e6-85a9-d573c5641d4d","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (subclass.isAssignableFrom(subclass)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[512,513,514,515],"tindex":"f3da3c75-3f2e-11e6-85a9-d3b889a56e9a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == (-2)) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3da3c76-3f2e-11e6-85a9-6125ed8fa56e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dad8b7-3f2e-11e6-85a9-fd4d50c05407","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dad8b8-3f2e-11e6-85a9-2b48856b566f","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"f3daffc9-3f2e-11e6-85a9-118f94b08db2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3daffca-3f2e-11e6-85a9-4190ede8680b","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3daffcb-3f2e-11e6-85a9-c350dd459328","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3daffcc-3f2e-11e6-85a9-51dd0adf96b6","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3db26dd-3f2e-11e6-85a9-b556095f0451","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[210,253,254,255,118,2,516,517,518,519,520,372,521,522,7,8,374,379,384,386,211,113,212,387,388,114,389,390,112,391,497,115,392,498,393,395,213,396,397,214,215,216,217,14,501,367,503,267,269,270,271,272,273,274,218,219,507,425,148,220,428,162,430,435,163,221,222,439,24,165,166,26,167,287,168,28,29,30,169,171,447,289,290,450,369,451,224,41,42,43,45,227,456,457,291,228,458,459,460,178,292,229,230,298,231,232,233,234,235,236,237,70,183,464,184,301,185,304,305,308,238,309,310,186,76,77,239,240,80,81,474,193,241,242,320,200,321,323,325,327,328,87,88,243,93,346,348,523,104,491,492,524,493,494,525],"tindex":"f3db9c0e-3f2e-11e6-85a9-950d75a93bda","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dbc31f-3f2e-11e6-85a9-fd3f66ea0d16","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dc3850-3f2e-11e6-85a9-791bf8c6d518","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dc3851-3f2e-11e6-85a9-e3e67045ef0a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dc3852-3f2e-11e6-85a9-f11f959f5dc4","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dc8673-3f2e-11e6-85a9-e3c4db61344a","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT != null) {\n                {\n                    if (typeOfT != typeOfT) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            if (typeOfT == typeOfT) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonIOException();\n                            } else {\n                                {\n                                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                                    return object;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dcd494-3f2e-11e6-85a9-d9ecdd1bb3a7","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dd22b5-3f2e-11e6-85a9-5b99ac299e51","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dde606-3f2e-11e6-85a9-8f94c37a751a","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3de0d17-3f2e-11e6-85a9-651c93e5460f","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Class<?>) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3de0d18-3f2e-11e6-85a9-83870656e18f","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array instanceof java.lang.String) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[116,111,210,251,252,253,526,254,527,255,256,118,119,257,0,1,2,496,357,358,528,529,530,123,124,531,370,532,258,371,372,373,127,128,129,533,534,535,130,3,4,5,131,6,7,8,536,537,538,374,539,375,540,541,542,543,544,376,545,546,377,547,548,549,550,551,552,553,378,379,554,555,556,557,558,380,559,381,382,560,561,366,562,563,383,564,384,385,565,566,386,211,567,568,569,113,570,571,572,573,574,575,576,577,212,578,387,579,388,114,580,581,389,582,132,390,583,112,584,9,585,391,497,115,392,498,393,394,586,587,588,395,589,213,590,591,592,396,397,593,214,594,595,215,499,10,216,596,11,217,12,13,398,14,597,399,500,400,15,264,598,401,599,133,502,402,265,600,601,266,602,403,404,405,406,407,16,408,603,409,410,604,411,605,267,504,412,413,414,134,606,505,607,415,608,416,417,609,268,418,419,420,610,269,611,612,421,422,613,270,271,272,273,274,218,423,17,18,219,19,614,424,135,507,615,136,137,508,425,138,139,140,141,142,143,275,144,145,146,147,426,427,148,149,150,151,368,152,276,153,277,220,154,428,155,156,157,158,159,160,161,162,278,616,20,21,22,279,617,23,429,430,618,431,432,433,434,435,619,620,436,437,163,621,164,622,221,623,222,280,281,624,438,625,439,626,440,441,442,443,282,444,445,283,284,246,285,286,24,25,165,166,26,167,287,168,27,28,29,30,31,169,170,32,171,33,34,35,36,37,38,446,39,172,627,173,40,288,447,289,628,290,448,449,174,450,629,369,451,175,223,224,225,226,41,452,453,42,43,176,454,44,45,630,631,177,227,632,633,455,634,456,457,291,228,458,459,460,178,292,46,293,47,294,48,295,180,181,635,229,49,50,51,230,52,53,296,54,55,297,56,182,298,57,231,58,461,59,462,232,60,233,234,463,61,299,62,63,636,235,64,236,300,65,237,66,67,68,69,70,183,464,184,301,185,465,466,467,468,469,470,471,472,302,303,304,305,306,307,473,308,71,72,238,309,73,74,310,637,186,187,75,76,77,311,312,313,314,239,315,316,317,78,79,240,318,319,80,188,81,474,189,190,191,192,193,475,194,241,195,196,197,638,82,242,198,199,320,200,639,201,202,321,322,323,83,324,84,325,326,327,85,86,328,87,509,203,88,243,640,329,330,331,89,90,476,641,477,332,333,91,334,478,335,250,642,336,92,337,338,339,340,479,643,480,481,482,483,484,644,645,485,646,486,647,648,649,487,650,651,488,341,93,342,343,344,345,346,94,95,347,96,348,97,98,204,205,206,207,208,652,349,99,209,510,489,100,350,101,102,103,351,490,352,110,353,354],"tindex":"f3de3429-3f2e-11e6-85a9-21199334d474","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3de5b3a-3f2e-11e6-85a9-b770133cd0c8","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[653,654],"tindex":"f3de5b3b-3f2e-11e6-85a9-6feae3ef96df","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (!(obj instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3de5b3c-3f2e-11e6-85a9-bb7300b6133b","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[526,531,425,426,427,368,428,448,457],"tindex":"f3de824d-3f2e-11e6-85a9-55a2d7143935","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3de824e-3f2e-11e6-85a9-2b4d1e602d96","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3de824f-3f2e-11e6-85a9-c1dc76726d34","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src instanceof java.lang.Class<?>) {\n                        {\n                            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                            toJson(src, typeOfSrc, writer);\n                            return writer.toString();\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[211],"tindex":"f3dea960-3f2e-11e6-85a9-ff993746deec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dea961-3f2e-11e6-85a9-67cfd2b48902","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[655,656],"tindex":"f3dea962-3f2e-11e6-85a9-4525b08cf11c","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3dea963-3f2e-11e6-85a9-edc35cd52158","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3dea964-3f2e-11e6-85a9-0d9ae9afb442","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3ded075-3f2e-11e6-85a9-9582c0b6567d","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3ded076-3f2e-11e6-85a9-1f37681d4c91","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((a instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"f3def787-3f2e-11e6-85a9-93b7864c4b27","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[266,151,154,24,167,29,30,321,325],"tindex":"f3def788-3f2e-11e6-85a9-29e7223e9950","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3def789-3f2e-11e6-85a9-25b499276b61","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != null) && (((value == value) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (value instanceof java.lang.reflect.TypeVariable) {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.IllegalAccessException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value","value":"value","java.lang.Object.class":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f3def78a-3f2e-11e6-85a9-1bb2e2c84c7b","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336247535/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
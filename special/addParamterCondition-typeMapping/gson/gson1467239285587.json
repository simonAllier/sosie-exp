{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":448,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":581,"com.google.gson.functional.StringTest.testStringValueDeserialization":579,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":658,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":31,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":311,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":272,"com.google.gson.stream.JsonWriterTest.testRepeatedName":650,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":98,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":391,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":170,"com.google.gson.MixedStreamTest.testWriteLenient":602,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":54,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":610,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":14,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":136,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":153,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":355,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":320,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":97,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":495,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":410,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":113,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":230,"com.google.gson.functional.ObjectTest.testSingletonLists":353,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":541,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":265,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":582,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":71,"com.google.gson.stream.JsonWriterTest.testStrings":671,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":167,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":83,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":556,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":370,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":78,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":323,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":561,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":684,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":595,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":35,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":312,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":427,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":663,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":199,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":63,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":41,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":198,"com.google.gson.functional.EnumTest.testEnumCaseMapping":96,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":580,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":607,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":256,"com.google.gson.functional.JsonTreeTest.testToJsonTree":508,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":616,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":254,"com.google.gson.stream.JsonWriterTest.testNulls":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":121,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":681,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":477,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":534,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":32,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":146,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":397,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":592,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":366,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":333,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":273,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":371,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":40,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":222,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":379,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":9,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":614,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":226,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":338,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":337,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":659,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":555,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":317,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":682,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":296,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":615,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":382,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":473,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":540,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":171,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":191,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":309,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":531,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":44,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":1,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":161,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":213,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":177,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":318,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":310,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":378,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":467,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":72,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":361,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":572,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":632,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":666,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":105,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":209,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":277,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":499,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":245,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":111,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":162,"com.google.gson.stream.JsonWriterTest.testEmptyArray":640,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":80,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":215,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":546,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":533,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":400,"com.google.gson.functional.CollectionTest.testSetDeserialization":152,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":411,"com.google.gson.functional.EnumTest.testEnumSet":88,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":365,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":501,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":301,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":112,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":19,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":521,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":372,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":62,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":425,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":325,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":662,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":38,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":87,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":326,"com.google.gson.functional.MapTest.testHashMapDeserialization":180,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":270,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":545,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":450,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":573,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":42,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":86,"com.google.gson.functional.MapTest.testSortedMap":202,"com.google.gson.functional.MapTest.testMapSerialization":197,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":449,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":307,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":436,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":631,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":622,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":480,"com.google.gson.functional.MapTest.testSerializeMaps":183,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":577,"com.google.gson.functional.MapTest.testComplexKeysSerialization":210,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":0,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":214,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":624,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":487,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":399,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":240,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":638,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":134,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":673,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":430,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":613,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":100,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":381,"com.google.gson.functional.MapTest.testStringKeyDeserialization":212,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":484,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":21,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":340,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":216,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":276,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":414,"com.google.gson.functional.PrettyPrintingTest.testMap":428,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":139,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":84,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":516,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":77,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":486,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":683,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":585,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":589,"com.google.gson.functional.CollectionTest.testQueueSerialization":143,"com.google.gson.functional.MapTest.testMapSerializationEmpty":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":528,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":302,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":667,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":669,"com.google.gson.functional.MapTest.testMapOfMapSerialization":196,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":293,"com.google.gson.JavaSerializationTest.testMapIsSerializable":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":536,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":149,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":642,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":304,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":406,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":27,"com.google.gson.functional.FieldNamingTest.testIdentity":578,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":163,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":456,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":653,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":383,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":104,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":160,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":352,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":507,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":645,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":259,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":218,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":584,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":299,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":549,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":523,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":685,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":178,"com.google.gson.functional.MapTest.testMapSubclassSerialization":182,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":336,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":120,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":443,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":503,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":415,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":559,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":600,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":515,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":82,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":109,"com.google.gson.functional.EnumTest.testEnumSubclass":90,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":313,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":79,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":368,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":258,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":217,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":20,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":628,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":129,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":261,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":395,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":635,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":654,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":297,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":619,"com.google.gson.stream.JsonWriterTest.testTwoNames":641,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":394,"com.google.gson.stream.JsonWriterTest.testNullName":648,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":243,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":68,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":476,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":303,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":364,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":103,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":295,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":656,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":551,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":354,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":179,"com.google.gson.MixedStreamTest.testWriteNulls":686,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":475,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":651,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":175,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":469,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":107,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":398,"com.google.gson.CommentsTest.testParseComments":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":235,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":316,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":482,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":492,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":435,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":201,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":587,"com.google.gson.MixedStreamTest.testReadInvalidState":599,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":407,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":553,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":437,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":639,"com.google.gson.JsonParserTest.testParseMixedArray":8,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":269,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":488,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":620,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":489,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":286,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":404,"com.google.gson.JsonArrayTest.testRemove":633,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":538,"com.google.gson.functional.MapTest.testMapDeserialization":189,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":532,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":433,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":30,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":60,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":229,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":188,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":252,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":135,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":45,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":514,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":369,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":384,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":518,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":133,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":392,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":200,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":429,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":166,"com.google.gson.functional.PrimitiveTest.testShortSerialization":334,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":322,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":292,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":321,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":522,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":574,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":11,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":138,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":442,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":184,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":285,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":342,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":173,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":5,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":547,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":3,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":606,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":349,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":343,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":678,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":164,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":251,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":385,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":511,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":328,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":509,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":298,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":389,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":360,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":95,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":126,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":502,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":519,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":412,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":634,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":165,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":228,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":539,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":637,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":275,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":525,"com.google.gson.stream.JsonWriterTest.testNullStringValue":644,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":543,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":140,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":329,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":300,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":346,"com.google.gson.stream.JsonWriterTest.testEmptyObject":661,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":168,"com.google.gson.JsonPrimitiveTest.testEquals":630,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":89,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":233,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":454,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":438,"com.google.gson.functional.MapTest.testGeneralMapField":206,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":358,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":466,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":348,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":219,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":413,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":548,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":47,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":225,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":266,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":324,"com.google.gson.MixedStreamTest.testReadMixedStreamed":605,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":611,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":192,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":520,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":64,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":154,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":505,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":664,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":305,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":420,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":537,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":193,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":570,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":347,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":462,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":564,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":649,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":288,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":535,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":176,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":629,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":457,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":510,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":239,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":29,"com.google.gson.functional.ObjectTest.testNestedDeserialization":390,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":36,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":376,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":451,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":242,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":419,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":345,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":491,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":99,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":194,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":586,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":108,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":125,"com.google.gson.JavaSerializationTest.testListIsSerializable":76,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":17,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":174,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":157,"com.google.gson.functional.ObjectTest.testNullSerialization":675,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":128,"com.google.gson.stream.JsonWriterTest.testDoubles":668,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":569,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":185,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":205,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":260,"com.google.gson.functional.MapTest.testInterfaceTypeMap":203,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":478,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":665,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":37,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":263,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":677,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":512,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":279,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":626,"com.google.gson.MixedStreamTest.testWriteClosed":604,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":145,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":453,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":250,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":558,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":114,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":246,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":494,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":387,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":490,"com.google.gson.stream.JsonWriterTest.testLongs":646,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":554,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":253,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":362,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":144,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":565,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":618,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":308,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":567,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":130,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":544,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":458,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":350,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":402,"com.google.gson.stream.JsonWriterTest.testNumbers":670,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":284,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":517,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":401,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":463,"com.google.gson.functional.CollectionTest.testQueueDeserialization":159,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":290,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":306,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":591,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":552,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":566,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":190,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":380,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":660,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":527,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":227,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":388,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":137,"com.google.gson.functional.MapTest.testRawMapSerialization":208,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":598,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":679,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":123,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":374,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":441,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":238,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":65,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":67,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":81,"com.google.gson.functional.PrimitiveTest.testByteSerialization":331,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":468,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":57,"com.google.gson.ObjectTypeAdapterTest.testSerialize":70,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":223,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":274,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":59,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":15,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":617,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":479,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":625,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":575,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":115,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":588,"com.google.gson.functional.MapTest.testMapWithQuotes":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":49,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":282,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":18,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":504,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":28,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":445,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":48,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":409,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":655,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":232,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":106,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":386,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":434,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":524,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":363,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":50,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":526,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":563,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":327,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":674,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":151,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":471,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":55,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":464,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":127,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":459,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":627,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":568,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":444,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":119,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":26,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":676,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":373,"com.google.gson.functional.ObjectTest.testNestedSerialization":375,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":169,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":278,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":594,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":461,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":207,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":439,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":46,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":73,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":603,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":672,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":367,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":455,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":249,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":280,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":608,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":513,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":562,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":680,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":593,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":474,"com.google.gson.functional.CollectionTest.testSetSerialization":156,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":220,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":23,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":431,"com.google.gson.functional.StringTest.testStringValueSerialization":596,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":597,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":101,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":141,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":403,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":465,"com.google.gson.MixedStreamTest.testWriteInvalidState":601,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":34,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":283,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":289,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":483,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":571,"com.google.gson.stream.JsonWriterTest.testBooleans":643,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":52,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":576,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":612,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":396,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":460,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":53,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":58,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":187,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":657,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":422,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":470},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"bfb16497-3e48-11e6-a695-fd34f49a719f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"bfb1b2b8-3e48-11e6-a695-15307575d2ce","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"tindex":"bfb1d9c9-3e48-11e6-a695-dffef3f80e0c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"bfb1d9ca-3e48-11e6-a695-ad9dba842da9","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target != target) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target == null) {\n                {\n                    if (target instanceof java.lang.reflect.ParameterizedType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (target instanceof java.lang.String) {\n                                return true;\n                            } \n                            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                                    return true;\n                                } \n                            }\n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb1d9cb-3e48-11e6-a695-b9011801e117","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[61,62,63,7,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,11,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,12,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,13,159,14,15,160,16,17,18,161,19,162,163,164,20,21,22,165,23,24,25,166,26,167,27,28,29,168,169,170,171,172,173,174,175,176,177,178,30,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,31,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,32,233,234,235,236,33,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,35,36,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,37,415,416,417,38,418,39,40,419,41,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,42,504,505,43,44,506,45,507,508,46,509,510,511,47,512,513,514,515,516,517,50,51,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,54,548,549,550,55,551,552,553,554,555,556,56,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610],"tindex":"bfb200dc-3e48-11e6-a695-63a30aecc560","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"bfb227ed-3e48-11e6-a695-032dc39ee096","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[611,612],"tindex":"bfb24efe-3e48-11e6-a695-79786444d4e5","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"bfb24eff-3e48-11e6-a695-cbedb159b275","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb24f00-3e48-11e6-a695-959242c494b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:364","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_ARRAY)"},"failures":[122,127,129,135,574,577],"tindex":"bfb24f01-3e48-11e6-a695-738b36fab056","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"bfb27612-3e48-11e6-a695-95f7bce40b88","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:346","type":"CtBinaryOperatorImpl","sourcecode":"context == nonempty"},"failures":[],"tindex":"bfb27613-3e48-11e6-a695-f1b8c1ad3f8d","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"index","nonempty":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1070","type":"CtBinaryOperatorImpl","sourcecode":"i < (buffer.length)"},"failures":[],"tindex":"bfb27614-3e48-11e6-a695-cba0a4a4db76","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length < length) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"length":"length","i":"length","buffer":"chars"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"bfb29d25-3e48-11e6-a695-9f9a07228991","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"bfb29d26-3e48-11e6-a695-eb92666cafcc","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb29d27-3e48-11e6-a695-0dd7536c407a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[65,66,74,75,76,80,86,89,11,90,91,95,101,105,106,108,109,110,114,115,116,136,137,140,141,143,144,146,148,149,150,151,152,155,157,158,13,159,19,163,166,29,168,175,176,178,30,181,184,185,186,187,189,190,192,193,194,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,216,31,217,220,222,228,233,234,240,243,246,250,266,323,353,364,378,385,388,402,403,404,405,406,422,426,429,434,443,444,455,462,475,477,489,492,493,494,42,504,505,43,44,46,509,50,548,602,603,609],"tindex":"bfb29d28-3e48-11e6-a695-19e82e498658","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[613,506,508,614,615,616,617,618,619,59,620,621,622,623,624,625,626,627,628,629,630,631,632,633],"tindex":"bfb2c439-3e48-11e6-a695-0df113678f1a","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"bfb2c43a-3e48-11e6-a695-ff7e00bd7b31","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((o instanceof java.lang.Number) && ((o.java.lang.Object) instanceof java.lang.Number)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"o","value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"bfb2c43b-3e48-11e6-a695-7db10de790c6","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"bfb2c43c-3e48-11e6-a695-fb5a3207a71d","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if ((primitive != null) && ((primitive.peek()) != primitive)) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"primitive","obj":"primitive","reader":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"bfb2eb4d-3e48-11e6-a695-8dd25e77a65c","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[98,104,106,110,115,116,200,207,236,522],"tindex":"bfb2eb4e-3e48-11e6-a695-2b22d6ff7f1f","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[634,635,636,637,573],"tindex":"bfb2eb4f-3e48-11e6-a695-99f77081919e","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"bfb2eb50-3e48-11e6-a695-e1098b3a0ab5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"bfb31261-3e48-11e6-a695-5fa8b4442452","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n    if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n    } \n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n    } \n    return com.google.gson.GsonBuilder.this;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME)"},"failures":[],"tindex":"bfb31262-3e48-11e6-a695-d563b5602eca","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[638],"tindex":"bfb33973-3e48-11e6-a695-25fd057a7aca","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb33974-3e48-11e6-a695-6d4840f41b0a","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"bfb36085-3e48-11e6-a695-e3b92514d1d5","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[0,1,2,3,4,5,6,62,7,64,68,69,639,70,71,72,8,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,9,10,73,77,78,79,81,83,673,674,87,88,89,11,90,93,95,96,97,98,100,102,104,105,106,12,108,109,110,111,112,114,115,116,118,121,122,123,124,126,127,128,131,133,136,137,138,139,143,144,145,146,147,150,153,154,156,157,13,18,19,20,21,22,23,24,25,26,27,28,29,168,169,30,182,183,186,188,190,195,196,197,200,201,203,204,205,206,207,208,210,211,213,216,31,217,219,221,222,223,224,225,226,227,228,231,32,233,234,236,33,237,238,240,245,246,247,252,253,258,266,269,278,284,287,290,295,299,300,304,313,315,317,318,321,324,326,330,331,332,333,334,335,340,342,346,347,349,352,353,356,359,362,34,365,675,367,369,371,372,374,375,376,378,382,384,385,387,392,395,35,36,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,413,414,37,415,416,38,418,39,40,419,41,420,421,676,677,678,679,680,681,682,683,684,427,428,429,430,431,432,433,434,437,439,442,443,444,445,446,447,449,452,456,457,459,461,462,463,464,466,467,468,469,470,473,474,475,479,481,483,485,487,489,490,491,492,495,498,502,42,43,44,45,46,511,47,512,48,516,49,50,51,518,52,522,524,525,526,527,528,530,532,533,535,537,538,539,540,541,544,53,546,54,548,550,55,551,552,553,554,56,685,557,559,560,563,564,567,570,571,572,573,574,575,576,577,578,580,581,582,583,584,587,589,593,596,597,57,58,598,600,686,601,602,603,604,59,60,607,608],"tindex":"bfb36086-3e48-11e6-a695-c5c86e96cc59","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == 1) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"bfb36087-3e48-11e6-a695-7b49f4432e53","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[0,62,63,7,64,65,66,67,68,69,72,9,10,73,77,78,79,81,83,673,87,88,89,11,90,93,95,96,97,98,100,102,104,105,106,12,108,109,110,111,112,114,115,116,118,121,122,123,124,125,126,127,128,131,133,136,137,138,139,143,144,145,146,147,150,153,154,156,157,13,14,15,160,16,17,18,19,20,21,22,23,24,25,26,27,28,29,168,169,30,182,183,186,188,195,196,197,200,201,203,204,205,206,208,210,211,213,216,31,217,218,219,221,222,223,224,225,226,227,231,32,240,242,243,244,245,246,247,248,249,252,253,254,258,260,266,269,277,278,284,286,287,290,293,295,296,299,300,304,313,315,317,318,321,324,326,330,331,332,333,334,335,336,340,342,346,347,349,352,353,356,359,362,365,675,367,369,371,372,374,375,376,378,382,384,385,387,392,395,35,36,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,413,414,37,415,416,417,38,418,39,40,419,41,420,421,677,427,428,429,430,431,432,433,434,437,439,442,443,444,445,447,449,456,457,459,461,462,463,464,466,467,468,469,470,473,475,479,481,483,485,487,489,490,491,492,493,494,495,498,502,42,43,44,506,45,507,508,46,511,47,512,48,516,49,50,51,518,52,522,524,525,526,527,528,530,532,533,535,537,538,539,540,541,544,53,546,54,548,550,55,551,552,553,554,56,685,557,559,560,563,564,567,570,571,572,573,574,575,576,577,578,580,581,582,583,584,587,589,593,596,597,58,598,600,686,601,602,603,604,607,608],"tindex":"bfb38798-3e48-11e6-a695-cde59684dba6","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"bfb38799-3e48-11e6-a695-9d1f4d7d598f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"bfb3879a-3e48-11e6-a695-5dc0758b278d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"bfb3aeab-3e48-11e6-a695-4556d0258c83","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb3aeac-3e48-11e6-a695-137717a054f8","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"bfb3aead-3e48-11e6-a695-d3370fc049af","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"bfb3d5be-3e48-11e6-a695-1586a43eeb0c","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[326,607],"tindex":"bfb3d5bf-3e48-11e6-a695-21b6c0f57889","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb3d5c0-3e48-11e6-a695-8f4cd2998287","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"bfb3d5c1-3e48-11e6-a695-df530bb210bf","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"bfb3d5c2-3e48-11e6-a695-f98495670887","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[98,100,104,112,246,315,347,676,677,678,679,680,681,682,683,479,45],"tindex":"bfb3fcd3-3e48-11e6-a695-87486f2a51e7","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"bfb3fcd4-3e48-11e6-a695-b9ad7b7c734b","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bfb3fcd5-3e48-11e6-a695-95401e1aa964","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"bfb3fcd6-3e48-11e6-a695-b74d702aec3a","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"bfb3fcd7-3e48-11e6-a695-7ba2417b2955","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isNumber()) {\n        {\n            if (jsonElement.isString()) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"bfb3fcd8-3e48-11e6-a695-69be59982785","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"bfb423e9-3e48-11e6-a695-c3c2be0ec447","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator != null) {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"bfb423ea-3e48-11e6-a695-cb7c742a77a9","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeOfT","typeOfT":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"bfb423eb-3e48-11e6-a695-4577ace85a08","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    if (property == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"bfb423ec-3e48-11e6-a695-a30da688185c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"bfb44afd-3e48-11e6-a695-491ea5390337","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"bfb44afe-3e48-11e6-a695-ad62e45d660e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"bfb44aff-3e48-11e6-a695-179a5158d9e2","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator != null) {\n        {\n            if (separator != null) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    for (int int = 0 ; i < (name.length()) ; i++) {\n                        char char = name.charAt(i);\n                        if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                            translation.append(separator);\n                        } \n                        translation.append(character);\n                    }\n                    return translation.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb44b00-3e48-11e6-a695-19e5b4fa5f69","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"bfb44b01-3e48-11e6-a695-615334e0ea3f","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"bfb47212-3e48-11e6-a695-4b7e39207f68","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb47213-3e48-11e6-a695-e5accaf38e42","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bfb47214-3e48-11e6-a695-adcd924528d7","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target != target) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target == null) {\n                {\n                    if (target instanceof java.lang.reflect.ParameterizedType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (target instanceof java.lang.String) {\n                                return true;\n                            } \n                            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                                    return true;\n                                } \n                            }\n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"bfb47215-3e48-11e6-a695-530e06e3dd32","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"bfb47216-3e48-11e6-a695-4733d88cf732","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"bfb49927-3e48-11e6-a695-3b1f4ae7512d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb49928-3e48-11e6-a695-a536a96083f2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb49929-3e48-11e6-a695-81aa208de5ea","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"bfb4992a-3e48-11e6-a695-e9775704d320","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target != target) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target == null) {\n                {\n                    if (target instanceof java.lang.reflect.ParameterizedType) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (target instanceof java.lang.String) {\n                                return true;\n                            } \n                            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                                    return true;\n                                } \n                            }\n                            return false;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"target","type":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb4c03b-3e48-11e6-a695-5f0e6594ba2c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:175","type":"CtInvocationImpl","sourcecode":"java.util.SortedMap.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"bfb4c03c-3e48-11e6-a695-4bd1837344c0","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.SortedMap.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bfb4e74d-3e48-11e6-a695-0f02b176f8a9","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"bfb4e74e-3e48-11e6-a695-b5bcb20ddb3a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[126,130,575],"tindex":"bfb4e74f-3e48-11e6-a695-6d968effd23c","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"bfb4e750-3e48-11e6-a695-3fb7bace21e1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"bfb4e751-3e48-11e6-a695-1399f317aa2c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[648],"tindex":"bfb4e752-3e48-11e6-a695-d71a35723554","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"bfb50e63-3e48-11e6-a695-b325f3c66723","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"bfb50e64-3e48-11e6-a695-8d0295d304c6","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (!(typeOfSrc instanceof java.lang.reflect.TypeVariable)) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"bfb50e65-3e48-11e6-a695-41eda1ed2f0f","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[633],"tindex":"bfb50e66-3e48-11e6-a695-27251a0f50b2","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"bfb50e67-3e48-11e6-a695-7f439a5ae0ae","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"bfb50e68-3e48-11e6-a695-9f7cde349ccd","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isNumber()) {\n        {\n            if (jsonElement.isString()) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"bfb53579-3e48-11e6-a695-1b26e321d864","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"bfb5357a-3e48-11e6-a695-e73da93a96a2","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((o instanceof java.lang.Number) && ((o.java.lang.Object) instanceof java.lang.Number)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"bfb5357b-3e48-11e6-a695-a1a7c642aaba","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467237981014/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":85,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":258,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":352,"com.google.gson.functional.StringTest.testStringValueDeserialization":538,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":632,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":120,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":523,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":591,"com.google.gson.stream.JsonWriterTest.testRepeatedName":640,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":40,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":472,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":0,"com.google.gson.MixedStreamTest.testWriteLenient":367,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":402,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":326,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":80,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":65,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":75,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":451,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":440,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":39,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":287,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":224,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":425,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":411,"com.google.gson.functional.ObjectTest.testSingletonLists":188,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":322,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":353,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":421,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":634,"com.google.gson.stream.JsonWriterTest.testStrings":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":401,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":28,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":529,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":460,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":25,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":607,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":532,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":655,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":546,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":627,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":209,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":438,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":408,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":10,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":418,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":238,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":578,"com.google.gson.functional.EnumTest.testEnumCaseMapping":38,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":351,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":372,"com.google.gson.functional.JsonTreeTest.testToJsonTree":296,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":585,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":530,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":151,"com.google.gson.stream.JsonWriterTest.testNulls":638,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":305,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":652,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":619,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":521,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":133,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":72,"com.google.gson.functional.ObjectTest.testNullDeserialization":466,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":212,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":544,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":457,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":178,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":592,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":197,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":236,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":125,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":463,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":21,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":509,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":446,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":445,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":528,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":170,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":653,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":164,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":514,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":203,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":273,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":321,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":431,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":403,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":435,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":574,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":520,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":292,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":2,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":397,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":118,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":171,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":566,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":436,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":202,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":269,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":18,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":344,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":455,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":44,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":156,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":580,"com.google.gson.metrics.PerformanceTest.testDummy":551,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":502,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":144,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":50,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":398,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":552,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":325,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":316,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":476,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":124,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":475,"com.google.gson.functional.CollectionTest.testSetDeserialization":395,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":225,"com.google.gson.functional.EnumTest.testEnumSet":32,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":193,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":504,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":432,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":86,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":517,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":198,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":605,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":478,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":442,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":31,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":233,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":174,"com.google.gson.functional.MapTest.testHashMapDeserialization":568,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":589,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":525,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":345,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":485,"com.google.gson.MixedStreamTest.testReadNulls":624,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":57,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":256,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":290,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":553,"com.google.gson.functional.MapTest.testSortedMap":579,"com.google.gson.functional.MapTest.testMapSerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":259,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":434,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":481,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":495,"com.google.gson.functional.MapTest.testSerializeMaps":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":349,"com.google.gson.functional.MapTest.testComplexKeysSerialization":116,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":503,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":1,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":582,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":280,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":214,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":379,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":392,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":29,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":378,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":245,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":41,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":465,"com.google.gson.functional.MapTest.testStringKeyDeserialization":581,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":497,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":88,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":182,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":119,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":424,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":228,"com.google.gson.functional.PrettyPrintingTest.testMap":243,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":590,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":68,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":302,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":376,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":24,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":498,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":654,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":357,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":539,"com.google.gson.functional.CollectionTest.testQueueSerialization":69,"com.google.gson.functional.MapTest.testMapSerializationEmpty":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":601,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":643,"com.google.gson.functional.MapTest.testMapOfMapSerialization":106,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":522,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":559,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":167,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":220,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":94,"com.google.gson.functional.FieldNamingTest.testIdentity":350,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":562,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":261,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":467,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":43,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":82,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":187,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":295,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":419,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":11,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":122,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":355,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":165,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":527,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":518,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":335,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":567,"com.google.gson.functional.MapTest.testMapSubclassSerialization":100,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":181,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":253,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":387,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":505,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":230,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":337,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":364,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":429,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":512,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":613,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":375,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":48,"com.google.gson.functional.EnumTest.testEnumSubclass":35,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":168,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":26,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":459,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":152,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":121,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":439,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":586,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":208,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":599,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":474,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":142,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":16,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":493,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":602,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":614,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":163,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":382,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":330,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":450,"com.google.gson.MixedStreamTest.testWriteNulls":365,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":407,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":275,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":564,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":213,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":383,"com.google.gson.CommentsTest.testParseComments":625,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":189,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":413,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":284,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":606,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":480,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":109,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":356,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":615,"com.google.gson.MixedStreamTest.testReadInvalidState":622,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":221,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":332,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":250,"com.google.gson.JsonParserTest.testParseMixedArray":19,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":155,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":499,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":281,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":4,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":159,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":319,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":492,"com.google.gson.functional.MapTest.testMapDeserialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":315,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":248,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":99,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":371,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":410,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":103,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":149,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":135,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":393,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":294,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":511,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":196,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":204,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":306,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":64,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":207,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":108,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":244,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":584,"com.google.gson.functional.PrimitiveTest.testShortSerialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":441,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":430,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":308,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":423,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":346,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":34,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":67,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":252,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":570,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":427,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":183,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":405,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":629,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":7,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":526,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":5,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":548,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":186,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":610,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":649,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":42,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":205,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":399,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":417,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":298,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":338,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":443,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":600,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":470,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":454,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":37,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":60,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":289,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":515,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":400,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":131,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":594,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":310,"com.google.gson.stream.JsonWriterTest.testNullStringValue":636,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":524,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":147,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":587,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":444,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":166,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":184,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":97,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":33,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":134,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":488,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":482,"com.google.gson.functional.MapTest.testGeneralMapField":113,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":453,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":268,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":612,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":123,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":227,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":277,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":327,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":111,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":128,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":299,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":173,"com.google.gson.MixedStreamTest.testReadMixedStreamed":547,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":516,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":575,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":12,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":76,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":506,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":501,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":603,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":239,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":318,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":576,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":342,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":569,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":185,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":265,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":340,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":639,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":598,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":317,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":565,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":508,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":558,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":414,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":96,"com.google.gson.functional.ObjectTest.testNestedDeserialization":471,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":201,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":210,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":486,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":141,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":611,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":283,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":380,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":540,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":577,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":47,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":177,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":388,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":84,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":406,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":78,"com.google.gson.functional.ObjectTest.testNullSerialization":194,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":62,"com.google.gson.stream.JsonWriterTest.testDoubles":633,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":537,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":571,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":112,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":153,"com.google.gson.functional.MapTest.testInterfaceTypeMap":110,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":494,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":229,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":146,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":588,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":36,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":241,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":232,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":391,"com.google.gson.MixedStreamTest.testReadClosed":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":300,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":595,"com.google.gson.MixedStreamTest.testWriteClosed":369,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":71,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":487,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":190,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":531,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":52,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":145,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":286,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":206,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":282,"com.google.gson.stream.JsonWriterTest.testLongs":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":333,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":150,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":191,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":70,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":534,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":604,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":341,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":390,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":74,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":323,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":489,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":216,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":449,"com.google.gson.stream.JsonWriterTest.testNumbers":645,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":158,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":513,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":215,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":266,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":285,"com.google.gson.functional.CollectionTest.testQueueDeserialization":561,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":161,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":433,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":543,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":331,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":535,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":104,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":312,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":130,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":469,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":66,"com.google.gson.functional.MapTest.testRawMapSerialization":115,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":363,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":621,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":650,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":58,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":199,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":484,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":139,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":13,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":15,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":27,"com.google.gson.functional.PrimitiveTest.testByteSerialization":176,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":270,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":361,"com.google.gson.ObjectTypeAdapterTest.testSerialize":374,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":126,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":593,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":370,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":81,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":276,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":53,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":541,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":549,"com.google.gson.functional.MapTest.testMapWithQuotes":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":303,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":426,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":542,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":85,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":620,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":95,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":255,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":301,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":223,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":20,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":412,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":45,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":468,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":249,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":309,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":458,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":279,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":304,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":311,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":339,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":608,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":30,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":394,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":491,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":61,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":263,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":536,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":254,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":377,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":648,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":461,"com.google.gson.functional.ObjectTest.testNestedSerialization":200,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":98,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":127,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":157,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":545,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":264,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":114,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":251,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":297,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":23,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":368,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":647,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":195,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":617,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":447,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":148,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":519,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":373,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":550,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":596,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":510,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":533,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":651,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":358,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":274,"com.google.gson.functional.CollectionTest.testSetSerialization":77,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":90,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":246,"com.google.gson.functional.StringTest.testStringValueSerialization":359,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":360,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":217,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":381,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":556,"com.google.gson.MixedStreamTest.testWriteInvalidState":366,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":618,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":192,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":597,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":278,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":428,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":343,"com.google.gson.stream.JsonWriterTest.testBooleans":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":307,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":644,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":348,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":211,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":490,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":3,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":324,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":362,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":572,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":631,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":272,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":616},"transformations":[{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"72d95302-3e36-11e6-8a6c-599efb8ed5ca","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"72d9a123-3e36-11e6-8a6c-c51489f062e6","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[326,329],"tindex":"72d9a124-3e36-11e6-8a6c-cbe0cf0a2cd8","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"72d9c835-3e36-11e6-8a6c-59c537ec0e69","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72d9c836-3e36-11e6-8a6c-6929e5f086fc","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"72d9c837-3e36-11e6-8a6c-c55bca555138","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"72d9ef48-3e36-11e6-8a6c-1f5d04ff6aa3","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if ((topOfStack == topOfStack) || (p == topOfStack)) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"72d9ef49-3e36-11e6-8a6c-b3fa67d38462","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if ((java.lang.String) != null) {\n        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n            object.add(java.lang.String, value);\n        } \n        java.lang.String = null;\n    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n        com.google.gson.JsonElement = value;\n    } else {\n        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n        if (element instanceof com.google.gson.JsonArray) {\n            ((com.google.gson.JsonArray)(element)).add(value);\n        } else {\n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"72d9ef4a-3e36-11e6-8a6c-fd25add4560f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"72da165b-3e36-11e6-8a6c-978fd6195ce1","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"72da165c-3e36-11e6-8a6c-87e2067ae2fa","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.Class) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"72da3d6d-3e36-11e6-8a6c-a986d4e4829b","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"72da3d6e-3e36-11e6-8a6c-37e0a02a993e","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.Class) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[9,11,12,16,17,374,18,23,24,25,26,27,375,28,376,377,31,34,35,378,36,379,38,40,380,41,381,382,43,44,45,383,46,47,48,49,50,51,384,52,53,54,385,55,386,387,56,57,58,59,388,60,61,62,389,390,63,391,64,392,393,65,67,73,394,395,75,77,396,80,81,83,84,397,398,399,87,89,400,90,401,95,97,98,402,403,404,405,406,407,104,408,110,112,113,116,120,121,123,409,124,125,126,128,129,130,131,410,411,412,134,135,413,136,138,414,140,415,141,142,143,144,145,146,147,148,416,417,149,150,151,418,419,420,421,422,423,155,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,187,188,450,451,189,452,453,190,454,455,191,456,193,457,195,458,459,460,198,461,199,200,462,202,463,464,465,466,203,467,204,205,468,206,469,470,471,472,207,473,474,208,209,210,211,212,213,214,475,215,216,217,218,219,220,221,223,224,225,226,227,229,230,231,233,234,235,236,237,238,239,240,476,477,478,479,244,245,249,480,481,250,482,251,483,484,252,253,254,255,256,258,259,485,486,260,487,488,261,262,489,263,490,264,265,491,492,493,494,495,277,496,278,497,498,499,281,282,283,284,285,286,500,501,288,502,503,504,505,290,506,291,292,293,294,295,296,297,507,508,299,509,510,511,512,513,514,305,515,516,517,308,518,519,520,521,522,318,319,321,523,524,323,525,526,527,328,329,331,333,528,529,530,531,338,532,533,339,340,534,535,341,536,537,343,344,346,347,348,349,350,538,352,354,539,540,541,542,543,544,545,546,360,363,364,366,369,547,548],"tindex":"72da647f-3e36-11e6-8a6c-2594292d5226","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (!(value.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72da6480-3e36-11e6-8a6c-6d6e92c702a8","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"72da6481-3e36-11e6-8a6c-df7dda58252e","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"72da8b92-3e36-11e6-8a6c-4f61c3982eb5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"72da8b93-3e36-11e6-8a6c-299d0473c756","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[9,227,229,233,235,236,238,250,251,255,256,258,259,486,487,264,265,334],"tindex":"72da8b94-3e36-11e6-8a6c-5f4b43a772e3","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"72da8b95-3e36-11e6-8a6c-b5b8278e656f","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"72da8b96-3e36-11e6-8a6c-a57d2294d281","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"72dab2a7-3e36-11e6-8a6c-4d8a1d59e2b1","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72dab2a8-3e36-11e6-8a6c-3731c0027001","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"72dab2a9-3e36-11e6-8a6c-1b5a623137eb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((a != null) && ((a.peek()) != a)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"a","obj":"a","reader":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[],"tindex":"72dab2aa-3e36-11e6-8a6c-371bc475f01d","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72dab2ab-3e36-11e6-8a6c-65e93f946a1f","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"72dad9bc-3e36-11e6-8a6c-49ef41e64c32","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"72dad9bd-3e36-11e6-8a6c-31bd85674c3e","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72dad9be-3e36-11e6-8a6c-0ffa3f9cd1fb","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"72dad9bf-3e36-11e6-8a6c-5d36ae064fc6","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"72dad9c0-3e36-11e6-8a6c-7bce7cfdc727","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[549,9,10,11,12,16,17,550,18,21,22,23,551,24,25,26,552,27,375,28,29,376,377,553,30,31,32,33,34,35,554,378,36,379,37,38,39,40,380,41,381,42,382,43,44,45,383,46,47,48,49,50,51,384,52,53,54,385,55,386,387,56,57,58,59,388,60,61,62,389,390,63,391,64,392,393,65,66,67,68,555,556,557,69,70,71,72,73,558,559,74,394,395,75,76,560,77,78,396,79,561,80,81,82,83,84,85,397,86,398,562,399,87,88,89,400,90,91,92,563,93,401,94,95,96,97,98,402,403,404,405,406,564,565,566,567,99,407,568,569,100,101,570,571,102,572,103,573,104,574,575,576,577,105,106,107,578,408,108,109,579,110,111,112,113,114,115,580,116,117,581,118,582,583,119,120,121,122,123,409,124,125,126,127,128,129,130,131,410,411,132,412,133,134,135,413,136,137,138,139,414,140,415,141,142,143,144,145,146,147,148,416,417,149,150,151,584,585,418,152,419,153,586,587,588,420,421,154,422,423,155,589,590,591,592,593,594,424,156,157,595,596,425,426,597,158,427,159,160,598,428,161,429,430,162,431,163,164,599,600,165,166,432,601,602,167,603,433,434,604,435,436,437,438,168,605,169,606,170,171,439,440,172,441,607,173,442,174,608,443,444,175,176,177,178,179,180,181,445,446,609,182,447,183,610,448,611,184,185,612,186,449,613,187,188,450,451,189,452,453,190,454,455,191,192,456,614,193,457,194,195,458,459,196,460,197,198,461,199,200,201,462,202,463,464,465,466,203,467,204,205,468,206,469,470,471,472,207,473,474,208,209,210,615,211,212,213,214,475,215,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,616,476,477,478,479,242,243,244,245,246,247,248,249,480,481,250,482,251,483,484,252,253,254,256,257,258,259,485,486,260,487,488,617,261,262,489,263,490,264,265,266,267,618,268,269,270,271,272,491,492,273,274,275,493,619,494,276,495,277,496,278,497,279,498,280,499,281,282,283,284,285,286,287,500,501,288,502,503,504,289,505,290,620,506,291,292,293,294,295,296,297,507,508,298,299,300,509,510,511,301,512,302,303,513,304,514,305,306,515,516,307,517,308,518,309,310,311,312,313,519,314,520,315,316,521,317,522,318,319,320,321,523,322,621,524,323,525,324,325,526,326,327,527,328,329,330,331,332,333,528,529,334,335,530,336,531,337,338,532,533,339,340,534,535,341,536,537,342,343,344,345,346,347,348,349,350,538,351,352,353,354,355,539,540,356,541,357,542,543,544,358,545,546,359,360,361,362,363,622,623,364,365,366,367,624,368,369,547,548,372,373,625],"tindex":"72db00d1-3e36-11e6-8a6c-b306d37a4506","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[338,532,533,339,340,534,535,341],"tindex":"72db00d2-3e36-11e6-8a6c-9bb25c381676","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:952","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"72db27e3-3e36-11e6-8a6c-8ff6c206fc20","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == dateStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_LONG":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[549,9,10,11,12,16,17,550,18,21,22,23,551,24,25,26,552,27,375,28,29,376,377,553,30,31,32,33,34,35,554,378,36,379,37,38,39,40,380,41,381,42,382,43,44,45,383,46,47,48,49,50,51,384,52,53,54,385,55,386,387,56,57,58,59,388,60,61,62,389,390,63,391,64,392,393,65,66,67,68,555,556,557,69,70,71,72,73,558,559,74,394,395,75,76,560,77,78,396,79,561,80,81,82,83,84,85,397,86,398,562,399,87,88,89,400,90,91,92,563,93,401,94,95,96,97,98,402,403,404,405,406,564,565,566,567,99,407,568,569,100,101,570,571,102,572,103,573,104,574,575,576,577,105,106,107,578,408,108,109,579,110,111,112,113,114,115,580,116,117,581,118,582,583,119,120,121,122,123,409,124,125,126,127,128,129,130,131,410,411,132,412,133,134,135,413,136,137,138,139,414,140,415,141,142,143,144,145,146,147,148,416,417,149,150,151,584,585,418,152,419,153,586,587,588,420,421,154,422,423,155,589,590,591,592,593,594,424,156,157,595,596,425,426,597,158,427,159,160,598,428,161,429,430,162,431,163,164,599,600,165,166,432,601,602,167,603,433,434,604,435,436,437,438,168,605,169,606,170,171,439,440,172,441,607,173,442,174,608,443,444,175,176,177,178,179,180,181,445,446,609,182,447,183,610,448,611,184,185,612,186,449,613,187,188,450,451,189,452,453,190,454,455,191,192,456,614,193,457,194,195,458,459,196,460,197,198,461,199,200,201,462,202,463,464,465,466,203,467,204,205,468,206,469,470,471,472,207,473,474,208,209,210,615,211,212,213,214,475,215,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,616,476,477,478,479,242,243,244,245,246,247,248,249,480,481,250,482,251,483,484,252,253,254,256,257,258,259,485,486,260,487,488,617,261,262,489,263,490,264,265,266,267,618,268,269,270,271,272,491,492,273,274,275,493,619,494,276,495,277,496,278,497,279,498,280,499,281,282,283,284,285,286,287,500,501,288,502,503,504,289,505,290,620,506,291,292,293,294,295,296,297,507,508,298,299,300,509,510,511,301,512,302,303,513,304,514,305,306,515,516,307,517,308,518,309,310,311,312,313,519,314,520,315,316,521,317,522,318,319,320,321,523,322,621,524,323,525,324,325,526,326,327,527,328,329,330,331,332,333,528,529,334,335,530,336,531,337,338,532,533,339,340,534,535,341,536,537,342,343,344,345,346,347,348,349,350,538,351,352,353,354,355,539,540,356,541,357,542,543,544,358,545,546,359,360,361,362,363,622,623,364,365,366,367,624,368,369,547,548,372,373,625],"tindex":"72db27e4-3e36-11e6-8a6c-f5a92a5ffdb6","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"72db4ef5-3e36-11e6-8a6c-594c1b8b8640","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[299,304,305,326,329,334,626,627,628,629,630],"tindex":"72db4ef6-3e36-11e6-8a6c-cddef4c80055","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (!(typeOfSrc instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[631,632,633],"tindex":"72db4ef7-3e36-11e6-8a6c-e7b0c1969a85","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"72db4ef8-3e36-11e6-8a6c-2ff52d6186bc","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[2,3,5,8,9,11,12,16,17,374,634,18,635,636,637,638,639,640,641,631,632,642,643,633,644,645,646,647,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,118,119,120,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,144,145,146,149,150,152,154,155,157,158,160,161,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,182,183,184,185,186,187,188,189,190,191,193,194,195,196,197,198,199,200,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,233,234,235,236,237,238,239,240,648,241,649,650,651,652,653,654,655,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,260,261,262,264,265,266,267,268,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,287,288,289,290,291,292,294,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,367,368,370,371,372,373],"tindex":"72db7609-3e36-11e6-8a6c-a9ce0d5e42ac","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"72db760a-3e36-11e6-8a6c-a353f274dcc7","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"72db9d1b-3e36-11e6-8a6c-598b236d8f30","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"72db9d1c-3e36-11e6-8a6c-ff11ee5dbce8","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[9,10,11,12,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,388,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,144,145,146,149,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,287,288,289,290,291,292,294,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,372,373],"tindex":"72db9d1d-3e36-11e6-8a6c-df165ec0b08d","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"72dbc42e-3e36-11e6-8a6c-53bdf5bb9482","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"72dbc42f-3e36-11e6-8a6c-9d73076200d0","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\r'"},"failures":[],"tindex":"72dbc430-3e36-11e6-8a6c-5dd7719ef5b1","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"72dbc431-3e36-11e6-8a6c-bdedbacde36f","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"72dbc432-3e36-11e6-8a6c-518e55c858ce","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662847/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":10,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":456,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":144,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":125,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":72,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":48,"com.google.gson.MixedStreamTest.testWriteLenient":132,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":351,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":146,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":83,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":54,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":445,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":223,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":471,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":426,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":28,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":93,"com.google.gson.functional.ObjectTest.testSingletonLists":52,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":348,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":457,"com.google.gson.stream.JsonWriterTest.testStrings":479,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":249,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":216,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":62,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":182,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":74,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":484,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":90,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":254,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":490,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":186,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":191,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":269,"com.google.gson.functional.EnumTest.testEnumCaseMapping":470,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":176,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":455,"com.google.gson.functional.JsonTreeTest.testToJsonTree":155,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":259,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":399,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":288,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":442,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":35,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":60,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":303,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":325,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":263,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":267,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":476,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":65,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":302,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":358,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":215,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":194,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":487,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":383,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":347,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":49,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":111,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":464,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":80,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":40,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":374,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":195,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":379,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":418,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":2,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":58,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":291,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":283,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":309,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":20,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":432,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":396,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":190,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":238,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":350,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":345,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":475,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":486,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":38,"com.google.gson.functional.CollectionTest.testSetDeserialization":85,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":427,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":410,"com.google.gson.functional.EnumTest.testEnumSet":465,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":237,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":116,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":362,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":414,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":185,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":395,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":5,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":264,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":404,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":196,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":202,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":292,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":293,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":278,"com.google.gson.functional.MapTest.testMapSerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":201,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":21,"com.google.gson.functional.MapTest.testSerializeMaps":141,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":221,"com.google.gson.functional.MapTest.testComplexKeysSerialization":372,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":389,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":37,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":102,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":100,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":403,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":122,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":257,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":126,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":241,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":375,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":233,"com.google.gson.functional.PrettyPrintingTest.testMap":255,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":438,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":124,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":335,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":181,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":342,"com.google.gson.functional.MapTest.testMapSerializationEmpty":373,"com.google.gson.functional.CollectionTest.testQueueSerialization":439,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":477,"com.google.gson.functional.MapTest.testMapOfMapSerialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":314,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":106,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":250,"com.google.gson.functional.FieldNamingTest.testIdentity":222,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":239,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":67,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":127,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":148,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":154,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":406,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":187,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":175,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":459,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":88,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":317,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":179,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":357,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":328,"com.google.gson.functional.MapTest.testMapSubclassSerialization":361,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":7,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":33,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":129,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":391,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":50,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":45,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":27,"com.google.gson.functional.EnumTest.testEnumSubclass":467,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":319,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":61,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":183,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":305,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":240,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":97,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":450,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":89,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":161,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":178,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":87,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":355,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":53,"com.google.gson.MixedStreamTest.testWriteNulls":130,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":226,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":384,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":381,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":36,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":245,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":407,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":431,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":491,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":229,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":368,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":460,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":285,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":423,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":214,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":327,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":22,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":308,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":117,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":428,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":311,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":209,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":344,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":260,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":225,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":92,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":481,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":363,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":435,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":169,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":101,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":16,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":413,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":420,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":294,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":392,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":337,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":299,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":449,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":256,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":367,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":247,"com.google.gson.functional.PrimitiveTest.testShortSerialization":326,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":171,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":271,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":123,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":218,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":300,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":84,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":6,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":280,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":329,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":51,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":212,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":331,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":482,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":41,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":82,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":421,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":135,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":332,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":9,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":242,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":70,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":57,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":469,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":296,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":405,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":489,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":166,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":210,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":339,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":172,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":163,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":199,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":453,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":168,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":13,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":23,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":56,"com.google.gson.functional.MapTest.testGeneralMapField":228,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":378,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":232,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":386,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":352,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":204,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":307,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":401,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":322,"com.google.gson.MixedStreamTest.testReadMixedStreamed":0,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":78,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":188,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":446,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":270,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":346,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":246,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":330,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":14,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":208,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":109,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":451,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":289,"com.google.gson.functional.ObjectTest.testNestedDeserialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":252,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":284,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":417,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":11,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":160,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":268,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":430,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":394,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":295,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":150,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":492,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":448,"com.google.gson.functional.ObjectTest.testNullSerialization":411,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":298,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":306,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":370,"com.google.gson.functional.MapTest.testInterfaceTypeMap":227,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":434,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":107,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":468,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":99,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":266,"com.google.gson.MixedStreamTest.testWriteClosed":134,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":12,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":441,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":81,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":408,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":29,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":433,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":159,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":422,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":356,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":409,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":436,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":440,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":76,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":108,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":98,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":211,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":286,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":103,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":192,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":152,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":39,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":376,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":158,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":313,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":112,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":200,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":213,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":66,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":341,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":44,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":69,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":437,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":128,"com.google.gson.functional.MapTest.testRawMapSerialization":371,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":483,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":96,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":415,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":24,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":173,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":136,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":138,"com.google.gson.functional.PrimitiveTest.testByteSerialization":324,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":380,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":402,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":140,"com.google.gson.ObjectTypeAdapterTest.testSerialize":488,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":42,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":147,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":385,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":219,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":30,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":184,"com.google.gson.functional.MapTest.testMapWithQuotes":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":236,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":279,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":251,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":334,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":425,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":287,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":25,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":68,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":207,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":320,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":59,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":205,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":149,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":340,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":156,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":354,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":377,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":297,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":452,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":277,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":235,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":248,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":63,"com.google.gson.functional.ObjectTest.testNestedSerialization":416,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":310,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":400,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":203,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":143,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":230,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":262,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":133,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":304,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":480,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":412,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":164,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":17,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":177,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":15,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":64,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":75,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":462,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":145,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":113,"com.google.gson.functional.CollectionTest.testSetSerialization":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":244,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":258,"com.google.gson.functional.StringTest.testStringValueSerialization":463,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":359,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":86,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":472,"com.google.gson.MixedStreamTest.testWriteInvalidState":131,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":157,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":387,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":338,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":478,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":115,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":220,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":34,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":493,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":110,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":349,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":301,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":189,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":382},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a22dda-3f3f-11e6-8b42-5340d8c284f1","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a2ca1b-3f3f-11e6-8b42-4f3b94ca3b12","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"tindex":"79a3183c-3f3f-11e6-8b42-655aa09c9adf","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a33f4d-3f3f-11e6-8b42-91b06e767a15","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a3665e-3f3f-11e6-8b42-efcbf2d73edd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a3665f-3f3f-11e6-8b42-9db7db9b6196","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == nonempty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"79a3b480-3f3f-11e6-8b42-a9b972f8dbad","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((com.google.gson.JsonPrimitive.this) == obj) {\n        return true;\n    } \n    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n        return false;\n    } \n    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n    if ((java.lang.Object) == null) {\n        return (other.java.lang.Object) == null;\n    } \n    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n    } \n    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n        double double = getAsNumber().doubleValue();\n        double double = other.getAsNumber().doubleValue();\n        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n    } \n    return java.lang.Object.equals(other.java.lang.Object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[114,115],"tindex":"79a3db91-3f3f-11e6-8b42-db2b55cee293","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[116,117,118],"tindex":"79a402a2-3f3f-11e6-8b42-79238a66ae2b","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a429b3-3f3f-11e6-8b42-1bf4ab3d478e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a450c4-3f3f-11e6-8b42-7dc3676ec9cc","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[119,120],"tindex":"79a450c5-3f3f-11e6-8b42-211e05c1d621","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a477d6-3f3f-11e6-8b42-3118195fc1bc","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"79a477d7-3f3f-11e6-8b42-87d1b14b54e4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key.isJsonNull()) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a49ee8-3f3f-11e6-8b42-9da9f7f8521d","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a49ee9-3f3f-11e6-8b42-89f933fde64d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a4ed0a-3f3f-11e6-8b42-0391341c0bac","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[121],"tindex":"79a4ed0b-3f3f-11e6-8b42-e3242f8a0f20","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[122,51],"tindex":"79a53b2c-3f3f-11e6-8b42-9f805623e928","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[114,115],"tindex":"79a5623d-3f3f-11e6-8b42-3b6543d32a7a","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[123],"tindex":"79a5623e-3f3f-11e6-8b42-f184a3c37e5c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a5894f-3f3f-11e6-8b42-0770af584d85","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a58950-3f3f-11e6-8b42-3bc9aedcd07b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[124,12,125,126,87,127],"tindex":"79a5d771-3f3f-11e6-8b42-695124f45d2a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[128,129,130,131,132,133,134,135,136,137,138,139,10,124,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,90,166,167,168,169,170,171,172,173,174,175],"tindex":"79a5fe82-3f3f-11e6-8b42-d589eeb39923","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a62593-3f3f-11e6-8b42-21faad67fdee","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:417","type":"CtBinaryOperatorImpl"},"failures":[176,177,178,179,180,132,133,181,182,183,184,185,186,187,188,189,3,4,5,190,191,192,193,194,195,196,197,198,199,139,200,10,201,202,11,124,12,13,203,14,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,140,223,18,19,224,20,225,226,141,142,227,228,143,144,229,21,22,23,230,231,24,145,232,233,234,146,147,148,149,150,151,28,32,235,34,36,236,40,237,238,239,41,240,241,242,243,244,245,246,247,248,249,250,251,252,42,253,156,254,255,256,257,258,259,260,261,262,47,157,263,72,264,265,266,267,268,269,270,271,272,273,74,75,274,275,76,77,276,277,278,279,78,79,80,280,125,281,126,86,282,87,127,283,90,284,285,286,166,92,167,287,288,168,169,170,171,172,173,289,174,95,290,291,292,293,294,295,296,297,298,97,98,99,299,100,101,300,175],"tindex":"79a64ca4-3f3f-11e6-8b42-83919be69ba2","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == dateStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a673b5-3f3f-11e6-8b42-27acf0cc134a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.String) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[140,301],"tindex":"79a673b6-3f3f-11e6-8b42-1d63d096f089","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a673b7-3f3f-11e6-8b42-25f077a6c9ca","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl"},"failures":[176,177,302,303,178,179,128,129,130,131,132,133,134,2,181,182,183,136,137,138,304,185,186,187,188,6,7,8,305,306,307,308,309,310,192,311,312,313,314,315,316,317,318,193,319,320,194,195,321,322,196,323,324,197,325,326,327,328,198,329,199,330,331,139,200,10,201,124,203,14,332,204,333,334,335,336,205,206,337,338,123,207,339,340,341,342,343,344,345,208,346,209,210,347,348,211,349,350,351,352,353,354,355,213,214,356,217,357,358,218,219,220,221,222,359,140,301,223,224,360,225,361,141,362,363,142,364,365,366,367,368,227,369,370,228,143,371,372,373,374,375,144,22,230,376,377,378,379,380,381,382,383,145,384,385,386,387,388,389,390,232,233,234,391,392,393,146,147,148,149,150,25,151,394,27,395,396,397,29,30,31,398,399,34,35,36,37,39,236,237,240,241,242,244,245,246,248,250,251,252,152,153,154,155,42,400,401,43,44,402,46,403,156,404,405,254,255,256,257,258,259,260,261,262,406,52,407,408,409,157,410,411,412,413,263,414,415,416,417,418,419,420,421,422,73,423,424,425,426,427,264,265,266,267,268,269,270,271,428,429,430,431,158,159,272,273,274,275,276,278,79,80,160,161,162,432,433,434,163,164,435,436,165,83,437,84,438,439,440,441,442,443,444,445,446,447,448,280,125,126,282,127,283,449,450,90,284,91,451,452,166,167,288,168,169,170,171,172,173,174,453,454,290,291,292,455,456,457,458,459,460,461,462,463,293,96,294,296,297,298,464,299,465,466,300,467,468,469,470,471,103,472,104,105,106,107,473,175,474,475,476],"tindex":"79a69ac8-3f3f-11e6-8b42-d7719b2bd5f1","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a6c1d9-3f3f-11e6-8b42-4b6f9bde8555","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"79a6e8ea-3f3f-11e6-8b42-635204428556","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"79a6e8eb-3f3f-11e6-8b42-011a4e5f17e7","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[176,302,178,179,128,129,133,2,181,304,477,478,479,480,185,188,481,7,8,307,308,192,196,139,201,203,14,332,204,333,335,336,205,206,337,207,340,341,342,343,344,345,209,348,211,350,351,352,354,355,213,214,217,358,359,140,301,223,224,360,361,141,362,363,142,364,365,227,370,228,371,372,374,144,22,230,376,377,380,381,383,145,385,386,388,390,232,233,234,391,392,151,397,34,35,36,37,39,236,237,240,245,246,252,153,42,400,401,43,44,402,46,404,405,257,261,262,52,407,408,409,412,414,416,419,421,422,73,264,265,266,267,268,269,270,271,428,429,274,79,80,432,433,434,435,436,83,437,439,441,442,443,444,445,446,280,449,450,90,284,91,451,167,453,454,290,291,455,456,457,458,459,460,461,462,463,293,294,296,297,464,465,466,300,467,468,469,470,471,103,472,104,105,106,107,482,483,484],"tindex":"79a70ffc-3f3f-11e6-8b42-8983c7c3d120","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a70ffd-3f3f-11e6-8b42-5fb1aad98440","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a7370e-3f3f-11e6-8b42-0587114276b8","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[485,486,487],"tindex":"79a7370f-3f3f-11e6-8b42-a9653cfe0b74","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"79a75e20-3f3f-11e6-8b42-836fffa245a9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[178,179,488,128,129,131,134,0,1,2,185,3,4,5,6,7,8,9,139,10,201,11,124,12,13,14,15,16,489,123,17,346,353,356,222,359,18,19,224,20,142,490,227,370,228,372,144,21,22,23,230,24,386,491,387,391,146,147,149,150,25,26,394,27,395,396,397,28,29,30,31,32,398,33,399,34,35,36,37,38,39,40,41,240,242,244,152,153,154,155,42,43,44,45,46,404,256,257,261,262,47,48,49,50,51,492,406,52,53,54,407,55,56,408,57,58,409,59,410,60,412,61,62,414,63,415,416,64,418,65,66,419,67,420,421,68,422,69,70,71,72,73,423,425,426,427,428,429,430,431,158,159,273,74,75,274,275,76,77,276,278,78,79,80,160,161,162,432,433,434,163,164,81,82,435,436,165,83,84,443,85,445,447,125,126,86,87,127,283,449,88,89,450,90,91,451,452,493,166,92,93,168,169,94,170,172,174,95,453,454,290,291,295,468,102,103,472,104,105,106,473,474,113,475,476],"tindex":"79a75e21-3f3f-11e6-8b42-9916438b4826","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467344440192/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
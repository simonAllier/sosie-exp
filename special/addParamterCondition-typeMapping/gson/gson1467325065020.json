{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":345,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":241,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":25,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":71,"com.google.gson.JsonPrimitiveTest.testDeepCopy":409,"com.google.gson.stream.JsonWriterTest.testRepeatedName":22,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":153,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":297,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":273,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":366,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":3,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":222,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":148,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":151,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":279,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":130,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":359,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":262,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":321,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":347,"com.google.gson.functional.ObjectTest.testSingletonLists":113,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":51,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":11,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":435,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":105,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":287,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":194,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":300,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":382,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":159,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":224,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":253,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":388,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":442,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":199,"com.google.gson.functional.JsonTreeTest.testToJsonTree":270,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":419,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":88,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":285,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":398,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":7,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":356,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":441,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":197,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":290,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":415,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":103,"com.google.gson.JsonParserTest.testParseString":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":418,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":123,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":215,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":386,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":274,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":198,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":180,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":142,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":368,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":266,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":69,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":122,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":211,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":14,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":173,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":283,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":413,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":156,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":143,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":40,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":423,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":237,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":196,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":265,"com.google.gson.functional.CollectionTest.testSetDeserialization":312,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":131,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":117,"com.google.gson.JsonStreamParserTest.testIterator":346,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":429,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":54,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":119,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":81,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":239,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":106,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":174,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":384,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":140,"com.google.gson.functional.MapTest.testMapSerialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":33,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":363,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":254,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":410,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":399,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":46,"com.google.gson.functional.MapTest.testSerializeMaps":53,"com.google.gson.functional.MapTest.testComplexKeysSerialization":68,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":367,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":401,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":421,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":92,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":330,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":169,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":328,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":109,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":340,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":360,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":154,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":70,"com.google.gson.functional.PrettyPrintingTest.testMap":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":34,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":193,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":334,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":27,"com.google.gson.functional.MapTest.testMapOfMapSerialization":58,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":19,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":436,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":372,"com.google.gson.functional.FieldNamingTest.testIdentity":47,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":431,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":160,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":292,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":112,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":155,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":269,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":426,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":389,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":336,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":317,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":186,"com.google.gson.functional.MapTest.testMapSubclassSerialization":52,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":30,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":264,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":13,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":76,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":275,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":271,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":80,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":286,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":195,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":357,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":94,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":405,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":325,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":158,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":392,"com.google.gson.stream.JsonWriterTest.testTwoNames":18,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":318,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":306,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":316,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":23,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":278,"com.google.gson.MixedStreamTest.testWriteNulls":342,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":217,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":213,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":91,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":261,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":339,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":98,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":322,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":135,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":257,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":422,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":61,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":230,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":87,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":204,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":72,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":358,"com.google.gson.JsonParserTest.testParseMixedArray":351,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":387,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":394,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":132,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":373,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":185,"com.google.gson.JsonArrayTest.testRemove":380,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":227,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":420,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":320,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":362,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":397,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":55,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":165,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":229,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":329,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":246,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":307,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":263,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":361,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":181,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":60,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":108,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":434,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":370,"com.google.gson.JsonParserTest.testParseEmptyString":352,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":248,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":43,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":447,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":149,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":205,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":443,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":276,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":385,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":374,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":323,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":15,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":189,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":315,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":267,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":310,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":17,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":136,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":406,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":240,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":272,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":96,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":295,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":282,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":177,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":432,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":39,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":166,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":141,"com.google.gson.stream.JsonWriterTest.testNullStringValue":20,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":168,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":228,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":414,"com.google.gson.JsonArrayTest.testSet":378,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":170,"com.google.gson.JsonPrimitiveTest.testEquals":408,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":244,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":255,"com.google.gson.functional.MapTest.testGeneralMapField":65,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":281,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":210,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":364,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":74,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":331,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":381,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":424,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":0,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":223,"com.google.gson.MixedStreamTest.testReadMixedStreamed":235,"com.google.gson.JsonObjectTest.testDeepCopy":341,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":202,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":354,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":304,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":251,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":371,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":38,"com.google.gson.JsonArrayTest.testDeepCopy":379,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":433,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":35,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":138,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":21,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":37,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":407,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":161,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":400,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":100,"com.google.gson.functional.ObjectTest.testNestedDeserialization":296,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":444,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":242,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":134,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":313,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":353,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":79,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":324,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":260,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":277,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":179,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":338,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":64,"com.google.gson.functional.MapTest.testInterfaceTypeMap":62,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":425,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":145,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":182,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":327,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":440,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":403,"com.google.gson.MixedStreamTest.testWriteClosed":234,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":243,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":115,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":309,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":84,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":144,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":299,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":126,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":133,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":337,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":42,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":147,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":302,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":391,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":326,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":355,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":365,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":383,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":445,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":183,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":412,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":268,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":93,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":208,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":298,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":303,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":56,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":291,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":26,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":104,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":294,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":12,"com.google.gson.functional.MapTest.testRawMapSerialization":67,"com.google.gson.JsonParserTest.testParseReader":348,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":190,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":120,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":175,"com.google.gson.JsonPrimitiveTest.testExponential":411,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":256,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":375,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":212,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":377,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":438,"com.google.gson.ObjectTypeAdapterTest.testSerialize":10,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":49,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":102,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":393,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":258,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":390,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":218,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":402,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":85,"com.google.gson.functional.MapTest.testMapWithQuotes":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":417,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":428,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":437,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":416,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":129,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":446,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":77,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":293,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":110,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":220,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":1,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":137,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":78,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":178,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":162,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":404,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":31,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":99,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":231,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":288,"com.google.gson.functional.ObjectTest.testNestedSerialization":121,"com.google.gson.JsonObjectTest.testAddingStringProperties":335,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":201,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":207,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":66,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":73,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":111,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":350,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":118,"com.google.gson.JsonPrimitiveTest.testBoolean":395,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":308,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":249,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":245,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":289,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":301,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":232,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":216,"com.google.gson.functional.CollectionTest.testSetSerialization":152,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":332,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":97,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":225,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":184,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":314,"com.google.gson.MixedStreamTest.testWriteInvalidState":233,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":219,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":36,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":89,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":333,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":319,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":344,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":369,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":86,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":50,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":24,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":214},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"783e6408-3f10-11e6-897f-c9fae1d2d0c8","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"783f4e69-3f10-11e6-897f-5912f33c0b26","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"783f4e6a-3f10-11e6-897f-d35a6aacd6f0","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.sql.Timestamp.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5],"tindex":"783f757b-3f10-11e6-897f-07b53cd07c9a","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        {\n            if (pattern != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197],"tindex":"783f9c8c-3f10-11e6-897f-b9541ee4d137","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"783fc39d-3f10-11e6-897f-91d7e1cf8f09","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"783feaae-3f10-11e6-897f-e5125546a6fb","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784011bf-3f10-11e6-897f-b3159f26056f","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784038d0-3f10-11e6-897f-13bfc8200eb2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"784038d1-3f10-11e6-897f-a17e3e94b8e7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784038d2-3f10-11e6-897f-f74010315d83","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"78405fe3-3f10-11e6-897f-d560a4e68af8","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isString()) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[],"tindex":"78405fe4-3f10-11e6-897f-3f6d758a0070","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"784086f5-3f10-11e6-897f-09165d0a358f","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784086f6-3f10-11e6-897f-0bd24cc6c7a0","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784086f7-3f10-11e6-897f-ddc29ede7dee","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7840ae08-3f10-11e6-897f-dff7ee7e54bd","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7840ae09-3f10-11e6-897f-0d02c4585cfa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7840ae0a-3f10-11e6-897f-e779e888606c","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        {\n            if (pattern != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7840d51b-3f10-11e6-897f-6766446d35d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7840d51c-3f10-11e6-897f-2982570f963c","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7840fc2d-3f10-11e6-897f-311f5788b99a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7840fc2e-3f10-11e6-897f-0d876754ddc0","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7841233f-3f10-11e6-897f-1de565287983","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78412340-3f10-11e6-897f-c3597a320723","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78412341-3f10-11e6-897f-4f6681beba06","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[127,198],"tindex":"78414a52-3f10-11e6-897f-db7fd4e3fb31","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[199,200,201,202,203,204,205,206,207,48,53,65,208,209,210,211,212,213,214,215,216,217,218,74,219,220,221,222,77,79,80,81,84,85,86,223,224,109,225,226,227,112,114,118,119,120,228,155,159,163,229,164,165,169,230,183,184,185,186,187,231,232,196],"tindex":"78414a53-3f10-11e6-897f-05f36e6210c7","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (!(array instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[8,9,10,12,13,233,234,235,236,14,28,237,238,239,29,30,31,240,32,241,33,242,34,243,244,35,245,246,247,248,249,38,41,42,43,44,45,46,47,48,250,251,51,252,56,253,62,64,65,68,71,254,72,255,73,256,74,257,219,76,222,258,259,260,77,261,79,80,81,82,83,262,84,85,86,263,87,264,88,89,90,91,92,265,93,266,267,94,96,97,268,101,269,270,102,103,104,271,105,106,108,109,110,111,272,273,274,275,276,277,112,113,278,279,114,280,281,115,282,283,116,284,117,285,118,286,287,119,288,120,121,289,122,290,291,123,292,124,125,293,126,294,295,296,297,127,128,129,130,131,132,133,134,135,298,299,136,300,301,137,138,302,303,139,140,304,141,142,305,306,307,143,144,145,228,308,309,310,146,147,311,148,149,150,312,151,152,153,313,154,314,315,316,155,156,157,317,318,158,159,160,161,162,319,163,320,321,164,165,322,166,168,169,323,170,171,172,173,174,175,176,324,177,178,179,325,326,180,327,181,328,329,182,330,183,184,185,186,187,195,331,332,196,197],"tindex":"78417164-3f10-11e6-897f-dbb83a32875a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78419875-3f10-11e6-897f-1bc5e40edc87","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key instanceof java.lang.reflect.ParameterizedType) && (!(key.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[333,334,335,49,50,222,258,259,260,94,95,96,99,273,274,275,276,277,336],"tindex":"78419876-3f10-11e6-897f-57bbcd952f5d","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"78419877-3f10-11e6-897f-0fe037c87b58","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element.isBoolean()) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7841bf88-3f10-11e6-897f-c9aa9c696846","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7841bf89-3f10-11e6-897f-21f77212f262","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"7841bf8a-3f10-11e6-897f-8dc59a42b6bb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[337,338,339,6,333,340,334,341,335,7,342,343,344,345,346,347,348,349,14,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,15,16,374,17,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,241,244,0,415,416,417,1,418,2,36,3,4,5,419,49,50,420,62,65,421,71,422,254,72,255,73,423,256,424,425,222,258,426,259,260,78,427,428,429,430,431,267,94,95,96,432,97,98,433,434,99,435,436,437,100,268,101,269,270,438,105,111,272,273,274,275,276,277,127,439,440,441,442,298,299,140,141,142,305,306,307,228,308,311,443,159,444,445,446,447,198,336],"tindex":"7841e69b-3f10-11e6-897f-b5850fb96f82","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == null) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78420dac-3f10-11e6-897f-fdaa5b1b0311","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"78420dad-3f10-11e6-897f-9f9e762bd6fe","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT.getRawType().equals(typeOfT.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78420dae-3f10-11e6-897f-8d3afa70857f","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"784234bf-3f10-11e6-897f-cd0fe006efa3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78425bd0-3f10-11e6-897f-af067bb40fb8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"784282e1-3f10-11e6-897f-4db485d022d3","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"784282e2-3f10-11e6-897f-81e531905432","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"784282e3-3f10-11e6-897f-9b8c60c8aea8","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"7842a9f4-3f10-11e6-897f-a9e9ac07feda","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467324224073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":45,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":120,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":18,"com.google.gson.functional.MapTest.testSerializeMaps":106,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":50,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":124,"com.google.gson.MixedStreamTest.testWriteLenient":28,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":95,"com.google.gson.stream.JsonWriterTest.testNumbers":24,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":33,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":73,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":115,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":117,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":125,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":81,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":1,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":79,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":130,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":52,"com.google.gson.functional.ObjectTest.testSingletonLists":109,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":138,"com.google.gson.stream.JsonWriterTest.testStrings":25,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":116,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":43,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":113,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":118,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":68,"com.google.gson.functional.CollectionTest.testQueueSerialization":119,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":21,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":23,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":85,"com.google.gson.ObjectTypeAdapterTest.testSerialize":135,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":58,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":129,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":75,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":123,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":19,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":37,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":91,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":63,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":13,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":101,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":56,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":108,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":54,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":132,"com.google.gson.stream.JsonWriterTest.testNulls":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":65,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":15,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":36,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":72,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":59,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":122,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":83,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":70,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":76,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":94,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":27,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":97,"com.google.gson.functional.EnumTest.testEnumSubclass":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":66,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":47,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":49,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":126,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":78,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":45,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":2,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":77,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":14,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":53,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":69,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":99,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":10,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":40,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":48,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":96,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":102,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":16,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":98,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":136,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":12,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":103,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":90,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":11,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":29,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":26,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":86,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":111,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":84,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":114,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":110,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":20,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":39,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":3,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":60,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":32,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":80,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":44,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":51,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":89,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":128,"com.google.gson.functional.CollectionTest.testSetSerialization":127,"com.google.gson.stream.JsonWriterTest.testEmptyArray":5,"com.google.gson.stream.JsonWriterTest.testDoubles":22,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":131,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":46,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":34,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":41,"com.google.gson.functional.EnumTest.testEnumSet":71,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":55,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":93,"com.google.gson.stream.JsonWriterTest.testBooleans":6,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":133,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":112,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":61,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":105,"com.google.gson.MixedStreamTest.testWriteClosed":30,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":121,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":104,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":62,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":137,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":64,"com.google.gson.stream.JsonWriterTest.testLongs":8,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":17,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":87,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":100},"transformations":[{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"10a484e2-3e72-11e6-9eb1-bdf5e90ae726","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"10a4d303-3e72-11e6-9eb1-7ff71bcd7561","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256887740/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"10a4fa14-3e72-11e6-9eb1-bbec9d389a7c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256887740/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[0,1,2,3,4],"tindex":"10a4fa15-3e72-11e6-9eb1-6d3666c2736a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256887740/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:574","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138],"tindex":"10a54836-3e72-11e6-9eb1-652418a91acf","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256887740/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"10a54837-3e72-11e6-9eb1-1509be9223e7","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if ((message.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256887740/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":6,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":272,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":364,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":134,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":55,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":16,"com.google.gson.MixedStreamTest.testWriteLenient":379,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":407,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":339,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":94,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":79,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":89,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":422,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":54,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":301,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":238,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":396,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":415,"com.google.gson.functional.ObjectTest.testSingletonLists":202,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":335,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":365,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":43,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":430,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":40,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":464,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":223,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":256,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":3,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":412,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":26,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":252,"com.google.gson.functional.EnumTest.testEnumCaseMapping":53,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":363,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":384,"com.google.gson.functional.JsonTreeTest.testToJsonTree":309,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":261,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":165,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":472,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":147,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":0,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":86,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":226,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":428,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":37,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":192,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":211,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":250,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":139,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":433,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":36,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":349,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":143,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":184,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":474,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":178,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":217,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":334,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":408,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":77,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":306,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":18,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":405,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":132,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":185,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":216,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":283,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":33,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":357,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":426,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":59,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":170,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":457,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":158,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":329,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":444,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":443,"com.google.gson.functional.CollectionTest.testSetDeserialization":404,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":239,"com.google.gson.functional.EnumTest.testEnumSet":47,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":207,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":66,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":100,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":116,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":212,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":64,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":446,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":247,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":188,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":72,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":270,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":304,"com.google.gson.functional.MapTest.testMapSerialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":447,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":15,"com.google.gson.functional.MapTest.testSerializeMaps":115,"com.google.gson.functional.MapTest.testComplexKeysSerialization":130,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":17,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":294,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":228,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":391,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":154,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":478,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":402,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":44,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":8,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":259,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":102,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":196,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":133,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":242,"com.google.gson.functional.PrettyPrintingTest.testMap":257,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":82,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":315,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":39,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":369,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":9,"com.google.gson.functional.CollectionTest.testQueueSerialization":83,"com.google.gson.functional.MapTest.testMapSerializationEmpty":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":326,"com.google.gson.functional.MapTest.testMapOfMapSerialization":120,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":181,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":234,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":108,"com.google.gson.functional.FieldNamingTest.testIdentity":362,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":366,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":275,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":435,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":11,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":58,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":96,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":201,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":27,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":473,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":136,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":367,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":179,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":441,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":32,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":348,"com.google.gson.functional.MapTest.testMapSubclassSerialization":114,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":195,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":267,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":398,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":244,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":350,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":376,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":409,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":390,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":63,"com.google.gson.functional.EnumTest.testEnumSubclass":50,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":182,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":41,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":429,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":166,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":101,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":14,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":222,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":442,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":156,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":31,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":177,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":343,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":421,"com.google.gson.MixedStreamTest.testWriteNulls":377,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":289,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":285,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":227,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":395,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":105,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":416,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":298,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":454,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":123,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":368,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":345,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":264,"com.google.gson.JsonParserTest.testParseMixedArray":34,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":169,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":295,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":470,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":20,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":173,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":232,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":328,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":262,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":113,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":383,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":414,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":117,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":163,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":149,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":403,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":461,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":210,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":245,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":319,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":397,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":78,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":221,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":122,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":258,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":347,"com.google.gson.functional.PrimitiveTest.testShortSerialization":193,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":151,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":254,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":321,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":359,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":49,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":2,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":266,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":197,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":410,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":23,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":417,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":21,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":200,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":57,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":219,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":406,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":311,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":351,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":420,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":459,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":103,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":438,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":425,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":75,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":303,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":462,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":240,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":388,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":145,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":333,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":323,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":152,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":161,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":180,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":198,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":111,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":148,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":452,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":448,"com.google.gson.functional.MapTest.testGeneralMapField":127,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":424,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":282,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":241,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":291,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":340,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":125,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":142,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":312,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":187,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":5,"com.google.gson.MixedStreamTest.testReadMixedStreamed":468,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":174,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":28,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":90,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":458,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":386,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":456,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":253,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":331,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":106,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":199,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":279,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":353,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":330,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":276,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":110,"com.google.gson.functional.ObjectTest.testNestedDeserialization":439,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":215,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":224,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":450,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":251,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":297,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":392,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":62,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":191,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":399,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":98,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":411,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":92,"com.google.gson.functional.ObjectTest.testNullSerialization":208,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":76,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":126,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":167,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":160,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":51,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":255,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":476,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":246,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":249,"com.google.gson.MixedStreamTest.testWriteClosed":381,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":85,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":451,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":204,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":418,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":67,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":159,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":300,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":220,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":346,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":164,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":205,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":84,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":466,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":354,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":400,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":336,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":230,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":172,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":307,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":229,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":280,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":299,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":175,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":389,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":344,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":467,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":118,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":325,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":144,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":437,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":80,"com.google.gson.functional.MapTest.testRawMapSerialization":129,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":375,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":73,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":213,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":449,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":153,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":4,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":30,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":42,"com.google.gson.functional.PrimitiveTest.testByteSerialization":190,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":284,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":373,"com.google.gson.ObjectTypeAdapterTest.testSerialize":387,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":140,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":382,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":95,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":290,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":360,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":68,"com.google.gson.functional.MapTest.testMapWithQuotes":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":316,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":109,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":314,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":237,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":35,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":60,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":436,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":322,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":293,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":317,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":324,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":352,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":61,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":13,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":277,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":268,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":471,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":475,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":107,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":431,"com.google.gson.JsonObjectTest.testAddingStringProperties":10,"com.google.gson.functional.ObjectTest.testNestedSerialization":214,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":112,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":141,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":171,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":278,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":128,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":265,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":310,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":38,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":380,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":162,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":463,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":385,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":460,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":465,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":370,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":288,"com.google.gson.functional.CollectionTest.testSetSerialization":91,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":104,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":260,"com.google.gson.functional.StringTest.testStringValueSerialization":371,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":372,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":231,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":393,"com.google.gson.MixedStreamTest.testWriteInvalidState":378,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":206,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":292,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":320,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":361,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":225,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":6,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":453,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":337,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":374,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":286},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"da07ed59-3e35-11e6-8563-5d0e48e397fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"da08628a-3e35-11e6-8563-2d8779791db6","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key.equals(key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","to":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"da08628b-3e35-11e6-8563-37df49dd985f","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[12],"tindex":"da08b0ac-3e35-11e6-8563-83719e05fd48","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"da0925dd-3e35-11e6-8563-4d4f95862684","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"da094cee-3e35-11e6-8563-0328132dc2be","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[13,14,15],"tindex":"da094cef-3e35-11e6-8563-1595793e543a","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da094cf0-3e35-11e6-8563-4f92623f5939","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da097401-3e35-11e6-8563-73a1b706d280","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da097402-3e35-11e6-8563-273495e1d14a","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"da099b13-3e35-11e6-8563-836670b25d40","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"da099b14-3e35-11e6-8563-d744c400789b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"da09c225-3e35-11e6-8563-8d9fbba38779","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (!(other instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,4,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,13,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,11,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,15,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385],"tindex":"da09c226-3e35-11e6-8563-3dab2277cda7","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"da09e937-3e35-11e6-8563-914fcb312a99","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da09e938-3e35-11e6-8563-fdaac6219984","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"da09e939-3e35-11e6-8563-11d0ac487c78","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da0a104a-3e35-11e6-8563-b397c1dcc2b3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[386],"tindex":"da0a104b-3e35-11e6-8563-33224513ae61","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"da0a104c-3e35-11e6-8563-a1403190af2d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"da0a104d-3e35-11e6-8563-d9b136fd6ed5","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"da0a104e-3e35-11e6-8563-a10c6172d5a6","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"da0a375f-3e35-11e6-8563-1721ccc90bf4","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"da0a3760-3e35-11e6-8563-43909d5cdcfc","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"da0a3761-3e35-11e6-8563-238675a4f9f5","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NONE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[25,31,32,387,33,388,389,390,43,46,51,391,55,392,56,393,57,394,58,59,60,395,62,63,64,65,66,396,67,68,69,397,70,398,71,72,73,74,399,75,13,76,14,400,77,401,78,402,403,79,81,87,404,89,91,94,95,97,98,405,406,101,103,104,111,112,407,408,409,410,411,118,412,124,126,127,130,134,135,137,413,138,139,140,143,144,145,414,415,148,149,416,150,152,154,417,155,156,157,158,159,160,161,162,418,419,163,164,165,420,201,202,421,422,203,423,424,204,425,426,205,427,207,428,209,429,430,212,431,213,214,432,216,433,434,217,435,218,219,436,220,437,438,439,440,221,441,442,222,223,225,226,227,228,443,229,230,231,232,233,234,235,237,238,239,244,444,445,446,258,259,263,447,264,448,265,449,266,267,268,269,270,272,273,450,274,451,452,275,276,277,453,279,291,454,292,295,296,297,298,299,300,455,456,302,457,304,458,305,306,307,308,11,309,310,459,460,461,462,321,463,331,341,346,351,464,465,352,353,466,467,354,356,357,359,360,361,15,362,372,375,376,378,381,468,469,470,471,472,473,474,475,476,477],"tindex":"da0a5e72-3e35-11e6-8563-f5262924e914","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"da0a5e73-3e35-11e6-8563-1553e27c64cd","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[478],"tindex":"da0a8584-3e35-11e6-8563-9f205e14a4a4","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"da0aac95-3e35-11e6-8563-0703edf01737","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"da0aac96-3e35-11e6-8563-99c60a441ae5","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662905/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":30,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":208,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":122,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":37,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":70,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":228,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":12,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":89,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":157,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":124,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":114,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":71,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":78,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":129,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":87,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":131,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":57,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":159,"com.google.gson.functional.ObjectTest.testSingletonLists":134,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":112,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":132,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":38,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":193,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":91,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":149,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":96,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":183,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":29,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":86,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":88,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":204,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":222,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":110,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":227,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":229,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":34,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":13,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":224,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":82,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":225,"com.google.gson.functional.MapTest.testGeneralMapField":68,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":17,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":195,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":25,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":115,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":151,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":211,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":141,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":8,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":155,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":233,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":123,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":212,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":109,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":60,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":22,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":111,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":46,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":108,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":207,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":173,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":145,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":9,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":170,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":18,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":146,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":1,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":3,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":93,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":203,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":59,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":113,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":67,"com.google.gson.functional.MapTest.testInterfaceTypeMap":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":107,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":218,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":58,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":85,"com.google.gson.functional.EnumTest.testEnumSet":81,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":97,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":7,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":142,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":5,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":75,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":136,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":189,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":4,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":150,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":121,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":137,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":191,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":74,"com.google.gson.functional.MapTest.testSerializeMaps":61,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":127,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":53,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":77,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":28,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":161,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":197,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":154,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":230,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":234,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":15,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":198,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":156,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":119,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":236,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":90,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":103,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":182,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":213,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":72,"com.google.gson.functional.MapTest.testRawMapSerialization":69,"com.google.gson.functional.PrettyPrintingTest.testMap":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":217,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":73,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":143,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":167,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":104,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":19,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":192,"com.google.gson.functional.MapTest.testMapOfMapSerialization":64,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":209,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":165,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":39,"com.google.gson.functional.FieldNamingTest.testIdentity":128,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":24,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":125,"com.google.gson.functional.MapTest.testMapWithQuotes":63,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":172,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":92,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":180,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":188,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":80,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":40,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":176,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":56,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":105,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":100,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":130,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":27,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":49,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":116,"com.google.gson.functional.EnumTest.testEnumSubclass":84,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":175,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":181,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":117,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":205,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":174,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":187,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":231,"com.google.gson.functional.ObjectTest.testNestedSerialization":144,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":14,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":153,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":210,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":45,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":118,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":0,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":20,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":196,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":185,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":171,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":41,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":65,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":54,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":158,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":23,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":47,"com.google.gson.functional.CollectionTest.testSetSerialization":79,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":33,"com.google.gson.functional.StringTest.testStringValueSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":184,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":214,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":162,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":152,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":168,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":26,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":163,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":106,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":126,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":35,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":194,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":190,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":226,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":223,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":199,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":6,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":140,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":99,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":21},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"510315ed-3f32-11e6-95d9-61ed97766152","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"51038b1e-3f32-11e6-95d9-dfcc8dda580f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"51038b1f-3f32-11e6-95d9-3da8557e693b","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5103b230-3f32-11e6-95d9-c1146206e863","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5103b231-3f32-11e6-95d9-e364564d2b38","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"5103d942-3f32-11e6-95d9-357b7cdc000d","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233],"tindex":"5103d943-3f32-11e6-95d9-ab3a67156f10","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Number) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src","value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"51040054-3f32-11e6-95d9-3fff876ffa06","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:381","type":"CtBinaryOperatorImpl"},"failures":[234,235,236],"tindex":"51040055-3f32-11e6-95d9-cfba66455746","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:191","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"51042766-3f32-11e6-95d9-dbe16d8d0c60","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if ((count++) > count) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"count","threshold":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"51042767-3f32-11e6-95d9-f34519efcd87","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"51042768-3f32-11e6-95d9-11aea02227cd","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"51044e79-3f32-11e6-95d9-1b1aa9912f06","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\r') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:274","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"51044e7a-3f32-11e6-95d9-37d3fb0bbc7d","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.String) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467339320791/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"target":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":14,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
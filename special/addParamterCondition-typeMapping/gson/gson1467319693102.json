{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":321,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":234,"com.google.gson.functional.StringTest.testStringValueDeserialization":233,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":556,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":43,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":80,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":509,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":188,"com.google.gson.MixedStreamTest.testWriteLenient":274,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":346,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":406,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":207,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":169,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":504,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":46,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":363,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":548,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":471,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":31,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":230,"com.google.gson.functional.ObjectTest.testSingletonLists":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":343,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":364,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":26,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":533,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":155,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":435,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":90,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":177,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":7,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":48,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":198,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":243,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":224,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":44,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":440,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":23,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":284,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":195,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":108,"com.google.gson.functional.EnumTest.testEnumCaseMapping":257,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":264,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":532,"com.google.gson.functional.JsonTreeTest.testToJsonTree":432,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":91,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":417,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":122,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":76,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":520,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":144,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":241,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":175,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":267,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":310,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":458,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":193,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":554,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":180,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":266,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":354,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":53,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":159,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":89,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":302,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":296,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":68,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":395,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":464,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":79,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":41,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":104,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":204,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":149,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":385,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":303,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":42,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":391,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":463,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":173,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":277,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":531,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":110,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":288,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":513,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":95,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":488,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":414,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":150,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":345,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":339,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":553,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":147,"com.google.gson.functional.CollectionTest.testSetDeserialization":215,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":472,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":163,"com.google.gson.functional.EnumTest.testEnumSet":250,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":454,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":38,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":72,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":369,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":459,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":283,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":413,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":18,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":49,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":190,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":438,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":306,"com.google.gson.functional.MapTest.testHashMapDeserialization":99,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":84,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":539,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":484,"com.google.gson.functional.MapTest.testSortedMap":109,"com.google.gson.functional.MapTest.testMapSerialization":374,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":322,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":40,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":114,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":124,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":358,"com.google.gson.functional.MapTest.testSerializeMaps":368,"com.google.gson.functional.MapTest.testComplexKeysSerialization":383,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":162,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":402,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":146,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":256,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":527,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":248,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":436,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":255,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":443,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":510,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":182,"com.google.gson.functional.MapTest.testStringKeyDeserialization":111,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":421,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":314,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":30,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":386,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":403,"com.google.gson.functional.PrettyPrintingTest.testMap":441,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":497,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":327,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":6,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":127,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":236,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":336,"com.google.gson.functional.MapTest.testMapSerializationEmpty":384,"com.google.gson.functional.CollectionTest.testQueueSerialization":498,"com.google.gson.functional.MapTest.testMapOfMapSerialization":373,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":294,"com.google.gson.JavaSerializationTest.testMapIsSerializable":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":77,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":213,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":261,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":299,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":427,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":279,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":235,"com.google.gson.functional.FieldNamingTest.testIdentity":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":151,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":227,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":183,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":408,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":431,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":449,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":512,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":24,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":10,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":534,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":551,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":222,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":86,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":73,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":353,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":97,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":313,"com.google.gson.functional.MapTest.testMapSubclassSerialization":367,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":21,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":142,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":164,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":35,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":404,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":65,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":161,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":135,"com.google.gson.functional.EnumTest.testEnumSubclass":253,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":300,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":8,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":176,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":285,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":550,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":45,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":420,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":245,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":515,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":1,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":223,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":486,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":121,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":268,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":221,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":349,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":168,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":98,"com.google.gson.MixedStreamTest.testWriteNulls":272,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":397,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":393,"com.google.gson.CommentsTest.testParseComments":5,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":424,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":450,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":125,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":476,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":113,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":376,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":535,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":468,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":416,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":350,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":115,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":29,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":473,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":291,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":78,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":307,"com.google.gson.functional.MapTest.testMapDeserialization":103,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":338,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":446,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":366,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":229,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":370,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":493,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":522,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":519,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":249,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":254,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":430,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":457,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":465,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":540,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":132,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":329,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":140,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":514,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":545,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":375,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":442,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":154,"com.google.gson.functional.PrimitiveTest.testShortSerialization":311,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":524,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":47,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":197,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":278,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":36,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":304,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":331,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":355,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":252,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":208,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":20,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":101,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":315,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":85,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":232,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":318,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":511,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":152,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":206,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":324,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":480,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":50,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":422,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":186,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":172,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":547,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":70,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":502,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":129,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":153,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":342,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":523,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":3,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":82,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":209,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":491,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":51,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":298,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":316,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":528,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":251,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":521,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":116,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":171,"com.google.gson.functional.MapTest.testGeneralMapField":380,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":390,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":130,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":399,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":347,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":62,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":158,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":287,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":71,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":105,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":292,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":11,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":202,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":505,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":94,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":196,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":12,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":341,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":106,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":365,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":100,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":317,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":425,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":60,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":340,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":166,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":61,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":212,"com.google.gson.functional.ObjectTest.testNestedDeserialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":428,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":225,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":462,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":475,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":107,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":219,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":237,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":412,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":309,"com.google.gson.JavaSerializationTest.testListIsSerializable":14,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":410,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":507,"com.google.gson.functional.ObjectTest.testNullSerialization":455,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":543,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":96,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":286,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":379,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":123,"com.google.gson.functional.MapTest.testInterfaceTypeMap":377,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":131,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":262,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":546,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":325,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":192,"com.google.gson.MixedStreamTest.testWriteClosed":276,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":58,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":92,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":205,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":451,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":137,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":489,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":478,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":467,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":474,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":351,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":452,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":494,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":499,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":200,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":483,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":246,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":83,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":228,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":56,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":258,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":290,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":148,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":388,"com.google.gson.functional.CollectionTest.testQueueDeserialization":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":477,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":39,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":293,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":2,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":240,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":88,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":201,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":181,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":335,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":160,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":185,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":496,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":270,"com.google.gson.functional.MapTest.testRawMapSerialization":382,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":81,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":244,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":460,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":118,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":526,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":280,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":282,"com.google.gson.functional.PrimitiveTest.testByteSerialization":308,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":392,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":434,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":361,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":157,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":407,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":398,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":356,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":138,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":238,"com.google.gson.functional.MapTest.testMapWithQuotes":372,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":328,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":418,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":156,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":326,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":470,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":133,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":184,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":447,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":332,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":174,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":334,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":409,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":481,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":437,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":214,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":87,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":389,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":411,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":542,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":517,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":22,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":141,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":426,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":558,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":178,"com.google.gson.functional.ObjectTest.testNestedSerialization":461,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":529,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":289,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":433,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":59,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":381,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":117,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":448,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":275,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":226,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":456,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":54,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":492,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":74,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":64,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":179,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":199,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":537,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":396,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":263,"com.google.gson.functional.CollectionTest.testSetSerialization":506,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":423,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":444,"com.google.gson.functional.StringTest.testStringValueSerialization":538,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":360,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":210,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":220,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":549,"com.google.gson.MixedStreamTest.testWriteInvalidState":273,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":453,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":34,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":400,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":330,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":143,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":557,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":191,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":344,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":362,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":15,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":394},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[0,1,2,3,4],"tindex":"f651654c-3f03-11e6-b012-b397dc19ce87","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f653611d-3f03-11e6-b012-2762c8e7314a","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1310","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f653882e-3f03-11e6-b012-83c04e166852","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter >= offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"limit":"counter","minimum":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f654246f-3f03-11e6-b012-4fa99ec5d6cf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6542470-3f03-11e6-b012-795a3e1c6678","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6544b81-3f03-11e6-b012-5392a7f14591","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a.length()) == 0) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"f6547292-3f03-11e6-b012-09433682dcc3","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"f6547293-3f03-11e6-b012-d1316289d2aa","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"f65499a4-3f03-11e6-b012-817481726052","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f65499a5-3f03-11e6-b012-25176f9bc02d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1358","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f654c0b6-3f03-11e6-b012-7300c7ca6b3b","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (((topOfStack == ' ') || (c == '\\r')) || (c == '\\t')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f654c0b7-3f03-11e6-b012-c557939b76c5","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f654e7c8-3f03-11e6-b012-ef63ca6f1105","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263],"tindex":"f6562049-3f03-11e6-b012-5de692af5c3d","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f656475a-3f03-11e6-b012-578119049e55","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6566e6b-3f03-11e6-b012-5d5d9ac32937","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o != null) && (((o == o) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o","value":"o","java.lang.Object.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6566e6c-3f03-11e6-b012-b58d74d7bcdf","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6566e6d-3f03-11e6-b012-edbff63c2db4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f656957e-3f03-11e6-b012-7d1b6a2ac225","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"array","upperBound":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[],"tindex":"f656957f-3f03-11e6-b012-3f9c7d745fc5","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6569580-3f03-11e6-b012-6945fae6ea70","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if ((index != index) && (context != index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"index","nonempty":"index","empty":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6569581-3f03-11e6-b012-5d31556495de","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f656bc92-3f03-11e6-b012-b9fceb5f3367","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f656bc93-3f03-11e6-b012-3bf40af45cee","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[264,265,266,267,268,269,270,271,272,273,274,275,276,277,6,7,8,278,279,280,281,282,9,283,284,10,11,20,21,22,285,286,287,29,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,59,60,324,62,325,326,327,328,67,69,329,330,331,332,333,334,335,336,337,338,339,340,341,78,342,79,343,83,344,345,346,347,348,87,349,88,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,115,117,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,129,130,403,131,404,132,405,406,407,408,409,410,133,411,412,135,413,414,415,137,138,139,416,417,143,144,145,146,148,418,419,420,421,422,423,424,425,426,427,156,428,429,430,431,432,157,433,158,159,160,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,167,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,189,468,469,470,471,472,190,191,192,193,194,195,196,197,473,474,475,476,477,478,479,480,481,482,483,484,203,204,485,486,487,488,489,490,491,492,493,494,495,207,496,208,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,224,225,227,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,4,532,234,533,235,534,535,536,537,538,539,244,540,541,542,543,544,545,250,251,252,253,546,547,257,548,258,549,259,260,261,262,550,551,552,553,554],"tindex":"f656e3a4-3f03-11e6-b012-8f198b721d99","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[271,555,556,368,440,441,442,443,444,445,446,447,224],"tindex":"f6570ab5-3f03-11e6-b012-959c70fe320a","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f65731c6-3f03-11e6-b012-919a2fe4aa81","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[557],"tindex":"f65731c7-3f03-11e6-b012-47233d098dcd","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f65731c8-3f03-11e6-b012-416942633e07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"f65758d9-3f03-11e6-b012-df3067e14fbf","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[392,394,397,122,127,133,412,135,413,137,138,139,440,444,450,183,558,559],"tindex":"f658915a-3f03-11e6-b012-692dbc002836","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f658b86b-3f03-11e6-b012-553d39750e5f","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Class) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f658df7c-3f03-11e6-b012-7f48d623eeb2","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.sql.Timestamp.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f658df7d-3f03-11e6-b012-cb74e3b9a4f9","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (from != from) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"from","type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f659068e-3f03-11e6-b012-817ef6724f3d","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    if (json == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    } else {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f659068f-3f03-11e6-b012-fd0b54874cdf","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    float float = value.floatValue();\n    checkValidFloatingPoint(floatValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6592da0-3f03-11e6-b012-b54fd7b10124","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f6592da1-3f03-11e6-b012-cf832e8cbcf8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6592da2-3f03-11e6-b012-41bcd3cda51d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:556","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6592da3-3f03-11e6-b012-1977dff89daa","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"newTop","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f65954b4-3f03-11e6-b012-7f52f3cf8fd1","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (from != from) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f6597bc5-3f03-11e6-b012-4998ad97c3a0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318915324/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}